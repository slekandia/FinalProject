
GccApplication3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00010908  80000024  80000024  00000424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80010a00  80010a00  00010e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80010c00  80010c00  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000014a4  80010c18  80010c18  00011018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  800120bc  800120bc  000124bc  2**0
                  ALLOC
  8 .gcc_except_table 00000084  00000004  800120c0  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ctors        00000018  00000088  80012144  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  000000a0  8001215c  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  000000a8  80012164  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  000000ac  80012168  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000538  000000b8  80012174  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000da0  000005f0  800126ac  00012df0  2**2
                  ALLOC
 15 .comment      00000030  00000000  00000000  00012df0  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00001e58  00000000  00000000  00012e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 00004ed5  00000000  00000000  00014c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0004f537  00000000  00000000  00019b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000d0d0  00000000  00000000  00069084  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00024236  00000000  00000000  00076154  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00005130  00000000  00000000  0009a38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000ebe1  00000000  00000000  0009f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    000149e6  00000000  00000000  000ae09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 023a90c2  00000000  00000000  000c2a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 26 .debug_ranges 00002760  00000000  00000000  0246bb45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	00 24       	rsub	r4,r0

Disassembly of section .init:

80000008 <_init>:
80000008:	eb cd 40 40 	pushm	r6,lr
8000000c:	48 26       	lddpc	r6,80000014 <_init+0xc>
8000000e:	1e 26       	rsub	r6,pc
80000010:	c0 48       	rjmp	80000018 <_init+0x10>
80000012:	00 00       	add	r0,r0
80000014:	7f ff       	ld.w	pc,pc[0x7c]
80000016:	ff 62 f0 16 	st.b	pc[-4074],r2
8000001a:	00 01       	add	r1,r0
8000001c:	f0 16 00 00 	mcall	r6[0]
80000020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80000024 <_stext>:
80000024:	30 07       	mov	r7,0
80000026:	49 5a       	lddpc	r10,80000078 <_stext+0x54>
80000028:	5b fa       	cp.w	r10,-1
8000002a:	f4 0d 17 10 	movne	sp,r10
8000002e:	49 4b       	lddpc	r11,8000007c <_stext+0x58>
80000030:	49 4c       	lddpc	r12,80000080 <_stext+0x5c>
80000032:	18 3b       	cp.w	r11,r12
80000034:	c0 60       	breq	80000040 <_stext+0x1c>
80000036:	49 4a       	lddpc	r10,80000084 <_stext+0x60>
80000038:	b7 09       	ld.d	r8,r11++
8000003a:	b9 28       	st.d	r12++,r8
8000003c:	14 3c       	cp.w	r12,r10
8000003e:	cf d5       	brlt	80000038 <_stext+0x14>
80000040:	49 2a       	lddpc	r10,80000088 <_stext+0x64>
80000042:	49 1c       	lddpc	r12,80000084 <_stext+0x60>
80000044:	30 08       	mov	r8,0
80000046:	30 09       	mov	r9,0
80000048:	b9 28       	st.d	r12++,r8
8000004a:	14 3c       	cp.w	r12,r10
8000004c:	cf e5       	brlt	80000048 <_stext+0x24>
8000004e:	f0 1f 00 10 	mcall	8000008c <_stext+0x68>
80000052:	49 0c       	lddpc	r12,80000090 <_stext+0x6c>
80000054:	f0 1f 00 10 	mcall	80000094 <_stext+0x70>
80000058:	f0 1f 00 10 	mcall	80000098 <_stext+0x74>
8000005c:	1a 9c       	mov	r12,sp
8000005e:	30 0b       	mov	r11,0
80000060:	f0 1f 00 0f 	mcall	8000009c <_stext+0x78>
80000064:	5b fc       	cp.w	r12,-1
80000066:	f9 bc 00 00 	moveq	r12,0
8000006a:	f9 ba 00 00 	moveq	r10,0
8000006e:	14 1d       	sub	sp,r10
80000070:	f0 1f 00 0c 	mcall	800000a0 <_stext+0x7c>
80000074:	f0 1f 00 0c 	mcall	800000a4 <_stext+0x80>
80000078:	00 01       	add	r1,r0
8000007a:	00 00       	add	r0,r0
8000007c:	80 01       	ld.sh	r1,r0[0x0]
8000007e:	20 c0       	sub	r0,12
80000080:	00 00       	add	r0,r0
80000082:	00 04       	add	r4,r0
80000084:	00 00       	add	r0,r0
80000086:	05 f0       	ld.ub	r0,r2[0x7]
80000088:	00 00       	add	r0,r0
8000008a:	13 90       	ld.ub	r0,r9[0x1]
8000008c:	80 00       	ld.sh	r0,r0[0x0]
8000008e:	c2 f6       	brmi	800000ec <__do_global_dtors_aux+0x44>
80000090:	80 01       	ld.sh	r1,r0[0x0]
80000092:	0c 00       	add	r0,r6
80000094:	80 00       	ld.sh	r0,r0[0x0]
80000096:	b2 64       	st.h	r9[0xc],r4
80000098:	80 00       	ld.sh	r0,r0[0x0]
8000009a:	00 08       	add	r8,r0
8000009c:	80 00       	ld.sh	r0,r0[0x0]
8000009e:	c2 f8       	rjmp	800000fc <frame_dummy+0xc>
800000a0:	80 00       	ld.sh	r0,r0[0x0]
800000a2:	43 c0       	lddsp	r0,sp[0xf0]
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	b2 84       	st.b	r9[0x0],r4

800000a8 <__do_global_dtors_aux>:
800000a8:	d4 21       	pushm	r4-r7,lr
800000aa:	48 e8       	lddpc	r8,800000e0 <__do_global_dtors_aux+0x38>
800000ac:	11 89       	ld.ub	r9,r8[0x0]
800000ae:	30 08       	mov	r8,0
800000b0:	f0 09 18 00 	cp.b	r9,r8
800000b4:	c1 41       	brne	800000dc <__do_global_dtors_aux+0x34>
800000b6:	48 c8       	lddpc	r8,800000e4 <__do_global_dtors_aux+0x3c>
800000b8:	48 c6       	lddpc	r6,800000e8 <__do_global_dtors_aux+0x40>
800000ba:	10 95       	mov	r5,r8
800000bc:	10 16       	sub	r6,r8
800000be:	48 c7       	lddpc	r7,800000ec <__do_global_dtors_aux+0x44>
800000c0:	a3 46       	asr	r6,0x2
800000c2:	20 16       	sub	r6,1
800000c4:	c0 68       	rjmp	800000d0 <__do_global_dtors_aux+0x28>
800000c6:	2f f8       	sub	r8,-1
800000c8:	8f 08       	st.w	r7[0x0],r8
800000ca:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800000ce:	5d 18       	icall	r8
800000d0:	6e 08       	ld.w	r8,r7[0x0]
800000d2:	0c 38       	cp.w	r8,r6
800000d4:	cf 93       	brcs	800000c6 <__do_global_dtors_aux+0x1e>
800000d6:	30 19       	mov	r9,1
800000d8:	48 28       	lddpc	r8,800000e0 <__do_global_dtors_aux+0x38>
800000da:	b0 89       	st.b	r8[0x0],r9
800000dc:	d8 22       	popm	r4-r7,pc
800000de:	00 00       	add	r0,r0
800000e0:	00 00       	add	r0,r0
800000e2:	05 f0       	ld.ub	r0,r2[0x7]
800000e4:	00 00       	add	r0,r0
800000e6:	00 a0       	st.w	r0++,r0
800000e8:	00 00       	add	r0,r0
800000ea:	00 a4       	st.w	r0++,r4
800000ec:	00 00       	add	r0,r0
800000ee:	05 f4       	ld.ub	r4,r2[0x7]

800000f0 <frame_dummy>:
800000f0:	d4 01       	pushm	lr
800000f2:	48 5c       	lddpc	r12,80000104 <frame_dummy+0x14>
800000f4:	78 08       	ld.w	r8,r12[0x0]
800000f6:	58 08       	cp.w	r8,0
800000f8:	c0 50       	breq	80000102 <frame_dummy+0x12>
800000fa:	48 48       	lddpc	r8,80000108 <frame_dummy+0x18>
800000fc:	58 08       	cp.w	r8,0
800000fe:	c0 20       	breq	80000102 <frame_dummy+0x12>
80000100:	5d 18       	icall	r8
80000102:	d8 02       	popm	pc
80000104:	00 00       	add	r0,r0
80000106:	00 a8       	st.w	r0++,r8
80000108:	00 00       	add	r0,r0
	...

8000010c <mag_read_reg>:
	while(twi_master_read(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);

	return data;
}
uint8_t mag_read_reg(uint8_t reg_index)
{
8000010c:	eb cd 40 c0 	pushm	r6-r7,lr
80000110:	20 7d       	sub	sp,28
80000112:	ba 8c       	st.b	sp[0x0],r12
uint8_t data;
twi_package_t twi_package;

	twi_package.chip = 0x1E;
80000114:	31 e8       	mov	r8,30
80000116:	50 18       	stdsp	sp[0x4],r8
	twi_package.addr_length = 0;
80000118:	30 08       	mov	r8,0
8000011a:	fb 68 00 0b 	st.b	sp[11],r8
	twi_package.buffer = &reg_index;
8000011e:	50 3d       	stdsp	sp[0xc],sp
	twi_package.length = 1;
80000120:	30 18       	mov	r8,1
80000122:	50 48       	stdsp	sp[0x10],r8
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_write_packet (twim, package));
80000124:	fa c6 ff fc 	sub	r6,sp,-4
80000128:	fe 77 38 00 	mov	r7,-51200
8000012c:	0c 9b       	mov	r11,r6
8000012e:	0e 9c       	mov	r12,r7
80000130:	f0 1f 00 21 	mcall	800001b4 <mag_read_reg+0xa8>
	while(twi_master_write(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
80000134:	cf c1       	brne	8000012c <mag_read_reg+0x20>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80000136:	4a 18       	lddpc	r8,800001b8 <mag_read_reg+0xac>
80000138:	70 07       	ld.w	r7,r8[0x0]
8000013a:	31 48       	mov	r8,20
8000013c:	ee 08 06 46 	mulu.d	r6,r7,r8
80000140:	ee 78 42 40 	mov	r8,1000000
80000144:	30 09       	mov	r9,0
80000146:	ee 7a 42 3f 	mov	r10,999999
8000014a:	30 0b       	mov	r11,0
8000014c:	ec 0a 00 0a 	add	r10,r6,r10
80000150:	ee 0b 00 4b 	adc	r11,r7,r11
80000154:	f0 1f 00 1a 	mcall	800001bc <mag_read_reg+0xb0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80000158:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000015c:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80000160:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80000164:	14 38       	cp.w	r8,r10
80000166:	e0 88 00 08 	brls	80000176 <mag_read_reg+0x6a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000016a:	12 38       	cp.w	r8,r9
8000016c:	fe 98 ff fa 	brls	80000160 <mag_read_reg+0x54>
80000170:	12 3a       	cp.w	r10,r9
80000172:	c1 23       	brcs	80000196 <mag_read_reg+0x8a>
80000174:	cf 6b       	rjmp	80000160 <mag_read_reg+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80000176:	12 38       	cp.w	r8,r9
80000178:	e0 8b 00 0f 	brhi	80000196 <mag_read_reg+0x8a>
8000017c:	12 3a       	cp.w	r10,r9
8000017e:	c0 c3       	brcs	80000196 <mag_read_reg+0x8a>
80000180:	cf 0b       	rjmp	80000160 <mag_read_reg+0x54>
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
80000182:	0c 9b       	mov	r11,r6
80000184:	0e 9c       	mov	r12,r7
80000186:	f0 1f 00 0f 	mcall	800001c0 <mag_read_reg+0xb4>

	twi_package.chip = 0x1E;
	twi_package.addr_length = 0;
	twi_package.buffer = &data;
	twi_package.length = 1;
	while(twi_master_read(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
8000018a:	cf c1       	brne	80000182 <mag_read_reg+0x76>

	return data;
}
8000018c:	fb 3c 00 1b 	ld.ub	r12,sp[27]
80000190:	2f 9d       	sub	sp,-28
80000192:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);

	twi_package.chip = 0x1E;
80000196:	31 e8       	mov	r8,30
80000198:	50 18       	stdsp	sp[0x4],r8
	twi_package.addr_length = 0;
8000019a:	30 08       	mov	r8,0
8000019c:	fb 68 00 0b 	st.b	sp[11],r8
	twi_package.buffer = &data;
800001a0:	fa c8 ff e5 	sub	r8,sp,-27
800001a4:	50 38       	stdsp	sp[0xc],r8
	twi_package.length = 1;
800001a6:	30 18       	mov	r8,1
800001a8:	50 48       	stdsp	sp[0x10],r8
800001aa:	fa c6 ff fc 	sub	r6,sp,-4
800001ae:	fe 77 38 00 	mov	r7,-51200
800001b2:	ce 8b       	rjmp	80000182 <mag_read_reg+0x76>
800001b4:	80 00       	ld.sh	r0,r0[0x0]
800001b6:	12 80       	andn	r0,r9
800001b8:	00 00       	add	r0,r0
800001ba:	05 f8       	ld.ub	r8,r2[0x7]
800001bc:	80 00       	ld.sh	r0,r0[0x0]
800001be:	ad 12       	ld.d	r2,--r6
800001c0:	80 00       	ld.sh	r0,r0[0x0]
800001c2:	13 5c       	ld.sh	r12,--r9

800001c4 <at42qt1060_read_reg>:
 * \param reg_index Register address.
 * \returns Register content.
 */

uint8_t at42qt1060_read_reg(uint8_t reg_index)
{
800001c4:	eb cd 40 c0 	pushm	r6-r7,lr
800001c8:	20 7d       	sub	sp,28
800001ca:	ba 8c       	st.b	sp[0x0],r12
uint8_t data;
twi_package_t twi_package;

	twi_package.chip = AT42QT1060_TWI_ADDRESS;
800001cc:	36 88       	mov	r8,104
800001ce:	50 18       	stdsp	sp[0x4],r8
	twi_package.addr_length = 0;
800001d0:	30 08       	mov	r8,0
800001d2:	fb 68 00 0b 	st.b	sp[11],r8
	twi_package.buffer = &reg_index;
800001d6:	50 3d       	stdsp	sp[0xc],sp
	twi_package.length = 1;
800001d8:	30 18       	mov	r8,1
800001da:	50 48       	stdsp	sp[0x10],r8
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_write_packet (twim, package));
800001dc:	fa c6 ff fc 	sub	r6,sp,-4
800001e0:	fe 77 38 00 	mov	r7,-51200
800001e4:	0c 9b       	mov	r11,r6
800001e6:	0e 9c       	mov	r12,r7
800001e8:	f0 1f 00 21 	mcall	8000026c <at42qt1060_read_reg+0xa8>
	while(twi_master_write(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
800001ec:	cf c1       	brne	800001e4 <at42qt1060_read_reg+0x20>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800001ee:	4a 18       	lddpc	r8,80000270 <at42qt1060_read_reg+0xac>
800001f0:	70 07       	ld.w	r7,r8[0x0]
800001f2:	31 48       	mov	r8,20
800001f4:	ee 08 06 46 	mulu.d	r6,r7,r8
800001f8:	ee 78 42 40 	mov	r8,1000000
800001fc:	30 09       	mov	r9,0
800001fe:	ee 7a 42 3f 	mov	r10,999999
80000202:	30 0b       	mov	r11,0
80000204:	ec 0a 00 0a 	add	r10,r6,r10
80000208:	ee 0b 00 4b 	adc	r11,r7,r11
8000020c:	f0 1f 00 1a 	mcall	80000274 <at42qt1060_read_reg+0xb0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80000210:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80000214:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80000218:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000021c:	14 38       	cp.w	r8,r10
8000021e:	e0 88 00 08 	brls	8000022e <at42qt1060_read_reg+0x6a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80000222:	12 38       	cp.w	r8,r9
80000224:	fe 98 ff fa 	brls	80000218 <at42qt1060_read_reg+0x54>
80000228:	12 3a       	cp.w	r10,r9
8000022a:	c1 23       	brcs	8000024e <at42qt1060_read_reg+0x8a>
8000022c:	cf 6b       	rjmp	80000218 <at42qt1060_read_reg+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000022e:	12 38       	cp.w	r8,r9
80000230:	e0 8b 00 0f 	brhi	8000024e <at42qt1060_read_reg+0x8a>
80000234:	12 3a       	cp.w	r10,r9
80000236:	c0 c3       	brcs	8000024e <at42qt1060_read_reg+0x8a>
80000238:	cf 0b       	rjmp	80000218 <at42qt1060_read_reg+0x54>
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_read_packet (twim, package));
8000023a:	0c 9b       	mov	r11,r6
8000023c:	0e 9c       	mov	r12,r7
8000023e:	f0 1f 00 0f 	mcall	80000278 <at42qt1060_read_reg+0xb4>

	twi_package.chip = AT42QT1060_TWI_ADDRESS;
	twi_package.addr_length = 0;
	twi_package.buffer = &data;
	twi_package.length = 1;
	while(twi_master_read(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
80000242:	cf c1       	brne	8000023a <at42qt1060_read_reg+0x76>

	return data;
}
80000244:	fb 3c 00 1b 	ld.ub	r12,sp[27]
80000248:	2f 9d       	sub	sp,-28
8000024a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);

	twi_package.chip = AT42QT1060_TWI_ADDRESS;
8000024e:	36 88       	mov	r8,104
80000250:	50 18       	stdsp	sp[0x4],r8
	twi_package.addr_length = 0;
80000252:	30 08       	mov	r8,0
80000254:	fb 68 00 0b 	st.b	sp[11],r8
	twi_package.buffer = &data;
80000258:	fa c8 ff e5 	sub	r8,sp,-27
8000025c:	50 38       	stdsp	sp[0xc],r8
	twi_package.length = 1;
8000025e:	30 18       	mov	r8,1
80000260:	50 48       	stdsp	sp[0x10],r8
80000262:	fa c6 ff fc 	sub	r6,sp,-4
80000266:	fe 77 38 00 	mov	r7,-51200
8000026a:	ce 8b       	rjmp	8000023a <at42qt1060_read_reg+0x76>
8000026c:	80 00       	ld.sh	r0,r0[0x0]
8000026e:	12 80       	andn	r0,r9
80000270:	00 00       	add	r0,r0
80000272:	05 f8       	ld.ub	r8,r2[0x7]
80000274:	80 00       	ld.sh	r0,r0[0x0]
80000276:	ad 12       	ld.d	r2,--r6
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	13 5c       	ld.sh	r12,--r9

8000027c <mag_write_reg>:

	return;
}

void mag_write_reg(uint8_t reg_index, uint8_t data)
{
8000027c:	eb cd 40 c0 	pushm	r6-r7,lr
80000280:	20 6d       	sub	sp,24
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80000282:	fb 6c 00 14 	st.b	sp[20],r12
	pack[1] = data;
80000286:	fb 6b 00 15 	st.b	sp[21],r11

	twi_package.chip = 0x1E;
8000028a:	31 e8       	mov	r8,30
8000028c:	50 08       	stdsp	sp[0x0],r8
	twi_package.addr_length = 0;
8000028e:	30 08       	mov	r8,0
80000290:	ba f8       	st.b	sp[0x7],r8
	twi_package.buffer = &pack;
80000292:	fa c8 ff ec 	sub	r8,sp,-20
80000296:	50 28       	stdsp	sp[0x8],r8
	twi_package.length = sizeof(pack);
80000298:	30 28       	mov	r8,2
8000029a:	50 38       	stdsp	sp[0xc],r8
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
	return (twim_write_packet (twim, package));
8000029c:	1a 96       	mov	r6,sp
8000029e:	fe 77 38 00 	mov	r7,-51200
800002a2:	1a 9b       	mov	r11,sp
800002a4:	0e 9c       	mov	r12,r7
800002a6:	f0 1f 00 04 	mcall	800002b4 <mag_write_reg+0x38>

	while(twi_master_write(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
800002aa:	cf c1       	brne	800002a2 <mag_write_reg+0x26>

	return;
}
800002ac:	2f ad       	sub	sp,-24
800002ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800002b2:	00 00       	add	r0,r0
800002b4:	80 00       	ld.sh	r0,r0[0x0]
800002b6:	12 80       	andn	r0,r9

800002b8 <at42qt1060_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void at42qt1060_write_reg(uint8_t reg_index, uint8_t data)
{
800002b8:	eb cd 40 c0 	pushm	r6-r7,lr
800002bc:	20 6d       	sub	sp,24
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
800002be:	fb 6c 00 14 	st.b	sp[20],r12
	pack[1] = data;
800002c2:	fb 6b 00 15 	st.b	sp[21],r11

	twi_package.chip = AT42QT1060_TWI_ADDRESS;
800002c6:	36 88       	mov	r8,104
800002c8:	50 08       	stdsp	sp[0x0],r8
	twi_package.addr_length = 0;
800002ca:	30 08       	mov	r8,0
800002cc:	ba f8       	st.b	sp[0x7],r8
	twi_package.buffer = &pack;
800002ce:	fa c8 ff ec 	sub	r8,sp,-20
800002d2:	50 28       	stdsp	sp[0x8],r8
	twi_package.length = sizeof(pack);
800002d4:	30 28       	mov	r8,2
800002d6:	50 38       	stdsp	sp[0xc],r8
800002d8:	1a 96       	mov	r6,sp
800002da:	fe 77 38 00 	mov	r7,-51200
800002de:	1a 9b       	mov	r11,sp
800002e0:	0e 9c       	mov	r12,r7
800002e2:	f0 1f 00 04 	mcall	800002f0 <at42qt1060_write_reg+0x38>

	while(twi_master_write(AT42QT1060_TWI, &twi_package)!=TWI_SUCCESS);
800002e6:	cf c1       	brne	800002de <at42qt1060_write_reg+0x26>

	return;
}
800002e8:	2f ad       	sub	sp,-24
800002ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800002ee:	00 00       	add	r0,r0
800002f0:	80 00       	ld.sh	r0,r0[0x0]
800002f2:	12 80       	andn	r0,r9

800002f4 <adcifa_get_calibration_data>:
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800002f4:	e0 68 02 04 	mov	r8,516
800002f8:	ea 18 80 80 	orh	r8,0x8080
800002fc:	70 0c       	ld.w	r12,r8[0x0]
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800002fe:	70 0a       	ld.w	r10,r8[0x0]
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80000300:	e0 68 02 08 	mov	r8,520
80000304:	ea 18 80 80 	orh	r8,0x8080
80000308:	70 09       	ld.w	r9,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000030a:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
8000030c:	f9 dc c3 06 	bfextu	r12,r12,0x18,0x6
80000310:	b6 6c       	st.h	r11[0xc],r12

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
80000312:	f5 da c0 0f 	bfextu	r10,r10,0x0,0xf
80000316:	b6 5a       	st.h	r11[0xa],r10

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80000318:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
8000031c:	b6 79       	st.h	r11[0xe],r9

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
8000031e:	f1 d8 c2 0a 	bfextu	r8,r8,0x10,0xa
80000322:	f7 58 00 10 	st.h	r11[16],r8
}
80000326:	5e fc       	retal	r12

80000328 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80000328:	d4 21       	pushm	r4-r7,lr
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
8000032a:	76 09       	ld.w	r9,r11[0x0]
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
8000032c:	17 e8       	ld.ub	r8,r11[0x6]
8000032e:	f7 37 00 08 	ld.ub	r7,r11[8]
80000332:	a3 67       	lsl	r7,0x2
80000334:	ef e8 10 37 	or	r7,r7,r8<<0x3
80000338:	17 f8       	ld.ub	r8,r11[0x7]
8000033a:	ef e8 10 47 	or	r7,r7,r8<<0x4
8000033e:	17 c8       	ld.ub	r8,r11[0x4]
80000340:	ef e8 10 57 	or	r7,r7,r8<<0x5
80000344:	17 de       	ld.ub	lr,r11[0x5]
80000346:	ef ee 10 77 	or	r7,r7,lr<<0x7
8000034a:	f7 3e 00 09 	ld.ub	lr,r11[9]
8000034e:	ef ee 10 a7 	or	r7,r7,lr<<0xa
80000352:	e0 68 4d d3 	mov	r8,19923
80000356:	ea 18 10 62 	orh	r8,0x1062
8000035a:	f2 08 06 44 	mulu.d	r4,r9,r8
8000035e:	a7 85       	lsr	r5,0x6
80000360:	e0 6e 03 e8 	mov	lr,1000
80000364:	bd 35       	mul	r5,lr
80000366:	ea 08 06 44 	mulu.d	r4,r5,r8
8000036a:	ea 0e 16 0b 	lsr	lr,r5,0xb
8000036e:	ef ee 11 0e 	or	lr,r7,lr<<0x10
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80000372:	fc 78 24 00 	mov	r8,-187392
80000376:	91 1e       	st.w	r8[0x4],lr
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
80000378:	a1 79       	lsl	r9,0x1
8000037a:	f4 09 0d 06 	divu	r6,r10,r9
8000037e:	0c 99       	mov	r9,r6
80000380:	20 19       	sub	r9,1
80000382:	f3 d9 c0 09 	bfextu	r9,r9,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
80000386:	f9 49 00 44 	st.w	r12[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
8000038a:	71 a9       	ld.w	r9,r8[0x68]
8000038c:	96 6a       	ld.sh	r10,r11[0xc]
8000038e:	b9 6a       	lsl	r10,0x18
80000390:	e6 1a 3f 00 	andh	r10,0x3f00,COH
80000394:	e4 19 c0 ff 	andh	r9,0xc0ff
80000398:	f5 e9 10 09 	or	r9,r10,r9
8000039c:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800003a0:	71 a9       	ld.w	r9,r8[0x68]
800003a2:	96 5a       	ld.sh	r10,r11[0xa]
800003a4:	f5 da c0 0f 	bfextu	r10,r10,0x0,0xf
800003a8:	e0 19 80 00 	andl	r9,0x8000
800003ac:	f5 e9 10 09 	or	r9,r10,r9
800003b0:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
800003b4:	71 b9       	ld.w	r9,r8[0x6c]
800003b6:	96 7a       	ld.sh	r10,r11[0xe]
800003b8:	f5 da c0 0a 	bfextu	r10,r10,0x0,0xa
800003bc:	e0 19 fc 00 	andl	r9,0xfc00
800003c0:	f5 e9 10 09 	or	r9,r10,r9
800003c4:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
800003c8:	71 b9       	ld.w	r9,r8[0x6c]
800003ca:	f7 0a 00 10 	ld.sh	r10,r11[16]
800003ce:	b1 6a       	lsl	r10,0x10
800003d0:	e6 1a 03 ff 	andh	r10,0x3ff,COH
800003d4:	e4 19 fc 00 	andh	r9,0xfc00
800003d8:	f5 e9 10 09 	or	r9,r10,r9
800003dc:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
800003e0:	70 19       	ld.w	r9,r8[0x4]
800003e2:	a1 a9       	sbr	r9,0x0
800003e4:	91 19       	st.w	r8[0x4],r9

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
800003e6:	10 99       	mov	r9,r8
800003e8:	72 28       	ld.w	r8,r9[0x8]
800003ea:	e2 18 40 00 	andl	r8,0x4000,COH
800003ee:	cf d0       	breq	800003e8 <adcifa_configure+0xc0>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
}
800003f0:	da 2a       	popm	r4-r7,pc,r12=1
800003f2:	d7 03       	nop

800003f4 <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
800003f4:	eb cd 00 c0 	pushm	r6-r7
800003f8:	20 cd       	sub	sp,48
	uint8_t g[16] = {0};
800003fa:	30 06       	mov	r6,0
800003fc:	30 07       	mov	r7,0
800003fe:	fa e7 00 20 	st.d	sp[32],r6
80000402:	fa e7 00 28 	st.d	sp[40],r6
	uint8_t mp[16] = {0};
80000406:	fa e7 00 10 	st.d	sp[16],r6
8000040a:	fa e7 00 18 	st.d	sp[24],r6
	uint8_t mn[16] = {0};
8000040e:	fa e7 00 00 	st.d	sp[0],r6
80000412:	fa e7 00 08 	st.d	sp[8],r6

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
80000416:	58 0b       	cp.w	r11,0
80000418:	c0 70       	breq	80000426 <adcifa_configure_sequencer+0x32>
8000041a:	30 18       	mov	r8,1
8000041c:	f0 0b 18 00 	cp.b	r11,r8
80000420:	e0 81 01 97 	brne	8000074e <adcifa_configure_sequencer+0x35a>
80000424:	cf f8       	rjmp	80000622 <adcifa_configure_sequencer+0x22e>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
80000426:	15 8c       	ld.ub	r12,r10[0x0]
80000428:	15 9b       	ld.ub	r11,r10[0x1]
8000042a:	15 a8       	ld.ub	r8,r10[0x2]
8000042c:	a9 68       	lsl	r8,0x8
8000042e:	f1 eb 10 c8 	or	r8,r8,r11<<0xc
80000432:	15 eb       	ld.ub	r11,r10[0x6]
80000434:	16 48       	or	r8,r11
80000436:	15 bb       	ld.ub	r11,r10[0x3]
80000438:	f1 eb 10 28 	or	r8,r8,r11<<0x2
8000043c:	15 cb       	ld.ub	r11,r10[0x4]
8000043e:	f1 eb 10 38 	or	r8,r8,r11<<0x3
80000442:	15 da       	ld.ub	r10,r10[0x5]
80000444:	f1 ea 10 1a 	or	r10,r8,r10<<0x1
80000448:	f8 c8 00 01 	sub	r8,r12,1
8000044c:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
80000450:	fc 78 24 00 	mov	r8,-187392
80000454:	91 5a       	st.w	r8[0x14],r10
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000456:	58 0c       	cp.w	r12,0
80000458:	c1 00       	breq	80000478 <adcifa_configure_sequencer+0x84>
8000045a:	12 9a       	mov	r10,r9
8000045c:	fa c8 ff e0 	sub	r8,sp,-32
 * \param p_adcifa_sequencer_opt  Structure for the sequencer configuration
 * \param p_adcifa_sequencer_conversion_opt  Pointer on a buffer for each
 *                                           conversion on a sequencer
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
80000460:	f8 c7 00 01 	sub	r7,r12,1
80000464:	5c 57       	castu.b	r7
80000466:	fa cb ff df 	sub	r11,sp,-33
8000046a:	f6 07 00 07 	add	r7,r11,r7
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000046e:	15 ab       	ld.ub	r11,r10[0x2]
80000470:	10 cb       	st.b	r8++,r11
80000472:	2f da       	sub	r10,-3
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000474:	0e 38       	cp.w	r8,r7
80000476:	cf c1       	brne	8000046e <adcifa_configure_sequencer+0x7a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80000478:	fb 38 00 27 	ld.ub	r8,sp[39]
8000047c:	fb 3a 00 26 	ld.ub	r10,sp[38]
80000480:	b9 6a       	lsl	r10,0x18
80000482:	f5 e8 11 ca 	or	r10,r10,r8<<0x1c
80000486:	fb 38 00 20 	ld.ub	r8,sp[32]
8000048a:	10 4a       	or	r10,r8
8000048c:	fb 38 00 25 	ld.ub	r8,sp[37]
80000490:	f5 e8 11 4a 	or	r10,r10,r8<<0x14
80000494:	fb 38 00 24 	ld.ub	r8,sp[36]
80000498:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
8000049c:	fb 38 00 23 	ld.ub	r8,sp[35]
800004a0:	f5 e8 10 ca 	or	r10,r10,r8<<0xc
800004a4:	fb 38 00 22 	ld.ub	r8,sp[34]
800004a8:	f5 e8 10 8a 	or	r10,r10,r8<<0x8
800004ac:	fb 38 00 21 	ld.ub	r8,sp[33]
800004b0:	f5 e8 10 4a 	or	r10,r10,r8<<0x4
800004b4:	fc 78 24 00 	mov	r8,-187392
800004b8:	91 7a       	st.w	r8[0x1c],r10
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800004ba:	58 0c       	cp.w	r12,0
800004bc:	c1 10       	breq	800004de <adcifa_configure_sequencer+0xea>
800004be:	30 08       	mov	r8,0
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800004c0:	fa c7 ff f0 	sub	r7,sp,-16
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800004c4:	1a 9b       	mov	r11,sp
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800004c6:	13 8a       	ld.ub	r10,r9[0x0]
800004c8:	ee 08 0b 0a 	st.b	r7[r8],r10
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800004cc:	13 9a       	ld.ub	r10,r9[0x1]
800004ce:	f6 08 0b 0a 	st.b	r11[r8],r10
800004d2:	2f f8       	sub	r8,-1
800004d4:	2f d9       	sub	r9,-3
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800004d6:	f0 0c 18 00 	cp.b	r12,r8
800004da:	fe 9b ff f6 	brhi	800004c6 <adcifa_configure_sequencer+0xd2>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
800004de:	fb 38 00 17 	ld.ub	r8,sp[23]
800004e2:	fb 39 00 16 	ld.ub	r9,sp[22]
800004e6:	b1 69       	lsl	r9,0x10
800004e8:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800004ec:	fb 38 00 14 	ld.ub	r8,sp[20]
800004f0:	10 49       	or	r9,r8
800004f2:	fb 38 00 15 	ld.ub	r8,sp[21]
800004f6:	f3 e8 10 89 	or	r9,r9,r8<<0x8
800004fa:	fc 78 24 00 	mov	r8,-187392
800004fe:	91 b9       	st.w	r8[0x2c],r9
80000500:	fb 3a 00 13 	ld.ub	r10,sp[19]
80000504:	fb 39 00 12 	ld.ub	r9,sp[18]
80000508:	b1 69       	lsl	r9,0x10
8000050a:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000050e:	fb 3a 00 10 	ld.ub	r10,sp[16]
80000512:	14 49       	or	r9,r10
80000514:	fb 3a 00 11 	ld.ub	r10,sp[17]
80000518:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000051c:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000051e:	1b fa       	ld.ub	r10,sp[0x7]
80000520:	1b e9       	ld.ub	r9,sp[0x6]
80000522:	b1 69       	lsl	r9,0x10
80000524:	f3 ea 11 89 	or	r9,r9,r10<<0x18
80000528:	1b ca       	ld.ub	r10,sp[0x4]
8000052a:	14 49       	or	r9,r10
8000052c:	1b da       	ld.ub	r10,sp[0x5]
8000052e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80000532:	91 f9       	st.w	r8[0x3c],r9
80000534:	1b ba       	ld.ub	r10,sp[0x3]
80000536:	1b a9       	ld.ub	r9,sp[0x2]
80000538:	b1 69       	lsl	r9,0x10
8000053a:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000053e:	1b 8a       	ld.ub	r10,sp[0x0]
80000540:	14 49       	or	r9,r10
80000542:	1b 9a       	ld.ub	r10,sp[0x1]
80000544:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80000548:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
8000054a:	fe f8 02 0e 	ld.w	r8,pc[526]
8000054e:	11 89       	ld.ub	r9,r8[0x0]
80000550:	30 08       	mov	r8,0
80000552:	f0 09 18 00 	cp.b	r9,r8
80000556:	e0 81 00 fc 	brne	8000074e <adcifa_configure_sequencer+0x35a>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
8000055a:	fb 39 00 2f 	ld.ub	r9,sp[47]
8000055e:	fb 38 00 2e 	ld.ub	r8,sp[46]
80000562:	b9 68       	lsl	r8,0x18
80000564:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80000568:	fb 38 00 28 	ld.ub	r8,sp[40]
8000056c:	f3 e8 10 08 	or	r8,r9,r8
80000570:	fb 39 00 2d 	ld.ub	r9,sp[45]
80000574:	f1 e9 11 48 	or	r8,r8,r9<<0x14
80000578:	fb 39 00 2c 	ld.ub	r9,sp[44]
8000057c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80000580:	fb 39 00 2b 	ld.ub	r9,sp[43]
80000584:	f1 e9 10 c8 	or	r8,r8,r9<<0xc
80000588:	fb 39 00 2a 	ld.ub	r9,sp[42]
8000058c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80000590:	fb 39 00 29 	ld.ub	r9,sp[41]
80000594:	f1 e9 10 49 	or	r9,r8,r9<<0x4
80000598:	fc 78 24 00 	mov	r8,-187392
8000059c:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
8000059e:	fb 3a 00 1f 	ld.ub	r10,sp[31]
800005a2:	fb 39 00 1e 	ld.ub	r9,sp[30]
800005a6:	b1 69       	lsl	r9,0x10
800005a8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800005ac:	fb 39 00 1c 	ld.ub	r9,sp[28]
800005b0:	f5 e9 10 09 	or	r9,r10,r9
800005b4:	fb 3a 00 1d 	ld.ub	r10,sp[29]
800005b8:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800005bc:	91 c9       	st.w	r8[0x30],r9
800005be:	fb 3a 00 1b 	ld.ub	r10,sp[27]
800005c2:	fb 39 00 1a 	ld.ub	r9,sp[26]
800005c6:	b1 69       	lsl	r9,0x10
800005c8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800005cc:	fb 39 00 18 	ld.ub	r9,sp[24]
800005d0:	f5 e9 10 09 	or	r9,r10,r9
800005d4:	fb 3a 00 19 	ld.ub	r10,sp[25]
800005d8:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800005dc:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
800005de:	fb 3a 00 0f 	ld.ub	r10,sp[15]
800005e2:	fb 39 00 0e 	ld.ub	r9,sp[14]
800005e6:	b1 69       	lsl	r9,0x10
800005e8:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
800005ec:	fb 39 00 0c 	ld.ub	r9,sp[12]
800005f0:	f5 e9 10 09 	or	r9,r10,r9
800005f4:	fb 3a 00 0d 	ld.ub	r10,sp[13]
800005f8:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800005fc:	f1 49 00 40 	st.w	r8[64],r9
80000600:	fb 3a 00 0b 	ld.ub	r10,sp[11]
80000604:	fb 39 00 0a 	ld.ub	r9,sp[10]
80000608:	b1 69       	lsl	r9,0x10
8000060a:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
8000060e:	fb 39 00 08 	ld.ub	r9,sp[8]
80000612:	f5 e9 10 09 	or	r9,r10,r9
80000616:	fb 3a 00 09 	ld.ub	r10,sp[9]
8000061a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000061e:	91 e9       	st.w	r8[0x38],r9
80000620:	c9 78       	rjmp	8000074e <adcifa_configure_sequencer+0x35a>
		break;

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
80000622:	15 8c       	ld.ub	r12,r10[0x0]
80000624:	15 e8       	ld.ub	r8,r10[0x6]
80000626:	a5 a8       	sbr	r8,0x4
80000628:	15 9b       	ld.ub	r11,r10[0x1]
8000062a:	f1 eb 10 c8 	or	r8,r8,r11<<0xc
8000062e:	15 ab       	ld.ub	r11,r10[0x2]
80000630:	f1 eb 10 88 	or	r8,r8,r11<<0x8
80000634:	15 bb       	ld.ub	r11,r10[0x3]
80000636:	f1 eb 10 28 	or	r8,r8,r11<<0x2
8000063a:	15 cb       	ld.ub	r11,r10[0x4]
8000063c:	f1 eb 10 38 	or	r8,r8,r11<<0x3
80000640:	15 da       	ld.ub	r10,r10[0x5]
80000642:	f1 ea 10 1a 	or	r10,r8,r10<<0x1
80000646:	f8 c8 00 01 	sub	r8,r12,1
8000064a:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
8000064e:	fc 78 24 00 	mov	r8,-187392
80000652:	91 6a       	st.w	r8[0x18],r10
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000654:	58 0c       	cp.w	r12,0
80000656:	c1 00       	breq	80000676 <adcifa_configure_sequencer+0x282>
80000658:	12 9a       	mov	r10,r9
8000065a:	fa c8 ff e0 	sub	r8,sp,-32
 * \param p_adcifa_sequencer_opt  Structure for the sequencer configuration
 * \param p_adcifa_sequencer_conversion_opt  Pointer on a buffer for each
 *                                           conversion on a sequencer
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
8000065e:	f8 c7 00 01 	sub	r7,r12,1
80000662:	5c 57       	castu.b	r7
80000664:	fa cb ff df 	sub	r11,sp,-33
80000668:	f6 07 00 07 	add	r7,r11,r7
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000066c:	15 ab       	ld.ub	r11,r10[0x2]
8000066e:	10 cb       	st.b	r8++,r11
80000670:	2f da       	sub	r10,-3
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000672:	0e 38       	cp.w	r8,r7
80000674:	cf c1       	brne	8000066c <adcifa_configure_sequencer+0x278>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80000676:	fb 38 00 27 	ld.ub	r8,sp[39]
8000067a:	fb 3a 00 26 	ld.ub	r10,sp[38]
8000067e:	b9 6a       	lsl	r10,0x18
80000680:	f5 e8 11 ca 	or	r10,r10,r8<<0x1c
80000684:	fb 38 00 20 	ld.ub	r8,sp[32]
80000688:	10 4a       	or	r10,r8
8000068a:	fb 38 00 25 	ld.ub	r8,sp[37]
8000068e:	f5 e8 11 4a 	or	r10,r10,r8<<0x14
80000692:	fb 38 00 24 	ld.ub	r8,sp[36]
80000696:	f5 e8 11 0a 	or	r10,r10,r8<<0x10
8000069a:	fb 38 00 23 	ld.ub	r8,sp[35]
8000069e:	f5 e8 10 ca 	or	r10,r10,r8<<0xc
800006a2:	fb 38 00 22 	ld.ub	r8,sp[34]
800006a6:	f5 e8 10 8a 	or	r10,r10,r8<<0x8
800006aa:	fb 38 00 21 	ld.ub	r8,sp[33]
800006ae:	f5 e8 10 4a 	or	r10,r10,r8<<0x4
800006b2:	fc 78 24 00 	mov	r8,-187392
800006b6:	91 8a       	st.w	r8[0x20],r10
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800006b8:	58 0c       	cp.w	r12,0
800006ba:	c1 00       	breq	800006da <adcifa_configure_sequencer+0x2e6>
800006bc:	30 08       	mov	r8,0
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800006be:	fa c7 ff f0 	sub	r7,sp,-16
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800006c2:	1a 9b       	mov	r11,sp
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800006c4:	13 8a       	ld.ub	r10,r9[0x0]
800006c6:	ee 08 0b 0a 	st.b	r7[r8],r10
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800006ca:	13 9a       	ld.ub	r10,r9[0x1]
800006cc:	f6 08 0b 0a 	st.b	r11[r8],r10
800006d0:	2f f8       	sub	r8,-1
800006d2:	2f d9       	sub	r9,-3
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800006d4:	f8 08 18 00 	cp.b	r8,r12
800006d8:	cf 63       	brcs	800006c4 <adcifa_configure_sequencer+0x2d0>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800006da:	fb 38 00 17 	ld.ub	r8,sp[23]
800006de:	fb 39 00 16 	ld.ub	r9,sp[22]
800006e2:	b1 69       	lsl	r9,0x10
800006e4:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800006e8:	fb 38 00 14 	ld.ub	r8,sp[20]
800006ec:	10 49       	or	r9,r8
800006ee:	fb 38 00 15 	ld.ub	r8,sp[21]
800006f2:	f3 e8 10 89 	or	r9,r9,r8<<0x8
800006f6:	fc 78 24 00 	mov	r8,-187392
800006fa:	91 c9       	st.w	r8[0x30],r9
800006fc:	fb 3a 00 13 	ld.ub	r10,sp[19]
80000700:	fb 39 00 12 	ld.ub	r9,sp[18]
80000704:	b1 69       	lsl	r9,0x10
80000706:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000070a:	fb 3a 00 10 	ld.ub	r10,sp[16]
8000070e:	14 49       	or	r9,r10
80000710:	fb 3a 00 11 	ld.ub	r10,sp[17]
80000714:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80000718:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000071a:	1b fa       	ld.ub	r10,sp[0x7]
8000071c:	1b e9       	ld.ub	r9,sp[0x6]
8000071e:	b1 69       	lsl	r9,0x10
80000720:	f3 ea 11 89 	or	r9,r9,r10<<0x18
80000724:	1b ca       	ld.ub	r10,sp[0x4]
80000726:	14 49       	or	r9,r10
80000728:	1b da       	ld.ub	r10,sp[0x5]
8000072a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000072e:	f1 49 00 40 	st.w	r8[64],r9
80000732:	1b ba       	ld.ub	r10,sp[0x3]
80000734:	1b a9       	ld.ub	r9,sp[0x2]
80000736:	b1 69       	lsl	r9,0x10
80000738:	f3 ea 11 89 	or	r9,r9,r10<<0x18
8000073c:	1b 8a       	ld.ub	r10,sp[0x0]
8000073e:	14 49       	or	r9,r10
80000740:	1b 9a       	ld.ub	r10,sp[0x1]
80000742:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80000746:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80000748:	30 19       	mov	r9,1
8000074a:	48 48       	lddpc	r8,80000758 <adcifa_configure_sequencer+0x364>
8000074c:	b0 89       	st.b	r8[0x0],r9

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
}
8000074e:	2f 4d       	sub	sp,-48
80000750:	e3 cd 00 c0 	ldm	sp++,r6-r7
80000754:	5e ff       	retal	1
80000756:	00 00       	add	r0,r0
80000758:	00 00       	add	r0,r0
8000075a:	05 fc       	ld.ub	r12,r2[0x7]

8000075c <adcifa_configure_window_monitor>:
 */
void adcifa_configure_window_monitor( volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_window_monitor_opt_t *adc_window_monitor_opt )
{
	switch (sequencer) {
8000075c:	58 0b       	cp.w	r11,0
8000075e:	c0 60       	breq	8000076a <adcifa_configure_window_monitor+0xe>
80000760:	30 18       	mov	r8,1
80000762:	f0 0b 18 00 	cp.b	r11,r8
80000766:	5e 1c       	retne	r12
80000768:	c1 b8       	rjmp	8000079e <adcifa_configure_window_monitor+0x42>
		int temp;

	case 0:
		/* Configure sequencer 0 */
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
8000076a:	79 e8       	ld.w	r8,r12[0x78]
		adcifa->idr = temp;         /* disable interrupt if it was
8000076c:	e2 18 04 00 	andl	r8,0x400,COH
80000770:	f9 48 00 74 	st.w	r12[116],r8
		                             * enabled */
		adcifa->wcfg0
80000774:	15 9b       	ld.ub	r11,r10[0x1]
80000776:	94 a9       	ld.uh	r9,r10[0x4]
80000778:	ad 69       	lsl	r9,0xc
8000077a:	f3 eb 11 b9 	or	r9,r9,r11<<0x1b
8000077e:	94 9b       	ld.uh	r11,r10[0x2]
80000780:	16 49       	or	r9,r11
80000782:	f9 49 00 58 	st.w	r12[88],r9
				| (adc_window_monitor_opt->high_threshold <<
				AVR32_ADCIFA_WCFG0_HT_OFFSET)
				| (adc_window_monitor_opt->low_threshold <<
				AVR32_ADCIFA_WCFG0_LT_OFFSET);
		/* Clear any pending interrupt before setting new mode */
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
80000786:	e0 69 04 00 	mov	r9,1024
8000078a:	99 39       	st.w	r12[0xc],r9
		adcifa->wcfg0
			|= (adc_window_monitor_opt->mode <<
8000078c:	79 69       	ld.w	r9,r12[0x58]
8000078e:	15 8a       	ld.ub	r10,r10[0x0]
80000790:	f3 ea 11 89 	or	r9,r9,r10<<0x18
				AVR32_ADCIFA_WCFG0_HT_OFFSET)
				| (adc_window_monitor_opt->low_threshold <<
				AVR32_ADCIFA_WCFG0_LT_OFFSET);
		/* Clear any pending interrupt before setting new mode */
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
		adcifa->wcfg0
80000794:	f9 49 00 58 	st.w	r12[88],r9
			|= (adc_window_monitor_opt->mode <<
				AVR32_ADCIFA_WCFG0_WM_OFFSET);
		adcifa->ier = temp;         /* enable interrupt if it was
80000798:	f9 48 00 70 	st.w	r12[112],r8
		                             * enabled */
		break;
8000079c:	5e fc       	retal	r12

	case 1:
		/* Configure sequencer 1 */
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
8000079e:	79 e8       	ld.w	r8,r12[0x78]
		adcifa->idr = temp;         /* disable interrupt if it was
800007a0:	e2 18 08 00 	andl	r8,0x800,COH
800007a4:	f9 48 00 74 	st.w	r12[116],r8
		                             * enabled */
		adcifa->wcfg1
800007a8:	15 9b       	ld.ub	r11,r10[0x1]
800007aa:	94 a9       	ld.uh	r9,r10[0x4]
800007ac:	ad 69       	lsl	r9,0xc
800007ae:	f3 eb 11 b9 	or	r9,r9,r11<<0x1b
800007b2:	94 9b       	ld.uh	r11,r10[0x2]
800007b4:	16 49       	or	r9,r11
800007b6:	f9 49 00 5c 	st.w	r12[92],r9
				| (adc_window_monitor_opt->high_threshold <<
				AVR32_ADCIFA_WCFG1_HT_OFFSET)
				| (adc_window_monitor_opt->low_threshold <<
				AVR32_ADCIFA_WCFG1_LT_OFFSET);
		/* Clear any pending interrupt before setting new mode */
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
800007ba:	e0 69 08 00 	mov	r9,2048
800007be:	99 39       	st.w	r12[0xc],r9
		adcifa->wcfg1
			|= (adc_window_monitor_opt->mode <<
800007c0:	79 79       	ld.w	r9,r12[0x5c]
800007c2:	15 8a       	ld.ub	r10,r10[0x0]
800007c4:	f3 ea 11 89 	or	r9,r9,r10<<0x18
				AVR32_ADCIFA_WCFG1_HT_OFFSET)
				| (adc_window_monitor_opt->low_threshold <<
				AVR32_ADCIFA_WCFG1_LT_OFFSET);
		/* Clear any pending interrupt before setting new mode */
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
		adcifa->wcfg1
800007c8:	f9 49 00 5c 	st.w	r12[92],r9
			|= (adc_window_monitor_opt->mode <<
				AVR32_ADCIFA_WCFG1_WM_OFFSET);
		adcifa->ier = temp;         /* enable interrupt if it was
800007cc:	f9 48 00 70 	st.w	r12[112],r8
800007d0:	5e fc       	retal	r12

800007d2 <adcifa_start_sequencer>:
{
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
800007d2:	30 18       	mov	r8,1
800007d4:	f0 0b 18 00 	cp.b	r11,r8
800007d8:	c0 d0       	breq	800007f2 <adcifa_start_sequencer+0x20>
800007da:	58 0b       	cp.w	r11,0
800007dc:	c0 60       	breq	800007e8 <adcifa_start_sequencer+0x16>
800007de:	30 38       	mov	r8,3
800007e0:	f0 0b 18 00 	cp.b	r11,r8
800007e4:	5e 1c       	retne	r12
800007e6:	c0 b8       	rjmp	800007fc <adcifa_start_sequencer+0x2a>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
800007e8:	30 19       	mov	r9,1
800007ea:	fc 78 24 00 	mov	r8,-187392
800007ee:	91 09       	st.w	r8[0x0],r9
		break;
800007f0:	5e fc       	retal	r12

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
800007f2:	30 29       	mov	r9,2
800007f4:	fc 78 24 00 	mov	r8,-187392
800007f8:	91 09       	st.w	r8[0x0],r9
		break;
800007fa:	5e fc       	retal	r12

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
800007fc:	30 39       	mov	r9,3
800007fe:	fc 78 24 00 	mov	r8,-187392
80000802:	91 09       	st.w	r8[0x0],r9
80000804:	5e fc       	retal	r12
80000806:	d7 03       	nop

80000808 <adcifa_calibrate_offset>:
 * \param pb_hz        Peripheral Bus frequency
 */
#define CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE              8

void adcifa_calibrate_offset(volatile avr32_adcifa_t *adcifa,
	adcifa_opt_t *p_adcifa_opt, uint32_t pb_hz){
80000808:	eb cd 40 80 	pushm	r7,lr
8000080c:	20 8d       	sub	sp,32
8000080e:	16 97       	mov	r7,r11
	adcifa_sequencer_opt_t adcifa_sequence_opt;
	adcifa_sequencer_conversion_opt_t
	adcifa_sequence_conversion_opt[CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE];

	/* Configure the ADC */
	p_adcifa_opt->sample_and_hold_disable  = true;
80000810:	30 18       	mov	r8,1
80000812:	b6 d8       	st.b	r11[0x5],r8
	p_adcifa_opt->single_sequencer_mode    = true;
80000814:	b6 e8       	st.b	r11[0x6],r8
	p_adcifa_opt->free_running_mode_enable = false;
80000816:	30 08       	mov	r8,0
80000818:	b6 f8       	st.b	r11[0x7],r8
	p_adcifa_opt->sleep_mode_enable        = false;
8000081a:	f7 68 00 08 	st.b	r11[8],r8
	p_adcifa_opt->mux_settle_more_time     = false;
8000081e:	f7 68 00 09 	st.b	r11[9],r8

	/* Clear offset calibration value before starting calibration */
	p_adcifa_opt->offset_calibration_value = 0;
80000822:	30 08       	mov	r8,0
80000824:	b6 68       	st.h	r11[0xc],r8

	/* Configure ADCIFA core */
	adcifa_configure(&AVR32_ADCIFA, p_adcifa_opt, pb_hz);
80000826:	fc 7c 24 00 	mov	r12,-187392
8000082a:	f0 1f 00 1f 	mcall	800008a4 <adcifa_calibrate_offset+0x9c>
8000082e:	fa c8 ff ff 	sub	r8,sp,-1
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 * \param pb_hz        Peripheral Bus frequency
 */
#define CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE              8

void adcifa_calibrate_offset(volatile avr32_adcifa_t *adcifa,
80000832:	fa cc ff e7 	sub	r12,sp,-25
	adcifa_sequence_opt.software_acknowledge =
		ADCIFA_SA_NO_EOS_SOFTACK;

	/* ADCIFA conversions for sequencer 0*/
	for (uint8_t i=0; i<CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE; i++){
		adcifa_sequence_conversion_opt[i].channel_p = AVR32_ADCIFA_INP_GNDANA;
80000836:	30 ab       	mov	r11,10
		adcifa_sequence_conversion_opt[i].channel_n = AVR32_ADCIFA_INN_GNDANA;
80000838:	30 9a       	mov	r10,9
		adcifa_sequence_conversion_opt[i].gain = ADCIFA_SHG_1;
8000083a:	30 09       	mov	r9,0
	adcifa_sequence_opt.software_acknowledge =
		ADCIFA_SA_NO_EOS_SOFTACK;

	/* ADCIFA conversions for sequencer 0*/
	for (uint8_t i=0; i<CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE; i++){
		adcifa_sequence_conversion_opt[i].channel_p = AVR32_ADCIFA_INP_GNDANA;
8000083c:	b0 8b       	st.b	r8[0x0],r11
		adcifa_sequence_conversion_opt[i].channel_n = AVR32_ADCIFA_INN_GNDANA;
8000083e:	b0 9a       	st.b	r8[0x1],r10
		adcifa_sequence_conversion_opt[i].gain = ADCIFA_SHG_1;
80000840:	b0 a9       	st.b	r8[0x2],r9
80000842:	2f d8       	sub	r8,-3
		ADCIFA_HWLA_NOADJ;
	adcifa_sequence_opt.software_acknowledge =
		ADCIFA_SA_NO_EOS_SOFTACK;

	/* ADCIFA conversions for sequencer 0*/
	for (uint8_t i=0; i<CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE; i++){
80000844:	18 38       	cp.w	r8,r12
80000846:	cf b1       	brne	8000083c <adcifa_calibrate_offset+0x34>

	/* Configure ADCIFA core */
	adcifa_configure(&AVR32_ADCIFA, p_adcifa_opt, pb_hz);

	/* ADCIFA sequencer 0 configuration structure*/
	adcifa_sequence_opt.convnb               =
80000848:	30 88       	mov	r8,8
8000084a:	fb 68 00 19 	st.b	sp[25],r8
		CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE;
	adcifa_sequence_opt.resolution           =
8000084e:	30 08       	mov	r8,0
80000850:	fb 68 00 1a 	st.b	sp[26],r8
		ADCIFA_SRES_12B;
	adcifa_sequence_opt.trigger_selection    =
80000854:	fb 68 00 1b 	st.b	sp[27],r8
		ADCIFA_TRGSEL_SOFT;
	adcifa_sequence_opt.start_of_conversion  =
80000858:	fb 68 00 1c 	st.b	sp[28],r8
		ADCIFA_SOCB_ALLSEQ;
	adcifa_sequence_opt.sh_mode              =
8000085c:	30 19       	mov	r9,1
8000085e:	fb 69 00 1d 	st.b	sp[29],r9
		ADCIFA_SH_MODE_OVERSAMP;
	adcifa_sequence_opt.half_word_adjustment =
80000862:	fb 68 00 1e 	st.b	sp[30],r8
		ADCIFA_HWLA_NOADJ;
	adcifa_sequence_opt.software_acknowledge =
80000866:	fb 69 00 1f 	st.b	sp[31],r9
		adcifa_sequence_conversion_opt[i].channel_p = AVR32_ADCIFA_INP_GNDANA;
		adcifa_sequence_conversion_opt[i].channel_n = AVR32_ADCIFA_INN_GNDANA;
		adcifa_sequence_conversion_opt[i].gain = ADCIFA_SHG_1;
	}
	/* Configure ADCIFA sequencer 0 */
	adcifa_configure_sequencer(&AVR32_ADCIFA, 0, &adcifa_sequence_opt,
8000086a:	fa c9 ff ff 	sub	r9,sp,-1
8000086e:	fa ca ff e7 	sub	r10,sp,-25
80000872:	30 0b       	mov	r11,0
80000874:	fc 7c 24 00 	mov	r12,-187392
80000878:	f0 1f 00 0c 	mcall	800008a8 <adcifa_calibrate_offset+0xa0>
			adcifa_sequence_conversion_opt);

	/* Start ADCIFA sequencer 0 */
	adcifa_start_sequencer(&AVR32_ADCIFA, 0);
8000087c:	30 0b       	mov	r11,0
8000087e:	fc 7c 24 00 	mov	r12,-187392
80000882:	f0 1f 00 0b 	mcall	800008ac <adcifa_calibrate_offset+0xa4>

	/* Wait end of ADCIFA sequencer 0*/
	while(!ADCIFA_is_eos_sequencer_0());
80000886:	fc 79 24 00 	mov	r9,-187392
8000088a:	72 28       	ld.w	r8,r9[0x8]
8000088c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000890:	cf d0       	breq	8000088a <adcifa_calibrate_offset+0x82>

	/* The last converted value is the offset value */
	p_adcifa_opt->offset_calibration_value =
		- ADCIFA_read_resx_sequencer_0(CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE-1);
80000892:	fc 78 24 00 	mov	r8,-187392
80000896:	f0 f8 00 a0 	ld.w	r8,r8[160]

	/* Wait end of ADCIFA sequencer 0*/
	while(!ADCIFA_is_eos_sequencer_0());

	/* The last converted value is the offset value */
	p_adcifa_opt->offset_calibration_value =
8000089a:	5c 38       	neg	r8
8000089c:	ae 68       	st.h	r7[0xc],r8
		- ADCIFA_read_resx_sequencer_0(CALIBRATION_ADCIFA_NUMBER_OF_SEQUENCE-1);

}
8000089e:	2f 8d       	sub	sp,-32
800008a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800008a4:	80 00       	ld.sh	r0,r0[0x0]
800008a6:	03 28       	ld.uh	r8,r1++
800008a8:	80 00       	ld.sh	r0,r0[0x0]
800008aa:	03 f4       	ld.ub	r4,r1[0x7]
800008ac:	80 00       	ld.sh	r0,r0[0x0]
800008ae:	07 d2       	ld.ub	r2,r3[0x5]

800008b0 <adcifa_check_eos>:
{
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
800008b0:	58 0b       	cp.w	r11,0
800008b2:	c0 60       	breq	800008be <adcifa_check_eos+0xe>
800008b4:	30 18       	mov	r8,1
800008b6:	f0 0b 18 00 	cp.b	r11,r8
800008ba:	c0 80       	breq	800008ca <adcifa_check_eos+0x1a>
800008bc:	5e fd       	retal	0
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
800008be:	fc 78 24 00 	mov	r8,-187392
800008c2:	70 2c       	ld.w	r12,r8[0x8]
800008c4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800008c8:	5e fc       	retal	r12

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
800008ca:	fc 78 24 00 	mov	r8,-187392
800008ce:	70 2c       	ld.w	r12,r8[0x8]
800008d0:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1

	default:
		break;
	}
	return false;
}
800008d4:	5e fc       	retal	r12
800008d6:	d7 03       	nop

800008d8 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
800008d8:	eb cd 40 e0 	pushm	r5-r7,lr
800008dc:	16 95       	mov	r5,r11
800008de:	14 97       	mov	r7,r10
800008e0:	12 96       	mov	r6,r9

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
800008e2:	f0 1f 00 1f 	mcall	8000095c <adcifa_get_values_from_sequencer+0x84>
800008e6:	c0 41       	brne	800008ee <adcifa_get_values_from_sequencer+0x16>
800008e8:	30 3c       	mov	r12,3
800008ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		return ADCIFA_STATUS_NOT_COMPLETED;
	}

	switch (sequencer) {
800008ee:	30 08       	mov	r8,0
800008f0:	f0 05 18 00 	cp.b	r5,r8
800008f4:	c0 b0       	breq	8000090a <adcifa_get_values_from_sequencer+0x32>
800008f6:	30 18       	mov	r8,1
800008f8:	f0 05 18 00 	cp.b	r5,r8
800008fc:	c2 d1       	brne	80000956 <adcifa_get_values_from_sequencer+0x7e>
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800008fe:	0f 89       	ld.ub	r9,r7[0x0]
80000900:	30 08       	mov	r8,0
80000902:	f0 09 18 00 	cp.b	r9,r8
80000906:	c1 81       	brne	80000936 <adcifa_get_values_from_sequencer+0x5e>
80000908:	c2 78       	rjmp	80000956 <adcifa_get_values_from_sequencer+0x7e>
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000090a:	0f 89       	ld.ub	r9,r7[0x0]
8000090c:	30 08       	mov	r8,0
8000090e:	f0 09 18 00 	cp.b	r9,r8
80000912:	c2 20       	breq	80000956 <adcifa_get_values_from_sequencer+0x7e>
80000914:	30 08       	mov	r8,0
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80000916:	fc 7a 24 00 	mov	r10,-187392
8000091a:	f0 c9 ff df 	sub	r9,r8,-33
8000091e:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
80000922:	ec 08 0a 19 	st.h	r6[r8<<0x1],r9
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000926:	2f f8       	sub	r8,-1
80000928:	5c 58       	castu.b	r8
8000092a:	0f 89       	ld.ub	r9,r7[0x0]
8000092c:	f0 09 18 00 	cp.b	r9,r8
80000930:	fe 9b ff f5 	brhi	8000091a <adcifa_get_values_from_sequencer+0x42>
80000934:	c1 18       	rjmp	80000956 <adcifa_get_values_from_sequencer+0x7e>
80000936:	30 08       	mov	r8,0
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80000938:	fc 7a 24 00 	mov	r10,-187392
8000093c:	f0 c9 ff d7 	sub	r9,r8,-41
80000940:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
80000944:	ec 08 0a 19 	st.h	r6[r8<<0x1],r9
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80000948:	2f f8       	sub	r8,-1
8000094a:	5c 58       	castu.b	r8
8000094c:	0f 89       	ld.ub	r9,r7[0x0]
8000094e:	f0 09 18 00 	cp.b	r9,r8
80000952:	fe 9b ff f5 	brhi	8000093c <adcifa_get_values_from_sequencer+0x64>
80000956:	30 2c       	mov	r12,2
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
}
80000958:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000095c:	80 00       	ld.sh	r0,r0[0x0]
8000095e:	08 b0       	st.h	r4++,r0

80000960 <adcifa_start_itimer>:
 * \param timer_count                      Fs = Fadc / (timer_counter + 1)
 */
void adcifa_start_itimer(volatile avr32_adcifa_t *adcifa,
		uint32_t timer_count)
{
	adcifa->itimer = timer_count;
80000960:	f9 4b 00 48 	st.w	r12[72],r11
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80000964:	30 88       	mov	r8,8
80000966:	99 08       	st.w	r12[0x0],r8
}
80000968:	5e fc       	retal	r12

8000096a <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000096a:	fe 68 00 00 	mov	r8,-131072
8000096e:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80000970:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80000974:	91 09       	st.w	r8[0x0],r9
}
80000976:	5e fc       	retal	r12

80000978 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80000978:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000097a:	e0 68 8a 3f 	mov	r8,35391
8000097e:	ea 18 01 f7 	orh	r8,0x1f7
80000982:	10 3c       	cp.w	r12,r8
80000984:	e0 88 00 06 	brls	80000990 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80000988:	30 1c       	mov	r12,1
8000098a:	f0 1f 00 04 	mcall	80000998 <flashc_set_bus_freq+0x20>
8000098e:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80000990:	30 0c       	mov	r12,0
80000992:	f0 1f 00 02 	mcall	80000998 <flashc_set_bus_freq+0x20>
80000996:	d8 02       	popm	pc
80000998:	80 00       	ld.sh	r0,r0[0x0]
8000099a:	09 6a       	ld.uh	r10,--r4

8000099c <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000099c:	fe 68 00 00 	mov	r8,-131072
800009a0:	70 2c       	ld.w	r12,r8[0x8]
}
800009a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800009a6:	5e fc       	retal	r12

800009a8 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
800009a8:	d4 01       	pushm	lr
	while (!flashc_is_ready());
800009aa:	f0 1f 00 03 	mcall	800009b4 <flashc_default_wait_until_ready+0xc>
800009ae:	cf e0       	breq	800009aa <flashc_default_wait_until_ready+0x2>
}
800009b0:	d8 02       	popm	pc
800009b2:	00 00       	add	r0,r0
800009b4:	80 00       	ld.sh	r0,r0[0x0]
800009b6:	09 9c       	ld.ub	r12,r4[0x1]

800009b8 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800009b8:	eb cd 40 c0 	pushm	r6-r7,lr
800009bc:	18 96       	mov	r6,r12
800009be:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800009c0:	48 e8       	lddpc	r8,800009f8 <flashc_issue_command+0x40>
800009c2:	70 08       	ld.w	r8,r8[0x0]
800009c4:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800009c6:	fe 68 00 00 	mov	r8,-131072
800009ca:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800009cc:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800009d0:	58 07       	cp.w	r7,0
800009d2:	c0 35       	brlt	800009d8 <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800009d4:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800009d8:	3a 59       	mov	r9,-91
800009da:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800009de:	fe 69 00 00 	mov	r9,-131072
800009e2:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800009e4:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800009e6:	e2 19 00 0c 	andl	r9,0xc,COH
800009ea:	48 58       	lddpc	r8,800009fc <flashc_issue_command+0x44>
800009ec:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800009ee:	48 38       	lddpc	r8,800009f8 <flashc_issue_command+0x40>
800009f0:	70 08       	ld.w	r8,r8[0x0]
800009f2:	5d 18       	icall	r8
}
800009f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800009f8:	00 00       	add	r0,r0
800009fa:	00 b8       	st.h	r0++,r8
800009fc:	00 00       	add	r0,r0
800009fe:	06 00       	add	r0,r3

80000a00 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80000a00:	eb cd 40 80 	pushm	r7,lr
80000a04:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
80000a06:	e0 68 8a 40 	mov	r8,35392
80000a0a:	ea 18 01 f7 	orh	r8,0x1f7
80000a0e:	10 3c       	cp.w	r12,r8
80000a10:	e0 88 00 18 	brls	80000a40 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
80000a14:	30 1c       	mov	r12,1
80000a16:	f0 1f 00 10 	mcall	80000a54 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
80000a1a:	e0 68 14 80 	mov	r8,5248
80000a1e:	ea 18 03 ef 	orh	r8,0x3ef
80000a22:	10 37       	cp.w	r7,r8
80000a24:	e0 8b 00 08 	brhi	80000a34 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80000a28:	3f fb       	mov	r11,-1
80000a2a:	31 1c       	mov	r12,17
80000a2c:	f0 1f 00 0b 	mcall	80000a58 <flashc_set_flash_waitstate_and_readmode+0x58>
80000a30:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80000a34:	3f fb       	mov	r11,-1
80000a36:	31 0c       	mov	r12,16
80000a38:	f0 1f 00 08 	mcall	80000a58 <flashc_set_flash_waitstate_and_readmode+0x58>
80000a3c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80000a40:	30 0c       	mov	r12,0
80000a42:	f0 1f 00 05 	mcall	80000a54 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80000a46:	3f fb       	mov	r11,-1
80000a48:	31 1c       	mov	r12,17
80000a4a:	f0 1f 00 04 	mcall	80000a58 <flashc_set_flash_waitstate_and_readmode+0x58>
80000a4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a52:	00 00       	add	r0,r0
80000a54:	80 00       	ld.sh	r0,r0[0x0]
80000a56:	09 6a       	ld.uh	r10,--r4
80000a58:	80 00       	ld.sh	r0,r0[0x0]
80000a5a:	09 b8       	ld.ub	r8,r4[0x3]

80000a5c <pm_set_clk_domain_div>:
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000a5c:	fe 78 04 00 	mov	r8,-64512
80000a60:	70 19       	ld.w	r9,r8[0x4]
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  if(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK))
80000a62:	f0 f8 00 d4 	ld.w	r8,r8[212]
80000a66:	e2 18 00 20 	andl	r8,0x20,COH
80000a6a:	c0 21       	brne	80000a6e <pm_set_clk_domain_div+0x12>
80000a6c:	5e fe       	retal	-1
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80000a6e:	12 98       	mov	r8,r9
  // ckSEL must not be written while SR.CKRDY is 0.
  if(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK))
    return -1;

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80000a70:	30 19       	mov	r9,1
80000a72:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80000a76:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  AVR32_ENTER_CRITICAL_REGION( );
80000a7a:	e1 b9 00 00 	mfsr	r9,0x0
80000a7e:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80000a80:	f8 cb ff ff 	sub	r11,r12,-1
80000a84:	a3 6b       	lsl	r11,0x2
80000a86:	ea 1b aa 00 	orh	r11,0xaa00
80000a8a:	fe 7a 04 00 	mov	r10,-64512
80000a8e:	f5 4b 00 58 	st.w	r10[88],r11
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80000a92:	a3 6c       	lsl	r12,0x2
80000a94:	e0 2c fb fc 	sub	r12,64508
80000a98:	99 08       	st.w	r12[0x0],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80000a9a:	12 98       	mov	r8,r9
80000a9c:	e6 18 00 01 	andh	r8,0x1,COH
80000aa0:	c0 20       	breq	80000aa4 <pm_set_clk_domain_div+0x48>
80000aa2:	5e fd       	retal	0
80000aa4:	d5 03       	csrf	0x10
80000aa6:	5e fd       	retal	0

80000aa8 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80000aa8:	e1 b9 00 00 	mfsr	r9,0x0
80000aac:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
80000aae:	fe 78 04 00 	mov	r8,-64512
80000ab2:	fc 1a aa 00 	movh	r10,0xaa00
80000ab6:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80000aba:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80000abc:	12 98       	mov	r8,r9
80000abe:	e6 18 00 01 	andh	r8,0x1,COH
80000ac2:	c0 21       	brne	80000ac6 <pm_set_mclk_source+0x1e>
80000ac4:	d5 03       	csrf	0x10

  return PASS;
}
80000ac6:	5e fd       	retal	0

80000ac8 <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80000ac8:	eb cd 40 fc 	pushm	r2-r7,lr
80000acc:	20 5d       	sub	sp,20
80000ace:	18 95       	mov	r5,r12
        //  12    8   1  108     1     54    27
        //  12    9   1  120     1     60    15
        //  12    9   1  120     1     60    30
        //  12   10   1  132     1     66    16.5
        //
        unsigned long in_cpu_f  = param->cpu_f;
80000ad0:	78 16       	ld.w	r6,r12[0x4]
        unsigned long in_osc0_f = param->osc0_f;
80000ad2:	78 57       	ld.w	r7,r12[0x14]
        unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
        unsigned long pll_freq, rest;
        bool b_div2_pba, b_div2_cpu;

        // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency.
        scif_configure_osc_crystalmode(SCIF_OSC0, in_osc0_f);
80000ad4:	0e 9b       	mov	r11,r7
80000ad6:	30 0c       	mov	r12,0
80000ad8:	f0 1f 00 6d 	mcall	80000c8c <pcl_configure_clocks+0x1c4>
        // Enable the OSC0
        scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80000adc:	30 1a       	mov	r10,1
80000ade:	6a 6b       	ld.w	r11,r5[0x18]
80000ae0:	30 0c       	mov	r12,0
80000ae2:	f0 1f 00 6c 	mcall	80000c90 <pcl_configure_clocks+0x1c8>
        // Set the main clock source as being OSC0.
        pm_set_mclk_source(PM_CLK_SRC_OSC0);
80000ae6:	30 1c       	mov	r12,1
80000ae8:	f0 1f 00 6b 	mcall	80000c94 <pcl_configure_clocks+0x1cc>

        // Start with CPU freq config
        if (in_cpu_f == in_osc0_f)
80000aec:	0e 36       	cp.w	r6,r7
80000aee:	c0 51       	brne	80000af8 <pcl_configure_clocks+0x30>
        {
          param->cpu_f = in_osc0_f;
80000af0:	8b 16       	st.w	r5[0x4],r6
          param->pba_f = in_osc0_f;
80000af2:	8b 26       	st.w	r5[0x8],r6
80000af4:	30 0c       	mov	r12,0
80000af6:	cc 78       	rjmp	80000c84 <pcl_configure_clocks+0x1bc>
        else if (in_cpu_f < in_osc0_f)
        {
          // TBD
        }

        rest = in_cpu_f % in_osc0_f;
80000af8:	ec 07 0d 08 	divu	r8,r6,r7
80000afc:	12 9c       	mov	r12,r9

        for (div = 1; div < 32; div++)
        {
          if ((div * rest) % in_osc0_f == 0)
80000afe:	f8 07 0d 08 	divu	r8,r12,r7
80000b02:	58 09       	cp.w	r9,0
80000b04:	c0 31       	brne	80000b0a <pcl_configure_clocks+0x42>
80000b06:	30 18       	mov	r8,1
80000b08:	c1 28       	rjmp	80000b2c <pcl_configure_clocks+0x64>
80000b0a:	f8 09 15 01 	lsl	r9,r12,0x1
80000b0e:	30 28       	mov	r8,2
80000b10:	f2 07 0d 0a 	divu	r10,r9,r7
80000b14:	58 0b       	cp.w	r11,0
80000b16:	c0 70       	breq	80000b24 <pcl_configure_clocks+0x5c>
          // TBD
        }

        rest = in_cpu_f % in_osc0_f;

        for (div = 1; div < 32; div++)
80000b18:	2f f8       	sub	r8,-1
80000b1a:	18 09       	add	r9,r12
80000b1c:	e0 48 00 20 	cp.w	r8,32
80000b20:	cf 81       	brne	80000b10 <pcl_configure_clocks+0x48>
80000b22:	cb 08       	rjmp	80000c82 <pcl_configure_clocks+0x1ba>
        {
          if ((div * rest) % in_osc0_f == 0)
            break;
        }
        if (div == 32)
80000b24:	e0 48 00 20 	cp.w	r8,32
80000b28:	e0 80 00 ad 	breq	80000c82 <pcl_configure_clocks+0x1ba>
          return FAIL;

        mul = (in_cpu_f * div) / in_osc0_f;
80000b2c:	f0 06 02 4b 	mul	r11,r8,r6
80000b30:	f6 07 0d 0a 	divu	r10,r11,r7

        if (mul > PM_MAX_MUL)
80000b34:	58 fa       	cp.w	r10,15
80000b36:	e0 8b 00 a6 	brhi	80000c82 <pcl_configure_clocks+0x1ba>
          return FAIL;

        // export 2power from PLL div to div2_cpu
        while (!(div % 2))
80000b3a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80000b3e:	c0 30       	breq	80000b44 <pcl_configure_clocks+0x7c>
80000b40:	30 06       	mov	r6,0
80000b42:	c0 78       	rjmp	80000b50 <pcl_configure_clocks+0x88>
80000b44:	30 06       	mov	r6,0
        {
          div /= 2;
80000b46:	a1 98       	lsr	r8,0x1
          div2_cpu++;
80000b48:	2f f6       	sub	r6,-1

        if (mul > PM_MAX_MUL)
          return FAIL;

        // export 2power from PLL div to div2_cpu
        while (!(div % 2))
80000b4a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80000b4e:	cf c0       	breq	80000b46 <pcl_configure_clocks+0x7e>

        // Here we know the mul and div parameter of the PLL config.
        // . Check out if the PLL has a valid in_cpu_f.
        // . Try to have for the PLL frequency (VCO output) the highest possible value
        //   to reduce jitter.
        while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80000b50:	f4 07 02 4b 	mul	r11,r10,r7
80000b54:	f6 03 15 01 	lsl	r3,r11,0x1
80000b58:	e6 08 0d 02 	divu	r2,r3,r8
80000b5c:	e0 6c 1b ff 	mov	r12,7167
80000b60:	ea 1c 0e 4e 	orh	r12,0xe4e
80000b64:	18 32       	cp.w	r2,r12
80000b66:	e0 8b 00 1d 	brhi	80000ba0 <pcl_configure_clocks+0xd8>
        {
          if (2 * mul > PM_MAX_MUL)
80000b6a:	f4 09 15 01 	lsl	r9,r10,0x1
80000b6e:	58 f9       	cp.w	r9,15
80000b70:	e0 88 00 09 	brls	80000b82 <pcl_configure_clocks+0xba>
80000b74:	c1 68       	rjmp	80000ba0 <pcl_configure_clocks+0xd8>
80000b76:	f2 0a 15 01 	lsl	r10,r9,0x1
80000b7a:	58 fa       	cp.w	r10,15
80000b7c:	e0 8b 00 11 	brhi	80000b9e <pcl_configure_clocks+0xd6>
80000b80:	14 99       	mov	r9,r10
            break;
          mul *= 2;
          div2_cpu++;
80000b82:	2f f6       	sub	r6,-1

        // Here we know the mul and div parameter of the PLL config.
        // . Check out if the PLL has a valid in_cpu_f.
        // . Try to have for the PLL frequency (VCO output) the highest possible value
        //   to reduce jitter.
        while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80000b84:	f2 07 02 4b 	mul	r11,r9,r7
80000b88:	f6 03 15 01 	lsl	r3,r11,0x1
80000b8c:	e6 08 0d 02 	divu	r2,r3,r8
80000b90:	e0 6c 1b ff 	mov	r12,7167
80000b94:	ea 1c 0e 4e 	orh	r12,0xe4e
80000b98:	18 32       	cp.w	r2,r12
80000b9a:	fe 98 ff ee 	brls	80000b76 <pcl_configure_clocks+0xae>
80000b9e:	12 9a       	mov	r10,r9
            break;
          mul *= 2;
          div2_cpu++;
        }

        if (div2_cpu != 0)
80000ba0:	58 06       	cp.w	r6,0
80000ba2:	f9 bc 00 00 	moveq	r12,0
        {
          div2_cpu--;
80000ba6:	f7 b6 01 01 	subne	r6,1
80000baa:	f9 bc 01 01 	movne	r12,1
          div2_en = 1;
        }

        pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80000bae:	f0 0c 09 43 	lsl	r3,r8,r12
80000bb2:	f6 03 0d 02 	divu	r2,r11,r3
80000bb6:	04 97       	mov	r7,r2

        // Update real CPU Frequency
        param->cpu_f = pll_freq / (1 << div2_cpu);
80000bb8:	e4 06 0a 49 	lsr	r9,r2,r6
80000bbc:	8b 19       	st.w	r5[0x4],r9
        mul--;

        scif_pll_opt_t opt;

        opt.osc = SCIF_OSC0,     // Sel Osc0 or Osc1
80000bbe:	30 09       	mov	r9,0
80000bc0:	fb 69 00 10 	st.b	sp[16],r9
        opt.lockcount = 16,      // lockcount in main clock for the PLL wait lock
80000bc4:	31 0b       	mov	r11,16
80000bc6:	50 3b       	stdsp	sp[0xc],r11
        opt.div = div,             // DIV=1 in the formula
80000bc8:	50 28       	stdsp	sp[0x8],r8
        opt.mul = mul,             // MUL=7 in the formula
80000bca:	20 1a       	sub	r10,1
80000bcc:	50 1a       	stdsp	sp[0x4],r10
        opt.pll_div2 = div2_en,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
80000bce:	ba ac       	st.b	sp[0x2],r12
        opt.pll_wbwdisable = 0,  //pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
80000bd0:	ba 99       	st.b	sp[0x1],r9
        opt.pll_freq = (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
80000bd2:	e0 69 68 00 	mov	r9,26624
80000bd6:	ea 19 09 89 	orh	r9,0x989
80000bda:	12 32       	cp.w	r2,r9
80000bdc:	f9 b8 03 01 	movlo	r8,1
80000be0:	f9 b8 02 00 	movhs	r8,0
80000be4:	ba 88       	st.b	sp[0x0],r8

        scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
80000be6:	1a 9b       	mov	r11,sp
80000be8:	30 0c       	mov	r12,0
80000bea:	f0 1f 00 2c 	mcall	80000c98 <pcl_configure_clocks+0x1d0>

        /* Enable PLL0 */
        scif_pll_enable(SCIF_PLL0);
80000bee:	30 0c       	mov	r12,0
80000bf0:	f0 1f 00 2b 	mcall	80000c9c <pcl_configure_clocks+0x1d4>

        /* Wait for PLL0 locked */
        scif_wait_for_pll_locked(SCIF_PLL0) ;
80000bf4:	30 0c       	mov	r12,0
80000bf6:	f0 1f 00 2b 	mcall	80000ca0 <pcl_configure_clocks+0x1d8>
80000bfa:	04 98       	mov	r8,r2
80000bfc:	30 04       	mov	r4,0
80000bfe:	c0 78       	rjmp	80000c0c <pcl_configure_clocks+0x144>

        rest = pll_freq;
        while (rest > AVR32_PM_PBA_MAX_FREQ ||
               rest != param->pba_f)
        {
          div2_pba++;
80000c00:	2f f4       	sub	r4,-1
          rest = pll_freq / (1 << div2_pba);
80000c02:	ee 04 0a 48 	lsr	r8,r7,r4
          if (rest < param->pba_f)
80000c06:	6a 29       	ld.w	r9,r5[0x8]
80000c08:	12 38       	cp.w	r8,r9
80000c0a:	c0 b3       	brcs	80000c20 <pcl_configure_clocks+0x158>

        /* Wait for PLL0 locked */
        scif_wait_for_pll_locked(SCIF_PLL0) ;

        rest = pll_freq;
        while (rest > AVR32_PM_PBA_MAX_FREQ ||
80000c0c:	e0 6c 14 80 	mov	r12,5248
80000c10:	ea 1c 03 ef 	orh	r12,0x3ef
80000c14:	18 38       	cp.w	r8,r12
80000c16:	fe 9b ff f5 	brhi	80000c00 <pcl_configure_clocks+0x138>
80000c1a:	6a 29       	ld.w	r9,r5[0x8]
80000c1c:	12 38       	cp.w	r8,r9
80000c1e:	cf 11       	brne	80000c00 <pcl_configure_clocks+0x138>
          if (rest < param->pba_f)
            break;
        }

        // Update real PBA Frequency
        param->pba_f = pll_freq / (1 << div2_pba);
80000c20:	ee 04 0a 47 	lsr	r7,r7,r4
80000c24:	8b 27       	st.w	r5[0x8],r7


        if (div2_cpu)
80000c26:	58 06       	cp.w	r6,0
80000c28:	f9 b8 00 00 	moveq	r8,0
        {
          b_div2_cpu = true;
          div2_cpu--;
80000c2c:	f7 b6 01 01 	subne	r6,1
80000c30:	f9 b8 01 01 	movne	r8,1
        }
        else
          b_div2_cpu = false;

        if (div2_pba)
80000c34:	58 04       	cp.w	r4,0
80000c36:	f9 b7 00 00 	moveq	r7,0
        {
          b_div2_pba = true;
          div2_pba--;
80000c3a:	f7 b4 01 01 	subne	r4,1
80000c3e:	f9 b7 01 01 	movne	r7,1
        }
        else
          b_div2_pba = false;

        if (b_div2_cpu == true )
80000c42:	58 08       	cp.w	r8,0
80000c44:	c0 d0       	breq	80000c5e <pcl_configure_clocks+0x196>
        {
          pm_set_clk_domain_div(PM_CLK_DOMAIN_0, (pm_divratio_t) div2_cpu); // CPU
80000c46:	0c 9b       	mov	r11,r6
80000c48:	30 0c       	mov	r12,0
80000c4a:	f0 1f 00 17 	mcall	80000ca4 <pcl_configure_clocks+0x1dc>
          pm_set_clk_domain_div(PM_CLK_DOMAIN_1, (pm_divratio_t) div2_cpu); // HSB
80000c4e:	0c 9b       	mov	r11,r6
80000c50:	30 1c       	mov	r12,1
80000c52:	f0 1f 00 15 	mcall	80000ca4 <pcl_configure_clocks+0x1dc>
          pm_set_clk_domain_div(PM_CLK_DOMAIN_3, (pm_divratio_t) div2_cpu); // PBB
80000c56:	0c 9b       	mov	r11,r6
80000c58:	30 3c       	mov	r12,3
80000c5a:	f0 1f 00 13 	mcall	80000ca4 <pcl_configure_clocks+0x1dc>
        }
        if (b_div2_pba == true )
80000c5e:	58 07       	cp.w	r7,0
80000c60:	c0 90       	breq	80000c72 <pcl_configure_clocks+0x1aa>
        {
          pm_set_clk_domain_div(PM_CLK_DOMAIN_2, (pm_divratio_t) div2_pba); // PBA
80000c62:	08 9b       	mov	r11,r4
80000c64:	30 2c       	mov	r12,2
80000c66:	f0 1f 00 10 	mcall	80000ca4 <pcl_configure_clocks+0x1dc>
          pm_set_clk_domain_div(PM_CLK_DOMAIN_4, (pm_divratio_t) div2_pba); // PBC
80000c6a:	08 9b       	mov	r11,r4
80000c6c:	30 4c       	mov	r12,4
80000c6e:	f0 1f 00 0e 	mcall	80000ca4 <pcl_configure_clocks+0x1dc>
        }

        // Set Flashc Wait State
        flashc_set_flash_waitstate_and_readmode(param->cpu_f);
80000c72:	6a 1c       	ld.w	r12,r5[0x4]
80000c74:	f0 1f 00 0d 	mcall	80000ca8 <pcl_configure_clocks+0x1e0>

        // Set the main clock source as being PLL0.
        pm_set_mclk_source(PM_CLK_SRC_PLL0);
80000c78:	30 3c       	mov	r12,3
80000c7a:	f0 1f 00 07 	mcall	80000c94 <pcl_configure_clocks+0x1cc>
80000c7e:	30 0c       	mov	r12,0
80000c80:	c0 28       	rjmp	80000c84 <pcl_configure_clocks+0x1bc>
80000c82:	30 1c       	mov	r12,1
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
  #endif
#endif
}
80000c84:	2f bd       	sub	sp,-20
80000c86:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80000c8a:	00 00       	add	r0,r0
80000c8c:	80 00       	ld.sh	r0,r0[0x0]
80000c8e:	0e 24       	rsub	r4,r7
80000c90:	80 00       	ld.sh	r0,r0[0x0]
80000c92:	0d b0       	ld.ub	r0,r6[0x3]
80000c94:	80 00       	ld.sh	r0,r0[0x0]
80000c96:	0a a8       	st.w	r5++,r8
80000c98:	80 00       	ld.sh	r0,r0[0x0]
80000c9a:	0d 2a       	ld.uh	r10,r6++
80000c9c:	80 00       	ld.sh	r0,r0[0x0]
80000c9e:	0c e6       	st.h	--r6,r6
80000ca0:	80 00       	ld.sh	r0,r0[0x0]
80000ca2:	0c c6       	st.b	r6++,r6
80000ca4:	80 00       	ld.sh	r0,r0[0x0]
80000ca6:	0a 5c       	eor	r12,r5
80000ca8:	80 00       	ld.sh	r0,r0[0x0]
80000caa:	0a 00       	add	r0,r5

80000cac <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80000cac:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80000cb0:	fe 7a 08 00 	mov	r10,-63488
80000cb4:	c0 48       	rjmp	80000cbc <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
80000cb6:	20 18       	sub	r8,1
80000cb8:	c0 21       	brne	80000cbc <scif_pclksr_statushigh_wait+0x10>
80000cba:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80000cbc:	74 59       	ld.w	r9,r10[0x14]
80000cbe:	f9 e9 00 09 	and	r9,r12,r9
80000cc2:	cf a0       	breq	80000cb6 <scif_pclksr_statushigh_wait+0xa>
80000cc4:	5e fd       	retal	0

80000cc6 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
80000cc6:	58 0c       	cp.w	r12,0
80000cc8:	c0 81       	brne	80000cd8 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80000cca:	fe 79 08 00 	mov	r9,-63488
80000cce:	72 58       	ld.w	r8,r9[0x14]
80000cd0:	e2 18 00 10 	andl	r8,0x10,COH
80000cd4:	cf d0       	breq	80000cce <scif_wait_for_pll_locked+0x8>
80000cd6:	c0 78       	rjmp	80000ce4 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80000cd8:	fe 79 08 00 	mov	r9,-63488
80000cdc:	72 58       	ld.w	r8,r9[0x14]
80000cde:	e2 18 00 20 	andl	r8,0x20,COH
80000ce2:	cf d0       	breq	80000cdc <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80000ce4:	5e fd       	retal	0

80000ce6 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
80000ce6:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80000ce8:	fa c8 ff f8 	sub	r8,sp,-8
80000cec:	f0 0c 00 29 	add	r9,r8,r12<<0x2
80000cf0:	fe 78 08 00 	mov	r8,-63488
80000cf4:	2f 9c       	sub	r12,-7
80000cf6:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80000cfa:	30 1b       	mov	r11,1
80000cfc:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80000d00:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
80000d04:	e1 ba 00 00 	mfsr	r10,0x0
80000d08:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80000d0a:	f8 0b 15 02 	lsl	r11,r12,0x2
80000d0e:	ea 1b aa 00 	orh	r11,0xaa00
80000d12:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80000d14:	f2 f9 ff f8 	ld.w	r9,r9[-8]
80000d18:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80000d1c:	14 98       	mov	r8,r10
80000d1e:	e6 18 00 01 	andh	r8,0x1,COH
80000d22:	c0 21       	brne	80000d26 <scif_pll_enable+0x40>
80000d24:	d5 03       	csrf	0x10

  return PASS;
}
80000d26:	2f ed       	sub	sp,-8
80000d28:	5e fd       	retal	0

80000d2a <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80000d2a:	eb cd 40 c0 	pushm	r6-r7,lr
80000d2e:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80000d30:	fa c9 ff f8 	sub	r9,sp,-8
80000d34:	f2 0c 00 28 	add	r8,r9,r12<<0x2
80000d38:	fe 79 08 00 	mov	r9,-63488
80000d3c:	2f 9c       	sub	r12,-7
80000d3e:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
80000d42:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
80000d46:	f7 3e 00 10 	ld.ub	lr,r11[16]
80000d4a:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80000d4e:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
80000d52:	17 a7       	ld.ub	r7,r11[0x2]
80000d54:	17 9e       	ld.ub	lr,r11[0x1]
80000d56:	a3 6e       	lsl	lr,0x2
80000d58:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80000d5c:	17 87       	ld.ub	r7,r11[0x0]
80000d5e:	0e 96       	mov	r6,r7
80000d60:	0e 4e       	or	lr,r7
80000d62:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
80000d66:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80000d6a:	76 2e       	ld.w	lr,r11[0x8]
80000d6c:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
80000d70:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
80000d74:	76 1e       	ld.w	lr,r11[0x4]
80000d76:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80000d7a:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80000d7e:	76 3b       	ld.w	r11,r11[0xc]
80000d80:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
80000d84:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
80000d88:	e1 ba 00 00 	mfsr	r10,0x0
80000d8c:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80000d8e:	f8 0b 15 02 	lsl	r11,r12,0x2
80000d92:	ea 1b aa 00 	orh	r11,0xaa00
80000d96:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80000d98:	f0 f8 ff f8 	ld.w	r8,r8[-8]
80000d9c:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80000da0:	14 98       	mov	r8,r10
80000da2:	e6 18 00 01 	andh	r8,0x1,COH
80000da6:	c0 21       	brne	80000daa <scif_pll_setup+0x80>
80000da8:	d5 03       	csrf	0x10

  return PASS;
}
80000daa:	2f ed       	sub	sp,-8
80000dac:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80000db0 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80000db0:	eb cd 40 80 	pushm	r7,lr
80000db4:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80000db6:	fa c8 ff f8 	sub	r8,sp,-8
80000dba:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
80000dbe:	fe 78 08 00 	mov	r8,-63488
80000dc2:	f8 c9 ff f7 	sub	r9,r12,-9
80000dc6:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80000dca:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80000dce:	30 1b       	mov	r11,1
80000dd0:	ef db d2 01 	bfins	r7,r11,0x10,0x1
80000dd4:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
80000dd8:	e1 bb 00 00 	mfsr	r11,0x0
80000ddc:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80000dde:	f2 07 15 02 	lsl	r7,r9,0x2
80000de2:	ea 17 aa 00 	orh	r7,0xaa00
80000de6:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80000de8:	fc fe ff f8 	ld.w	lr,lr[-8]
80000dec:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80000df0:	16 98       	mov	r8,r11
80000df2:	e6 18 00 01 	andh	r8,0x1,COH
80000df6:	c0 21       	brne	80000dfa <scif_enable_osc+0x4a>
80000df8:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80000dfa:	58 0a       	cp.w	r10,0
80000dfc:	c0 e0       	breq	80000e18 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
80000dfe:	58 0c       	cp.w	r12,0
80000e00:	c0 61       	brne	80000e0c <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80000e02:	30 1c       	mov	r12,1
80000e04:	f0 1f 00 07 	mcall	80000e20 <scif_enable_osc+0x70>
80000e08:	c0 80       	breq	80000e18 <scif_enable_osc+0x68>
80000e0a:	c0 58       	rjmp	80000e14 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80000e0c:	30 2c       	mov	r12,2
80000e0e:	f0 1f 00 05 	mcall	80000e20 <scif_enable_osc+0x70>
80000e12:	c0 30       	breq	80000e18 <scif_enable_osc+0x68>
80000e14:	3f fc       	mov	r12,-1
80000e16:	c0 28       	rjmp	80000e1a <scif_enable_osc+0x6a>
80000e18:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80000e1a:	2f ed       	sub	sp,-8
80000e1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e20:	80 00       	ld.sh	r0,r0[0x0]
80000e22:	0c ac       	st.w	r6++,r12

80000e24 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
80000e24:	58 0c       	cp.w	r12,0
80000e26:	c3 41       	brne	80000e8e <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80000e28:	fe 78 08 00 	mov	r8,-63488
80000e2c:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000e2e:	e0 69 84 7f 	mov	r9,33919
80000e32:	ea 19 00 1e 	orh	r9,0x1e
80000e36:	12 3b       	cp.w	r11,r9
80000e38:	e0 8b 00 04 	brhi	80000e40 <scif_configure_osc_crystalmode+0x1c>
80000e3c:	30 0b       	mov	r11,0
80000e3e:	c1 38       	rjmp	80000e64 <scif_configure_osc_crystalmode+0x40>
80000e40:	e0 69 96 7f 	mov	r9,38527
80000e44:	ea 19 00 98 	orh	r9,0x98
80000e48:	12 3b       	cp.w	r11,r9
80000e4a:	e0 8b 00 04 	brhi	80000e52 <scif_configure_osc_crystalmode+0x2e>
80000e4e:	30 1b       	mov	r11,1
80000e50:	c0 a8       	rjmp	80000e64 <scif_configure_osc_crystalmode+0x40>
80000e52:	e0 69 24 00 	mov	r9,9216
80000e56:	ea 19 00 f4 	orh	r9,0xf4
80000e5a:	12 3b       	cp.w	r11,r9
80000e5c:	f9 bb 03 02 	movlo	r11,2
80000e60:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000e64:	30 19       	mov	r9,1
80000e66:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80000e6a:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80000e6e:	e1 ba 00 00 	mfsr	r10,0x0
80000e72:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80000e74:	fe 79 08 00 	mov	r9,-63488
80000e78:	32 4b       	mov	r11,36
80000e7a:	ea 1b aa 00 	orh	r11,0xaa00
80000e7e:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80000e80:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80000e82:	14 98       	mov	r8,r10
80000e84:	e6 18 00 01 	andh	r8,0x1,COH
80000e88:	c3 51       	brne	80000ef2 <scif_configure_osc_crystalmode+0xce>
80000e8a:	d5 03       	csrf	0x10
80000e8c:	c3 38       	rjmp	80000ef2 <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
80000e8e:	fe 78 08 00 	mov	r8,-63488
80000e92:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80000e94:	e0 69 84 7f 	mov	r9,33919
80000e98:	ea 19 00 1e 	orh	r9,0x1e
80000e9c:	12 3b       	cp.w	r11,r9
80000e9e:	e0 8b 00 04 	brhi	80000ea6 <scif_configure_osc_crystalmode+0x82>
80000ea2:	30 0b       	mov	r11,0
80000ea4:	c1 38       	rjmp	80000eca <scif_configure_osc_crystalmode+0xa6>
80000ea6:	e0 69 96 7f 	mov	r9,38527
80000eaa:	ea 19 00 98 	orh	r9,0x98
80000eae:	12 3b       	cp.w	r11,r9
80000eb0:	e0 8b 00 04 	brhi	80000eb8 <scif_configure_osc_crystalmode+0x94>
80000eb4:	30 1b       	mov	r11,1
80000eb6:	c0 a8       	rjmp	80000eca <scif_configure_osc_crystalmode+0xa6>
80000eb8:	e0 69 24 00 	mov	r9,9216
80000ebc:	ea 19 00 f4 	orh	r9,0xf4
80000ec0:	12 3b       	cp.w	r11,r9
80000ec2:	f9 bb 03 02 	movlo	r11,2
80000ec6:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80000eca:	30 19       	mov	r9,1
80000ecc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80000ed0:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80000ed4:	e1 ba 00 00 	mfsr	r10,0x0
80000ed8:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL1);
80000eda:	fe 79 08 00 	mov	r9,-63488
80000ede:	32 8b       	mov	r11,40
80000ee0:	ea 1b aa 00 	orh	r11,0xaa00
80000ee4:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80000ee6:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80000ee8:	14 98       	mov	r8,r10
80000eea:	e6 18 00 01 	andh	r8,0x1,COH
80000eee:	c0 21       	brne	80000ef2 <scif_configure_osc_crystalmode+0xce>
80000ef0:	d5 03       	csrf	0x10
  }

  return PASS;
}
80000ef2:	5e fd       	retal	0

80000ef4 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80000ef4:	76 09       	ld.w	r9,r11[0x0]
80000ef6:	58 29       	cp.w	r9,2
80000ef8:	e0 88 00 03 	brls	80000efe <tc_init_waveform+0xa>
80000efc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80000efe:	76 18       	ld.w	r8,r11[0x4]
80000f00:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80000f04:	af ba       	sbr	r10,0xf
80000f06:	10 9b       	mov	r11,r8
80000f08:	e6 1b c0 00 	andh	r11,0xc000,COH
80000f0c:	16 4a       	or	r10,r11
80000f0e:	10 9b       	mov	r11,r8
80000f10:	e6 1b 30 00 	andh	r11,0x3000,COH
80000f14:	16 4a       	or	r10,r11
80000f16:	10 9b       	mov	r11,r8
80000f18:	e6 1b 0c 00 	andh	r11,0xc00,COH
80000f1c:	16 4a       	or	r10,r11
80000f1e:	10 9b       	mov	r11,r8
80000f20:	e6 1b 03 00 	andh	r11,0x300,COH
80000f24:	16 4a       	or	r10,r11
80000f26:	10 9b       	mov	r11,r8
80000f28:	e6 1b 00 c0 	andh	r11,0xc0,COH
80000f2c:	16 4a       	or	r10,r11
80000f2e:	10 9b       	mov	r11,r8
80000f30:	e6 1b 00 30 	andh	r11,0x30,COH
80000f34:	16 4a       	or	r10,r11
80000f36:	10 9b       	mov	r11,r8
80000f38:	e6 1b 00 0c 	andh	r11,0xc,COH
80000f3c:	16 4a       	or	r10,r11
80000f3e:	10 9b       	mov	r11,r8
80000f40:	e6 1b 00 03 	andh	r11,0x3,COH
80000f44:	16 4a       	or	r10,r11
80000f46:	10 9b       	mov	r11,r8
80000f48:	e2 1b 60 00 	andl	r11,0x6000,COH
80000f4c:	16 4a       	or	r10,r11
80000f4e:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80000f52:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80000f56:	10 9b       	mov	r11,r8
80000f58:	e2 1b 0c 00 	andl	r11,0xc00,COH
80000f5c:	16 4a       	or	r10,r11
80000f5e:	10 9b       	mov	r11,r8
80000f60:	e2 1b 03 00 	andl	r11,0x300,COH
80000f64:	16 4a       	or	r10,r11
80000f66:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80000f6a:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80000f6e:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80000f72:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80000f76:	10 9b       	mov	r11,r8
80000f78:	e2 1b 00 30 	andl	r11,0x30,COH
80000f7c:	16 4a       	or	r10,r11
80000f7e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80000f82:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80000f86:	a5 69       	lsl	r9,0x4
80000f88:	2f f9       	sub	r9,-1
80000f8a:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80000f8e:	5e fd       	retal	0

80000f90 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80000f90:	58 2b       	cp.w	r11,2
80000f92:	e0 88 00 03 	brls	80000f98 <tc_start+0x8>
80000f96:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80000f98:	a7 6b       	lsl	r11,0x6
80000f9a:	16 0c       	add	r12,r11
80000f9c:	30 58       	mov	r8,5
80000f9e:	99 08       	st.w	r12[0x0],r8
80000fa0:	5e fd       	retal	0

80000fa2 <tc_write_ra>:


int tc_write_ra(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80000fa2:	58 2b       	cp.w	r11,2
80000fa4:	e0 88 00 03 	brls	80000faa <tc_write_ra+0x8>
80000fa8:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80000faa:	f6 08 15 04 	lsl	r8,r11,0x4
80000fae:	2f f8       	sub	r8,-1
80000fb0:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80000fb4:	e2 18 80 00 	andl	r8,0x8000,COH
80000fb8:	c0 c0       	breq	80000fd0 <tc_write_ra+0x2e>
    Wr_bitfield(tc->channel[channel].ra, AVR32_TC_RA_MASK, value);
80000fba:	a7 6b       	lsl	r11,0x6
80000fbc:	16 0c       	add	r12,r11
80000fbe:	2e cc       	sub	r12,-20
80000fc0:	78 08       	ld.w	r8,r12[0x0]
80000fc2:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80000fc6:	e0 18 00 00 	andl	r8,0x0
80000fca:	f3 e8 10 08 	or	r8,r9,r8
80000fce:	99 08       	st.w	r12[0x0],r8

  return value;
80000fd0:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80000fd4:	5e fc       	retal	r12

80000fd6 <tc_write_rb>:


int tc_write_rb(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80000fd6:	58 2b       	cp.w	r11,2
80000fd8:	e0 88 00 03 	brls	80000fde <tc_write_rb+0x8>
80000fdc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80000fde:	f6 08 15 04 	lsl	r8,r11,0x4
80000fe2:	2f f8       	sub	r8,-1
80000fe4:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80000fe8:	e2 18 80 00 	andl	r8,0x8000,COH
80000fec:	c0 c0       	breq	80001004 <tc_write_rb+0x2e>
    Wr_bitfield(tc->channel[channel].rb, AVR32_TC_RB_MASK, value);
80000fee:	a7 6b       	lsl	r11,0x6
80000ff0:	16 0c       	add	r12,r11
80000ff2:	2e 8c       	sub	r12,-24
80000ff4:	78 08       	ld.w	r8,r12[0x0]
80000ff6:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80000ffa:	e0 18 00 00 	andl	r8,0x0
80000ffe:	f3 e8 10 08 	or	r8,r9,r8
80001002:	99 08       	st.w	r12[0x0],r8

  return value;
80001004:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80001008:	5e fc       	retal	r12

8000100a <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000100a:	58 2b       	cp.w	r11,2
8000100c:	e0 88 00 03 	brls	80001012 <tc_write_rc+0x8>
80001010:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80001012:	f6 08 15 04 	lsl	r8,r11,0x4
80001016:	2f f8       	sub	r8,-1
80001018:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000101c:	e2 18 80 00 	andl	r8,0x8000,COH
80001020:	c0 c0       	breq	80001038 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80001022:	a7 6b       	lsl	r11,0x6
80001024:	16 0c       	add	r12,r11
80001026:	2e 4c       	sub	r12,-28
80001028:	78 08       	ld.w	r8,r12[0x0]
8000102a:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
8000102e:	e0 18 00 00 	andl	r8,0x0
80001032:	f3 e8 10 08 	or	r8,r9,r8
80001036:	99 08       	st.w	r12[0x0],r8

  return value;
80001038:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
8000103c:	5e fc       	retal	r12
8000103e:	d7 03       	nop

80001040 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80001040:	4a e8       	lddpc	r8,800010f8 <twim_master_interrupt_handler+0xb8>
80001042:	70 08       	ld.w	r8,r8[0x0]
80001044:	70 79       	ld.w	r9,r8[0x1c]
80001046:	4a ea       	lddpc	r10,800010fc <twim_master_interrupt_handler+0xbc>
80001048:	74 0a       	ld.w	r10,r10[0x0]
8000104a:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8000104e:	12 9a       	mov	r10,r9
80001050:	e2 1a 07 00 	andl	r10,0x700,COH
80001054:	c1 40       	breq	8000107c <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80001056:	e2 19 03 00 	andl	r9,0x300,COH
8000105a:	f9 b9 01 fc 	movne	r9,-4
8000105e:	f9 b9 00 fe 	moveq	r9,-2
80001062:	4a 8a       	lddpc	r10,80001100 <twim_master_interrupt_handler+0xc0>
80001064:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80001066:	70 3a       	ld.w	r10,r8[0xc]
80001068:	30 09       	mov	r9,0
8000106a:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
8000106e:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80001070:	3f fa       	mov	r10,-1
80001072:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80001074:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80001076:	4a 48       	lddpc	r8,80001104 <twim_master_interrupt_handler+0xc4>
80001078:	b0 89       	st.b	r8[0x0],r9
8000107a:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8000107c:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80001080:	c1 30       	breq	800010a6 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80001082:	4a 2a       	lddpc	r10,80001108 <twim_master_interrupt_handler+0xc8>
80001084:	70 5b       	ld.w	r11,r8[0x14]
80001086:	74 09       	ld.w	r9,r10[0x0]
80001088:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000108a:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
8000108c:	4a 09       	lddpc	r9,8000110c <twim_master_interrupt_handler+0xcc>
8000108e:	72 0a       	ld.w	r10,r9[0x0]
80001090:	20 1a       	sub	r10,1
80001092:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80001094:	72 09       	ld.w	r9,r9[0x0]
80001096:	58 09       	cp.w	r9,0
80001098:	c2 f1       	brne	800010f6 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000109a:	30 19       	mov	r9,1
8000109c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000109e:	30 09       	mov	r9,0
800010a0:	49 98       	lddpc	r8,80001104 <twim_master_interrupt_handler+0xc4>
800010a2:	b0 89       	st.b	r8[0x0],r9
800010a4:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800010a6:	e2 19 00 02 	andl	r9,0x2,COH
800010aa:	c2 60       	breq	800010f6 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800010ac:	49 99       	lddpc	r9,80001110 <twim_master_interrupt_handler+0xd0>
800010ae:	72 09       	ld.w	r9,r9[0x0]
800010b0:	58 09       	cp.w	r9,0
800010b2:	c0 71       	brne	800010c0 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800010b4:	30 29       	mov	r9,2
800010b6:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800010b8:	30 09       	mov	r9,0
800010ba:	49 38       	lddpc	r8,80001104 <twim_master_interrupt_handler+0xc4>
800010bc:	b0 89       	st.b	r8[0x0],r9
800010be:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800010c0:	49 5a       	lddpc	r10,80001114 <twim_master_interrupt_handler+0xd4>
800010c2:	74 09       	ld.w	r9,r10[0x0]
800010c4:	13 3b       	ld.ub	r11,r9++
800010c6:	91 6b       	st.w	r8[0x18],r11
800010c8:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
800010ca:	49 28       	lddpc	r8,80001110 <twim_master_interrupt_handler+0xd0>
800010cc:	70 09       	ld.w	r9,r8[0x0]
800010ce:	20 19       	sub	r9,1
800010d0:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
800010d2:	70 08       	ld.w	r8,r8[0x0]
800010d4:	58 08       	cp.w	r8,0
800010d6:	c1 01       	brne	800010f6 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800010d8:	48 b8       	lddpc	r8,80001104 <twim_master_interrupt_handler+0xc4>
800010da:	11 88       	ld.ub	r8,r8[0x0]
800010dc:	58 08       	cp.w	r8,0
800010de:	c0 c0       	breq	800010f6 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800010e0:	30 09       	mov	r9,0
800010e2:	48 98       	lddpc	r8,80001104 <twim_master_interrupt_handler+0xc4>
800010e4:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800010e6:	48 d8       	lddpc	r8,80001118 <twim_master_interrupt_handler+0xd8>
800010e8:	70 08       	ld.w	r8,r8[0x0]
800010ea:	70 3a       	ld.w	r10,r8[0xc]
800010ec:	48 99       	lddpc	r9,80001110 <twim_master_interrupt_handler+0xd0>
800010ee:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800010f0:	70 29       	ld.w	r9,r8[0x8]
800010f2:	48 98       	lddpc	r8,80001114 <twim_master_interrupt_handler+0xd4>
800010f4:	91 09       	st.w	r8[0x0],r9
800010f6:	d6 03       	rete
800010f8:	00 00       	add	r0,r0
800010fa:	06 04       	add	r4,r3
800010fc:	00 00       	add	r0,r0
800010fe:	06 18       	sub	r8,r3
80001100:	00 00       	add	r0,r0
80001102:	06 10       	sub	r0,r3
80001104:	00 00       	add	r0,r0
80001106:	06 1c       	sub	r12,r3
80001108:	00 00       	add	r0,r0
8000110a:	06 08       	add	r8,r3
8000110c:	00 00       	add	r0,r0
8000110e:	06 0c       	add	r12,r3
80001110:	00 00       	add	r0,r0
80001112:	06 24       	rsub	r4,r3
80001114:	00 00       	add	r0,r0
80001116:	06 14       	sub	r4,r3
80001118:	00 00       	add	r0,r0
8000111a:	06 20       	rsub	r0,r3

8000111c <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8000111c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80001120:	f4 0b 0d 0a 	divu	r10,r10,r11
80001124:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80001128:	e0 48 00 ff 	cp.w	r8,255
8000112c:	e0 8b 00 04 	brhi	80001134 <twim_set_speed+0x18>
80001130:	30 09       	mov	r9,0
80001132:	c2 18       	rjmp	80001174 <twim_set_speed+0x58>
80001134:	30 09       	mov	r9,0
80001136:	30 16       	mov	r6,1
80001138:	30 7a       	mov	r10,7
8000113a:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
8000113c:	2f f9       	sub	r9,-1
8000113e:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80001140:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80001142:	e0 48 00 ff 	cp.w	r8,255
80001146:	f9 be 0b 01 	movhi	lr,1
8000114a:	f9 be 08 00 	movls	lr,0
8000114e:	f2 0a 18 00 	cp.b	r10,r9
80001152:	ec 0b 17 20 	movhs	r11,r6
80001156:	f9 bb 03 00 	movlo	r11,0
8000115a:	fd eb 00 0b 	and	r11,lr,r11
8000115e:	ee 0b 18 00 	cp.b	r11,r7
80001162:	ce d1       	brne	8000113c <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80001164:	30 7a       	mov	r10,7
80001166:	f4 09 18 00 	cp.b	r9,r10
8000116a:	e0 88 00 05 	brls	80001174 <twim_set_speed+0x58>
8000116e:	3f 8c       	mov	r12,-8
80001170:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80001174:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80001178:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
8000117c:	14 18       	sub	r8,r10
8000117e:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80001182:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80001186:	99 19       	st.w	r12[0x4],r9
80001188:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

8000118c <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
8000118c:	48 38       	lddpc	r8,80001198 <twim_status+0xc>
8000118e:	70 08       	ld.w	r8,r8[0x0]
80001190:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80001192:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80001196:	5e fc       	retal	r12
80001198:	00 00       	add	r0,r0
8000119a:	06 04       	add	r4,r3

8000119c <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000119c:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
800011a0:	e6 18 00 01 	andh	r8,0x1,COH
800011a4:	c0 21       	brne	800011a8 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
800011a6:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800011a8:	3f f8       	mov	r8,-1
800011aa:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
800011ac:	99 b8       	st.w	r12[0x2c],r8
}
800011ae:	5e fc       	retal	r12

800011b0 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800011b0:	eb cd 40 fe 	pushm	r1-r7,lr
800011b4:	18 97       	mov	r7,r12
800011b6:	16 93       	mov	r3,r11
800011b8:	14 95       	mov	r5,r10
800011ba:	12 92       	mov	r2,r9
800011bc:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800011be:	30 14       	mov	r4,1
800011c0:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800011c2:	e0 68 00 80 	mov	r8,128
800011c6:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800011c8:	30 28       	mov	r8,2
800011ca:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800011cc:	49 e6       	lddpc	r6,80001244 <twim_write+0x94>
800011ce:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800011d0:	f0 1f 00 1e 	mcall	80001248 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
800011d4:	49 e8       	lddpc	r8,8000124c <twim_write+0x9c>
800011d6:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800011d8:	49 e8       	lddpc	r8,80001250 <twim_write+0xa0>
800011da:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800011dc:	30 09       	mov	r9,0
800011de:	49 e8       	lddpc	r8,80001254 <twim_write+0xa4>
800011e0:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800011e2:	49 e9       	lddpc	r9,80001258 <twim_write+0xa8>
800011e4:	30 08       	mov	r8,0
800011e6:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800011e8:	6c 08       	ld.w	r8,r6[0x0]
800011ea:	b1 65       	lsl	r5,0x10
800011ec:	e8 15 e0 00 	orl	r5,0xe000
800011f0:	eb e2 10 12 	or	r2,r5,r2<<0x1
800011f4:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800011f8:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800011fa:	49 9a       	lddpc	r10,8000125c <twim_write+0xac>
800011fc:	e0 6b 03 02 	mov	r11,770
80001200:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80001202:	74 0a       	ld.w	r10,r10[0x0]
80001204:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80001206:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80001208:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000120a:	72 08       	ld.w	r8,r9[0x0]
8000120c:	58 08       	cp.w	r8,0
8000120e:	c0 80       	breq	8000121e <twim_write+0x6e>
80001210:	c0 b8       	rjmp	80001226 <twim_write+0x76>
		cpu_relax();
80001212:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80001216:	6c 08       	ld.w	r8,r6[0x0]
80001218:	58 08       	cp.w	r8,0
8000121a:	c0 30       	breq	80001220 <twim_write+0x70>
8000121c:	c0 58       	rjmp	80001226 <twim_write+0x76>
8000121e:	48 f6       	lddpc	r6,80001258 <twim_write+0xa8>
80001220:	f0 1f 00 10 	mcall	80001260 <twim_write+0xb0>
80001224:	cf 70       	breq	80001212 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80001226:	30 28       	mov	r8,2
80001228:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000122a:	48 c8       	lddpc	r8,80001258 <twim_write+0xa8>
8000122c:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000122e:	5b c8       	cp.w	r8,-4
80001230:	c0 70       	breq	8000123e <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80001232:	48 a8       	lddpc	r8,80001258 <twim_write+0xa8>
80001234:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80001236:	5b e8       	cp.w	r8,-2
80001238:	c0 30       	breq	8000123e <twim_write+0x8e>
8000123a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000123e:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80001242:	00 00       	add	r0,r0
80001244:	00 00       	add	r0,r0
80001246:	06 04       	add	r4,r3
80001248:	80 00       	ld.sh	r0,r0[0x0]
8000124a:	11 9c       	ld.ub	r12,r8[0x1]
8000124c:	00 00       	add	r0,r0
8000124e:	06 14       	sub	r4,r3
80001250:	00 00       	add	r0,r0
80001252:	06 24       	rsub	r4,r3
80001254:	00 00       	add	r0,r0
80001256:	06 1c       	sub	r12,r3
80001258:	00 00       	add	r0,r0
8000125a:	06 10       	sub	r0,r3
8000125c:	00 00       	add	r0,r0
8000125e:	06 18       	sub	r8,r3
80001260:	80 00       	ld.sh	r0,r0[0x0]
80001262:	11 8c       	ld.ub	r12,r8[0x0]

80001264 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80001264:	d4 01       	pushm	lr
80001266:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80001268:	30 08       	mov	r8,0
8000126a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000126c:	30 08       	mov	r8,0
8000126e:	16 99       	mov	r9,r11
80001270:	10 9a       	mov	r10,r8
80001272:	1a 9b       	mov	r11,sp
80001274:	f0 1f 00 02 	mcall	8000127c <twim_probe+0x18>
}
80001278:	2f fd       	sub	sp,-4
8000127a:	d8 02       	popm	pc
8000127c:	80 00       	ld.sh	r0,r0[0x0]
8000127e:	11 b0       	ld.ub	r0,r8[0x3]

80001280 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80001280:	eb cd 40 c0 	pushm	r6-r7,lr
80001284:	18 96       	mov	r6,r12
80001286:	16 97       	mov	r7,r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80001288:	30 18       	mov	r8,1
8000128a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000128c:	e0 68 00 80 	mov	r8,128
80001290:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80001292:	30 28       	mov	r8,2
80001294:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80001296:	4a 98       	lddpc	r8,80001338 <twim_write_packet+0xb8>
80001298:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000129a:	f0 1f 00 29 	mcall	8000133c <twim_write_packet+0xbc>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000129e:	30 08       	mov	r8,0
800012a0:	4a 89       	lddpc	r9,80001340 <twim_write_packet+0xc0>
800012a2:	93 08       	st.w	r9[0x0],r8
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800012a4:	e0 6a 07 02 	mov	r10,1794
800012a8:	4a 79       	lddpc	r9,80001344 <twim_write_packet+0xc4>
800012aa:	93 0a       	st.w	r9[0x0],r10
	// Set next transfer to false
	twim_next = false;
800012ac:	4a 79       	lddpc	r9,80001348 <twim_write_packet+0xc8>
800012ae:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
800012b0:	0f f8       	ld.ub	r8,r7[0x7]
800012b2:	58 08       	cp.w	r8,0
800012b4:	c0 d0       	breq	800012ce <twim_write_packet+0x4e>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800012b6:	ee ca ff fc 	sub	r10,r7,-4
800012ba:	4a 59       	lddpc	r9,8000134c <twim_write_packet+0xcc>
800012bc:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800012be:	4a 59       	lddpc	r9,80001350 <twim_write_packet+0xd0>
800012c0:	93 08       	st.w	r9[0x0],r8
		// set next transfer to true
		twim_next = true;
800012c2:	30 1a       	mov	r10,1
800012c4:	4a 19       	lddpc	r9,80001348 <twim_write_packet+0xc8>
800012c6:	b2 8a       	st.b	r9[0x0],r10
		// Set the number of bytes & address for next transfer
		twim_package = package;
800012c8:	4a 39       	lddpc	r9,80001354 <twim_write_packet+0xd4>
800012ca:	93 07       	st.w	r9[0x0],r7
800012cc:	c0 78       	rjmp	800012da <twim_write_packet+0x5a>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
800012ce:	6e 2a       	ld.w	r10,r7[0x8]
800012d0:	49 f9       	lddpc	r9,8000134c <twim_write_packet+0xcc>
800012d2:	93 0a       	st.w	r9[0x0],r10
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
800012d4:	6e 3a       	ld.w	r10,r7[0xc]
800012d6:	49 f9       	lddpc	r9,80001350 <twim_write_packet+0xd0>
800012d8:	93 0a       	st.w	r9[0x0],r10
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800012da:	6e 09       	ld.w	r9,r7[0x0]
800012dc:	a1 79       	lsl	r9,0x1
800012de:	e8 19 e0 00 	orl	r9,0xe000
800012e2:	6e 3a       	ld.w	r10,r7[0xc]
800012e4:	14 08       	add	r8,r10
800012e6:	f3 e8 11 08 	or	r8,r9,r8<<0x10
800012ea:	8d 38       	st.w	r6[0xc],r8
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800012ec:	49 38       	lddpc	r8,80001338 <twim_write_packet+0xb8>
800012ee:	70 08       	ld.w	r8,r8[0x0]
800012f0:	49 59       	lddpc	r9,80001344 <twim_write_packet+0xc4>
800012f2:	72 09       	ld.w	r9,r9[0x0]
800012f4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800012f6:	30 19       	mov	r9,1
800012f8:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800012fa:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800012fc:	49 18       	lddpc	r8,80001340 <twim_write_packet+0xc0>
800012fe:	70 08       	ld.w	r8,r8[0x0]
80001300:	58 08       	cp.w	r8,0
80001302:	c0 80       	breq	80001312 <twim_write_packet+0x92>
80001304:	c0 b8       	rjmp	8000131a <twim_write_packet+0x9a>
		cpu_relax();
80001306:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000130a:	6e 08       	ld.w	r8,r7[0x0]
8000130c:	58 08       	cp.w	r8,0
8000130e:	c0 30       	breq	80001314 <twim_write_packet+0x94>
80001310:	c0 58       	rjmp	8000131a <twim_write_packet+0x9a>
80001312:	48 c7       	lddpc	r7,80001340 <twim_write_packet+0xc0>
80001314:	f0 1f 00 11 	mcall	80001358 <twim_write_packet+0xd8>
80001318:	cf 70       	breq	80001306 <twim_write_packet+0x86>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000131a:	30 28       	mov	r8,2
8000131c:	8d 08       	st.w	r6[0x0],r8
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000131e:	48 98       	lddpc	r8,80001340 <twim_write_packet+0xc0>
80001320:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80001322:	5b c8       	cp.w	r8,-4
80001324:	c0 70       	breq	80001332 <twim_write_packet+0xb2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80001326:	48 78       	lddpc	r8,80001340 <twim_write_packet+0xc0>
80001328:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000132a:	5b e8       	cp.w	r8,-2
8000132c:	c0 30       	breq	80001332 <twim_write_packet+0xb2>
8000132e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80001332:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80001336:	00 00       	add	r0,r0
80001338:	00 00       	add	r0,r0
8000133a:	06 04       	add	r4,r3
8000133c:	80 00       	ld.sh	r0,r0[0x0]
8000133e:	11 9c       	ld.ub	r12,r8[0x1]
80001340:	00 00       	add	r0,r0
80001342:	06 10       	sub	r0,r3
80001344:	00 00       	add	r0,r0
80001346:	06 18       	sub	r8,r3
80001348:	00 00       	add	r0,r0
8000134a:	06 1c       	sub	r12,r3
8000134c:	00 00       	add	r0,r0
8000134e:	06 14       	sub	r4,r3
80001350:	00 00       	add	r0,r0
80001352:	06 24       	rsub	r4,r3
80001354:	00 00       	add	r0,r0
80001356:	06 20       	rsub	r0,r3
80001358:	80 00       	ld.sh	r0,r0[0x0]
8000135a:	11 8c       	ld.ub	r12,r8[0x0]

8000135c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000135c:	eb cd 40 c0 	pushm	r6-r7,lr
80001360:	18 96       	mov	r6,r12
80001362:	16 97       	mov	r7,r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80001364:	30 28       	mov	r8,2
80001366:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80001368:	4b 78       	lddpc	r8,80001444 <twim_read_packet+0xe8>
8000136a:	91 0c       	st.w	r8[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000136c:	f0 1f 00 37 	mcall	80001448 <twim_read_packet+0xec>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80001370:	6e 29       	ld.w	r9,r7[0x8]
80001372:	4b 78       	lddpc	r8,8000144c <twim_read_packet+0xf0>
80001374:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80001376:	6e 39       	ld.w	r9,r7[0xc]
80001378:	4b 68       	lddpc	r8,80001450 <twim_read_packet+0xf4>
8000137a:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8000137c:	30 08       	mov	r8,0
8000137e:	4b 6a       	lddpc	r10,80001454 <twim_read_packet+0xf8>
80001380:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80001382:	30 0b       	mov	r11,0
80001384:	4b 5a       	lddpc	r10,80001458 <twim_read_packet+0xfc>
80001386:	95 0b       	st.w	r10[0x0],r11
	//check if internal address access is performed
	if (package->addr_length) {
80001388:	0f fa       	ld.ub	r10,r7[0x7]
8000138a:	f0 0a 18 00 	cp.b	r10,r8
8000138e:	c2 50       	breq	800013d8 <twim_read_packet+0x7c>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80001390:	4a d8       	lddpc	r8,80001444 <twim_read_packet+0xe8>
80001392:	70 08       	ld.w	r8,r8[0x0]
80001394:	30 19       	mov	r9,1
80001396:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80001398:	e0 69 00 80 	mov	r9,128
8000139c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8000139e:	30 29       	mov	r9,2
800013a0:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800013a2:	ee ca ff fc 	sub	r10,r7,-4
800013a6:	4a e9       	lddpc	r9,8000145c <twim_read_packet+0x100>
800013a8:	93 0a       	st.w	r9[0x0],r10
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800013aa:	0f f9       	ld.ub	r9,r7[0x7]
800013ac:	4a da       	lddpc	r10,80001460 <twim_read_packet+0x104>
800013ae:	95 09       	st.w	r10[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
800013b0:	e0 6b 07 03 	mov	r11,1795
800013b4:	4a ca       	lddpc	r10,80001464 <twim_read_packet+0x108>
800013b6:	95 0b       	st.w	r10[0x0],r11
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800013b8:	6e 0a       	ld.w	r10,r7[0x0]
800013ba:	a1 7a       	lsl	r10,0x1
800013bc:	e8 1a a0 00 	orl	r10,0xa000
800013c0:	f5 e9 11 09 	or	r9,r10,r9<<0x10
800013c4:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
800013c6:	6e 0a       	ld.w	r10,r7[0x0]
800013c8:	6e 39       	ld.w	r9,r7[0xc]
800013ca:	b1 69       	lsl	r9,0x10
800013cc:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800013d0:	e8 19 e0 01 	orl	r9,0xe001
800013d4:	91 49       	st.w	r8[0x10],r9
800013d6:	c1 18       	rjmp	800013f8 <twim_read_packet+0x9c>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800013d8:	30 0a       	mov	r10,0
800013da:	4a 28       	lddpc	r8,80001460 <twim_read_packet+0x104>
800013dc:	91 0a       	st.w	r8[0x0],r10
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800013de:	e0 6a 07 01 	mov	r10,1793
800013e2:	4a 18       	lddpc	r8,80001464 <twim_read_packet+0x108>
800013e4:	91 0a       	st.w	r8[0x0],r10
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800013e6:	49 88       	lddpc	r8,80001444 <twim_read_packet+0xe8>
800013e8:	70 08       	ld.w	r8,r8[0x0]
800013ea:	6e 0a       	ld.w	r10,r7[0x0]
800013ec:	b1 69       	lsl	r9,0x10
800013ee:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800013f2:	e8 19 e0 01 	orl	r9,0xe001
800013f6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800013f8:	49 38       	lddpc	r8,80001444 <twim_read_packet+0xe8>
800013fa:	70 08       	ld.w	r8,r8[0x0]
800013fc:	49 a9       	lddpc	r9,80001464 <twim_read_packet+0x108>
800013fe:	72 09       	ld.w	r9,r9[0x0]
80001400:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80001402:	30 18       	mov	r8,1
80001404:	8d 08       	st.w	r6[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80001406:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80001408:	49 48       	lddpc	r8,80001458 <twim_read_packet+0xfc>
8000140a:	70 08       	ld.w	r8,r8[0x0]
8000140c:	58 08       	cp.w	r8,0
8000140e:	c0 80       	breq	8000141e <twim_read_packet+0xc2>
80001410:	c0 b8       	rjmp	80001426 <twim_read_packet+0xca>
		cpu_relax();
80001412:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80001416:	6e 08       	ld.w	r8,r7[0x0]
80001418:	58 08       	cp.w	r8,0
8000141a:	c0 30       	breq	80001420 <twim_read_packet+0xc4>
8000141c:	c0 58       	rjmp	80001426 <twim_read_packet+0xca>
8000141e:	48 f7       	lddpc	r7,80001458 <twim_read_packet+0xfc>
80001420:	f0 1f 00 12 	mcall	80001468 <twim_read_packet+0x10c>
80001424:	cf 70       	breq	80001412 <twim_read_packet+0xb6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80001426:	30 28       	mov	r8,2
80001428:	8d 08       	st.w	r6[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000142a:	48 c8       	lddpc	r8,80001458 <twim_read_packet+0xfc>
8000142c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000142e:	5b c8       	cp.w	r8,-4
80001430:	c0 70       	breq	8000143e <twim_read_packet+0xe2>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80001432:	48 a8       	lddpc	r8,80001458 <twim_read_packet+0xfc>
80001434:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80001436:	5b e8       	cp.w	r8,-2
80001438:	c0 30       	breq	8000143e <twim_read_packet+0xe2>
8000143a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000143e:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80001442:	00 00       	add	r0,r0
80001444:	00 00       	add	r0,r0
80001446:	06 04       	add	r4,r3
80001448:	80 00       	ld.sh	r0,r0[0x0]
8000144a:	11 9c       	ld.ub	r12,r8[0x1]
8000144c:	00 00       	add	r0,r0
8000144e:	06 08       	add	r8,r3
80001450:	00 00       	add	r0,r0
80001452:	06 0c       	add	r12,r3
80001454:	00 00       	add	r0,r0
80001456:	06 1c       	sub	r12,r3
80001458:	00 00       	add	r0,r0
8000145a:	06 10       	sub	r0,r3
8000145c:	00 00       	add	r0,r0
8000145e:	06 14       	sub	r4,r3
80001460:	00 00       	add	r0,r0
80001462:	06 24       	rsub	r4,r3
80001464:	00 00       	add	r0,r0
80001466:	06 18       	sub	r8,r3
80001468:	80 00       	ld.sh	r0,r0[0x0]
8000146a:	11 8c       	ld.ub	r12,r8[0x0]

8000146c <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8000146c:	eb cd 40 e0 	pushm	r5-r7,lr
80001470:	18 97       	mov	r7,r12
80001472:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80001474:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80001478:	30 0a       	mov	r10,0
8000147a:	4a 69       	lddpc	r9,80001510 <twim_master_init+0xa4>
8000147c:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000147e:	e6 18 00 01 	andh	r8,0x1,COH
80001482:	c0 b1       	brne	80001498 <twim_master_init+0x2c>
		cpu_irq_disable ();
80001484:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80001486:	3f f8       	mov	r8,-1
80001488:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000148a:	30 18       	mov	r8,1
8000148c:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000148e:	e0 68 00 80 	mov	r8,128
80001492:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80001494:	d5 03       	csrf	0x10
80001496:	c0 88       	rjmp	800014a6 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80001498:	3f f8       	mov	r8,-1
8000149a:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000149c:	30 18       	mov	r8,1
8000149e:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800014a0:	e0 68 00 80 	mov	r8,128
800014a4:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
800014a6:	3f f8       	mov	r8,-1
800014a8:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800014aa:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800014ae:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
800014b0:	30 1a       	mov	r10,1
800014b2:	e0 6b 03 20 	mov	r11,800
800014b6:	49 8c       	lddpc	r12,80001514 <twim_master_init+0xa8>
800014b8:	f0 1f 00 18 	mcall	80001518 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800014bc:	e6 16 00 01 	andh	r6,0x1,COH
800014c0:	c0 21       	brne	800014c4 <twim_master_init+0x58>
      cpu_irq_enable();
800014c2:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800014c4:	eb 39 00 0c 	ld.ub	r9,r5[12]
800014c8:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800014ca:	f0 09 18 00 	cp.b	r9,r8
800014ce:	f9 b8 01 10 	movne	r8,16
800014d2:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800014d6:	f9 b8 01 ff 	movne	r8,-1
800014da:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800014de:	6a 0a       	ld.w	r10,r5[0x0]
800014e0:	6a 1b       	ld.w	r11,r5[0x4]
800014e2:	0e 9c       	mov	r12,r7
800014e4:	f0 1f 00 0e 	mcall	8000151c <twim_master_init+0xb0>
800014e8:	5b 8c       	cp.w	r12,-8
800014ea:	c1 00       	breq	8000150a <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800014ec:	6a 2b       	ld.w	r11,r5[0x8]
800014ee:	0e 9c       	mov	r12,r7
800014f0:	f0 1f 00 0c 	mcall	80001520 <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800014f4:	48 78       	lddpc	r8,80001510 <twim_master_init+0xa4>
800014f6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800014f8:	5b c8       	cp.w	r8,-4
800014fa:	c0 70       	breq	80001508 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800014fc:	48 58       	lddpc	r8,80001510 <twim_master_init+0xa4>
800014fe:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80001500:	5b e8       	cp.w	r8,-2
80001502:	c0 30       	breq	80001508 <twim_master_init+0x9c>
80001504:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80001508:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
8000150a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000150e:	00 00       	add	r0,r0
80001510:	00 00       	add	r0,r0
80001512:	06 10       	sub	r0,r3
80001514:	80 00       	ld.sh	r0,r0[0x0]
80001516:	10 40       	or	r0,r8
80001518:	80 00       	ld.sh	r0,r0[0x0]
8000151a:	19 f0       	ld.ub	r0,r12[0x7]
8000151c:	80 00       	ld.sh	r0,r0[0x0]
8000151e:	11 1c       	ld.sh	r12,r8++
80001520:	80 00       	ld.sh	r0,r0[0x0]
80001522:	12 64       	and	r4,r9

80001524 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80001524:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80001526:	f6 08 15 04 	lsl	r8,r11,0x4
8000152a:	14 38       	cp.w	r8,r10
8000152c:	f9 b8 08 10 	movls	r8,16
80001530:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80001534:	f0 0b 02 4b 	mul	r11,r8,r11
80001538:	f6 09 16 01 	lsr	r9,r11,0x1
8000153c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80001540:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80001544:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80001548:	f2 cb 00 01 	sub	r11,r9,1
8000154c:	e0 4b ff fe 	cp.w	r11,65534
80001550:	e0 88 00 03 	brls	80001556 <usart_set_async_baudrate+0x32>
80001554:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80001556:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80001558:	e8 6e 00 00 	mov	lr,524288
8000155c:	59 08       	cp.w	r8,16
8000155e:	fc 08 17 10 	movne	r8,lr
80001562:	f9 b8 00 00 	moveq	r8,0
80001566:	e4 1b ff f7 	andh	r11,0xfff7
8000156a:	e0 1b fe cf 	andl	r11,0xfecf
8000156e:	16 48       	or	r8,r11
80001570:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80001572:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80001576:	f3 ea 11 09 	or	r9,r9,r10<<0x10
8000157a:	99 89       	st.w	r12[0x20],r9
8000157c:	d8 0a       	popm	pc,r12=0

8000157e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8000157e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80001580:	e2 18 00 02 	andl	r8,0x2,COH
80001584:	c0 31       	brne	8000158a <usart_write_char+0xc>
80001586:	30 2c       	mov	r12,2
80001588:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000158a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
8000158e:	99 7b       	st.w	r12[0x1c],r11
80001590:	5e fd       	retal	0

80001592 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80001592:	78 58       	ld.w	r8,r12[0x14]
80001594:	e2 18 00 e0 	andl	r8,0xe0,COH
80001598:	c0 30       	breq	8000159e <usart_read_char+0xc>
8000159a:	30 4c       	mov	r12,4
8000159c:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8000159e:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
800015a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800015a4:	c0 31       	brne	800015aa <usart_read_char+0x18>
800015a6:	30 3c       	mov	r12,3
800015a8:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
800015aa:	78 68       	ld.w	r8,r12[0x18]
800015ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800015b0:	97 08       	st.w	r11[0x0],r8
800015b2:	5e fd       	retal	0

800015b4 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
800015b4:	eb cd 40 c0 	pushm	r6-r7,lr
800015b8:	20 1d       	sub	sp,4
800015ba:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
800015bc:	1a 97       	mov	r7,sp
800015be:	1a 9b       	mov	r11,sp
800015c0:	0c 9c       	mov	r12,r6
800015c2:	f0 1f 00 07 	mcall	800015dc <usart_getchar+0x28>
800015c6:	58 3c       	cp.w	r12,3
800015c8:	cf b0       	breq	800015be <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
800015ca:	58 4c       	cp.w	r12,4
800015cc:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
800015d0:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
800015d4:	2f fd       	sub	sp,-4
800015d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800015da:	00 00       	add	r0,r0
800015dc:	80 00       	ld.sh	r0,r0[0x0]
800015de:	15 92       	ld.ub	r2,r10[0x1]

800015e0 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800015e0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800015e4:	e6 18 00 01 	andh	r8,0x1,COH
800015e8:	c0 71       	brne	800015f6 <usart_reset+0x16>
800015ea:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800015ec:	3f f8       	mov	r8,-1
800015ee:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800015f0:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800015f2:	d5 03       	csrf	0x10
800015f4:	c0 48       	rjmp	800015fc <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800015f6:	3f f8       	mov	r8,-1
800015f8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800015fa:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800015fc:	30 08       	mov	r8,0
800015fe:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80001600:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80001602:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80001604:	ea 68 61 0c 	mov	r8,680204
80001608:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000160a:	5e fc       	retal	r12

8000160c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000160c:	eb cd 40 e0 	pushm	r5-r7,lr
80001610:	18 96       	mov	r6,r12
80001612:	16 97       	mov	r7,r11
80001614:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80001616:	f0 1f 00 2f 	mcall	800016d0 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000161a:	58 07       	cp.w	r7,0
8000161c:	c5 80       	breq	800016cc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
8000161e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80001620:	30 49       	mov	r9,4
80001622:	f2 08 18 00 	cp.b	r8,r9
80001626:	e0 88 00 53 	brls	800016cc <usart_init_rs232+0xc0>
8000162a:	30 99       	mov	r9,9
8000162c:	f2 08 18 00 	cp.b	r8,r9
80001630:	e0 8b 00 4e 	brhi	800016cc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80001634:	0f d9       	ld.ub	r9,r7[0x5]
80001636:	30 78       	mov	r8,7
80001638:	f0 09 18 00 	cp.b	r9,r8
8000163c:	e0 8b 00 48 	brhi	800016cc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80001640:	8e 39       	ld.sh	r9,r7[0x6]
80001642:	e0 68 01 01 	mov	r8,257
80001646:	f0 09 19 00 	cp.h	r9,r8
8000164a:	e0 8b 00 41 	brhi	800016cc <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
8000164e:	ef 39 00 08 	ld.ub	r9,r7[8]
80001652:	30 38       	mov	r8,3
80001654:	f0 09 18 00 	cp.b	r9,r8
80001658:	e0 8b 00 3a 	brhi	800016cc <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000165c:	0a 9a       	mov	r10,r5
8000165e:	6e 0b       	ld.w	r11,r7[0x0]
80001660:	0c 9c       	mov	r12,r6
80001662:	f0 1f 00 1d 	mcall	800016d4 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80001666:	58 1c       	cp.w	r12,1
80001668:	c3 20       	breq	800016cc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000166a:	0f c8       	ld.ub	r8,r7[0x4]
8000166c:	30 99       	mov	r9,9
8000166e:	f2 08 18 00 	cp.b	r8,r9
80001672:	c0 51       	brne	8000167c <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80001674:	6c 18       	ld.w	r8,r6[0x4]
80001676:	b1 b8       	sbr	r8,0x11
80001678:	8d 18       	st.w	r6[0x4],r8
8000167a:	c0 68       	rjmp	80001686 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000167c:	6c 19       	ld.w	r9,r6[0x4]
8000167e:	20 58       	sub	r8,5
80001680:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80001684:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80001686:	6c 19       	ld.w	r9,r6[0x4]
80001688:	ef 3a 00 08 	ld.ub	r10,r7[8]
8000168c:	0f d8       	ld.ub	r8,r7[0x5]
8000168e:	a9 78       	lsl	r8,0x9
80001690:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80001694:	12 48       	or	r8,r9
80001696:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80001698:	8e 38       	ld.sh	r8,r7[0x6]
8000169a:	30 29       	mov	r9,2
8000169c:	f2 08 19 00 	cp.h	r8,r9
800016a0:	e0 88 00 09 	brls	800016b2 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800016a4:	6c 18       	ld.w	r8,r6[0x4]
800016a6:	ad b8       	sbr	r8,0xd
800016a8:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800016aa:	8e b8       	ld.uh	r8,r7[0x6]
800016ac:	20 28       	sub	r8,2
800016ae:	8d a8       	st.w	r6[0x28],r8
800016b0:	c0 68       	rjmp	800016bc <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800016b2:	6c 19       	ld.w	r9,r6[0x4]
800016b4:	5c 78       	castu.h	r8
800016b6:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800016ba:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800016bc:	6c 18       	ld.w	r8,r6[0x4]
800016be:	e0 18 ff f0 	andl	r8,0xfff0
800016c2:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800016c4:	35 08       	mov	r8,80
800016c6:	8d 08       	st.w	r6[0x0],r8
800016c8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800016cc:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800016d0:	80 00       	ld.sh	r0,r0[0x0]
800016d2:	15 e0       	ld.ub	r0,r10[0x6]
800016d4:	80 00       	ld.sh	r0,r0[0x0]
800016d6:	15 24       	ld.uh	r4,r10++

800016d8 <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800016d8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800016dc:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800016de:	fe 78 08 00 	mov	r8,-63488
800016e2:	32 4a       	mov	r10,36
800016e4:	ea 1a aa 00 	orh	r10,0xaa00
800016e8:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
800016ea:	e0 7a 0c 07 	mov	r10,68615
800016ee:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800016f0:	12 98       	mov	r8,r9
800016f2:	e6 18 00 01 	andh	r8,0x1,COH
800016f6:	c0 21       	brne	800016fa <osc_priv_enable_osc0+0x22>
      cpu_irq_enable();
800016f8:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
800016fa:	5e fc       	retal	r12

800016fc <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800016fc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80001700:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80001702:	fe 78 04 00 	mov	r8,-64512
80001706:	fc 1a aa 00 	movh	r10,0xaa00
8000170a:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
8000170e:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80001710:	12 98       	mov	r8,r9
80001712:	e6 18 00 01 	andh	r8,0x1,COH
80001716:	c0 21       	brne	8000171a <sysclk_set_source+0x1e>
      cpu_irq_enable();
80001718:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000171a:	5e fc       	retal	r12

8000171c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000171c:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000171e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80001722:	d3 03       	ssrf	0x10
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80001724:	a3 6c       	lsl	r12,0x2
80001726:	fe 7a 04 20 	mov	r10,-64480
8000172a:	f8 0a 00 08 	add	r8,r12,r10
8000172e:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
80001730:	30 1e       	mov	lr,1
80001732:	fc 0b 09 4b 	lsl	r11,lr,r11
80001736:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80001738:	32 0a       	mov	r10,32
8000173a:	ea 1a aa 00 	orh	r10,0xaa00
8000173e:	14 0c       	add	r12,r10
80001740:	fe 7a 04 00 	mov	r10,-64512
80001744:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80001748:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000174a:	12 98       	mov	r8,r9
8000174c:	e6 18 00 01 	andh	r8,0x1,COH
80001750:	c0 21       	brne	80001754 <sysclk_priv_enable_module+0x38>
      cpu_irq_enable();
80001752:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80001754:	d8 02       	popm	pc
80001756:	d7 03       	nop

80001758 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80001758:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8000175a:	f0 1f 00 0a 	mcall	80001780 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8000175e:	fe 78 08 00 	mov	r8,-63488
80001762:	70 59       	ld.w	r9,r8[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80001764:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80001768:	cf d0       	breq	80001762 <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
8000176a:	e0 6c 24 00 	mov	r12,9216
8000176e:	ea 1c 00 f4 	orh	r12,0xf4
80001772:	f0 1f 00 05 	mcall	80001784 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
80001776:	30 1c       	mov	r12,1
80001778:	f0 1f 00 04 	mcall	80001788 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000177c:	d8 02       	popm	pc
8000177e:	00 00       	add	r0,r0
80001780:	80 00       	ld.sh	r0,r0[0x0]
80001782:	16 d8       	st.w	--r11,r8
80001784:	80 00       	ld.sh	r0,r0[0x0]
80001786:	09 78       	ld.ub	r8,--r4
80001788:	80 00       	ld.sh	r0,r0[0x0]
8000178a:	16 fc       	st.b	--r11,r12

8000178c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8000178c:	d4 01       	pushm	lr
#  undef AT45DBX_ENABLE_NPCS_PIN

	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000178e:	30 4b       	mov	r11,4
80001790:	49 4c       	lddpc	r12,800017e0 <board_init+0x54>
80001792:	f0 1f 00 15 	mcall	800017e4 <board_init+0x58>
// #  undef SD_MMC_CONFIGURE_CD_WP_PIN
// 	
// #endif
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80001796:	30 3b       	mov	r11,3
80001798:	30 8c       	mov	r12,8
8000179a:	f0 1f 00 14 	mcall	800017e8 <board_init+0x5c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000179e:	30 3b       	mov	r11,3
800017a0:	37 7c       	mov	r12,119
800017a2:	f0 1f 00 12 	mcall	800017e8 <board_init+0x5c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800017a6:	30 3b       	mov	r11,3
800017a8:	34 dc       	mov	r12,77
800017aa:	f0 1f 00 10 	mcall	800017e8 <board_init+0x5c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800017ae:	30 3b       	mov	r11,3
800017b0:	37 6c       	mov	r12,118
800017b2:	f0 1f 00 0e 	mcall	800017e8 <board_init+0x5c>

	// Configure the pin connected to the button 0 and 1 button as input.
	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
800017b6:	30 0b       	mov	r11,0
800017b8:	30 ec       	mov	r12,14
800017ba:	f0 1f 00 0c 	mcall	800017e8 <board_init+0x5c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
800017be:	30 0b       	mov	r11,0
800017c0:	31 dc       	mov	r12,29
800017c2:	f0 1f 00 0a 	mcall	800017e8 <board_init+0x5c>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION},
		{USART_TXD_PIN, USART_TXD_FUNCTION},
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800017c6:	30 2b       	mov	r11,2
800017c8:	48 9c       	lddpc	r12,800017ec <board_init+0x60>
800017ca:	f0 1f 00 07 	mcall	800017e4 <board_init+0x58>
	{
	{72, 4},
	{73, 4},
	};
		
	gpio_enable_module(USART_GPIO_MAP,
800017ce:	30 2b       	mov	r11,2
800017d0:	48 8c       	lddpc	r12,800017f0 <board_init+0x64>
800017d2:	f0 1f 00 05 	mcall	800017e4 <board_init+0x58>
		{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION},
		{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800017d6:	30 2b       	mov	r11,2
800017d8:	48 7c       	lddpc	r12,800017f4 <board_init+0x68>
800017da:	f0 1f 00 03 	mcall	800017e4 <board_init+0x58>
// 	//#undef AT45DBX_ENABLE_NPCS_PIN
// };
// 	gpio_enable_module(J1920_SPI0_GPIO_MAP,
// 	sizeof(J1920_SPI0_GPIO_MAP) / sizeof(J1920_SPI0_GPIO_MAP[0]));	
// #endif
}
800017de:	d8 02       	popm	pc
800017e0:	80 01       	ld.sh	r1,r0[0x0]
800017e2:	0c 48       	or	r8,r6
800017e4:	80 00       	ld.sh	r0,r0[0x0]
800017e6:	18 8c       	andn	r12,r12
800017e8:	80 00       	ld.sh	r0,r0[0x0]
800017ea:	18 bc       	st.h	r12++,r12
800017ec:	80 01       	ld.sh	r1,r0[0x0]
800017ee:	0c 28       	rsub	r8,r6
800017f0:	80 01       	ld.sh	r1,r0[0x0]
800017f2:	0c 18       	sub	r8,r6
800017f4:	80 01       	ld.sh	r1,r0[0x0]
800017f6:	0c 38       	cp.w	r8,r6

800017f8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800017f8:	f8 08 16 05 	lsr	r8,r12,0x5
800017fc:	a9 78       	lsl	r8,0x9
800017fe:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80001802:	58 7b       	cp.w	r11,7
80001804:	e0 8b 00 05 	brhi	8000180e <gpio_enable_module_pin+0x16>
80001808:	4a 09       	lddpc	r9,80001888 <gpio_enable_module_pin+0x90>
8000180a:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
8000180e:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80001810:	30 19       	mov	r9,1
80001812:	f2 0c 09 49 	lsl	r9,r9,r12
80001816:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80001818:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000181a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000181c:	c3 18       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000181e:	30 19       	mov	r9,1
80001820:	f2 0c 09 49 	lsl	r9,r9,r12
80001824:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80001826:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80001828:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000182a:	c2 a8       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000182c:	30 19       	mov	r9,1
8000182e:	f2 0c 09 49 	lsl	r9,r9,r12
80001832:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80001834:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80001836:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80001838:	c2 38       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000183a:	30 19       	mov	r9,1
8000183c:	f2 0c 09 49 	lsl	r9,r9,r12
80001840:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80001842:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80001844:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80001846:	c1 c8       	rjmp	8000187e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80001848:	30 19       	mov	r9,1
8000184a:	f2 0c 09 49 	lsl	r9,r9,r12
8000184e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80001850:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80001852:	91 d9       	st.w	r8[0x34],r9
		break;
80001854:	c1 58       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80001856:	30 19       	mov	r9,1
80001858:	f2 0c 09 49 	lsl	r9,r9,r12
8000185c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000185e:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80001860:	91 d9       	st.w	r8[0x34],r9
		break;
80001862:	c0 e8       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80001864:	30 19       	mov	r9,1
80001866:	f2 0c 09 49 	lsl	r9,r9,r12
8000186a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000186c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000186e:	91 d9       	st.w	r8[0x34],r9
		break;
80001870:	c0 78       	rjmp	8000187e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80001872:	30 19       	mov	r9,1
80001874:	f2 0c 09 49 	lsl	r9,r9,r12
80001878:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000187a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000187c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000187e:	30 19       	mov	r9,1
80001880:	f2 0c 09 4c 	lsl	r12,r9,r12
80001884:	91 2c       	st.w	r8[0x8],r12
80001886:	5e fd       	retal	0
80001888:	80 01       	ld.sh	r1,r0[0x0]
8000188a:	0c 68       	and	r8,r6

8000188c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000188c:	d4 21       	pushm	r4-r7,lr
8000188e:	18 97       	mov	r7,r12
80001890:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80001892:	58 0b       	cp.w	r11,0
80001894:	c0 31       	brne	8000189a <gpio_enable_module+0xe>
80001896:	30 05       	mov	r5,0
80001898:	c0 d8       	rjmp	800018b2 <gpio_enable_module+0x26>
8000189a:	30 06       	mov	r6,0
8000189c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000189e:	6e 1b       	ld.w	r11,r7[0x4]
800018a0:	6e 0c       	ld.w	r12,r7[0x0]
800018a2:	f0 1f 00 06 	mcall	800018b8 <gpio_enable_module+0x2c>
800018a6:	18 45       	or	r5,r12
		gpiomap++;
800018a8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800018aa:	2f f6       	sub	r6,-1
800018ac:	0c 34       	cp.w	r4,r6
800018ae:	fe 9b ff f8 	brhi	8000189e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800018b2:	0a 9c       	mov	r12,r5
800018b4:	d8 22       	popm	r4-r7,pc
800018b6:	00 00       	add	r0,r0
800018b8:	80 00       	ld.sh	r0,r0[0x0]
800018ba:	17 f8       	ld.ub	r8,r11[0x7]

800018bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800018bc:	f8 08 16 05 	lsr	r8,r12,0x5
800018c0:	a9 78       	lsl	r8,0x9
800018c2:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
800018c6:	16 99       	mov	r9,r11
800018c8:	e2 19 00 08 	andl	r9,0x8,COH
800018cc:	c0 70       	breq	800018da <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
800018ce:	30 19       	mov	r9,1
800018d0:	f2 0c 09 49 	lsl	r9,r9,r12
800018d4:	f1 49 00 84 	st.w	r8[132],r9
800018d8:	c0 68       	rjmp	800018e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
800018da:	30 19       	mov	r9,1
800018dc:	f2 0c 09 49 	lsl	r9,r9,r12
800018e0:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
800018e4:	16 99       	mov	r9,r11
800018e6:	e2 19 00 04 	andl	r9,0x4,COH
800018ea:	c0 70       	breq	800018f8 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
800018ec:	30 19       	mov	r9,1
800018ee:	f2 0c 09 49 	lsl	r9,r9,r12
800018f2:	f1 49 00 74 	st.w	r8[116],r9
800018f6:	c0 68       	rjmp	80001902 <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800018f8:	30 19       	mov	r9,1
800018fa:	f2 0c 09 49 	lsl	r9,r9,r12
800018fe:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80001902:	16 99       	mov	r9,r11
80001904:	e2 19 00 40 	andl	r9,0x40,COH
80001908:	c0 70       	breq	80001916 <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
8000190a:	30 19       	mov	r9,1
8000190c:	f2 0c 09 49 	lsl	r9,r9,r12
80001910:	f1 49 00 e4 	st.w	r8[228],r9
80001914:	c0 68       	rjmp	80001920 <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80001916:	30 19       	mov	r9,1
80001918:	f2 0c 09 49 	lsl	r9,r9,r12
8000191c:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80001920:	16 99       	mov	r9,r11
80001922:	e2 19 00 10 	andl	r9,0x10,COH
80001926:	c0 70       	breq	80001934 <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80001928:	30 19       	mov	r9,1
8000192a:	f2 0c 09 49 	lsl	r9,r9,r12
8000192e:	f1 49 01 04 	st.w	r8[260],r9
80001932:	c0 68       	rjmp	8000193e <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80001934:	30 19       	mov	r9,1
80001936:	f2 0c 09 49 	lsl	r9,r9,r12
8000193a:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
8000193e:	16 99       	mov	r9,r11
80001940:	e2 19 00 20 	andl	r9,0x20,COH
80001944:	c0 70       	breq	80001952 <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80001946:	30 19       	mov	r9,1
80001948:	f2 0c 09 49 	lsl	r9,r9,r12
8000194c:	f1 49 01 14 	st.w	r8[276],r9
80001950:	c0 68       	rjmp	8000195c <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80001952:	30 19       	mov	r9,1
80001954:	f2 0c 09 49 	lsl	r9,r9,r12
80001958:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000195c:	16 99       	mov	r9,r11
8000195e:	e2 19 00 80 	andl	r9,0x80,COH
80001962:	c2 40       	breq	800019aa <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
80001964:	16 99       	mov	r9,r11
80001966:	e2 19 01 80 	andl	r9,0x180,COH
8000196a:	c0 90       	breq	8000197c <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000196c:	30 19       	mov	r9,1
8000196e:	f2 0c 09 49 	lsl	r9,r9,r12
80001972:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80001976:	f1 49 00 b8 	st.w	r8[184],r9
8000197a:	c1 88       	rjmp	800019aa <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
8000197c:	16 99       	mov	r9,r11
8000197e:	e2 19 02 80 	andl	r9,0x280,COH
80001982:	c0 90       	breq	80001994 <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80001984:	30 19       	mov	r9,1
80001986:	f2 0c 09 49 	lsl	r9,r9,r12
8000198a:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000198e:	f1 49 00 b8 	st.w	r8[184],r9
80001992:	c0 c8       	rjmp	800019aa <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80001994:	16 99       	mov	r9,r11
80001996:	e2 19 03 80 	andl	r9,0x380,COH
8000199a:	c0 80       	breq	800019aa <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000199c:	30 19       	mov	r9,1
8000199e:	f2 0c 09 49 	lsl	r9,r9,r12
800019a2:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800019a6:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800019aa:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800019ae:	c1 50       	breq	800019d8 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
800019b0:	e2 1b 00 02 	andl	r11,0x2,COH
800019b4:	c0 70       	breq	800019c2 <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800019b6:	30 19       	mov	r9,1
800019b8:	f2 0c 09 49 	lsl	r9,r9,r12
800019bc:	f1 49 00 54 	st.w	r8[84],r9
800019c0:	c0 68       	rjmp	800019cc <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800019c2:	30 19       	mov	r9,1
800019c4:	f2 0c 09 49 	lsl	r9,r9,r12
800019c8:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800019cc:	30 19       	mov	r9,1
800019ce:	f2 0c 09 49 	lsl	r9,r9,r12
800019d2:	f1 49 00 44 	st.w	r8[68],r9
800019d6:	c0 68       	rjmp	800019e2 <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800019d8:	30 19       	mov	r9,1
800019da:	f2 0c 09 49 	lsl	r9,r9,r12
800019de:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800019e2:	30 19       	mov	r9,1
800019e4:	f2 0c 09 4c 	lsl	r12,r9,r12
800019e8:	91 1c       	st.w	r8[0x4],r12
}
800019ea:	5e fc       	retal	r12

800019ec <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800019ec:	c0 08       	rjmp	800019ec <_unhandled_interrupt>
800019ee:	d7 03       	nop

800019f0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800019f0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800019f4:	49 99       	lddpc	r9,80001a58 <INTC_register_interrupt+0x68>
800019f6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800019fa:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800019fe:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80001a00:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80001a04:	58 0a       	cp.w	r10,0
80001a06:	c0 91       	brne	80001a18 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80001a08:	49 59       	lddpc	r9,80001a5c <INTC_register_interrupt+0x6c>
80001a0a:	49 6a       	lddpc	r10,80001a60 <INTC_register_interrupt+0x70>
80001a0c:	12 1a       	sub	r10,r9
80001a0e:	fe 79 00 00 	mov	r9,-65536
80001a12:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80001a16:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80001a18:	58 1a       	cp.w	r10,1
80001a1a:	c0 a1       	brne	80001a2e <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80001a1c:	49 09       	lddpc	r9,80001a5c <INTC_register_interrupt+0x6c>
80001a1e:	49 2a       	lddpc	r10,80001a64 <INTC_register_interrupt+0x74>
80001a20:	12 1a       	sub	r10,r9
80001a22:	bf aa       	sbr	r10,0x1e
80001a24:	fe 79 00 00 	mov	r9,-65536
80001a28:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80001a2c:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80001a2e:	58 2a       	cp.w	r10,2
80001a30:	c0 a1       	brne	80001a44 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80001a32:	48 b9       	lddpc	r9,80001a5c <INTC_register_interrupt+0x6c>
80001a34:	48 da       	lddpc	r10,80001a68 <INTC_register_interrupt+0x78>
80001a36:	12 1a       	sub	r10,r9
80001a38:	bf ba       	sbr	r10,0x1f
80001a3a:	fe 79 00 00 	mov	r9,-65536
80001a3e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80001a42:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80001a44:	48 69       	lddpc	r9,80001a5c <INTC_register_interrupt+0x6c>
80001a46:	48 aa       	lddpc	r10,80001a6c <INTC_register_interrupt+0x7c>
80001a48:	12 1a       	sub	r10,r9
80001a4a:	ea 1a c0 00 	orh	r10,0xc000
80001a4e:	fe 79 00 00 	mov	r9,-65536
80001a52:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80001a56:	5e fc       	retal	r12
80001a58:	80 01       	ld.sh	r1,r0[0x0]
80001a5a:	0c 88       	andn	r8,r6
80001a5c:	80 01       	ld.sh	r1,r0[0x0]
80001a5e:	0a 00       	add	r0,r5
80001a60:	80 01       	ld.sh	r1,r0[0x0]
80001a62:	0b 04       	ld.w	r4,r5++
80001a64:	80 01       	ld.sh	r1,r0[0x0]
80001a66:	0b 12       	ld.sh	r2,r5++
80001a68:	80 01       	ld.sh	r1,r0[0x0]
80001a6a:	0b 20       	ld.uh	r0,r5++
80001a6c:	80 01       	ld.sh	r1,r0[0x0]
80001a6e:	0b 2e       	ld.uh	lr,r5++

80001a70 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80001a70:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80001a72:	49 18       	lddpc	r8,80001ab4 <INTC_init_interrupts+0x44>
80001a74:	e3 b8 00 01 	mtsr	0x4,r8
80001a78:	49 0e       	lddpc	lr,80001ab8 <INTC_init_interrupts+0x48>
80001a7a:	30 07       	mov	r7,0
80001a7c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80001a7e:	49 0c       	lddpc	r12,80001abc <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80001a80:	49 05       	lddpc	r5,80001ac0 <INTC_init_interrupts+0x50>
80001a82:	10 15       	sub	r5,r8
80001a84:	fe 76 00 00 	mov	r6,-65536
80001a88:	c1 18       	rjmp	80001aaa <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80001a8a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80001a8c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80001a8e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80001a90:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80001a94:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80001a96:	10 3a       	cp.w	r10,r8
80001a98:	fe 9b ff fc 	brhi	80001a90 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80001a9c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80001aa0:	2f f7       	sub	r7,-1
80001aa2:	2f 8e       	sub	lr,-8
80001aa4:	e0 47 00 2f 	cp.w	r7,47
80001aa8:	c0 50       	breq	80001ab2 <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80001aaa:	7c 08       	ld.w	r8,lr[0x0]
80001aac:	58 08       	cp.w	r8,0
80001aae:	ce e1       	brne	80001a8a <INTC_init_interrupts+0x1a>
80001ab0:	cf 6b       	rjmp	80001a9c <INTC_init_interrupts+0x2c>
80001ab2:	d8 22       	popm	r4-r7,pc
80001ab4:	80 01       	ld.sh	r1,r0[0x0]
80001ab6:	0a 00       	add	r0,r5
80001ab8:	80 01       	ld.sh	r1,r0[0x0]
80001aba:	0c 88       	andn	r8,r6
80001abc:	80 00       	ld.sh	r0,r0[0x0]
80001abe:	19 ec       	ld.ub	r12,r12[0x6]
80001ac0:	80 01       	ld.sh	r1,r0[0x0]
80001ac2:	0b 04       	ld.w	r4,r5++

80001ac4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80001ac4:	fe 78 00 00 	mov	r8,-65536
80001ac8:	e0 69 00 83 	mov	r9,131
80001acc:	f2 0c 01 0c 	sub	r12,r9,r12
80001ad0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80001ad4:	f2 ca ff c0 	sub	r10,r9,-64
80001ad8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80001adc:	58 08       	cp.w	r8,0
80001ade:	c0 21       	brne	80001ae2 <_get_interrupt_handler+0x1e>
80001ae0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80001ae2:	f0 08 12 00 	clz	r8,r8
80001ae6:	48 5a       	lddpc	r10,80001af8 <_get_interrupt_handler+0x34>
80001ae8:	f4 09 00 39 	add	r9,r10,r9<<0x3
80001aec:	f0 08 11 1f 	rsub	r8,r8,31
80001af0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80001af2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80001af6:	5e fc       	retal	r12
80001af8:	80 01       	ld.sh	r1,r0[0x0]
80001afa:	0c 88       	andn	r8,r6

80001afc <_ZN6AP_HAL10UARTDriver16set_flow_controlENS0_12flow_controlE>:
    virtual bool tx_pending() = 0;

    enum flow_control {
        FLOW_CONTROL_DISABLE=0, FLOW_CONTROL_ENABLE=1, FLOW_CONTROL_AUTO=2
    };
	virtual void set_flow_control(enum flow_control flow_control_setting) {};
80001afc:	5e fc       	retal	r12

80001afe <_ZN6AP_HAL10UARTDriver7print_PEPKc>:
   These are implemented in AP_HAL to ensure consistent behaviour on
   all boards, although they can be overridden by a port
 */

void AP_HAL::UARTDriver::print_P(const prog_char_t *s) 
{
80001afe:	eb cd 40 e0 	pushm	r5-r7,lr
80001b02:	18 96       	mov	r6,r12
80001b04:	16 97       	mov	r7,r11
}


// read something the size of a byte
static inline uint8_t pgm_read_byte(const void *s) {
	return *(const uint8_t *)s;
80001b06:	17 8b       	ld.ub	r11,r11[0x0]
    char    c;
    while ('\0' != (c = pgm_read_byte((const prog_char *)s++)))
80001b08:	58 0b       	cp.w	r11,0
80001b0a:	c0 a0       	breq	80001b1e <_ZN6AP_HAL10UARTDriver7print_PEPKc+0x20>
        write(c);
80001b0c:	18 95       	mov	r5,r12
80001b0e:	2f f7       	sub	r7,-1
80001b10:	6c 08       	ld.w	r8,r6[0x0]
80001b12:	70 08       	ld.w	r8,r8[0x0]
80001b14:	0a 9c       	mov	r12,r5
80001b16:	5d 18       	icall	r8
80001b18:	0f 3b       	ld.ub	r11,r7++
 */

void AP_HAL::UARTDriver::print_P(const prog_char_t *s) 
{
    char    c;
    while ('\0' != (c = pgm_read_byte((const prog_char *)s++)))
80001b1a:	58 0b       	cp.w	r11,0
80001b1c:	cf a1       	brne	80001b10 <_ZN6AP_HAL10UARTDriver7print_PEPKc+0x12>
80001b1e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80001b22:	d7 03       	nop

80001b24 <_ZN6AP_HAL10UARTDriver9vprintf_PEPKcPv>:
    vprintf_P(fmt, ap);
    va_end(ap);
}

void AP_HAL::UARTDriver::vprintf_P(const prog_char *fmt, va_list ap) 
{
80001b24:	d4 01       	pushm	lr
    print_vprintf((AP_HAL::Print*)this, 1, fmt, ap);
80001b26:	14 99       	mov	r9,r10
80001b28:	16 9a       	mov	r10,r11
80001b2a:	30 1b       	mov	r11,1
80001b2c:	f0 1f 00 02 	mcall	80001b34 <_ZN6AP_HAL10UARTDriver9vprintf_PEPKcPv+0x10>
}
80001b30:	d8 02       	popm	pc
80001b32:	00 00       	add	r0,r0
80001b34:	80 00       	ld.sh	r0,r0[0x0]
80001b36:	20 b4       	sub	r4,11

80001b38 <_ZN6AP_HAL10UARTDriver7vprintfEPKcPv>:
    vprintf(fmt, ap);
    va_end(ap);
}

void AP_HAL::UARTDriver::vprintf(const char *fmt, va_list ap) 
{
80001b38:	d4 01       	pushm	lr
    print_vprintf((AP_HAL::Print*)this, 0, fmt, ap);
80001b3a:	14 99       	mov	r9,r10
80001b3c:	16 9a       	mov	r10,r11
80001b3e:	30 0b       	mov	r11,0
80001b40:	f0 1f 00 02 	mcall	80001b48 <_ZN6AP_HAL10UARTDriver7vprintfEPKcPv+0x10>
}
80001b44:	d8 02       	popm	pc
80001b46:	00 00       	add	r0,r0
80001b48:	80 00       	ld.sh	r0,r0[0x0]
80001b4a:	20 b4       	sub	r4,11

80001b4c <_ZN6AP_HAL10UARTDriver9_printf_PEPKcz>:

void AP_HAL::UARTDriver::_printf_P(const prog_char *fmt, ...) 
{
80001b4c:	d4 01       	pushm	lr
    va_list ap;
    va_start(ap, fmt);
    vprintf_P(fmt, ap);
80001b4e:	78 08       	ld.w	r8,r12[0x0]
80001b50:	70 a8       	ld.w	r8,r8[0x28]
80001b52:	fa ca ff fc 	sub	r10,sp,-4
80001b56:	5d 18       	icall	r8
    va_end(ap);
}
80001b58:	d8 02       	popm	pc

80001b5a <_ZN6AP_HAL10UARTDriver6printfEPKcz>:
    print_P(s);
    println();
}

void AP_HAL::UARTDriver::printf(const char *fmt, ...) 
{
80001b5a:	d4 01       	pushm	lr
    va_list ap;
    va_start(ap, fmt);
    vprintf(fmt, ap);
80001b5c:	78 08       	ld.w	r8,r12[0x0]
80001b5e:	70 98       	ld.w	r8,r8[0x24]
80001b60:	fa ca ff fc 	sub	r10,sp,-4
80001b64:	5d 18       	icall	r8
    va_end(ap);
}
80001b66:	d8 02       	popm	pc

80001b68 <_ZN6AP_HAL10UARTDriver9println_PEPKc>:
    while ('\0' != (c = pgm_read_byte((const prog_char *)s++)))
        write(c);
}

void AP_HAL::UARTDriver::println_P(const prog_char_t *s) 
{
80001b68:	eb cd 40 80 	pushm	r7,lr
80001b6c:	18 97       	mov	r7,r12
    print_P(s);
80001b6e:	78 08       	ld.w	r8,r12[0x0]
80001b70:	70 58       	ld.w	r8,r8[0x14]
80001b72:	5d 18       	icall	r8
    println();
80001b74:	0e 9c       	mov	r12,r7
80001b76:	f0 1f 00 03 	mcall	80001b80 <_ZN6AP_HAL10UARTDriver9println_PEPKc+0x18>
}
80001b7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80001b7e:	00 00       	add	r0,r0
80001b80:	80 00       	ld.sh	r0,r0[0x0]
80001b82:	1e 6c       	and	r12,pc

80001b84 <_ZL13exponentTable>:
80001b84:	dc df e1 e3 e6 e8 eb ed ef f2 f4 f7 f9 fc fe 00     ................
80001b94:	03 05 08 0a 0c 0f 11 14 16 18 1b 1d 20 22 24 27     ............ "$'

80001ba4 <_ZL11factorTable>:
80001ba4:	88 d8 76 2c 23 08 4f 67 59 ae df c1 e5 96 b7 b1     ..v,#.OgY.......
80001bb4:	3a c6 53 e4 96 76 99 51 26 84 c2 e6 62 9b 8c 89     :.S..v.Q&...b...
80001bc4:	fc 6f 7c 40 40 9f 9c bc a5 6f a5 ba 2a 5a 05 90     .o|@@....o..*Z..
80001bd4:	6c 6b 93 5c 1b c1 6d 67 47 0d e4 e0 b5 e6 20 f5     lk.\..mgG..... .
80001be4:	2e 90 ed d0 77 35 94 00 1e 84 80 00 4e 20 00 00     ....w5......N ..
80001bf4:	c8 00 00 00 33 33 33 33 83 12 6e 98 21 8d ef 41     ....3333..n.!..A
80001c04:	55 e6 3b 89 db e6 fe cf 38 4b 84 d1 90 1d 7c f7     U.;.....8K....|.
80001c14:	24 e4 bb a4 5e 72 84 32 f1 c9 00 81 3d e5 a1 ec     $...^r.2....=...

80001c24 <_Z11ftoa_enginefPchh>:
	4056481921UL,
	1038459372UL
};

int16_t ftoa_engine(float val, char *buf, uint8_t precision, uint8_t maxDecimals) 
{
80001c24:	d4 31       	pushm	r0-r7,lr
80001c26:	20 3d       	sub	sp,12
80001c28:	fa c7 ff f4 	sub	r7,sp,-12
80001c2c:	0e dc       	st.w	--r7,r12
80001c2e:	16 92       	mov	r2,r11
80001c30:	12 91       	mov	r1,r9
	union {
		float v;
		uint32_t u;
	} x;
	x.v = val;
	uint32_t frac = x.u & 0x007fffffUL;
80001c32:	40 28       	lddsp	r8,sp[0x8]
80001c34:	f1 d8 c0 17 	bfextu	r8,r8,0x0,0x17
80001c38:	30 73       	mov	r3,7
80001c3a:	e6 0a 18 00 	cp.b	r10,r3
80001c3e:	f4 03 17 80 	movls	r3,r10
80001c42:	5c 53       	castu.b	r3

	if (precision>7) precision=7;

	// Read the sign, shift the exponent in place and delete it from frac.
	if (valbits[3] & (1<<7)) flags = FTOA_MINUS; else flags = 0;
80001c44:	0f b9       	ld.ub	r9,r7[0x3]
80001c46:	f2 0a 16 07 	lsr	r10,r9,0x7
80001c4a:	50 1a       	stdsp	sp[0x4],r10
	uint8_t exp = valbits[3]<<1;
80001c4c:	a1 79       	lsl	r9,0x1
80001c4e:	5c 59       	castu.b	r9
	if(valbits[2] & (1<<7)) exp++;	// TODO possible but in case of subnormal
80001c50:	0f ab       	ld.ub	r11,r7[0x2]
80001c52:	30 0a       	mov	r10,0
80001c54:	f4 0b 18 00 	cp.b	r11,r10
80001c58:	c0 34       	brge	80001c5e <_Z11ftoa_enginefPchh+0x3a>
80001c5a:	2f f9       	sub	r9,-1
80001c5c:	5c 59       	castu.b	r9

	// Test for easy cases, zero and NaN
	if(exp==0 && frac==0) {
80001c5e:	58 08       	cp.w	r8,0
80001c60:	5f 0b       	sreq	r11
80001c62:	30 0a       	mov	r10,0
80001c64:	f4 09 18 00 	cp.b	r9,r10
80001c68:	5f 0c       	sreq	r12
80001c6a:	f7 ec 00 0c 	and	r12,r11,r12
80001c6e:	f4 0c 18 00 	cp.b	r12,r10
80001c72:	c1 10       	breq	80001c94 <_Z11ftoa_enginefPchh+0x70>
		buf[0] = flags | FTOA_ZERO;
80001c74:	40 18       	lddsp	r8,sp[0x4]
80001c76:	a1 b8       	sbr	r8,0x1
80001c78:	a4 88       	st.b	r2[0x0],r8
80001c7a:	30 08       	mov	r8,0
		uint8_t i;
		for(i=0; i<=precision; i++) {
			buf[i+1] = '0';
80001c7c:	33 0a       	mov	r10,48
80001c7e:	e4 08 00 09 	add	r9,r2,r8
80001c82:	b2 9a       	st.b	r9[0x1],r10

	// Test for easy cases, zero and NaN
	if(exp==0 && frac==0) {
		buf[0] = flags | FTOA_ZERO;
		uint8_t i;
		for(i=0; i<=precision; i++) {
80001c84:	2f f8       	sub	r8,-1
80001c86:	5c 58       	castu.b	r8
80001c88:	e6 08 18 00 	cp.b	r8,r3
80001c8c:	fe 98 ff f9 	brls	80001c7e <_Z11ftoa_enginefPchh+0x5a>
80001c90:	30 0c       	mov	r12,0
80001c92:	ce 08       	rjmp	80001e52 <_Z11ftoa_enginefPchh+0x22e>
			buf[i+1] = '0';
		}
		return 0;
	}

	if(exp == 0xff) {
80001c94:	3f fa       	mov	r10,-1
80001c96:	f4 09 18 00 	cp.b	r9,r10
80001c9a:	c0 b1       	brne	80001cb0 <_Z11ftoa_enginefPchh+0x8c>
		if(frac == 0) flags |= FTOA_INF; else flags |= FTOA_NAN;
80001c9c:	40 1c       	lddsp	r12,sp[0x4]
80001c9e:	a3 ac       	sbr	r12,0x2
80001ca0:	40 1a       	lddsp	r10,sp[0x4]
80001ca2:	a3 ba       	sbr	r10,0x3
80001ca4:	58 0b       	cp.w	r11,0
80001ca6:	fb fc 1a 01 	st.wne	sp[0x4],r12
80001caa:	fb fa 0a 01 	st.weq	sp[0x4],r10
80001cae:	c0 38       	rjmp	80001cb4 <_Z11ftoa_enginefPchh+0x90>
	}

	// The implicit leading 1 is made explicit, except if value subnormal.
	if (exp != 0) frac |= (1UL<<23);
80001cb0:	58 09       	cp.w	r9,0
80001cb2:	c0 20       	breq	80001cb6 <_Z11ftoa_enginefPchh+0x92>
80001cb4:	b7 b8       	sbr	r8,0x17

	uint8_t idx = exp>>3;
	int8_t exp10 = PGM_INT8(&exponentTable[idx]);
80001cb6:	f2 0b 16 03 	lsr	r11,r9,0x3
80001cba:	4e 8a       	lddpc	r10,80001e58 <_Z11ftoa_enginefPchh+0x234>
80001cbc:	f4 0b 07 00 	ld.ub	r0,r10[r11]

	// We COULD try making the multiplication in situ, where we make
	// frac and a 64 bit int overlap in memory and select/weigh the
	// upper 32 bits that way. For starters, this is less risky:
	int64_t prod = (int64_t)frac * (int64_t)PGM_UINT32(&factorTable[idx]);
80001cc0:	f4 0b 00 2a 	add	r10,r10,r11<<0x2
80001cc4:	74 8b       	ld.w	r11,r10[0x20]
80001cc6:	f0 0b 06 4a 	mulu.d	r10,r8,r11
	// bits are 1 (=7). Else we need to compensate by divding frac.
	// If the lower 3 bits are 7 we are right.
	// If the lower 3 bits are 6 we right-shift once
	// ..
	// If the lower 3 bits are 0 we right-shift 7x
	prod >>= (15-(exp & 7));
80001cca:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80001cce:	f2 09 11 0f 	rsub	r9,r9,15
80001cd2:	12 98       	mov	r8,r9
80001cd4:	e2 18 00 20 	andl	r8,0x20,COH
80001cd8:	f6 0c 14 1f 	asr	r12,r11,0x1f
80001cdc:	f6 06 15 01 	lsl	r6,r11,0x1
80001ce0:	f2 07 11 ff 	rsub	r7,r9,-1
80001ce4:	ec 07 09 47 	lsl	r7,r6,r7
80001ce8:	f4 09 0a 44 	lsr	r4,r10,r9
80001cec:	ef e4 10 04 	or	r4,r7,r4
80001cf0:	f6 09 08 45 	asr	r5,r11,r9
80001cf4:	58 08       	cp.w	r8,0
80001cf6:	ea 04 17 10 	movne	r4,r5
80001cfa:	f8 05 17 10 	movne	r5,r12
80001cfe:	e0 6a 40 00 	mov	r10,16384
80001d02:	ea 1a 10 7a 	orh	r10,0x107a
80001d06:	e0 6b 5a f3 	mov	r11,23283
80001d0a:	30 07       	mov	r7,0
			break;
		}

		// Now have a digit.
		outputIdx++;
		if(digit < '0' + 10) // normal case.
80001d0c:	0e 96       	mov	r6,r7
80001d0e:	50 02       	stdsp	sp[0x0],r2
80001d10:	0e 92       	mov	r2,r7
	// bits are 1 (=7). Else we need to compensate by divding frac.
	// If the lower 3 bits are 7 we are right.
	// If the lower 3 bits are 6 we right-shift once
	// ..
	// If the lower 3 bits are 0 we right-shift 7x
	prod >>= (15-(exp & 7));
80001d12:	33 07       	mov	r7,48
80001d14:	c0 38       	rjmp	80001d1a <_Z11ftoa_enginefPchh+0xf6>

	do {
		char digit = '0';
		while(1) {// find the first nonzero digit or any of the next digits.
			while ((prod -= decimal) >= 0)
				digit++;
80001d16:	2f f7       	sub	r7,-1
80001d18:	5c 57       	castu.b	r7
	int64_t decimal = 100000000000000ull;

	do {
		char digit = '0';
		while(1) {// find the first nonzero digit or any of the next digits.
			while ((prod -= decimal) >= 0)
80001d1a:	14 14       	sub	r4,r10
80001d1c:	ea 0b 01 45 	sbc	r5,r5,r11
80001d20:	58 04       	cp.w	r4,0
80001d22:	5c 25       	cpc	r5
80001d24:	cf 94       	brge	80001d16 <_Z11ftoa_enginefPchh+0xf2>
				digit++;
			// Now we got too low. Fix it by adding again, once.
			// it might appear more efficient to check before subtract, or
			// to save and restore last nonnegative value - but in fact
			// they take as long time and more space.
			prod += decimal;
80001d26:	14 04       	add	r4,r10
80001d28:	ea 0b 00 45 	adc	r5,r5,r11
			decimal /= 10;
80001d2c:	30 a8       	mov	r8,10
80001d2e:	30 09       	mov	r9,0
80001d30:	f0 1f 00 4b 	mcall	80001e5c <_Z11ftoa_enginefPchh+0x238>
80001d34:	16 99       	mov	r9,r11
80001d36:	12 9b       	mov	r11,r9

			// If already found a leading nonzero digit, accept zeros.
			if (hadNonzeroDigit) break;
80001d38:	58 02       	cp.w	r2,0
80001d3a:	c2 21       	brne	80001d7e <_Z11ftoa_enginefPchh+0x15a>

			// Else, don't return results with a leading zero! Instead
			// skip those and decrement exp10 accordingly.
			if(digit == '0') {
80001d3c:	33 08       	mov	r8,48
80001d3e:	f0 07 18 00 	cp.b	r7,r8
80001d42:	c0 41       	brne	80001d4a <_Z11ftoa_enginefPchh+0x126>
				exp10--;
80001d44:	20 10       	sub	r0,1
80001d46:	5c 50       	castu.b	r0
80001d48:	ce 9b       	rjmp	80001d1a <_Z11ftoa_enginefPchh+0xf6>
	uint8_t outputIdx = 0;
	int64_t decimal = 100000000000000ull;

	do {
		char digit = '0';
		while(1) {// find the first nonzero digit or any of the next digits.
80001d4a:	f1 d0 c0 08 	bfextu	r8,r0,0x0,0x8
			}

			hadNonzeroDigit = 1;

			// Compute how many digits N to output.
			if(maxDecimals != 0) {						// If limiting decimals...
80001d4e:	58 01       	cp.w	r1,0
80001d50:	c1 40       	breq	80001d78 <_Z11ftoa_enginefPchh+0x154>
				int8_t beforeDP = exp10+1;				// Digits before point
80001d52:	2f f8       	sub	r8,-1
80001d54:	5c 58       	castu.b	r8
				if (beforeDP < 1) beforeDP = 1;			// Numbers < 1 should also output at least 1 digit.
80001d56:	30 09       	mov	r9,0
80001d58:	f0 09 18 00 	cp.b	r9,r8
80001d5c:	f9 b8 04 01 	movge	r8,1
				int8_t afterDP = outputNum - beforeDP;
				if (afterDP > maxDecimals-1)
					afterDP = maxDecimals-1;
				outputNum = beforeDP + afterDP;
				*/
				maxDecimals = maxDecimals+beforeDP-1;
80001d60:	20 11       	sub	r1,1
80001d62:	10 01       	add	r1,r8
80001d64:	5c 51       	castu.b	r1
				if (precision > maxDecimals)
80001d66:	e2 03 18 00 	cp.b	r3,r1
80001d6a:	e2 03 17 b0 	movhi	r3,r1
80001d6e:	f9 b2 0b 01 	movhi	r2,1
80001d72:	f9 b2 08 01 	movls	r2,1
80001d76:	c0 48       	rjmp	80001d7e <_Z11ftoa_enginefPchh+0x15a>
					precision = maxDecimals;

			} else {
				precision++;							// Output one more digit than the param value.
80001d78:	2f f3       	sub	r3,-1
80001d7a:	5c 53       	castu.b	r3
80001d7c:	30 12       	mov	r2,1

			break;
		}

		// Now have a digit.
		outputIdx++;
80001d7e:	2f f6       	sub	r6,-1
80001d80:	5c 56       	castu.b	r6
		if(digit < '0' + 10) // normal case.
80001d82:	33 99       	mov	r9,57
80001d84:	f2 07 18 00 	cp.b	r7,r9
80001d88:	e0 88 00 0a 	brls	80001d9c <_Z11ftoa_enginefPchh+0x178>
80001d8c:	0c 97       	mov	r7,r6
80001d8e:	40 02       	lddsp	r2,sp[0x0]
80001d90:	0c 99       	mov	r9,r6
80001d92:	ed d0 c0 08 	bfextu	r6,r0,0x0,0x8
			buf[outputIdx] = digit;
		else {
			// Abnormal case, write 9s and bail.
			// We might as well abuse hadNonzeroDigit as counter, it will not be used again.
			for(hadNonzeroDigit=outputIdx; hadNonzeroDigit>0; hadNonzeroDigit--)
80001d96:	58 07       	cp.w	r7,0
80001d98:	c0 a1       	brne	80001dac <_Z11ftoa_enginefPchh+0x188>
80001d9a:	c1 18       	rjmp	80001dbc <_Z11ftoa_enginefPchh+0x198>
		}

		// Now have a digit.
		outputIdx++;
		if(digit < '0' + 10) // normal case.
			buf[outputIdx] = digit;
80001d9c:	40 08       	lddsp	r8,sp[0x0]
80001d9e:	f0 06 0b 07 	st.b	r8[r6],r7
	// Now convert to decimal.
	uint8_t hadNonzeroDigit = 0; // a flag
	uint8_t outputIdx = 0;
	int64_t decimal = 100000000000000ull;

	do {
80001da2:	ec 03 18 00 	cp.b	r3,r6
80001da6:	fe 9b ff b6 	brhi	80001d12 <_Z11ftoa_enginefPchh+0xee>
80001daa:	c1 c8       	rjmp	80001de2 <_Z11ftoa_enginefPchh+0x1be>
			buf[outputIdx] = digit;
		else {
			// Abnormal case, write 9s and bail.
			// We might as well abuse hadNonzeroDigit as counter, it will not be used again.
			for(hadNonzeroDigit=outputIdx; hadNonzeroDigit>0; hadNonzeroDigit--)
				buf[hadNonzeroDigit] = '9';
80001dac:	33 98       	mov	r8,57
80001dae:	e4 07 0b 08 	st.b	r2[r7],r8
		if(digit < '0' + 10) // normal case.
			buf[outputIdx] = digit;
		else {
			// Abnormal case, write 9s and bail.
			// We might as well abuse hadNonzeroDigit as counter, it will not be used again.
			for(hadNonzeroDigit=outputIdx; hadNonzeroDigit>0; hadNonzeroDigit--)
80001db2:	20 17       	sub	r7,1
80001db4:	5c 57       	castu.b	r7
80001db6:	cf c1       	brne	80001dae <_Z11ftoa_enginefPchh+0x18a>
80001db8:	12 97       	mov	r7,r9
80001dba:	c0 48       	rjmp	80001dc2 <_Z11ftoa_enginefPchh+0x19e>
80001dbc:	ed d0 c0 08 	bfextu	r6,r0,0x0,0x8
80001dc0:	0e 99       	mov	r9,r7

	if (prod - (decimal >> 1) >= 0) {

	roundup:
		// Increment digit, cascade
		while(outputIdx != 0) {
80001dc2:	58 09       	cp.w	r9,0
80001dc4:	c4 10       	breq	80001e46 <_Z11ftoa_enginefPchh+0x222>
			if(++buf[outputIdx] == '0' + 10) {
80001dc6:	e4 09 00 08 	add	r8,r2,r9
80001dca:	11 8a       	ld.ub	r10,r8[0x0]
80001dcc:	2f fa       	sub	r10,-1
80001dce:	b0 8a       	st.b	r8[0x0],r10
80001dd0:	33 ab       	mov	r11,58
80001dd2:	f6 0a 18 00 	cp.b	r10,r11
80001dd6:	c3 81       	brne	80001e46 <_Z11ftoa_enginefPchh+0x222>
				if(outputIdx == 1) {
80001dd8:	30 1a       	mov	r10,1
80001dda:	f4 09 18 00 	cp.b	r9,r10
80001dde:	c2 d1       	brne	80001e38 <_Z11ftoa_enginefPchh+0x214>
80001de0:	c2 38       	rjmp	80001e26 <_Z11ftoa_enginefPchh+0x202>
80001de2:	0c 97       	mov	r7,r6
80001de4:	40 02       	lddsp	r2,sp[0x0]
	} while (outputIdx<precision);

	// Rounding:
	decimal *= 10;

	if (prod - (decimal >> 1) >= 0) {
80001de6:	f6 08 10 0a 	mul	r8,r11,10
80001dea:	30 a9       	mov	r9,10
80001dec:	f4 09 06 4a 	mulu.d	r10,r10,r9
80001df0:	f0 0b 00 0b 	add	r11,r8,r11
80001df4:	f4 08 16 01 	lsr	r8,r10,0x1
80001df8:	f1 eb 11 f8 	or	r8,r8,r11<<0x1f
80001dfc:	f6 09 14 01 	asr	r9,r11,0x1
80001e00:	e8 08 01 08 	sub	r8,r4,r8
80001e04:	ea 09 01 49 	sbc	r9,r5,r9
80001e08:	58 08       	cp.w	r8,0
80001e0a:	5c 29       	cpc	r9
80001e0c:	cd 84       	brge	80001dbc <_Z11ftoa_enginefPchh+0x198>
80001e0e:	c1 e8       	rjmp	80001e4a <_Z11ftoa_enginefPchh+0x226>

	roundup:
		// Increment digit, cascade
		while(outputIdx != 0) {
			if(++buf[outputIdx] == '0' + 10) {
80001e10:	e4 07 00 08 	add	r8,r2,r7
80001e14:	11 89       	ld.ub	r9,r8[0x0]
80001e16:	2f f9       	sub	r9,-1
80001e18:	b0 89       	st.b	r8[0x0],r9
80001e1a:	f6 09 18 00 	cp.b	r9,r11
80001e1e:	c1 41       	brne	80001e46 <_Z11ftoa_enginefPchh+0x222>
				if(outputIdx == 1) {
80001e20:	f8 07 18 00 	cp.b	r7,r12
80001e24:	c0 d1       	brne	80001e3e <_Z11ftoa_enginefPchh+0x21a>
					buf[outputIdx] = '1';
80001e26:	33 19       	mov	r9,49
80001e28:	b0 89       	st.b	r8[0x0],r9
					exp10++;
80001e2a:	2f f6       	sub	r6,-1
80001e2c:	e1 d6 c0 08 	bfextu	r0,r6,0x0,0x8
					flags |= FTOA_CARRY;
80001e30:	40 18       	lddsp	r8,sp[0x4]
80001e32:	a5 a8       	sbr	r8,0x4
80001e34:	50 18       	stdsp	sp[0x4],r8
					break;
80001e36:	c0 a8       	rjmp	80001e4a <_Z11ftoa_enginefPchh+0x226>
				} else
					buf[outputIdx--] = '0'; // and the loop continues, carrying to next digit.
80001e38:	33 0a       	mov	r10,48
	if (prod - (decimal >> 1) >= 0) {

	roundup:
		// Increment digit, cascade
		while(outputIdx != 0) {
			if(++buf[outputIdx] == '0' + 10) {
80001e3a:	33 ab       	mov	r11,58
				if(outputIdx == 1) {
80001e3c:	30 1c       	mov	r12,1
					buf[outputIdx] = '1';
					exp10++;
					flags |= FTOA_CARRY;
					break;
				} else
					buf[outputIdx--] = '0'; // and the loop continues, carrying to next digit.
80001e3e:	b0 8a       	st.b	r8[0x0],r10
80001e40:	20 17       	sub	r7,1
80001e42:	5c 57       	castu.b	r7

	if (prod - (decimal >> 1) >= 0) {

	roundup:
		// Increment digit, cascade
		while(outputIdx != 0) {
80001e44:	ce 61       	brne	80001e10 <_Z11ftoa_enginefPchh+0x1ec>
80001e46:	e1 d6 c0 08 	bfextu	r0,r6,0x0,0x8
			}
			else break;
		}
	}

	buf[0] = flags;
80001e4a:	40 1a       	lddsp	r10,sp[0x4]
80001e4c:	a4 8a       	st.b	r2[0x0],r10
	return exp10;
80001e4e:	f9 d0 b0 08 	bfexts	r12,r0,0x0,0x8
}
80001e52:	2f dd       	sub	sp,-12
80001e54:	d8 32       	popm	r0-r7,pc
80001e56:	00 00       	add	r0,r0
80001e58:	80 00       	ld.sh	r0,r0[0x0]
80001e5a:	1b 84       	ld.ub	r4,sp[0x0]
80001e5c:	80 00       	ld.sh	r0,r0[0x0]
80001e5e:	aa 5e       	st.h	r5[0xa],lr

80001e60 <_ZN6AP_HAL5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
80001e60:	d4 01       	pushm	lr
  return write(c);
80001e62:	78 08       	ld.w	r8,r12[0x0]
80001e64:	70 08       	ld.w	r8,r8[0x0]
80001e66:	5d 18       	icall	r8
}
80001e68:	d8 02       	popm	pc
80001e6a:	d7 03       	nop

80001e6c <_ZN6AP_HAL5Print7printlnEv>:
{
	return print((float)n, digits);
}

size_t Print::println(void)
{
80001e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80001e70:	18 96       	mov	r6,r12
  size_t n = print('\r');
80001e72:	30 db       	mov	r11,13
80001e74:	f0 1f 00 05 	mcall	80001e88 <_ZN6AP_HAL5Print7printlnEv+0x1c>
80001e78:	18 97       	mov	r7,r12
  n += print('\n');
80001e7a:	30 ab       	mov	r11,10
80001e7c:	0c 9c       	mov	r12,r6
80001e7e:	f0 1f 00 03 	mcall	80001e88 <_ZN6AP_HAL5Print7printlnEv+0x1c>
  return n;
}
80001e82:	0e 0c       	add	r12,r7
80001e84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80001e88:	80 00       	ld.sh	r0,r0[0x0]
80001e8a:	1e 60       	and	r0,pc

80001e8c <_ZN6AP_HAL5Print11printNumberEmh>:
  return println((float)num, digits);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
80001e8c:	eb cd 40 c0 	pushm	r6-r7,lr
80001e90:	20 9d       	sub	sp,36
80001e92:	18 96       	mov	r6,r12
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
80001e94:	30 18       	mov	r8,1
80001e96:	f4 08 18 00 	cp.b	r8,r10
80001e9a:	f9 ba 02 0a 	movhs	r10,10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
80001e9e:	30 08       	mov	r8,0
80001ea0:	fb 68 00 20 	st.b	sp[32],r8
80001ea4:	fa c7 ff e0 	sub	r7,sp,-32

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
80001ea8:	30 9c       	mov	r12,9
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
80001eaa:	f6 0a 0d 08 	divu	r8,r11,r10
    char c = m - base * n;
80001eae:	f0 0a 02 49 	mul	r9,r8,r10
80001eb2:	12 1b       	sub	r11,r9
80001eb4:	5c 5b       	castu.b	r11
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
80001eb6:	20 17       	sub	r7,1
80001eb8:	f8 0b 18 00 	cp.b	r11,r12
80001ebc:	e0 8b 00 05 	brhi	80001ec6 <_ZN6AP_HAL5Print11printNumberEmh+0x3a>
80001ec0:	2d 0b       	sub	r11,-48
80001ec2:	5c 5b       	castu.b	r11
80001ec4:	c0 28       	rjmp	80001ec8 <_ZN6AP_HAL5Print11printNumberEmh+0x3c>
80001ec6:	2c 9b       	sub	r11,-55
80001ec8:	ae 8b       	st.b	r7[0x0],r11
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
80001eca:	58 08       	cp.w	r8,0
80001ecc:	c0 30       	breq	80001ed2 <_ZN6AP_HAL5Print11printNumberEmh+0x46>
80001ece:	10 9b       	mov	r11,r8
80001ed0:	ce db       	rjmp	80001eaa <_ZN6AP_HAL5Print11printNumberEmh+0x1e>
    Print() {}

    virtual size_t write(uint8_t) = 0;
    virtual size_t write(const uint8_t *buffer, size_t size) = 0;

    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
80001ed2:	0e 9c       	mov	r12,r7
80001ed4:	f0 1f 00 06 	mcall	80001eec <_ZN6AP_HAL5Print11printNumberEmh+0x60>
80001ed8:	6c 08       	ld.w	r8,r6[0x0]
80001eda:	70 18       	ld.w	r8,r8[0x4]
80001edc:	18 9a       	mov	r10,r12
80001ede:	0e 9b       	mov	r11,r7
80001ee0:	0c 9c       	mov	r12,r6
80001ee2:	5d 18       	icall	r8
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
80001ee4:	2f 7d       	sub	sp,-36
80001ee6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80001eea:	00 00       	add	r0,r0
80001eec:	80 00       	ld.sh	r0,r0[0x0]
80001eee:	c2 9e       	rcall	80001b40 <_ZN6AP_HAL10UARTDriver7vprintfEPKcPv+0x8>

80001ef0 <_ZN6AP_HAL5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
80001ef0:	d4 01       	pushm	lr
  if (base == 0) return write(n);
80001ef2:	58 0a       	cp.w	r10,0
80001ef4:	c0 61       	brne	80001f00 <_ZN6AP_HAL5Print5printEmi+0x10>
80001ef6:	78 08       	ld.w	r8,r12[0x0]
80001ef8:	70 08       	ld.w	r8,r8[0x0]
80001efa:	5c 5b       	castu.b	r11
80001efc:	5d 18       	icall	r8
80001efe:	d8 02       	popm	pc
  else return printNumber(n, base);
80001f00:	5c 5a       	castu.b	r10
80001f02:	f0 1f 00 02 	mcall	80001f08 <_ZN6AP_HAL5Print5printEmi+0x18>
}
80001f06:	d8 02       	popm	pc
80001f08:	80 00       	ld.sh	r0,r0[0x0]
80001f0a:	1e 8c       	andn	r12,pc

80001f0c <_ZN6AP_HAL5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
80001f0c:	eb cd 40 e0 	pushm	r5-r7,lr
80001f10:	18 97       	mov	r7,r12
80001f12:	16 95       	mov	r5,r11
  if (base == 0) {
80001f14:	58 0a       	cp.w	r10,0
80001f16:	c0 71       	brne	80001f24 <_ZN6AP_HAL5Print5printEli+0x18>
    return write(n);
80001f18:	78 08       	ld.w	r8,r12[0x0]
80001f1a:	70 08       	ld.w	r8,r8[0x0]
80001f1c:	5c 5b       	castu.b	r11
80001f1e:	5d 18       	icall	r8
80001f20:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  } else if (base == 10) {
80001f24:	58 aa       	cp.w	r10,10
80001f26:	c1 51       	brne	80001f50 <_ZN6AP_HAL5Print5printEli+0x44>
    if (n < 0) {
80001f28:	58 0b       	cp.w	r11,0
80001f2a:	c0 e4       	brge	80001f46 <_ZN6AP_HAL5Print5printEli+0x3a>
      int t = print('-');
80001f2c:	32 db       	mov	r11,45
80001f2e:	f0 1f 00 0c 	mcall	80001f5c <_ZN6AP_HAL5Print5printEli+0x50>
80001f32:	18 96       	mov	r6,r12
      n = -n;
      return printNumber(n, 10) + t;
80001f34:	30 aa       	mov	r10,10
80001f36:	ea 0b 11 00 	rsub	r11,r5,0
80001f3a:	0e 9c       	mov	r12,r7
80001f3c:	f0 1f 00 09 	mcall	80001f60 <_ZN6AP_HAL5Print5printEli+0x54>
80001f40:	0c 0c       	add	r12,r6
80001f42:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }
    return printNumber(n, 10);
80001f46:	30 aa       	mov	r10,10
80001f48:	f0 1f 00 06 	mcall	80001f60 <_ZN6AP_HAL5Print5printEli+0x54>
80001f4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  } else {
    return printNumber(n, base);
80001f50:	5c 5a       	castu.b	r10
80001f52:	f0 1f 00 04 	mcall	80001f60 <_ZN6AP_HAL5Print5printEli+0x54>
  }
}
80001f56:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80001f5a:	00 00       	add	r0,r0
80001f5c:	80 00       	ld.sh	r0,r0[0x0]
80001f5e:	1e 60       	and	r0,pc
80001f60:	80 00       	ld.sh	r0,r0[0x0]
80001f62:	1e 8c       	andn	r12,pc

80001f64 <_ZN6AP_HAL5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
80001f64:	d4 01       	pushm	lr
  return print((long) n, base);
80001f66:	f0 1f 00 02 	mcall	80001f6c <_ZN6AP_HAL5Print5printEii+0x8>
}
80001f6a:	d8 02       	popm	pc
80001f6c:	80 00       	ld.sh	r0,r0[0x0]
80001f6e:	1f 0c       	ld.w	r12,pc++

80001f70 <_ZN6AP_HAL5Print5printEPKc>:
#include "../AP_HAL_Namespace.h"
#include "Print.h"
using namespace AP_HAL;

size_t Print::print(const char str[])
{
80001f70:	eb cd 40 c0 	pushm	r6-r7,lr
80001f74:	18 97       	mov	r7,r12
80001f76:	16 96       	mov	r6,r11
80001f78:	16 9c       	mov	r12,r11
80001f7a:	f0 1f 00 06 	mcall	80001f90 <_ZN6AP_HAL5Print5printEPKc+0x20>
80001f7e:	6e 08       	ld.w	r8,r7[0x0]
80001f80:	70 18       	ld.w	r8,r8[0x4]
80001f82:	18 9a       	mov	r10,r12
80001f84:	0c 9b       	mov	r11,r6
80001f86:	0e 9c       	mov	r12,r7
80001f88:	5d 18       	icall	r8
  return write(str);
}
80001f8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80001f8e:	00 00       	add	r0,r0
80001f90:	80 00       	ld.sh	r0,r0[0x0]
80001f92:	c2 9e       	rcall	80001be4 <_ZL11factorTable+0x40>

80001f94 <_ZN6AP_HAL5Print10printFloatEfh>:

  return write(str);
}

size_t Print::printFloat(float number, uint8_t digits) 
{ 
80001f94:	eb cd 40 fe 	pushm	r1-r7,lr
80001f98:	18 91       	mov	r1,r12
80001f9a:	16 95       	mov	r5,r11
80001f9c:	14 97       	mov	r7,r10
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0f)
80001f9e:	30 08       	mov	r8,0
80001fa0:	e5 ac 00 b8 	cop	cp0,cr0,cr11,cr8,0x58
80001fa4:	e0 8c 00 03 	brvs	80001faa <_ZN6AP_HAL5Print10printFloatEfh+0x16>
80001fa8:	c0 35       	brlt	80001fae <_ZN6AP_HAL5Print10printFloatEfh+0x1a>
80001faa:	30 03       	mov	r3,0
80001fac:	c0 78       	rjmp	80001fba <_ZN6AP_HAL5Print10printFloatEfh+0x26>
  {
     n += print('-');
80001fae:	32 db       	mov	r11,45
80001fb0:	f0 1f 00 27 	mcall	8000204c <_ZN6AP_HAL5Print10printFloatEfh+0xb8>
80001fb4:	18 93       	mov	r3,r12
     number = -number;
80001fb6:	ee 15 80 00 	eorh	r5,0x8000
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  float rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
80001fba:	58 07       	cp.w	r7,0
80001fbc:	c3 a0       	breq	80002030 <_ZN6AP_HAL5Print10printFloatEfh+0x9c>
80001fbe:	30 06       	mov	r6,0
80001fc0:	fc 1c 3f 00 	movh	r12,0x3f00
    rounding /= 10.0f;
80001fc4:	fc 14 41 20 	movh	r4,0x4120
80001fc8:	08 9b       	mov	r11,r4
80001fca:	f0 1f 00 22 	mcall	80002050 <_ZN6AP_HAL5Print10printFloatEfh+0xbc>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  float rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
80001fce:	2f f6       	sub	r6,-1
80001fd0:	5c 56       	castu.b	r6
80001fd2:	ec 07 18 00 	cp.b	r7,r6
80001fd6:	fe 9b ff f9 	brhi	80001fc8 <_ZN6AP_HAL5Print10printFloatEfh+0x34>
    rounding /= 10.0f;
  
  number += rounding;
80001fda:	e5 a0 05 5c 	cop	cp0,cr5,cr5,cr12,0x40

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
80001fde:	e5 a9 0b 05 	cop	cp0,cr11,cr0,cr5,0x52
  float remainder = number - (float )int_part;
80001fe2:	e5 a4 06 0b 	cop	cp0,cr6,cr0,cr11,0x48
80001fe6:	e5 a1 05 56 	cop	cp0,cr5,cr5,cr6,0x42
  n += print(int_part);
80001fea:	30 aa       	mov	r10,10
80001fec:	02 9c       	mov	r12,r1
80001fee:	f0 1f 00 1a 	mcall	80002054 <_ZN6AP_HAL5Print10printFloatEfh+0xc0>
80001ff2:	18 96       	mov	r6,r12

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
80001ff4:	49 9b       	lddpc	r11,80002058 <_ZN6AP_HAL5Print10printFloatEfh+0xc4>
80001ff6:	02 9c       	mov	r12,r1
80001ff8:	f0 1f 00 19 	mcall	8000205c <_ZN6AP_HAL5Print10printFloatEfh+0xc8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  float remainder = number - (float )int_part;
  n += print(int_part);
80001ffc:	18 06       	add	r6,r12

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
80001ffe:	ec 03 00 04 	add	r4,r6,r3
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0f;
80002002:	fc 13 41 20 	movh	r3,0x4120
    int toPrint = int(remainder);
    n += print(toPrint);
80002006:	30 a2       	mov	r2,10
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0f;
80002008:	e5 a2 05 53 	cop	cp0,cr5,cr5,cr3,0x44
    int toPrint = int(remainder);
8000200c:	e5 ab 06 05 	cop	cp0,cr6,cr0,cr5,0x56
    n += print(toPrint);
80002010:	04 9a       	mov	r10,r2
80002012:	0c 9b       	mov	r11,r6
80002014:	02 9c       	mov	r12,r1
80002016:	f0 1f 00 13 	mcall	80002060 <_ZN6AP_HAL5Print10printFloatEfh+0xcc>
8000201a:	18 04       	add	r4,r12
    remainder -= toPrint; 
8000201c:	e5 a6 06 06 	cop	cp0,cr6,cr0,cr6,0x4c
80002020:	e5 a1 05 56 	cop	cp0,cr5,cr5,cr6,0x42
80002024:	20 17       	sub	r7,1
80002026:	5c 57       	castu.b	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
80002028:	cf 01       	brne	80002008 <_ZN6AP_HAL5Print10printFloatEfh+0x74>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
8000202a:	08 9c       	mov	r12,r4
8000202c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  float remainder = number - (float )int_part;
  n += print(int_part);
80002030:	fc 1b 3f 00 	movh	r11,0x3f00
80002034:	e5 a0 0b 5b 	cop	cp0,cr11,cr5,cr11,0x40
80002038:	30 aa       	mov	r10,10
8000203a:	e5 a9 0b 0b 	cop	cp0,cr11,cr0,cr11,0x52
8000203e:	02 9c       	mov	r12,r1
80002040:	f0 1f 00 05 	mcall	80002054 <_ZN6AP_HAL5Print10printFloatEfh+0xc0>
80002044:	f8 03 00 04 	add	r4,r12,r3
80002048:	cf 1b       	rjmp	8000202a <_ZN6AP_HAL5Print10printFloatEfh+0x96>
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	1e 60       	and	r0,pc
80002050:	80 00       	ld.sh	r0,r0[0x0]
80002052:	a8 14       	st.h	r4[0x2],r4
80002054:	80 00       	ld.sh	r0,r0[0x0]
80002056:	1e f0       	st.b	--pc,r0
80002058:	80 01       	ld.sh	r1,r0[0x0]
8000205a:	0e 80       	andn	r0,r7
8000205c:	80 00       	ld.sh	r0,r0[0x0]
8000205e:	1f 70       	ld.ub	r0,--pc
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	1f 64       	ld.uh	r4,--pc

80002064 <_ZN6AP_HAL5Print5printEfi>:
  if (base == 0) return write(n);
  else return printNumber(n, base);
}

size_t Print::print(float n, int digits)
{
80002064:	d4 01       	pushm	lr
  return printFloat(n, digits);
80002066:	5c 5a       	castu.b	r10
80002068:	f0 1f 00 02 	mcall	80002070 <_ZN6AP_HAL5Print5printEfi+0xc>
}
8000206c:	d8 02       	popm	pc
8000206e:	00 00       	add	r0,r0
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	1f 94       	ld.ub	r4,pc[0x1]

80002074 <_ZN6AP_HAL5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
80002074:	eb cd 40 c0 	pushm	r6-r7,lr
80002078:	18 96       	mov	r6,r12
  size_t n = print(num, digits);
8000207a:	f0 1f 00 05 	mcall	8000208c <_ZN6AP_HAL5Print7printlnEfi+0x18>
8000207e:	18 97       	mov	r7,r12
  n += println();
80002080:	0c 9c       	mov	r12,r6
80002082:	f0 1f 00 04 	mcall	80002090 <_ZN6AP_HAL5Print7printlnEfi+0x1c>
  return n;
}
80002086:	0e 0c       	add	r12,r7
80002088:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	20 64       	sub	r4,6
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	1e 6c       	and	r12,pc

80002094 <_ZN6AP_HAL5Print7printlnEPKc>:
  n += print('\n');
  return n;
}

size_t Print::println(const char c[])
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	18 96       	mov	r6,r12
  size_t n = print(c);
8000209a:	f0 1f 00 05 	mcall	800020ac <_ZN6AP_HAL5Print7printlnEPKc+0x18>
8000209e:	18 97       	mov	r7,r12
  n += println();
800020a0:	0c 9c       	mov	r12,r6
800020a2:	f0 1f 00 04 	mcall	800020b0 <_ZN6AP_HAL5Print7printlnEPKc+0x1c>
  return n;
}
800020a6:	0e 0c       	add	r12,r7
800020a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	1f 70       	ld.ub	r0,--pc
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	1e 6c       	and	r12,pc

800020b4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv>:
#define	FL_FLTUPP	FL_ALT
#define FL_FLTEXP	FL_PREC
#define	FL_FLTFIX	FL_LONG

void print_vprintf (AP_HAL::Print *s, unsigned char in_progmem, const char *fmt, va_list ap)
{
800020b4:	d4 31       	pushm	r0-r7,lr
800020b6:	20 bd       	sub	sp,44
800020b8:	18 97       	mov	r7,r12
800020ba:	14 94       	mov	r4,r10
800020bc:	12 91       	mov	r1,r9

                /*
                 * Process non-format characters
                 */
                for (;;) {
                        c = GETBYTE (in_progmem, 1, fmt);
800020be:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
800020c2:	50 0b       	stdsp	sp[0x0],r11
        for (;;) {

                /*
                 * Process non-format characters
                 */
                for (;;) {
800020c4:	30 0a       	mov	r10,0
800020c6:	50 3a       	stdsp	sp[0xc],r10
800020c8:	c0 28       	rjmp	800020cc <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x18>
#define	FL_FLTUPP	FL_ALT
#define FL_FLTEXP	FL_PREC
#define	FL_FLTFIX	FL_LONG

void print_vprintf (AP_HAL::Print *s, unsigned char in_progmem, const char *fmt, va_list ap)
{
800020ca:	00 91       	mov	r1,r0

                /*
                 * Process non-format characters
                 */
                for (;;) {
                        c = GETBYTE (in_progmem, 1, fmt);
800020cc:	e8 c5 ff ff 	sub	r5,r4,-1
800020d0:	40 09       	lddsp	r9,sp[0x0]
800020d2:	58 09       	cp.w	r9,0
800020d4:	e9 f6 18 00 	ld.ubne	r6,r4[0x0]
800020d8:	e9 f6 08 00 	ld.ubeq	r6,r4[0x0]
800020dc:	ea 05 17 00 	moveq	r5,r5
                        if (!c) return;
800020e0:	58 06       	cp.w	r6,0
800020e2:	e0 80 04 48 	breq	80002972 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8be>
                        if (c == '%') {
800020e6:	32 58       	mov	r8,37
800020e8:	f0 06 18 00 	cp.b	r6,r8
800020ec:	c1 01       	brne	8000210c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x58>
                                c = GETBYTE (in_progmem, 1, fmt);
800020ee:	ea c4 ff ff 	sub	r4,r5,-1
800020f2:	40 0a       	lddsp	r10,sp[0x0]
800020f4:	58 0a       	cp.w	r10,0
800020f6:	eb f6 18 00 	ld.ubne	r6,r5[0x0]
800020fa:	eb f6 08 00 	ld.ubeq	r6,r5[0x0]
800020fe:	e8 04 17 00 	moveq	r4,r4
                                if (c != '%') break;
80002102:	32 58       	mov	r8,37
80002104:	f0 06 18 00 	cp.b	r6,r8
80002108:	c1 51       	brne	80002132 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7e>
8000210a:	c0 d8       	rjmp	80002124 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x70>
                        }
                        /* emit cr before lf to make most terminals happy */
                        if (c == '\n')
8000210c:	30 a8       	mov	r8,10
8000210e:	f0 06 18 00 	cp.b	r6,r8
80002112:	c0 30       	breq	80002118 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x64>
80002114:	0a 94       	mov	r4,r5
80002116:	c0 78       	rjmp	80002124 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x70>
                                s->write('\r');
80002118:	6e 08       	ld.w	r8,r7[0x0]
8000211a:	70 08       	ld.w	r8,r8[0x0]
8000211c:	30 db       	mov	r11,13
8000211e:	0e 9c       	mov	r12,r7
80002120:	5d 18       	icall	r8
80002122:	0a 94       	mov	r4,r5
                        s->write(c);
80002124:	6e 08       	ld.w	r8,r7[0x0]
80002126:	70 08       	ld.w	r8,r8[0x0]
80002128:	0c 9b       	mov	r11,r6
8000212a:	0e 9c       	mov	r12,r7
8000212c:	5d 18       	icall	r8
8000212e:	02 90       	mov	r0,r1
        for (;;) {

                /*
                 * Process non-format characters
                 */
                for (;;) {
80002130:	cc db       	rjmp	800020ca <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x16>
80002132:	e8 c9 ff ff 	sub	r9,r4,-1
80002136:	08 98       	mov	r8,r4
80002138:	30 02       	mov	r2,0
8000213a:	40 35       	lddsp	r5,sp[0xc]
8000213c:	0a 93       	mov	r3,r5
                                        continue;
                                }
                        }

                        if (flags < FL_LONG) {
                                if (c >= '0' && c <= '9') {
8000213e:	30 9c       	mov	r12,9
                                        }
                                        width = 10*width + c;
                                        flags |= FL_WIDTH;
                                        continue;
                                }
                                if (c == '.') {
80002140:	32 ee       	mov	lr,46
                                        if (flags & FL_PREC)
                                                return;
                                        flags |= FL_PREC;
                                        continue;
                                }
                                if (c == 'l') {
80002142:	36 c0       	mov	r0,108
                /*
                 * Process format adjustment characters, precision, width.
                 */
                do {
                        if (flags < FL_WIDTH) {
                                switch (c) {
80002144:	32 bb       	mov	r11,43
        for (;;) {

                /*
                 * Process non-format characters
                 */
                for (;;) {
80002146:	10 94       	mov	r4,r8
                
                /*
                 * Process format adjustment characters, precision, width.
                 */
                do {
                        if (flags < FL_WIDTH) {
80002148:	31 fa       	mov	r10,31
8000214a:	f4 03 18 00 	cp.b	r3,r10
8000214e:	e0 8b 00 21 	brhi	80002190 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xdc>
                                switch (c) {
80002152:	f6 06 18 00 	cp.b	r6,r11
80002156:	c1 60       	breq	80002182 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xce>
80002158:	e0 8b 00 0b 	brhi	8000216e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xba>
8000215c:	32 0a       	mov	r10,32
8000215e:	f4 06 18 00 	cp.b	r6,r10
80002162:	c1 10       	breq	80002184 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xd0>
80002164:	32 3a       	mov	r10,35
80002166:	f4 06 18 00 	cp.b	r6,r10
8000216a:	c1 31       	brne	80002190 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xdc>
8000216c:	c1 08       	rjmp	8000218c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xd8>
8000216e:	32 da       	mov	r10,45
80002170:	f4 06 18 00 	cp.b	r6,r10
80002174:	c0 a0       	breq	80002188 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xd4>
80002176:	33 0a       	mov	r10,48
80002178:	f4 06 18 00 	cp.b	r6,r10
8000217c:	c0 a1       	brne	80002190 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0xdc>
                                case '0':
                                        flags |= FL_ZFILL;
8000217e:	a1 a3       	sbr	r3,0x0
                                        continue;
80002180:	c3 78       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                case '+':
                                        flags |= FL_PLUS;
80002182:	a1 b3       	sbr	r3,0x1
                                        /* FALLTHROUGH */
                                case ' ':
                                        flags |= FL_SPACE;
80002184:	a3 a3       	sbr	r3,0x2
                                        continue;
80002186:	c3 48       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                case '-':
                                        flags |= FL_LPAD;
80002188:	a3 b3       	sbr	r3,0x3
                                        continue;
8000218a:	c3 28       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                case '#':
                                        flags |= FL_ALT;
8000218c:	a5 a3       	sbr	r3,0x4
                                        continue;
8000218e:	c3 08       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                }
                        }

                        if (flags < FL_LONG) {
80002190:	30 0a       	mov	r10,0
80002192:	f4 03 18 00 	cp.b	r3,r10
80002196:	c3 c5       	brlt	8000220e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x15a>
                                if (c >= '0' && c <= '9') {
80002198:	ec ca 00 30 	sub	r10,r6,48
8000219c:	5c 5a       	castu.b	r10
8000219e:	f8 0a 18 00 	cp.b	r10,r12
800021a2:	e0 8b 00 13 	brhi	800021c8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x114>
                                        c -= '0';
                                        if (flags & FL_PREC) {
800021a6:	06 96       	mov	r6,r3
800021a8:	e2 16 00 40 	andl	r6,0x40,COH
800021ac:	c0 70       	breq	800021ba <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x106>
                                                prec = 10*prec + c;
800021ae:	e4 02 00 22 	add	r2,r2,r2<<0x2
800021b2:	f4 02 00 12 	add	r2,r10,r2<<0x1
800021b6:	5c 52       	castu.b	r2
                                                continue;
800021b8:	c1 b8       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                        }
                                        width = 10*width + c;
800021ba:	ea 05 00 25 	add	r5,r5,r5<<0x2
800021be:	f4 05 00 15 	add	r5,r10,r5<<0x1
800021c2:	5c 55       	castu.b	r5
                                        flags |= FL_WIDTH;
800021c4:	a5 b3       	sbr	r3,0x5
                                        continue;
800021c6:	c1 48       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                }
                                if (c == '.') {
800021c8:	fc 06 18 00 	cp.b	r6,lr
800021cc:	c0 81       	brne	800021dc <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x128>
                                        if (flags & FL_PREC)
800021ce:	06 9a       	mov	r10,r3
800021d0:	e2 1a 00 40 	andl	r10,0x40,COH
800021d4:	e0 81 03 cf 	brne	80002972 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8be>
                                                return;
                                        flags |= FL_PREC;
800021d8:	a7 a3       	sbr	r3,0x6
                                        continue;
800021da:	c0 a8       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                }
                                if (c == 'l') {
800021dc:	e0 06 18 00 	cp.b	r6,r0
800021e0:	c0 31       	brne	800021e6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x132>
                                        flags |= FL_LONG;
800021e2:	a7 b3       	sbr	r3,0x7
                                        continue;
800021e4:	c0 58       	rjmp	800021ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x13a>
                                }
                                if (c == 'h')
800021e6:	36 8a       	mov	r10,104
800021e8:	f4 06 18 00 	cp.b	r6,r10
800021ec:	c1 11       	brne	8000220e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x15a>
                prec = 0;
                
                /*
                 * Process format adjustment characters, precision, width.
                 */
                do {
800021ee:	40 0a       	lddsp	r10,sp[0x0]
800021f0:	58 0a       	cp.w	r10,0
800021f2:	f2 04 17 10 	movne	r4,r9
800021f6:	f1 f6 18 00 	ld.ubne	r6,r8[0x0]
800021fa:	f1 f6 08 00 	ld.ubeq	r6,r8[0x0]
800021fe:	f2 04 17 00 	moveq	r4,r9
80002202:	2f f9       	sub	r9,-1
80002204:	2f f8       	sub	r8,-1
80002206:	58 06       	cp.w	r6,0
80002208:	c9 f1       	brne	80002146 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x92>
8000220a:	e0 8f 02 12 	bral	8000262e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x57a>
                } while ( (c = GETBYTE (in_progmem, 1, fmt)) != 0);

                /*
                 * Handle floating-point formats E, F, G, e, f, g.
                 */
                if (c >= 'E' && c <= 'G') {
8000220e:	ec c9 00 45 	sub	r9,r6,69
80002212:	30 28       	mov	r8,2
80002214:	f0 09 18 00 	cp.b	r9,r8
80002218:	e0 8b 00 06 	brhi	80002224 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x170>
                        flags |= FL_FLTUPP;
8000221c:	a5 a3       	sbr	r3,0x4
                        c += 'e' - 'E';
8000221e:	2e 06       	sub	r6,-32
80002220:	5c 56       	castu.b	r6
                        goto flt_oper;
80002222:	c0 a8       	rjmp	80002236 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x182>

                } else if (c >= 'e' && c <= 'g') {
80002224:	ec c9 00 65 	sub	r9,r6,101
80002228:	30 28       	mov	r8,2
8000222a:	f0 09 18 00 	cp.b	r9,r8
8000222e:	e0 8b 02 00 	brhi	8000262e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x57a>
                        int n;
                        unsigned char vtype;    /* result of float value parse  */
                        unsigned char sign;     /* sign character (or 0)        */
                        unsigned char ndigs;

                        flags &= ~FL_FLTUPP;
80002232:	e2 13 00 ef 	andl	r3,0xef,COH

                flt_oper:
                        float value = va_arg(ap,double);
80002236:	e2 c0 ff f8 	sub	r0,r1,-8
8000223a:	e2 ea 00 00 	ld.d	r10,r1[0]
8000223e:	f0 1f 01 cf 	mcall	80002978 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8c4>
                        if (!(flags & FL_PREC))
80002242:	06 98       	mov	r8,r3
80002244:	e2 18 00 40 	andl	r8,0x40,COH
80002248:	f9 b2 00 06 	moveq	r2,6
                                prec = 6;
                        flags &= ~(FL_FLTEXP | FL_FLTFIX);
8000224c:	e7 d3 c0 06 	bfextu	r3,r3,0x0,0x6
                        if (c == 'e') {
80002250:	36 58       	mov	r8,101
80002252:	f0 06 18 00 	cp.b	r6,r8
80002256:	c0 31       	brne	8000225c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1a8>
                                flags |= FL_FLTEXP;
80002258:	a7 a3       	sbr	r3,0x6
8000225a:	c0 b8       	rjmp	80002270 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1bc>
                        } else if (c == 'f') {
8000225c:	36 68       	mov	r8,102
8000225e:	f0 06 18 00 	cp.b	r6,r8
80002262:	c0 31       	brne	80002268 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1b4>
                                flags |= FL_FLTFIX;
80002264:	a7 b3       	sbr	r3,0x7
80002266:	c0 58       	rjmp	80002270 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1bc>
                        } else if (prec > 0)
80002268:	58 02       	cp.w	r2,0
8000226a:	c0 30       	breq	80002270 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1bc>
                                prec -= 1;
8000226c:	20 12       	sub	r2,1
8000226e:	5c 52       	castu.b	r2
                        if ((flags & FL_FLTFIX) && fabs(value) > 9999999) {
80002270:	50 23       	stdsp	sp[0x8],r3
80002272:	30 09       	mov	r9,0
80002274:	f2 03 18 00 	cp.b	r3,r9
80002278:	c2 64       	brge	800022c4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x210>
8000227a:	f3 dc c0 1f 	bfextu	r9,r12,0x0,0x1f
8000227e:	e0 68 96 7f 	mov	r8,38527
80002282:	ea 18 4b 18 	orh	r8,0x4b18
80002286:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000228a:	e0 8c 00 0e 	brvs	800022a6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1f2>
8000228e:	e0 8a 00 0c 	brle	800022a6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x1f2>
                                flags = (flags & ~FL_FLTFIX) | FL_FLTEXP;
80002292:	06 9a       	mov	r10,r3
80002294:	f1 d3 c0 06 	bfextu	r8,r3,0x0,0x6
80002298:	a7 a8       	sbr	r8,0x6
8000229a:	50 28       	stdsp	sp[0x8],r8
                        }

                        if (flags & FL_FLTFIX) {
8000229c:	10 93       	mov	r3,r8
8000229e:	30 09       	mov	r9,0
800022a0:	f2 08 18 00 	cp.b	r8,r9
800022a4:	c1 04       	brge	800022c4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x210>
                                vtype = 7;              /* 'prec' arg for 'ftoa_engine' */
                                ndigs = prec < 60 ? prec + 1 : 60;
800022a6:	33 b8       	mov	r8,59
800022a8:	f0 02 18 00 	cp.b	r2,r8
800022ac:	e0 88 00 06 	brls	800022b8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x204>
800022b0:	33 c8       	mov	r8,60
800022b2:	50 58       	stdsp	sp[0x14],r8
800022b4:	30 7a       	mov	r10,7
800022b6:	c1 88       	rjmp	800022e6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x232>
800022b8:	e4 c8 ff ff 	sub	r8,r2,-1
800022bc:	5c 58       	castu.b	r8
800022be:	50 58       	stdsp	sp[0x14],r8
800022c0:	30 7a       	mov	r10,7
800022c2:	c1 28       	rjmp	800022e6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x232>
                        } else {
                                if (prec > 10) prec = 10;
800022c4:	30 a8       	mov	r8,10
800022c6:	f0 02 18 00 	cp.b	r2,r8
800022ca:	f9 ba 0b 00 	movhi	r10,0
800022ce:	fb fa ba 05 	st.whi	sp[0x14],r10
800022d2:	f9 ba 0b 0a 	movhi	r10,10
800022d6:	f4 02 17 b0 	movhi	r2,r10
800022da:	e4 0a 17 80 	movls	r10,r2
800022de:	f9 b9 08 00 	movls	r9,0
800022e2:	fb f9 8a 05 	st.wls	sp[0x14],r9
                                vtype = prec;
                                ndigs = 0;
                        }
                        memset(buf, 0, sizeof(buf));
800022e6:	fa cb ff e4 	sub	r11,sp,-28
800022ea:	30 08       	mov	r8,0
800022ec:	30 09       	mov	r9,0
800022ee:	f6 e9 00 00 	st.d	r11[0],r8
800022f2:	fa c8 ff dc 	sub	r8,sp,-36
800022f6:	30 09       	mov	r9,0
800022f8:	91 09       	st.w	r8[0x0],r9
800022fa:	fa c8 ff d8 	sub	r8,sp,-40
800022fe:	b0 89       	st.b	r8[0x0],r9
                        exp = ftoa_engine(value, (char *)buf, vtype, ndigs);
80002300:	40 59       	lddsp	r9,sp[0x14]
80002302:	f0 1f 01 9f 	mcall	8000297c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8c8>
                        vtype = buf[0];
80002306:	fb 38 00 1c 	ld.ub	r8,sp[28]
8000230a:	50 18       	stdsp	sp[0x4],r8
    
                        sign = 0;
                        if ((vtype & FTOA_MINUS) && !(vtype & FTOA_NAN))
8000230c:	50 48       	stdsp	sp[0x10],r8
8000230e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002312:	c0 70       	breq	80002320 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x26c>
80002314:	40 48       	lddsp	r8,sp[0x10]
80002316:	e2 18 00 08 	andl	r8,0x8,COH
8000231a:	c0 31       	brne	80002320 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x26c>
8000231c:	32 d1       	mov	r1,45
8000231e:	c0 e8       	rjmp	8000233a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x286>
                                sign = '-';
                        else if (flags & FL_PLUS)
80002320:	06 91       	mov	r1,r3
80002322:	06 98       	mov	r8,r3
80002324:	e2 18 00 02 	andl	r8,0x2,COH
80002328:	c0 30       	breq	8000232e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x27a>
8000232a:	32 b1       	mov	r1,43
8000232c:	c0 78       	rjmp	8000233a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x286>
                                sign = '+';
                        else if (flags & FL_SPACE)
8000232e:	e2 11 00 04 	andl	r1,0x4,COH
80002332:	f9 b1 00 00 	moveq	r1,0
80002336:	f9 b1 01 20 	movne	r1,32
                                sign = ' ';

                        if (vtype & (FTOA_NAN | FTOA_INF)) {
8000233a:	40 48       	lddsp	r8,sp[0x10]
8000233c:	e2 18 00 0c 	andl	r8,0xc,COH
80002340:	c3 e0       	breq	800023bc <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x308>
                                ndigs = sign ? 4 : 3;
80002342:	58 01       	cp.w	r1,0
80002344:	f9 b8 01 04 	movne	r8,4
80002348:	f9 b8 00 03 	moveq	r8,3
                                if (width > ndigs) {
8000234c:	ea 08 18 00 	cp.b	r8,r5
80002350:	c0 33       	brcs	80002356 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2a2>
80002352:	30 05       	mov	r5,0
80002354:	c1 08       	rjmp	80002374 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2c0>
                                        width -= ndigs;
80002356:	10 15       	sub	r5,r8
80002358:	5c 55       	castu.b	r5
                                        if (!(flags & FL_LPAD)) {
8000235a:	06 98       	mov	r8,r3
8000235c:	e2 18 00 08 	andl	r8,0x8,COH
80002360:	c0 a1       	brne	80002374 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2c0>
                                                do {
                                                        s->write(' ');
80002362:	32 06       	mov	r6,32
80002364:	6e 08       	ld.w	r8,r7[0x0]
80002366:	70 08       	ld.w	r8,r8[0x0]
80002368:	0c 9b       	mov	r11,r6
8000236a:	0e 9c       	mov	r12,r7
8000236c:	5d 18       	icall	r8
                        if (vtype & (FTOA_NAN | FTOA_INF)) {
                                ndigs = sign ? 4 : 3;
                                if (width > ndigs) {
                                        width -= ndigs;
                                        if (!(flags & FL_LPAD)) {
                                                do {
8000236e:	20 15       	sub	r5,1
80002370:	5c 55       	castu.b	r5
80002372:	cf 91       	brne	80002364 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2b0>
                                                } while (--width);
                                        }
                                } else {
                                        width = 0;
                                }
                                if (sign)
80002374:	58 01       	cp.w	r1,0
80002376:	c0 60       	breq	80002382 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2ce>
                                        s->write(sign);
80002378:	6e 08       	ld.w	r8,r7[0x0]
8000237a:	70 08       	ld.w	r8,r8[0x0]
8000237c:	02 9b       	mov	r11,r1
8000237e:	0e 9c       	mov	r12,r7
80002380:	5d 18       	icall	r8
                                const prog_char_t *p = PSTR("inf");
                                if (vtype & FTOA_NAN)
80002382:	40 48       	lddsp	r8,sp[0x10]
80002384:	e2 18 00 08 	andl	r8,0x8,COH
80002388:	fe f9 05 f8 	ld.w	r9,pc[1528]
8000238c:	fe f6 05 f8 	ld.w	r6,pc[1528]
80002390:	58 08       	cp.w	r8,0
80002392:	f2 06 17 10 	movne	r6,r9
80002396:	0d 8b       	ld.ub	r11,r6[0x0]
                                        p = PSTR("nan");
                                while ( (ndigs = pgm_read_byte((const prog_char *)p)) != 0) {
80002398:	58 0b       	cp.w	r11,0
8000239a:	e0 80 00 ec 	breq	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                                        if (flags & FL_FLTUPP)
8000239e:	e2 13 00 10 	andl	r3,0x10,COH
800023a2:	58 03       	cp.w	r3,0
800023a4:	c0 30       	breq	800023aa <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2f6>
                                                ndigs += 'I' - 'i';
800023a6:	22 0b       	sub	r11,32
800023a8:	5c 5b       	castu.b	r11
                                        s->write(ndigs);
800023aa:	6e 08       	ld.w	r8,r7[0x0]
800023ac:	70 08       	ld.w	r8,r8[0x0]
800023ae:	0e 9c       	mov	r12,r7
800023b0:	5d 18       	icall	r8
                                        p++;
800023b2:	2f f6       	sub	r6,-1
800023b4:	0d 8b       	ld.ub	r11,r6[0x0]
                                if (sign)
                                        s->write(sign);
                                const prog_char_t *p = PSTR("inf");
                                if (vtype & FTOA_NAN)
                                        p = PSTR("nan");
                                while ( (ndigs = pgm_read_byte((const prog_char *)p)) != 0) {
800023b6:	58 0b       	cp.w	r11,0
800023b8:	cf 51       	brne	800023a2 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x2ee>
800023ba:	cd c8       	rjmp	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                                if (prec > 10) prec = 10;
                                vtype = prec;
                                ndigs = 0;
                        }
                        memset(buf, 0, sizeof(buf));
                        exp = ftoa_engine(value, (char *)buf, vtype, ndigs);
800023bc:	18 96       	mov	r6,r12
                                }
                                goto tail;
                        }

                        /* Output format adjustment, number of decimal digits in buf[] */
                        if (flags & FL_FLTFIX) {
800023be:	40 2a       	lddsp	r10,sp[0x8]
800023c0:	30 09       	mov	r9,0
800023c2:	f2 0a 18 00 	cp.b	r10,r9
800023c6:	c2 54       	brge	80002410 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x35c>
                                ndigs += exp;
800023c8:	40 5a       	lddsp	r10,sp[0x14]
800023ca:	f8 0a 00 08 	add	r8,r12,r10
800023ce:	5c 58       	castu.b	r8
800023d0:	50 58       	stdsp	sp[0x14],r8
                                if ((vtype & FTOA_CARRY) && buf[1] == '1')
800023d2:	40 48       	lddsp	r8,sp[0x10]
800023d4:	e2 18 00 10 	andl	r8,0x10,COH
800023d8:	c0 b0       	breq	800023ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x33a>
800023da:	33 19       	mov	r9,49
800023dc:	fb 38 00 1d 	ld.ub	r8,sp[29]
800023e0:	f2 08 18 00 	cp.b	r8,r9
800023e4:	c0 51       	brne	800023ee <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x33a>
                                        ndigs -= 1;
800023e6:	40 58       	lddsp	r8,sp[0x14]
800023e8:	20 18       	sub	r8,1
800023ea:	5c 58       	castu.b	r8
800023ec:	50 58       	stdsp	sp[0x14],r8
                                if ((signed char)ndigs < 1)
800023ee:	40 59       	lddsp	r9,sp[0x14]
800023f0:	30 08       	mov	r8,0
800023f2:	f0 09 18 00 	cp.b	r9,r8
800023f6:	e0 89 00 05 	brgt	80002400 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x34c>
800023fa:	30 1a       	mov	r10,1
800023fc:	50 5a       	stdsp	sp[0x14],r10
800023fe:	c3 b8       	rjmp	80002474 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3c0>
                                        ndigs = 1;
                                else if (ndigs > 8)
80002400:	30 88       	mov	r8,8
80002402:	40 59       	lddsp	r9,sp[0x14]
80002404:	f2 08 18 00 	cp.b	r8,r9
80002408:	f9 b9 03 08 	movlo	r9,8
8000240c:	50 59       	stdsp	sp[0x14],r9
8000240e:	c3 38       	rjmp	80002474 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3c0>
                                        ndigs = 8;
                        } else if (!(flags & FL_FLTEXP)) {              /* 'g(G)' format */
80002410:	06 98       	mov	r8,r3
80002412:	e2 18 00 40 	andl	r8,0x40,COH
80002416:	e0 81 02 a0 	brne	80002956 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8a2>
                                if (exp <= prec && exp >= -4)
8000241a:	18 32       	cp.w	r2,r12
8000241c:	f9 b9 04 01 	movge	r9,1
80002420:	f9 b9 05 00 	movlt	r9,0
80002424:	5b bc       	cp.w	r12,-5
80002426:	f9 b8 09 01 	movgt	r8,1
8000242a:	f9 b8 0a 00 	movle	r8,0
8000242e:	f3 e8 00 08 	and	r8,r9,r8
                                        flags |= FL_FLTFIX;
80002432:	06 99       	mov	r9,r3
80002434:	a7 b9       	sbr	r9,0x7
                                if ((signed char)ndigs < 1)
                                        ndigs = 1;
                                else if (ndigs > 8)
                                        ndigs = 8;
                        } else if (!(flags & FL_FLTEXP)) {              /* 'g(G)' format */
                                if (exp <= prec && exp >= -4)
80002436:	30 0a       	mov	r10,0
                                        flags |= FL_FLTFIX;
80002438:	f4 08 18 00 	cp.b	r8,r10
8000243c:	f2 03 17 10 	movne	r3,r9
                                while (prec && buf[1+prec] == '0')
80002440:	58 02       	cp.w	r2,0
80002442:	e0 80 02 85 	breq	8000294c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x898>
80002446:	fa c8 ff d4 	sub	r8,sp,-44
8000244a:	04 08       	add	r8,r2
8000244c:	f1 38 ff f1 	ld.ub	r8,r8[-15]
80002450:	33 09       	mov	r9,48
80002452:	f2 08 18 00 	cp.b	r8,r9
80002456:	e0 81 02 7b 	brne	8000294c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x898>
                                        prec--;
8000245a:	20 12       	sub	r2,1
8000245c:	5c 52       	castu.b	r2
8000245e:	cf 1b       	rjmp	80002440 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x38c>
                                if (flags & FL_FLTFIX) {
                                        ndigs = prec + 1;               /* number of digits in buf */
80002460:	e4 c8 ff ff 	sub	r8,r2,-1
80002464:	5c 58       	castu.b	r8
80002466:	50 58       	stdsp	sp[0x14],r8
                                        prec = prec > exp
                                                ? prec - exp : 0;       /* fractional part length  */
80002468:	04 36       	cp.w	r6,r2
8000246a:	c0 35       	brlt	80002470 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3bc>
8000246c:	30 02       	mov	r2,0
8000246e:	c0 38       	rjmp	80002474 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3c0>
80002470:	0c 12       	sub	r2,r6
80002472:	5c 52       	castu.b	r2
                                }
                        }
    
                        /* Conversion result length, width := free space length */
                        if (flags & FL_FLTFIX)
80002474:	50 63       	stdsp	sp[0x18],r3
                                n = (exp>0 ? exp+1 : 1);
80002476:	ec c8 ff ff 	sub	r8,r6,-1
8000247a:	58 06       	cp.w	r6,0
8000247c:	f9 b8 0a 01 	movle	r8,1
                        else
                                n = 5;          /* 1e+00 */
                        if (sign) n += 1;
80002480:	58 01       	cp.w	r1,0
80002482:	f7 b8 01 ff 	subne	r8,-1
                        if (prec) n += prec + 1;
80002486:	e4 c9 ff ff 	sub	r9,r2,-1
8000248a:	58 02       	cp.w	r2,0
8000248c:	f1 d9 e1 08 	addne	r8,r8,r9
                        width = width > n ? width - n : 0;
80002490:	0a 38       	cp.w	r8,r5
80002492:	c0 35       	brlt	80002498 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3e4>
80002494:	30 05       	mov	r5,0
80002496:	c0 38       	rjmp	8000249c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3e8>
80002498:	10 15       	sub	r5,r8
8000249a:	5c 55       	castu.b	r5
    
                        /* Output before first digit    */
                        if (!(flags & (FL_LPAD | FL_ZFILL))) {
8000249c:	50 23       	stdsp	sp[0x8],r3
8000249e:	06 98       	mov	r8,r3
800024a0:	e2 18 00 09 	andl	r8,0x9,COH
800024a4:	c0 c1       	brne	800024bc <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x408>
                                while (width) {
800024a6:	58 05       	cp.w	r5,0
800024a8:	c0 a0       	breq	800024bc <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x408>
                                        s->write(' ');
800024aa:	32 03       	mov	r3,32
800024ac:	6e 08       	ld.w	r8,r7[0x0]
800024ae:	70 08       	ld.w	r8,r8[0x0]
800024b0:	06 9b       	mov	r11,r3
800024b2:	0e 9c       	mov	r12,r7
800024b4:	5d 18       	icall	r8
                                        width--;
800024b6:	20 15       	sub	r5,1
800024b8:	5c 55       	castu.b	r5
                        if (prec) n += prec + 1;
                        width = width > n ? width - n : 0;
    
                        /* Output before first digit    */
                        if (!(flags & (FL_LPAD | FL_ZFILL))) {
                                while (width) {
800024ba:	cf 91       	brne	800024ac <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3f8>
                                        s->write(' ');
                                        width--;
                                }
                        }
                        if (sign) s->write(sign);
800024bc:	58 01       	cp.w	r1,0
800024be:	c0 60       	breq	800024ca <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x416>
800024c0:	6e 08       	ld.w	r8,r7[0x0]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	02 9b       	mov	r11,r1
800024c6:	0e 9c       	mov	r12,r7
800024c8:	5d 18       	icall	r8
                        if (!(flags & FL_LPAD)) {
800024ca:	40 28       	lddsp	r8,sp[0x8]
800024cc:	e2 18 00 08 	andl	r8,0x8,COH
800024d0:	c0 c1       	brne	800024e8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x434>
                                while (width) {
800024d2:	58 05       	cp.w	r5,0
800024d4:	c0 a0       	breq	800024e8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x434>
                                        s->write('0');
800024d6:	33 03       	mov	r3,48
800024d8:	6e 08       	ld.w	r8,r7[0x0]
800024da:	70 08       	ld.w	r8,r8[0x0]
800024dc:	06 9b       	mov	r11,r3
800024de:	0e 9c       	mov	r12,r7
800024e0:	5d 18       	icall	r8
                                        width--;
800024e2:	20 15       	sub	r5,1
800024e4:	5c 55       	castu.b	r5
                                        width--;
                                }
                        }
                        if (sign) s->write(sign);
                        if (!(flags & FL_LPAD)) {
                                while (width) {
800024e6:	cf 91       	brne	800024d8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x424>
                                        s->write('0');
                                        width--;
                                }
                        }
    
                        if (flags & FL_FLTFIX) {                /* 'f' format           */
800024e8:	40 68       	lddsp	r8,sp[0x18]
800024ea:	30 0a       	mov	r10,0
800024ec:	f4 08 18 00 	cp.b	r8,r10
800024f0:	c4 64       	brge	8000257c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4c8>

                                n = exp > 0 ? exp : 0;          /* exponent of left digit */
800024f2:	30 09       	mov	r9,0
800024f4:	ec 09 0c 43 	max	r3,r6,r9
800024f8:	ec c8 ff ff 	sub	r8,r6,-1
800024fc:	06 18       	sub	r8,r3
800024fe:	fa c1 ff e4 	sub	r1,sp,-28
80002502:	10 01       	add	r1,r8
                                do {
                                        if (n == -1)
                                                s->write('.');
                                        flags = (n <= exp && n > exp - ndigs)
                                                ? buf[exp - n + 1] : '0';
80002504:	40 58       	lddsp	r8,sp[0x14]
80002506:	ec 08 01 08 	sub	r8,r6,r8
8000250a:	50 18       	stdsp	sp[0x4],r8
                                        if (--n < -prec || flags == 0)
8000250c:	5c 32       	neg	r2
    
                        if (flags & FL_FLTFIX) {                /* 'f' format           */

                                n = exp > 0 ? exp : 0;          /* exponent of left digit */
                                do {
                                        if (n == -1)
8000250e:	5b f3       	cp.w	r3,-1
80002510:	c0 61       	brne	8000251c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x468>
                                                s->write('.');
80002512:	6e 08       	ld.w	r8,r7[0x0]
80002514:	70 08       	ld.w	r8,r8[0x0]
80002516:	32 eb       	mov	r11,46
80002518:	0e 9c       	mov	r12,r7
8000251a:	5d 18       	icall	r8
                                        flags = (n <= exp && n > exp - ndigs)
                                                ? buf[exp - n + 1] : '0';
8000251c:	0c 33       	cp.w	r3,r6
8000251e:	e0 89 00 08 	brgt	8000252e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x47a>
80002522:	40 1a       	lddsp	r10,sp[0x4]
80002524:	14 33       	cp.w	r3,r10
80002526:	e0 8a 00 04 	brle	8000252e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x47a>
8000252a:	03 8b       	ld.ub	r11,r1[0x0]
8000252c:	c0 28       	rjmp	80002530 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x47c>
8000252e:	33 0b       	mov	r11,48
                                        if (--n < -prec || flags == 0)
80002530:	20 13       	sub	r3,1
80002532:	04 33       	cp.w	r3,r2
80002534:	c0 95       	brlt	80002546 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x492>
80002536:	2f f1       	sub	r1,-1
80002538:	58 0b       	cp.w	r11,0
8000253a:	c0 60       	breq	80002546 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x492>
                                                break;
                                        s->write(flags);
8000253c:	6e 08       	ld.w	r8,r7[0x0]
8000253e:	70 08       	ld.w	r8,r8[0x0]
80002540:	0e 9c       	mov	r12,r7
80002542:	5d 18       	icall	r8
                        }
    
                        if (flags & FL_FLTFIX) {                /* 'f' format           */

                                n = exp > 0 ? exp : 0;          /* exponent of left digit */
                                do {
80002544:	ce 5b       	rjmp	8000250e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x45a>
                                                ? buf[exp - n + 1] : '0';
                                        if (--n < -prec || flags == 0)
                                                break;
                                        s->write(flags);
                                } while (1);
                                if (n == exp
80002546:	0c 33       	cp.w	r3,r6
80002548:	c0 d1       	brne	80002562 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4ae>
                                    && (buf[1] > '5'
8000254a:	fb 38 00 1d 	ld.ub	r8,sp[29]
                                                ? buf[exp - n + 1] : '0';
                                        if (--n < -prec || flags == 0)
                                                break;
                                        s->write(flags);
                                } while (1);
                                if (n == exp
8000254e:	33 59       	mov	r9,53
80002550:	f2 08 18 00 	cp.b	r8,r9
80002554:	e0 8b 00 0a 	brhi	80002568 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4b4>
80002558:	c0 51       	brne	80002562 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4ae>
8000255a:	40 48       	lddsp	r8,sp[0x10]
8000255c:	e2 18 00 10 	andl	r8,0x10,COH
80002560:	c0 40       	breq	80002568 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4b4>
                                    && (buf[1] > '5'
                                        || (buf[1] == '5' && !(vtype & FTOA_CARRY))) )
                                        {
                                                flags = '1';
                                        }
                                if (flags) s->write(flags);
80002562:	58 0b       	cp.w	r11,0
80002564:	c0 70       	breq	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
80002566:	c0 28       	rjmp	8000256a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4b6>
80002568:	33 1b       	mov	r11,49
8000256a:	6e 08       	ld.w	r8,r7[0x0]
8000256c:	70 08       	ld.w	r8,r8[0x0]
8000256e:	0e 9c       	mov	r12,r7
80002570:	5d 18       	icall	r8
                        } while (c);
                }
        
        tail:
                /* Tail is possible.    */
                while (width) {
80002572:	58 05       	cp.w	r5,0
80002574:	e0 81 01 e1 	brne	80002936 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x882>
80002578:	fe 9f fd a9 	bral	800020ca <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x16>
                                if (flags) s->write(flags);
        
                        } else {                                /* 'e(E)' format        */

                                /* mantissa     */
                                if (buf[1] != '1')
8000257c:	fb 3b 00 1d 	ld.ub	r11,sp[29]
80002580:	33 18       	mov	r8,49
                                        vtype &= ~FTOA_CARRY;
80002582:	40 19       	lddsp	r9,sp[0x4]
80002584:	e2 19 00 ef 	andl	r9,0xef,COH
80002588:	40 1a       	lddsp	r10,sp[0x4]
8000258a:	f6 08 18 00 	cp.b	r8,r11
8000258e:	f2 0a 17 10 	movne	r10,r9
80002592:	50 1a       	stdsp	sp[0x4],r10
                                s->write(buf[1]);
80002594:	6e 08       	ld.w	r8,r7[0x0]
80002596:	70 08       	ld.w	r8,r8[0x0]
80002598:	0e 9c       	mov	r12,r7
8000259a:	5d 18       	icall	r8
                                if (prec) {
8000259c:	58 02       	cp.w	r2,0
8000259e:	c1 50       	breq	800025c8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x514>
                                        s->write('.');
800025a0:	6e 08       	ld.w	r8,r7[0x0]
800025a2:	70 08       	ld.w	r8,r8[0x0]
800025a4:	32 eb       	mov	r11,46
800025a6:	0e 9c       	mov	r12,r7
800025a8:	5d 18       	icall	r8
800025aa:	30 23       	mov	r3,2
                                        sign = 2;
                                        do {
                                                s->write(buf[sign++]);
800025ac:	fa c9 ff d4 	sub	r9,sp,-44
800025b0:	06 09       	add	r9,r3
800025b2:	2f f3       	sub	r3,-1
800025b4:	5c 53       	castu.b	r3
800025b6:	6e 08       	ld.w	r8,r7[0x0]
800025b8:	70 08       	ld.w	r8,r8[0x0]
800025ba:	f3 3b ff f0 	ld.ub	r11,r9[-16]
800025be:	0e 9c       	mov	r12,r7
800025c0:	5d 18       	icall	r8
                                        vtype &= ~FTOA_CARRY;
                                s->write(buf[1]);
                                if (prec) {
                                        s->write('.');
                                        sign = 2;
                                        do {
800025c2:	20 12       	sub	r2,1
800025c4:	5c 52       	castu.b	r2
800025c6:	cf 31       	brne	800025ac <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4f8>
                                                s->write(buf[sign++]);
                                        } while (--prec);
                                }

                                /* exponent     */
                                s->write(flags & FL_FLTUPP ? 'E' : 'e');
800025c8:	6e 08       	ld.w	r8,r7[0x0]
800025ca:	70 08       	ld.w	r8,r8[0x0]
800025cc:	40 2b       	lddsp	r11,sp[0x8]
800025ce:	e2 1b 00 10 	andl	r11,0x10,COH
800025d2:	f9 bb 01 45 	movne	r11,69
800025d6:	f9 bb 00 65 	moveq	r11,101
800025da:	0e 9c       	mov	r12,r7
800025dc:	5d 18       	icall	r8
                                ndigs = '+';
                                if (exp < 0 || (exp == 0 && (vtype & FTOA_CARRY) != 0)) {
800025de:	58 06       	cp.w	r6,0
800025e0:	c0 95       	brlt	800025f2 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x53e>
800025e2:	c0 30       	breq	800025e8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x534>
800025e4:	32 bb       	mov	r11,43
800025e6:	c0 88       	rjmp	800025f6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x542>
800025e8:	40 18       	lddsp	r8,sp[0x4]
800025ea:	e2 18 00 10 	andl	r8,0x10,COH
800025ee:	e0 80 01 b8 	breq	8000295e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8aa>
                                        exp = -exp;
800025f2:	5c 36       	neg	r6
800025f4:	32 db       	mov	r11,45
                                        ndigs = '-';
                                }
                                s->write(ndigs);
800025f6:	6e 08       	ld.w	r8,r7[0x0]
800025f8:	70 08       	ld.w	r8,r8[0x0]
800025fa:	0e 9c       	mov	r12,r7
800025fc:	5d 18       	icall	r8
                                for (ndigs = '0'; exp >= 10; exp -= 10)
800025fe:	58 96       	cp.w	r6,9
80002600:	e0 89 00 04 	brgt	80002608 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x554>
80002604:	33 0b       	mov	r11,48
80002606:	c0 88       	rjmp	80002616 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x562>
80002608:	33 0b       	mov	r11,48
                                        ndigs += 1;
8000260a:	2f fb       	sub	r11,-1
8000260c:	5c 5b       	castu.b	r11
                                if (exp < 0 || (exp == 0 && (vtype & FTOA_CARRY) != 0)) {
                                        exp = -exp;
                                        ndigs = '-';
                                }
                                s->write(ndigs);
                                for (ndigs = '0'; exp >= 10; exp -= 10)
8000260e:	20 a6       	sub	r6,10
80002610:	58 96       	cp.w	r6,9
80002612:	fe 99 ff fc 	brgt	8000260a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x556>
                                        ndigs += 1;
                                s->write(ndigs);
80002616:	6e 08       	ld.w	r8,r7[0x0]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	0e 9c       	mov	r12,r7
8000261c:	5d 18       	icall	r8
                                s->write('0' + exp);
8000261e:	6e 08       	ld.w	r8,r7[0x0]
80002620:	ec cb ff d0 	sub	r11,r6,-48
80002624:	70 08       	ld.w	r8,r8[0x0]
80002626:	5c 5b       	castu.b	r11
80002628:	0e 9c       	mov	r12,r7
8000262a:	5d 18       	icall	r8
8000262c:	ca 3b       	rjmp	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                 */
                {
                        const char * pnt;
                        size_t size;

                        switch (c) {
8000262e:	36 38       	mov	r8,99
80002630:	f0 06 18 00 	cp.b	r6,r8
80002634:	c0 a0       	breq	80002648 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x594>
80002636:	37 38       	mov	r8,115
80002638:	f0 06 18 00 	cp.b	r6,r8
8000263c:	c0 f0       	breq	8000265a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5a6>
8000263e:	35 38       	mov	r8,83
80002640:	f0 06 18 00 	cp.b	r6,r8
80002644:	c5 31       	brne	800026ea <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x636>
80002646:	c1 a8       	rjmp	8000267a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5c6>

                        case 'c':
                                buf[0] = va_arg (ap, int);
80002648:	e2 c0 ff fc 	sub	r0,r1,-4
8000264c:	62 08       	ld.w	r8,r1[0x0]
8000264e:	fb 68 00 1c 	st.b	sp[28],r8
80002652:	30 16       	mov	r6,1
80002654:	fa c1 ff e4 	sub	r1,sp,-28
                                pnt = (char *)buf;
                                size = 1;
                                goto no_pgmstring;
80002658:	c0 e8       	rjmp	80002674 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5c0>

                        case 's':
                                pnt = va_arg (ap, char *);
8000265a:	02 90       	mov	r0,r1
8000265c:	01 01       	ld.w	r1,r0++
                                size = strnlen (pnt, (flags & FL_PREC) ? prec : ~0);
8000265e:	06 9b       	mov	r11,r3
80002660:	e2 1b 00 40 	andl	r11,0x40,COH
80002664:	e4 0b 17 10 	movne	r11,r2
80002668:	f9 bb 00 ff 	moveq	r11,-1
8000266c:	02 9c       	mov	r12,r1
8000266e:	f0 1f 00 c7 	mcall	80002988 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8d4>
80002672:	18 96       	mov	r6,r12
                        no_pgmstring:
                                flags &= ~FL_PGMSTRING;
80002674:	e5 d3 c0 07 	bfextu	r2,r3,0x0,0x7
                                goto str_lpad;
80002678:	c1 08       	rjmp	80002698 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5e4>

                        case 'S':
                        // pgmstring: // not yet used
                                pnt = va_arg (ap, char *);
8000267a:	02 90       	mov	r0,r1
8000267c:	01 01       	ld.w	r1,r0++
                                size = strnlen_P (pnt, (flags & FL_PREC) ? prec : ~0);
8000267e:	06 9b       	mov	r11,r3
80002680:	e2 1b 00 40 	andl	r11,0x40,COH
    return strncpy(buffer, pstr, buffer_size);
}

static inline size_t strnlen_P(const prog_char_t *str, size_t size)
{
	return strnlen(str, size);
80002684:	e4 0b 17 10 	movne	r11,r2
80002688:	f9 bb 00 ff 	moveq	r11,-1
8000268c:	02 9c       	mov	r12,r1
8000268e:	f0 1f 00 bf 	mcall	80002988 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8d4>
80002692:	18 96       	mov	r6,r12
                                flags |= FL_PGMSTRING;
80002694:	06 92       	mov	r2,r3
80002696:	a7 b2       	sbr	r2,0x7

                        str_lpad:
                                if (!(flags & FL_LPAD)) {
80002698:	04 98       	mov	r8,r2
8000269a:	e2 18 00 08 	andl	r8,0x8,COH
8000269e:	c0 31       	brne	800026a4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5f0>
                                        while (size < width) {
800026a0:	0a 36       	cp.w	r6,r5
800026a2:	c0 43       	brcs	800026aa <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5f6>
                                                s->write(' ');
                                                width--;
                                        }
                                }
                                while (size) {
800026a4:	58 06       	cp.w	r6,0
800026a6:	c0 d1       	brne	800026c0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x60c>
800026a8:	c6 5b       	rjmp	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                                flags |= FL_PGMSTRING;

                        str_lpad:
                                if (!(flags & FL_LPAD)) {
                                        while (size < width) {
                                                s->write(' ');
800026aa:	32 03       	mov	r3,32
800026ac:	6e 08       	ld.w	r8,r7[0x0]
800026ae:	70 08       	ld.w	r8,r8[0x0]
800026b0:	06 9b       	mov	r11,r3
800026b2:	0e 9c       	mov	r12,r7
800026b4:	5d 18       	icall	r8
                                                width--;
800026b6:	20 15       	sub	r5,1
800026b8:	5c 55       	castu.b	r5
                                size = strnlen_P (pnt, (flags & FL_PREC) ? prec : ~0);
                                flags |= FL_PGMSTRING;

                        str_lpad:
                                if (!(flags & FL_LPAD)) {
                                        while (size < width) {
800026ba:	0a 36       	cp.w	r6,r5
800026bc:	cf 83       	brcs	800026ac <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5f8>
800026be:	cf 3b       	rjmp	800026a4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x5f0>
800026c0:	02 93       	mov	r3,r1
                                                s->write(' ');
                                                width--;
                                        }
                                }
                                while (size) {
                                        s->write(GETBYTE (flags, FL_PGMSTRING, pnt));
800026c2:	6e 08       	ld.w	r8,r7[0x0]
800026c4:	70 08       	ld.w	r8,r8[0x0]
800026c6:	30 09       	mov	r9,0
800026c8:	f2 02 18 00 	cp.b	r2,r9
800026cc:	e7 fb 58 00 	ld.ublt	r11,r3[0x0]
800026d0:	e7 fb 48 00 	ld.ubge	r11,r3[0x0]
800026d4:	0e 9c       	mov	r12,r7
800026d6:	5d 18       	icall	r8
                                        if (width) width -= 1;
800026d8:	58 05       	cp.w	r5,0
800026da:	c0 30       	breq	800026e0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x62c>
800026dc:	20 15       	sub	r5,1
800026de:	5c 55       	castu.b	r5
                                        size -= 1;
800026e0:	20 16       	sub	r6,1
800026e2:	2f f3       	sub	r3,-1
                                        while (size < width) {
                                                s->write(' ');
                                                width--;
                                        }
                                }
                                while (size) {
800026e4:	58 06       	cp.w	r6,0
800026e6:	ce e1       	brne	800026c2 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x60e>
800026e8:	c4 5b       	rjmp	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                }

                /*
                 * Handle integer formats variations for d/i, u, o, p, x, X.
                 */
                if (c == 'd' || c == 'i') {
800026ea:	36 48       	mov	r8,100
800026ec:	f0 06 18 00 	cp.b	r6,r8
800026f0:	5f 09       	sreq	r9
800026f2:	36 98       	mov	r8,105
800026f4:	f0 06 18 00 	cp.b	r6,r8
800026f8:	5f 08       	sreq	r8
800026fa:	f3 e8 10 08 	or	r8,r9,r8
800026fe:	30 0a       	mov	r10,0
80002700:	f4 08 18 00 	cp.b	r8,r10
80002704:	c1 d0       	breq	8000273e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x68a>
                        long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
80002706:	e2 c8 ff fc 	sub	r8,r1,-4
8000270a:	10 90       	mov	r0,r8
8000270c:	f4 03 18 00 	cp.b	r3,r10
80002710:	e3 fc 50 00 	ld.wlt	r12,r1[0x0]
80002714:	e3 fc 40 00 	ld.wge	r12,r1[0x0]
                        flags &= ~(FL_NEGATIVE | FL_ALT);
80002718:	06 91       	mov	r1,r3
8000271a:	e2 11 00 6f 	andl	r1,0x6f,COH
                        if (x < 0) {
                                x = -x;
                                flags |= FL_NEGATIVE;
8000271e:	02 98       	mov	r8,r1
80002720:	a7 b8       	sbr	r8,0x7
                 * Handle integer formats variations for d/i, u, o, p, x, X.
                 */
                if (c == 'd' || c == 'i') {
                        long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
                        flags &= ~(FL_NEGATIVE | FL_ALT);
                        if (x < 0) {
80002722:	58 0c       	cp.w	r12,0
80002724:	c0 34       	brge	8000272a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x676>
                                x = -x;
80002726:	5c 3c       	neg	r12
                                flags |= FL_NEGATIVE;
80002728:	10 91       	mov	r1,r8
                        }
                        c = ultoa_invert (x, (char *)buf, 10) - (char *)buf;
8000272a:	fa c6 ff e4 	sub	r6,sp,-28
8000272e:	30 aa       	mov	r10,10
80002730:	0c 9b       	mov	r11,r6
80002732:	f0 1f 00 97 	mcall	8000298c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8d8>
80002736:	f8 06 01 06 	sub	r6,r12,r6
8000273a:	5c 56       	castu.b	r6
8000273c:	c5 48       	rjmp	800027e4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x730>

                } else {
                        int base;

                        if (c == 'u') {
8000273e:	37 58       	mov	r8,117
80002740:	f0 06 18 00 	cp.b	r6,r8
80002744:	c0 51       	brne	8000274e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x69a>
                                flags &= ~FL_ALT;
80002746:	e2 13 00 ef 	andl	r3,0xef,COH
8000274a:	30 aa       	mov	r10,10
                                base = 10;
                                goto ultoa;
8000274c:	c3 58       	rjmp	800027b6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x702>
                        }

                        flags &= ~(FL_PLUS | FL_SPACE);
8000274e:	e2 13 00 f9 	andl	r3,0xf9,COH

                        switch (c) {
80002752:	36 f8       	mov	r8,111
80002754:	f0 06 18 00 	cp.b	r6,r8
80002758:	c1 30       	breq	8000277e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6ca>
8000275a:	e0 8b 00 08 	brhi	8000276a <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6b6>
8000275e:	35 88       	mov	r8,88
80002760:	f0 06 18 00 	cp.b	r6,r8
80002764:	e0 81 01 07 	brne	80002972 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8be>
80002768:	c1 a8       	rjmp	8000279c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6e8>
8000276a:	37 08       	mov	r8,112
8000276c:	f0 06 18 00 	cp.b	r6,r8
80002770:	c0 90       	breq	80002782 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6ce>
80002772:	37 88       	mov	r8,120
80002774:	f0 06 18 00 	cp.b	r6,r8
80002778:	e0 81 00 fd 	brne	80002972 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8be>
8000277c:	c0 48       	rjmp	80002784 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6d0>
8000277e:	30 8a       	mov	r10,8
80002780:	c1 b8       	rjmp	800027b6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x702>
                        case 'o':
                                base = 8;
                                goto ultoa;
                        case 'p':
                                flags |= FL_ALT;
80002782:	a5 a3       	sbr	r3,0x4
                                /* no break */
                        case 'x':
                                if (flags & FL_ALT)
                                        flags |= FL_ALTHEX;
80002784:	06 98       	mov	r8,r3
80002786:	a3 a8       	sbr	r8,0x2
                                goto ultoa;
                        case 'p':
                                flags |= FL_ALT;
                                /* no break */
                        case 'x':
                                if (flags & FL_ALT)
80002788:	06 99       	mov	r9,r3
8000278a:	e2 19 00 10 	andl	r9,0x10,COH
8000278e:	f9 ba 00 10 	moveq	r10,16
                                        flags |= FL_ALTHEX;
80002792:	f0 03 17 10 	movne	r3,r8
80002796:	f9 ba 01 10 	movne	r10,16
8000279a:	c0 e8       	rjmp	800027b6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x702>
                                base = 16;
                                goto ultoa;
                        case 'X':
                                if (flags & FL_ALT)
                                        flags |= (FL_ALTHEX | FL_ALTUPP);
8000279c:	06 98       	mov	r8,r3
8000279e:	e8 18 00 06 	orl	r8,0x6
                                if (flags & FL_ALT)
                                        flags |= FL_ALTHEX;
                                base = 16;
                                goto ultoa;
                        case 'X':
                                if (flags & FL_ALT)
800027a2:	06 99       	mov	r9,r3
800027a4:	e2 19 00 10 	andl	r9,0x10,COH
800027a8:	c0 41       	brne	800027b0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x6fc>
800027aa:	e0 6a 02 10 	mov	r10,528
800027ae:	c0 48       	rjmp	800027b6 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x702>
                                        flags |= (FL_ALTHEX | FL_ALTUPP);
800027b0:	10 93       	mov	r3,r8
800027b2:	e0 6a 02 10 	mov	r10,528
                                base = 16 | XTOA_UPPER;
                        ultoa:
                                c = ultoa_invert ((flags & FL_LONG)
                                                    ? va_arg(ap, unsigned long)
                                                    : va_arg(ap, unsigned int),
                                                    (char *)buf, base)  -  (char *)buf;
800027b6:	e2 c0 ff fc 	sub	r0,r1,-4
800027ba:	30 09       	mov	r9,0
800027bc:	f2 03 18 00 	cp.b	r3,r9
800027c0:	e3 fc 50 00 	ld.wlt	r12,r1[0x0]
800027c4:	e0 00 17 40 	movge	r0,r0
800027c8:	e3 fc 40 00 	ld.wge	r12,r1[0x0]
800027cc:	fa c6 ff e4 	sub	r6,sp,-28
800027d0:	e2 1a 00 1a 	andl	r10,0x1a,COH
800027d4:	0c 9b       	mov	r11,r6
800027d6:	f0 1f 00 6e 	mcall	8000298c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8d8>
800027da:	f8 06 01 06 	sub	r6,r12,r6
800027de:	5c 56       	castu.b	r6
                                flags &= ~FL_NEGATIVE;
800027e0:	e3 d3 c0 07 	bfextu	r1,r3,0x0,0x7
                 */
                {
                        unsigned char len;

                        len = c;
                        if (flags & FL_PREC) {
800027e4:	02 98       	mov	r8,r1
800027e6:	e2 18 00 40 	andl	r8,0x40,COH
800027ea:	c1 40       	breq	80002812 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x75e>
                                flags &= ~FL_ZFILL;
800027ec:	e2 11 00 fe 	andl	r1,0xfe,COH
                                if (len < prec) {
800027f0:	e4 06 18 00 	cp.b	r6,r2
800027f4:	c0 f2       	brcc	80002812 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x75e>
                                        len = prec;
                                        if ((flags & FL_ALT) && !(flags & FL_ALTHEX))
800027f6:	02 98       	mov	r8,r1
800027f8:	e2 18 00 14 	andl	r8,0x14,COH
                                                flags &= ~FL_ALT;
800027fc:	02 99       	mov	r9,r1
800027fe:	e2 19 00 ef 	andl	r9,0xef,COH
                        len = c;
                        if (flags & FL_PREC) {
                                flags &= ~FL_ZFILL;
                                if (len < prec) {
                                        len = prec;
                                        if ((flags & FL_ALT) && !(flags & FL_ALTHEX))
80002802:	59 08       	cp.w	r8,16
80002804:	e4 03 17 00 	moveq	r3,r2
80002808:	e4 03 17 10 	movne	r3,r2
8000280c:	f2 01 17 00 	moveq	r1,r9
80002810:	c0 28       	rjmp	80002814 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x760>
                                                flags &= ~FL_ALT;
80002812:	0c 93       	mov	r3,r6
                                }
                        }
                        if (flags & FL_ALT) {
80002814:	02 99       	mov	r9,r1
80002816:	02 98       	mov	r8,r1
80002818:	e2 18 00 10 	andl	r8,0x10,COH
8000281c:	c1 50       	breq	80002846 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x792>
                                if (buf[c-1] == '0') {
8000281e:	fa c8 ff d4 	sub	r8,sp,-44
80002822:	0c 08       	add	r8,r6
80002824:	f1 38 ff ef 	ld.ub	r8,r8[-17]
80002828:	33 0a       	mov	r10,48
8000282a:	f4 08 18 00 	cp.b	r8,r10
8000282e:	c0 41       	brne	80002836 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x782>
                                        flags &= ~(FL_ALT | FL_ALTHEX | FL_ALTUPP);
80002830:	e2 11 00 e9 	andl	r1,0xe9,COH
80002834:	c0 e8       	rjmp	80002850 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x79c>
                                } else {
                                        len += 1;
80002836:	2f f3       	sub	r3,-1
80002838:	5c 53       	castu.b	r3
                                        if (flags & FL_ALTHEX)
8000283a:	e2 19 00 04 	andl	r9,0x4,COH
8000283e:	c0 90       	breq	80002850 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x79c>
                                                len += 1;
80002840:	2f f3       	sub	r3,-1
80002842:	5c 53       	castu.b	r3
80002844:	c0 68       	rjmp	80002850 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x79c>
                                }
                        } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
80002846:	e2 19 00 86 	andl	r9,0x86,COH
8000284a:	c0 30       	breq	80002850 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x79c>
                                len += 1;
8000284c:	2f f3       	sub	r3,-1
8000284e:	5c 53       	castu.b	r3
                        }

                        if (!(flags & FL_LPAD)) {
80002850:	50 11       	stdsp	sp[0x4],r1
80002852:	02 98       	mov	r8,r1
80002854:	e2 18 00 08 	andl	r8,0x8,COH
80002858:	c1 d1       	brne	80002892 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7de>
                                if (flags & FL_ZFILL) {
8000285a:	f1 d1 c0 01 	bfextu	r8,r1,0x0,0x1
8000285e:	c0 c0       	breq	80002876 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7c2>
                                        prec = c;
                                        if (len < width) {
80002860:	ea 03 18 00 	cp.b	r3,r5
80002864:	e0 82 00 85 	brhs	8000296e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x8ba>
                                                prec += width - len;
80002868:	ec 05 00 05 	add	r5,r6,r5
8000286c:	ea 03 01 03 	sub	r3,r5,r3
80002870:	e5 d3 c0 08 	bfextu	r2,r3,0x0,0x8
80002874:	c1 58       	rjmp	8000289e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ea>
                                                len = width;
                                        }
                                }
                                while (len < width) {
80002876:	ea 03 18 00 	cp.b	r3,r5
8000287a:	c1 22       	brcc	8000289e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ea>
                                        s->write(' ');
8000287c:	6e 08       	ld.w	r8,r7[0x0]
8000287e:	70 08       	ld.w	r8,r8[0x0]
80002880:	32 0b       	mov	r11,32
80002882:	0e 9c       	mov	r12,r7
80002884:	5d 18       	icall	r8
                                        len++;
80002886:	2f f3       	sub	r3,-1
80002888:	5c 53       	castu.b	r3
                                        if (len < width) {
                                                prec += width - len;
                                                len = width;
                                        }
                                }
                                while (len < width) {
8000288a:	ea 03 18 00 	cp.b	r3,r5
8000288e:	cf 73       	brcs	8000287c <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7c8>
80002890:	c0 78       	rjmp	8000289e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ea>
                                        s->write(' ');
                                        len++;
                                }
                        }
        
                        width =  (len < width) ? width - len : 0;
80002892:	ea 03 18 00 	cp.b	r3,r5
80002896:	c0 42       	brcc	8000289e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ea>
80002898:	06 15       	sub	r5,r3
8000289a:	5c 55       	castu.b	r5
8000289c:	c0 28       	rjmp	800028a0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ec>
8000289e:	30 05       	mov	r5,0

                        if (flags & FL_ALT) {
800028a0:	40 18       	lddsp	r8,sp[0x4]
800028a2:	e2 18 00 10 	andl	r8,0x10,COH
800028a6:	c1 90       	breq	800028d8 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x824>
                                s->write('0');
800028a8:	6e 08       	ld.w	r8,r7[0x0]
800028aa:	70 08       	ld.w	r8,r8[0x0]
800028ac:	33 0b       	mov	r11,48
800028ae:	0e 9c       	mov	r12,r7
800028b0:	5d 18       	icall	r8
                                if (flags & FL_ALTHEX)
800028b2:	40 18       	lddsp	r8,sp[0x4]
800028b4:	e2 18 00 04 	andl	r8,0x4,COH
800028b8:	c0 c0       	breq	800028d0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x81c>
                                        s->write(flags & FL_ALTUPP ? 'X' : 'x');
800028ba:	6e 08       	ld.w	r8,r7[0x0]
800028bc:	70 08       	ld.w	r8,r8[0x0]
800028be:	40 1b       	lddsp	r11,sp[0x4]
800028c0:	e2 1b 00 02 	andl	r11,0x2,COH
800028c4:	f9 bb 01 58 	movne	r11,88
800028c8:	f9 bb 00 78 	moveq	r11,120
800028cc:	0e 9c       	mov	r12,r7
800028ce:	5d 18       	icall	r8
                                if (flags & FL_PLUS) z = '+';
                                if (flags & FL_NEGATIVE) z = '-';
                                s->write(z);
                        }
                
                        while (prec > c) {
800028d0:	e4 06 18 00 	cp.b	r6,r2
800028d4:	c1 73       	brcs	80002902 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x84e>
800028d6:	c2 18       	rjmp	80002918 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x864>

                        if (flags & FL_ALT) {
                                s->write('0');
                                if (flags & FL_ALTHEX)
                                        s->write(flags & FL_ALTUPP ? 'X' : 'x');
                        } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
800028d8:	40 18       	lddsp	r8,sp[0x4]
800028da:	e2 18 00 86 	andl	r8,0x86,COH
800028de:	cf 90       	breq	800028d0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x81c>
                                unsigned char z = ' ';
                                if (flags & FL_PLUS) z = '+';
800028e0:	40 1b       	lddsp	r11,sp[0x4]
800028e2:	e2 1b 00 02 	andl	r11,0x2,COH
800028e6:	f9 bb 00 20 	moveq	r11,32
800028ea:	f9 bb 01 2b 	movne	r11,43
                                if (flags & FL_NEGATIVE) z = '-';
800028ee:	30 09       	mov	r9,0
800028f0:	e2 09 18 00 	cp.b	r9,r1
800028f4:	f9 bb 09 2d 	movgt	r11,45
                                s->write(z);
800028f8:	6e 08       	ld.w	r8,r7[0x0]
800028fa:	70 08       	ld.w	r8,r8[0x0]
800028fc:	0e 9c       	mov	r12,r7
800028fe:	5d 18       	icall	r8
80002900:	ce 8b       	rjmp	800028d0 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x81c>
                        }
                
                        while (prec > c) {
                                s->write('0');
80002902:	33 03       	mov	r3,48
80002904:	6e 08       	ld.w	r8,r7[0x0]
80002906:	70 08       	ld.w	r8,r8[0x0]
80002908:	06 9b       	mov	r11,r3
8000290a:	0e 9c       	mov	r12,r7
8000290c:	5d 18       	icall	r8
                                prec--;
8000290e:	20 12       	sub	r2,1
80002910:	5c 52       	castu.b	r2
                                if (flags & FL_PLUS) z = '+';
                                if (flags & FL_NEGATIVE) z = '-';
                                s->write(z);
                        }
                
                        while (prec > c) {
80002912:	e4 06 18 00 	cp.b	r6,r2
80002916:	cf 73       	brcs	80002904 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x850>
                                s->write('0');
                                prec--;
                        }
        
                        do {
                                s->write(buf[--c]);
80002918:	20 16       	sub	r6,1
8000291a:	5c 56       	castu.b	r6
8000291c:	6e 08       	ld.w	r8,r7[0x0]
8000291e:	fa c9 ff d4 	sub	r9,sp,-44
80002922:	0c 09       	add	r9,r6
80002924:	70 08       	ld.w	r8,r8[0x0]
80002926:	f3 3b ff f0 	ld.ub	r11,r9[-16]
8000292a:	0e 9c       	mov	r12,r7
8000292c:	5d 18       	icall	r8
                        while (prec > c) {
                                s->write('0');
                                prec--;
                        }
        
                        do {
8000292e:	58 06       	cp.w	r6,0
80002930:	cf 41       	brne	80002918 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x864>
80002932:	fe 9f fe 20 	bral	80002572 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x4be>
                }
        
        tail:
                /* Tail is possible.    */
                while (width) {
                        s->write(' ');
80002936:	32 06       	mov	r6,32
80002938:	6e 08       	ld.w	r8,r7[0x0]
8000293a:	70 08       	ld.w	r8,r8[0x0]
8000293c:	0c 9b       	mov	r11,r6
8000293e:	0e 9c       	mov	r12,r7
80002940:	5d 18       	icall	r8
                        width--;
80002942:	20 15       	sub	r5,1
80002944:	5c 55       	castu.b	r5
                        } while (c);
                }
        
        tail:
                /* Tail is possible.    */
                while (width) {
80002946:	cf 91       	brne	80002938 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x884>
80002948:	fe 9f fb c1 	bral	800020ca <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x16>
                        } else if (!(flags & FL_FLTEXP)) {              /* 'g(G)' format */
                                if (exp <= prec && exp >= -4)
                                        flags |= FL_FLTFIX;
                                while (prec && buf[1+prec] == '0')
                                        prec--;
                                if (flags & FL_FLTFIX) {
8000294c:	30 08       	mov	r8,0
8000294e:	f0 03 18 00 	cp.b	r3,r8
80002952:	fe 95 fd 87 	brlt	80002460 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3ac>
                                                ? prec - exp : 0;       /* fractional part length  */
                                }
                        }
    
                        /* Conversion result length, width := free space length */
                        if (flags & FL_FLTFIX)
80002956:	50 63       	stdsp	sp[0x18],r3
80002958:	30 58       	mov	r8,5
8000295a:	fe 9f fd 93 	bral	80002480 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x3cc>
                                ndigs = '+';
                                if (exp < 0 || (exp == 0 && (vtype & FTOA_CARRY) != 0)) {
                                        exp = -exp;
                                        ndigs = '-';
                                }
                                s->write(ndigs);
8000295e:	6e 08       	ld.w	r8,r7[0x0]
80002960:	70 08       	ld.w	r8,r8[0x0]
80002962:	32 bb       	mov	r11,43
80002964:	0e 9c       	mov	r12,r7
80002966:	5d 18       	icall	r8
80002968:	33 0b       	mov	r11,48
8000296a:	fe 9f fe 56 	bral	80002616 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x562>
8000296e:	0c 92       	mov	r2,r6
80002970:	c9 7b       	rjmp	8000289e <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x7ea>
                while (width) {
                        s->write(' ');
                        width--;
                }
        } /* for (;;) */
}
80002972:	2f 5d       	sub	sp,-44
80002974:	d8 32       	popm	r0-r7,pc
80002976:	00 00       	add	r0,r0
80002978:	80 00       	ld.sh	r0,r0[0x0]
8000297a:	a9 d4       	cbr	r4,0x9
8000297c:	80 00       	ld.sh	r0,r0[0x0]
8000297e:	1c 24       	rsub	r4,lr
80002980:	80 01       	ld.sh	r1,r0[0x0]
80002982:	0e 84       	andn	r4,r7
80002984:	80 01       	ld.sh	r1,r0[0x0]
80002986:	0e 88       	andn	r8,r7
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	c2 da       	rjmp	800025e4 <_Z13print_vprintfPN6AP_HAL5PrintEhPKcPv+0x530>
8000298c:	80 00       	ld.sh	r0,r0[0x0]
8000298e:	29 90       	sub	r0,-103

80002990 <_Z12ultoa_invertmPch>:
  POSSIBILITY OF SUCH DAMAGE. */

#include <stdint.h>
#include "xtoa_fast.h"

char * ultoa_invert (uint32_t val, char *s, uint8_t base) {
80002990:	d4 31       	pushm	r0-r7,lr
80002992:	20 2d       	sub	sp,8
	if (base == 8) {
80002994:	30 81       	mov	r1,8
80002996:	e2 0a 18 00 	cp.b	r10,r1
8000299a:	c0 81       	brne	800029aa <_Z12ultoa_invertmPch+0x1a>
		do {
			*s = '0' + (val & 0x7);
8000299c:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
800029a0:	2d 08       	sub	r8,-48
			val >>= 3;
800029a2:	a3 9c       	lsr	r12,0x3
#include <stdint.h>
#include "xtoa_fast.h"

char * ultoa_invert (uint32_t val, char *s, uint8_t base) {
	if (base == 8) {
		do {
800029a4:	cf c1       	brne	8000299c <_Z12ultoa_invertmPch+0xc>
800029a6:	b6 88       	st.b	r11[0x0],r8
800029a8:	c6 58       	rjmp	80002a72 <_Z12ultoa_invertmPch+0xe2>
			val >>= 3;
		} while(val);
		return s;
	}

	if (base == 16) {
800029aa:	31 01       	mov	r1,16
800029ac:	e2 0a 18 00 	cp.b	r10,r1
800029b0:	c0 e1       	brne	800029cc <_Z12ultoa_invertmPch+0x3c>
			uint8_t digit = '0' + (val & 0xf);
#if XTOA_UPPER == 0
			if (digit > '0' + 9)
				digit += ('a' - '0' - 10);
#else
			if (digit > '0' + 9)
800029b2:	33 99       	mov	r9,57
		return s;
	}

	if (base == 16) {
		do {
			uint8_t digit = '0' + (val & 0xf);
800029b4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800029b8:	2d 08       	sub	r8,-48
#if XTOA_UPPER == 0
			if (digit > '0' + 9)
				digit += ('a' - '0' - 10);
#else
			if (digit > '0' + 9)
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	e0 88 00 03 	brls	800029c4 <_Z12ultoa_invertmPch+0x34>
				digit += ('A' - '0' - 10);
800029c2:	2f 98       	sub	r8,-7
#endif
			*s++ = digit;
800029c4:	16 c8       	st.b	r11++,r8
			val >>= 4;
800029c6:	a5 8c       	lsr	r12,0x4
		} while(val);
		return s;
	}

	if (base == 16) {
		do {
800029c8:	cf 61       	brne	800029b4 <_Z12ultoa_invertmPch+0x24>
800029ca:	c5 48       	rjmp	80002a72 <_Z12ultoa_invertmPch+0xe2>
	}

	// Every base which in not hex and not oct is considered decimal.

	// 33 bits would have been enough.
	uint64_t xval = val;
800029cc:	18 90       	mov	r0,r12
800029ce:	30 01       	mov	r1,0
	do {
		uint8_t saved = xval;
		xval &= ~1;
		xval += 2;
800029d0:	16 9c       	mov	r12,r11
	// Every base which in not hex and not oct is considered decimal.

	// 33 bits would have been enough.
	uint64_t xval = val;
	do {
		uint8_t saved = xval;
800029d2:	fd d0 c0 08 	bfextu	lr,r0,0x0,0x8
		xval &= ~1;
800029d6:	3f e8       	mov	r8,-2
800029d8:	3f f9       	mov	r9,-1
800029da:	e1 e8 00 0a 	and	r10,r0,r8
800029de:	e3 e9 00 0b 	and	r11,r1,r9
		xval += 2;
800029e2:	30 20       	mov	r0,2
800029e4:	30 01       	mov	r1,0
800029e6:	00 0a       	add	r10,r0
800029e8:	f6 01 00 4b 	adc	r11,r11,r1
		xval += xval >> 1;		// *1.5
800029ec:	f4 02 16 01 	lsr	r2,r10,0x1
800029f0:	e5 eb 11 f2 	or	r2,r2,r11<<0x1f
800029f4:	f6 03 16 01 	lsr	r3,r11,0x1
800029f8:	e4 0a 00 0a 	add	r10,r2,r10
800029fc:	e6 0b 00 4b 	adc	r11,r3,r11
		xval += xval >> 4;		// *1.0625
80002a00:	f4 04 16 04 	lsr	r4,r10,0x4
80002a04:	e9 eb 11 c4 	or	r4,r4,r11<<0x1c
80002a08:	f6 05 16 04 	lsr	r5,r11,0x4
80002a0c:	e8 0a 00 0a 	add	r10,r4,r10
80002a10:	ea 0b 00 4b 	adc	r11,r5,r11
		xval += xval >> 8;		// *1.00390625
80002a14:	f4 00 16 08 	lsr	r0,r10,0x8
80002a18:	e1 eb 11 89 	or	r9,r0,r11<<0x18
80002a1c:	12 96       	mov	r6,r9
80002a1e:	f6 08 16 08 	lsr	r8,r11,0x8
80002a22:	10 97       	mov	r7,r8
80002a24:	ec 0a 00 0a 	add	r10,r6,r10
80002a28:	ee 0b 00 4b 	adc	r11,r7,r11
		xval += xval >> 16;		// *1.000015259
80002a2c:	f4 08 16 10 	lsr	r8,r10,0x10
80002a30:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80002a34:	f6 09 16 10 	lsr	r9,r11,0x10
80002a38:	f0 0a 00 0a 	add	r10,r8,r10
80002a3c:	f2 0b 00 4b 	adc	r11,r9,r11
		xval += xval >> 32;		// it all amounts to *1.6
80002a40:	16 91       	mov	r1,r11
80002a42:	50 11       	stdsp	sp[0x4],r1
80002a44:	30 00       	mov	r0,0
80002a46:	50 00       	stdsp	sp[0x0],r0
80002a48:	fa e0 00 00 	ld.d	r0,sp[0]
80002a4c:	e0 0a 00 0a 	add	r10,r0,r10
80002a50:	e2 0b 00 4b 	adc	r11,r1,r11
		xval >>= 4;				// /16 ... so *1.6/16 is /10, fraction truncated.
80002a54:	f4 00 16 04 	lsr	r0,r10,0x4
80002a58:	e1 eb 11 c0 	or	r0,r0,r11<<0x1c
80002a5c:	f6 01 16 04 	lsr	r1,r11,0x4
		*s++ = '0' + saved - 10 * (uint8_t)xval;
80002a60:	2d 0e       	sub	lr,-48
80002a62:	e0 0a 10 f6 	mul	r10,r0,-10
80002a66:	14 0e       	add	lr,r10
80002a68:	18 ce       	st.b	r12++,lr

	// Every base which in not hex and not oct is considered decimal.

	// 33 bits would have been enough.
	uint64_t xval = val;
	do {
80002a6a:	58 00       	cp.w	r0,0
80002a6c:	5c 21       	cpc	r1
80002a6e:	cb 21       	brne	800029d2 <_Z12ultoa_invertmPch+0x42>
80002a70:	18 9b       	mov	r11,r12
		xval += xval >> 32;		// it all amounts to *1.6
		xval >>= 4;				// /16 ... so *1.6/16 is /10, fraction truncated.
		*s++ = '0' + saved - 10 * (uint8_t)xval;
	} while (xval);
	return s;
}
80002a72:	16 9c       	mov	r12,r11
80002a74:	2f ed       	sub	sp,-8
80002a76:	d8 32       	popm	r0-r7,pc

80002a78 <_ZN5Empty17EmptyAnalogSource11read_latestEv>:
        return _read_average();
    }
}
//cli ne cli??? sregi de o de?i?tiriyor san?rsam
float EmptyAnalogSource::read_latest() {
	uint16_t latest = _latest;
80002a78:	98 48       	ld.sh	r8,r12[0x8]
80002a7a:	10 9a       	mov	r10,r8
    if (_pin == ANALOG_INPUT_BOARD_VCC) {
80002a7c:	f9 39 00 10 	ld.ub	r9,r12[16]
80002a80:	3f e8       	mov	r8,-2
80002a82:	f0 09 18 00 	cp.b	r9,r8
80002a86:	c0 b1       	brne	80002a9c <_ZN5Empty17EmptyAnalogSource11read_latestEv+0x24>
        return 1126400UL / latest;
80002a88:	5c 7a       	castu.h	r10
80002a8a:	e0 69 30 00 	mov	r9,12288
80002a8e:	ea 19 00 11 	orh	r9,0x11
80002a92:	f2 0a 0d 08 	divu	r8,r9,r10
80002a96:	e5 a4 0c 08 	cop	cp0,cr12,cr0,cr8,0x48
80002a9a:	5e fc       	retal	r12
    } else {
        return latest;
80002a9c:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002aa0:	e5 a4 0c 0c 	cop	cp0,cr12,cr0,cr12,0x48
    }
}
80002aa4:	5e fc       	retal	r12
80002aa6:	d7 03       	nop

80002aa8 <_ZN5Empty17EmptyAnalogSource15voltage_averageEv>:

/*
  return voltage from 0.0 to 5.0V, scaled to Vcc
 */
float EmptyAnalogSource::voltage_average(void)
{
80002aa8:	eb cd 40 80 	pushm	r7,lr
80002aac:	18 97       	mov	r7,r12
    float vcc_mV = hal.analogin->channel(ANALOG_INPUT_BOARD_VCC)->read_average();
80002aae:	49 28       	lddpc	r8,80002af4 <_ZN5Empty17EmptyAnalogSource15voltage_averageEv+0x4c>
80002ab0:	70 08       	ld.w	r8,r8[0x0]
80002ab2:	70 5c       	ld.w	r12,r8[0x14]
80002ab4:	78 08       	ld.w	r8,r12[0x0]
80002ab6:	70 18       	ld.w	r8,r8[0x4]
80002ab8:	e0 6b 00 fe 	mov	r11,254
80002abc:	5d 18       	icall	r8
80002abe:	78 08       	ld.w	r8,r12[0x0]
80002ac0:	70 08       	ld.w	r8,r8[0x0]
80002ac2:	5d 18       	icall	r8
    float v = read_average();
80002ac4:	6e 08       	ld.w	r8,r7[0x0]
80002ac6:	70 08       	ld.w	r8,r8[0x0]
80002ac8:	0e 9c       	mov	r12,r7
80002aca:	5d 18       	icall	r8
80002acc:	fc 18 44 7a 	movh	r8,0x447a
80002ad0:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80002ad4:	f0 1f 00 09 	mcall	80002af8 <_ZN5Empty17EmptyAnalogSource15voltage_averageEv+0x50>
80002ad8:	e0 68 a9 fc 	mov	r8,43516
80002adc:	ea 18 d2 f1 	orh	r8,0xd2f1
80002ae0:	e0 69 62 4d 	mov	r9,25165
80002ae4:	ea 19 3e b0 	orh	r9,0x3eb0
80002ae8:	f0 1f 00 05 	mcall	80002afc <_ZN5Empty17EmptyAnalogSource15voltage_averageEv+0x54>
80002aec:	f0 1f 00 05 	mcall	80002b00 <_ZN5Empty17EmptyAnalogSource15voltage_averageEv+0x58>
   // } else if (vcc_mV > 6000) {
      //  vcc_mV = 6000;
 //   }
	vcc_mV = 1000;
    return v * vcc_mV * 9.765625e-7; // 9.765625e-7 = 1.0/(1024*1000)
}
80002af0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	3c 9c       	mov	r12,-55
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	a9 74       	lsl	r4,0x9
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	9e 70       	ld.sh	r0,pc[0xe]
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	a9 d4       	cbr	r4,0x9

80002b04 <_ZN5Empty17EmptyAnalogSource14voltage_latestEv>:

/*
  return voltage from 0.0 to 5.0V, scaled to Vcc
 */
float EmptyAnalogSource::voltage_latest(void)
{
80002b04:	eb cd 40 80 	pushm	r7,lr
80002b08:	18 97       	mov	r7,r12
    if (_pin == ANALOG_INPUT_BOARD_VCC) {
80002b0a:	f9 39 00 10 	ld.ub	r9,r12[16]
80002b0e:	3f e8       	mov	r8,-2
80002b10:	f0 09 18 00 	cp.b	r9,r8
80002b14:	c0 c1       	brne	80002b2c <_ZN5Empty17EmptyAnalogSource14voltage_latestEv+0x28>
        return read_latest() * 0.001f;
80002b16:	78 08       	ld.w	r8,r12[0x0]
80002b18:	70 18       	ld.w	r8,r8[0x4]
80002b1a:	5d 18       	icall	r8
80002b1c:	e0 68 12 6f 	mov	r8,4719
80002b20:	ea 18 3a 83 	orh	r8,0x3a83
80002b24:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80002b28:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    float vcc_mV = hal.analogin->channel(ANALOG_INPUT_BOARD_VCC)->read_average();
80002b2c:	49 28       	lddpc	r8,80002b74 <_ZN5Empty17EmptyAnalogSource14voltage_latestEv+0x70>
80002b2e:	70 08       	ld.w	r8,r8[0x0]
80002b30:	70 5c       	ld.w	r12,r8[0x14]
80002b32:	78 08       	ld.w	r8,r12[0x0]
80002b34:	70 18       	ld.w	r8,r8[0x4]
80002b36:	e0 6b 00 fe 	mov	r11,254
80002b3a:	5d 18       	icall	r8
80002b3c:	78 08       	ld.w	r8,r12[0x0]
80002b3e:	70 08       	ld.w	r8,r8[0x0]
80002b40:	5d 18       	icall	r8
    float v = read_latest();
80002b42:	6e 08       	ld.w	r8,r7[0x0]
80002b44:	70 18       	ld.w	r8,r8[0x4]
80002b46:	0e 9c       	mov	r12,r7
80002b48:	5d 18       	icall	r8
    } else if (vcc_mV > 6000) {
        vcc_mV = 6000;
    }
	
	vcc_mV = 1000;
    return v * vcc_mV * 9.765625e-7; // 9.765625e-7 = 1.0/(1024*1000)
80002b4a:	fc 18 44 7a 	movh	r8,0x447a
80002b4e:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80002b52:	f0 1f 00 0a 	mcall	80002b78 <_ZN5Empty17EmptyAnalogSource14voltage_latestEv+0x74>
80002b56:	e0 68 a9 fc 	mov	r8,43516
80002b5a:	ea 18 d2 f1 	orh	r8,0xd2f1
80002b5e:	e0 69 62 4d 	mov	r9,25165
80002b62:	ea 19 3e b0 	orh	r9,0x3eb0
80002b66:	f0 1f 00 06 	mcall	80002b7c <_ZN5Empty17EmptyAnalogSource14voltage_latestEv+0x78>
80002b6a:	f0 1f 00 06 	mcall	80002b80 <_ZN5Empty17EmptyAnalogSource14voltage_latestEv+0x7c>
}
80002b6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b72:	00 00       	add	r0,r0
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	3c 9c       	mov	r12,-55
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	a9 74       	lsl	r4,0x9
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	9e 70       	ld.sh	r0,pc[0xe]
80002b80:	80 00       	ld.sh	r0,r0[0x0]
80002b82:	a9 d4       	cbr	r4,0x9

80002b84 <_ZN5Empty17EmptyAnalogSource27voltage_average_ratiometricEv>:
  return voltage from 0.0 to 5.0V, assuming a ratiometric sensor. This
  means the result is really a pseudo-voltage, that assumes the supply
  voltage is exactly 5.0V.
 */
float EmptyAnalogSource::voltage_average_ratiometric(void)
{
80002b84:	d4 01       	pushm	lr
    float v = read_average();
80002b86:	78 08       	ld.w	r8,r12[0x0]
80002b88:	70 08       	ld.w	r8,r8[0x0]
80002b8a:	5d 18       	icall	r8
    return v * (5.0f / 1023.0f);
}
80002b8c:	e0 68 28 0a 	mov	r8,10250
80002b90:	ea 18 3b a0 	orh	r8,0x3ba0
80002b94:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80002b98:	d8 02       	popm	pc

80002b9a <_ZN5Empty17EmptyAnalogSource7set_pinEh>:

void EmptyAnalogSource::set_pin(uint8_t pin) {
    if (pin != _pin) {
80002b9a:	f9 38 00 10 	ld.ub	r8,r12[16]
80002b9e:	f6 08 18 00 	cp.b	r8,r11
80002ba2:	5e 0c       	reteq	r12
        _sum = 0;
80002ba4:	30 08       	mov	r8,0
80002ba6:	b8 38       	st.h	r12[0x6],r8
        _sum_count = 0;
80002ba8:	b8 c8       	st.b	r12[0x4],r8
        _last_average = 0;
80002baa:	30 09       	mov	r9,0
80002bac:	99 39       	st.w	r12[0xc],r9
        _latest = 0;
80002bae:	b8 48       	st.h	r12[0x8],r8
        _pin = pin;
80002bb0:	f9 6b 00 10 	st.b	r12[16],r11
80002bb4:	5e fc       	retal	r12
80002bb6:	d7 03       	nop

80002bb8 <_ZN5Empty17EmptyAnalogSourceC1Eh>:
extern const AP_HAL::HAL& hal;
extern "C" {
	#include <asf.h>
};
//bu tamam, gpio'dan ANALOG_INPUT_NONE de?i?tirsen yeter
EmptyAnalogSource::EmptyAnalogSource(uint8_t pin) :
80002bb8:	d4 01       	pushm	lr
    _sum_count(0),
    _sum(0),
    _last_average(0),
    _pin(ANALOG_INPUT_NONE),
    _stop_pin(ANALOG_INPUT_NONE),
    _settle_time_ms(0)
80002bba:	48 a9       	lddpc	r9,80002be0 <_ZN5Empty17EmptyAnalogSourceC1Eh+0x28>
80002bbc:	2f 89       	sub	r9,-8
80002bbe:	99 09       	st.w	r12[0x0],r9
80002bc0:	30 09       	mov	r9,0
80002bc2:	b8 c9       	st.b	r12[0x4],r9
80002bc4:	30 09       	mov	r9,0
80002bc6:	b8 39       	st.h	r12[0x6],r9
80002bc8:	30 0a       	mov	r10,0
80002bca:	99 3a       	st.w	r12[0xc],r10
80002bcc:	3f fa       	mov	r10,-1
80002bce:	f9 6a 00 10 	st.b	r12[16],r10
80002bd2:	f9 6a 00 11 	st.b	r12[17],r10
80002bd6:	f9 59 00 12 	st.h	r12[18],r9
{
    set_pin(pin);
80002bda:	f0 1f 00 03 	mcall	80002be4 <_ZN5Empty17EmptyAnalogSourceC1Eh+0x2c>
}
80002bde:	d8 02       	popm	pc
80002be0:	80 01       	ld.sh	r1,r0[0x0]
80002be2:	0e 8c       	andn	r12,r7
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	2b 9a       	sub	r10,-71

80002be8 <_ZN5Empty17EmptyAnalogSource12set_stop_pinEh>:
        _pin = pin;
    }
}

void EmptyAnalogSource::set_stop_pin(uint8_t pin) {
    _stop_pin = pin;
80002be8:	f9 6b 00 11 	st.b	r12[17],r11
}
80002bec:	5e fc       	retal	r12

80002bee <_ZN5Empty17EmptyAnalogSource15set_settle_timeEt>:

void EmptyAnalogSource::set_settle_time(uint16_t settle_time_ms) 
{
    _settle_time_ms = settle_time_ms;
80002bee:	f9 5b 00 12 	st.h	r12[18],r11
}
80002bf2:	5e fc       	retal	r12

80002bf4 <_ZN5Empty17EmptyAnalogSource13_read_averageEv>:

/* read_average is called from the normal thread (not an interrupt). */
float EmptyAnalogSource::_read_average() {
80002bf4:	eb cd 40 80 	pushm	r7,lr
80002bf8:	18 97       	mov	r7,r12
    uint16_t sum;
    uint8_t sum_count;

    if (_sum_count == 0) {
80002bfa:	19 c8       	ld.ub	r8,r12[0x4]
80002bfc:	58 08       	cp.w	r8,0
80002bfe:	c0 41       	brne	80002c06 <_ZN5Empty17EmptyAnalogSource13_read_averageEv+0x12>
        // avoid blocking waiting for new samples
        return _last_average;
80002c00:	78 3c       	ld.w	r12,r12[0xc]
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc
    }

    /* Read and clear in a critical section */
    
    sum = _sum;
80002c06:	98 3c       	ld.sh	r12,r12[0x6]
    sum_count = _sum_count;
80002c08:	0f cb       	ld.ub	r11,r7[0x4]
    _sum = 0;
80002c0a:	30 08       	mov	r8,0
80002c0c:	ae 38       	st.h	r7[0x6],r8
    _sum_count = 0;
80002c0e:	ae c8       	st.b	r7[0x4],r8

    float avg = sum / (float) sum_count;
80002c10:	5c 7c       	castu.h	r12
80002c12:	e5 a4 0b 0b 	cop	cp0,cr11,cr0,cr11,0x48
80002c16:	e5 a6 0c 0c 	cop	cp0,cr12,cr0,cr12,0x4c
80002c1a:	f0 1f 00 03 	mcall	80002c24 <_ZN5Empty17EmptyAnalogSource13_read_averageEv+0x30>

    _last_average = avg;
80002c1e:	8f 3c       	st.w	r7[0xc],r12
    return avg;
}
80002c20:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	a8 14       	st.h	r4[0x2],r4

80002c28 <_ZN5Empty17EmptyAnalogSource12read_averageEv>:
{
    set_pin(pin);
}

//bu da tamam gpio'dan ANALOG_INPUT_BOARD_VCC de?i?tirsen yeter
float EmptyAnalogSource::read_average() {
80002c28:	d4 01       	pushm	lr
    if (_pin == ANALOG_INPUT_BOARD_VCC) {
80002c2a:	f9 39 00 10 	ld.ub	r9,r12[16]
80002c2e:	3f e8       	mov	r8,-2
80002c30:	f0 09 18 00 	cp.b	r9,r8
80002c34:	c0 f1       	brne	80002c52 <_ZN5Empty17EmptyAnalogSource12read_averageEv+0x2a>
        uint16_t v = (uint16_t) _read_average();
80002c36:	f0 1f 00 09 	mcall	80002c58 <_ZN5Empty17EmptyAnalogSource12read_averageEv+0x30>
        return 1126400UL / v;
80002c3a:	e5 a9 09 0c 	cop	cp0,cr9,cr0,cr12,0x52
80002c3e:	5c 79       	castu.h	r9
80002c40:	e0 68 30 00 	mov	r8,12288
80002c44:	ea 18 00 11 	orh	r8,0x11
80002c48:	f0 09 0d 08 	divu	r8,r8,r9
80002c4c:	e5 a4 0c 08 	cop	cp0,cr12,cr0,cr8,0x48
80002c50:	d8 02       	popm	pc
    } else {
        return _read_average();
80002c52:	f0 1f 00 02 	mcall	80002c58 <_ZN5Empty17EmptyAnalogSource12read_averageEv+0x30>
    }
}
80002c56:	d8 02       	popm	pc
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2b f4       	sub	r4,-65

80002c5c <_ZN5Empty17EmptyAnalogSource9stop_readEv>:
}


void EmptyAnalogSource::stop_read() {
    
}
80002c5c:	5e fc       	retal	r12

80002c5e <_ZN5Empty17EmptyAnalogSource10new_sampleEs>:

/* new_sample is called from an interrupt. It always has access to
 *  _sum and _sum_count. Lock out the interrupts briefly with
 * cli/sei to read these variables from outside an interrupt. */
void EmptyAnalogSource::new_sample(int16_t sample) {
    _sum += sample;
80002c5e:	98 38       	ld.sh	r8,r12[0x6]
80002c60:	f6 08 00 08 	add	r8,r11,r8
80002c64:	b8 38       	st.h	r12[0x6],r8
    _latest = sample;
80002c66:	b8 4b       	st.h	r12[0x8],r11
    if (_sum_count >= 63) {
80002c68:	19 c9       	ld.ub	r9,r12[0x4]
80002c6a:	33 e8       	mov	r8,62
80002c6c:	f0 09 18 00 	cp.b	r9,r8
80002c70:	e0 88 00 09 	brls	80002c82 <_ZN5Empty17EmptyAnalogSource10new_sampleEs+0x24>
        _sum >>= 1;
80002c74:	98 38       	ld.sh	r8,r12[0x6]
80002c76:	f1 d8 c0 2f 	bfextu	r8,r8,0x1,0xf
80002c7a:	b8 38       	st.h	r12[0x6],r8
        _sum_count = 32;
80002c7c:	32 08       	mov	r8,32
80002c7e:	b8 c8       	st.b	r12[0x4],r8
80002c80:	5e fc       	retal	r12
    } else {
        _sum_count++;
80002c82:	19 c8       	ld.ub	r8,r12[0x4]
80002c84:	2f f8       	sub	r8,-1
80002c86:	b8 c8       	st.b	r12[0x4],r8
80002c88:	5e fc       	retal	r12

80002c8a <_ZZN5Empty11AVRAnalogIn4initEvE4C.84>:
80002c8a:	01 09 00                                            ...

80002c8d <_ZZN5Empty11AVRAnalogIn4initEvE4C.85>:
80002c8d:	02 09 00                                            ...

80002c90 <_ZZN5Empty11AVRAnalogIn4initEvE4C.86>:
80002c90:	03 09 00                                            ...

80002c93 <_ZZN5Empty11AVRAnalogIn4initEvE4C.87>:
80002c93:	04 09 00                                            ...

80002c96 <_ZZN5Empty11AVRAnalogIn4initEvE4C.88>:
80002c96:	05 09 00                                            ...

80002c99 <_ZZN5Empty11AVRAnalogIn4initEvE4C.89>:
80002c99:	06 09 00                                            ...

80002c9c <_ZZN5Empty11AVRAnalogIn4initEvE4C.90>:
80002c9c:	07 09 00                                            ...

80002c9f <_ZZN5Empty11AVRAnalogIn4initEvE4C.91>:
80002c9f:	01 09 00                                            ...

80002ca2 <_ZZN5Empty11AVRAnalogIn4initEvE4C.92>:
80002ca2:	02 09 00                                            ...

80002ca5 <_ZZN5Empty11AVRAnalogIn4initEvE4C.93>:
80002ca5:	03 09 00                                            ...

80002ca8 <_ZZN5Empty11AVRAnalogIn4initEvE4C.94>:
80002ca8:	04 09 00                                            ...

80002cab <_ZZN5Empty11AVRAnalogIn4initEvE4C.95>:
80002cab:	05 09 00                                            ...

80002cae <_ZZN5Empty11AVRAnalogIn4initEvE4C.96>:
80002cae:	06 09 00                                            ...

80002cb1 <_ZZN5Empty11AVRAnalogIn4initEvE4C.97>:
80002cb1:	07 09 00                                            ...

80002cb4 <_ZN6AP_HAL8AnalogIn17servorail_voltageEv>:

	// board 5V rail voltage in volts
	virtual float board_voltage(void) = 0;

	// servo rail voltage in volts, or 0 if unknown
	virtual float servorail_voltage(void) { return 0; }
80002cb4:	5e fd       	retal	0

80002cb6 <_ZN6AP_HAL8AnalogIn18power_status_flagsEv>:

	// power supply status flags, see MAV_POWER_STATUS
	virtual uint16_t power_status_flags(void) { return 0; }
80002cb6:	5e fd       	retal	0

80002cb8 <_ZN5Empty11AVRAnalogIn12getADCValuesEiP22adcifa_sequencer_opt_tS2_>:
}



uint16_t AVRAnalogIn::getADCValues (int ADC_Ch_Index, adcifa_sequencer_opt_t *seq0_opt, adcifa_sequencer_opt_t *seq1_opt)
{
80002cb8:	eb cd 40 80 	pushm	r7,lr
80002cbc:	20 4d       	sub	sp,16
80002cbe:	16 97       	mov	r7,r11
80002cc0:	12 98       	mov	r8,r9
	uint16_t Get_Value_result;
	int16_t adc_values_temp [NUMBER_OF_CH_SEQ0];
	if (ADC_Ch_Index <= 6){
80002cc2:	58 6b       	cp.w	r11,6
80002cc4:	e0 89 00 0f 	brgt	80002ce2 <_ZN5Empty11AVRAnalogIn12getADCValuesEiP22adcifa_sequencer_opt_tS2_+0x2a>
		uint16_t Get_Value_result = adcifa_get_values_from_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ0, seq0_opt, adc_values_temp);
80002cc8:	1a 99       	mov	r9,sp
80002cca:	30 0b       	mov	r11,0
80002ccc:	fc 7c 24 00 	mov	r12,-187392
80002cd0:	f0 1f 00 0d 	mcall	80002d04 <_ZN5Empty11AVRAnalogIn12getADCValuesEiP22adcifa_sequencer_opt_tS2_+0x4c>
		return adc_values_temp[ADC_Ch_Index-1];
80002cd4:	fa c8 ff f0 	sub	r8,sp,-16
80002cd8:	f0 07 00 17 	add	r7,r8,r7<<0x1
80002cdc:	ef 0c ff ee 	ld.sh	r12,r7[-18]
80002ce0:	c0 e8       	rjmp	80002cfc <_ZN5Empty11AVRAnalogIn12getADCValuesEiP22adcifa_sequencer_opt_tS2_+0x44>
	} else {
		uint16_t Get_Value_result = adcifa_get_values_from_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ1, seq1_opt, adc_values_temp);
80002ce2:	1a 99       	mov	r9,sp
80002ce4:	10 9a       	mov	r10,r8
80002ce6:	30 1b       	mov	r11,1
80002ce8:	fc 7c 24 00 	mov	r12,-187392
80002cec:	f0 1f 00 06 	mcall	80002d04 <_ZN5Empty11AVRAnalogIn12getADCValuesEiP22adcifa_sequencer_opt_tS2_+0x4c>
		return adc_values_temp[ADC_Ch_Index-8];
80002cf0:	fa c8 ff f0 	sub	r8,sp,-16
80002cf4:	f0 07 00 17 	add	r7,r8,r7<<0x1
80002cf8:	ef 0c ff e0 	ld.sh	r12,r7[-32]
	}
	return Get_Value_result;
}
80002cfc:	2f cd       	sub	sp,-16
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d02:	00 00       	add	r0,r0
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	08 d8       	st.w	--r4,r8

80002d08 <_ZN5Empty11AVRAnalogIn13board_voltageEv>:

/*
  return board voltage in volts
 */
float AVRAnalogIn::board_voltage(void)
{
80002d08:	d4 01       	pushm	lr
    return _vcc.voltage_latest();
80002d0a:	2a 8c       	sub	r12,-88
80002d0c:	f0 1f 00 02 	mcall	80002d14 <_ZN5Empty11AVRAnalogIn13board_voltageEv+0xc>
}
80002d10:	d8 02       	popm	pc
80002d12:	00 00       	add	r0,r0
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	2b 04       	sub	r4,-80

80002d18 <_ZN5Empty11AVRAnalogIn12_timer_eventEv>:
		adcifa_start_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ1);
    }
}

void AVRAnalogIn:: _timer_event() 
{
80002d18:	eb cd 40 80 	pushm	r7,lr
80002d1c:	18 97       	mov	r7,r12
    if (_channels[_active_channel]->_pin == ANALOG_INPUT_NONE) {
80002d1e:	79 18       	ld.w	r8,r12[0x44]
80002d20:	f0 c9 ff ff 	sub	r9,r8,-1
80002d24:	f8 09 03 2c 	ld.w	r12,r12[r9<<0x2]
80002d28:	f9 3a 00 10 	ld.ub	r10,r12[16]
80002d2c:	3f f9       	mov	r9,-1
80002d2e:	f2 0a 18 00 	cp.b	r10,r9
80002d32:	c0 51       	brne	80002d3c <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x24>
       _channels[_active_channel]->new_sample(0);
80002d34:	30 0b       	mov	r11,0
80002d36:	f0 1f 00 17 	mcall	80002d90 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x78>
        goto next_channel;
80002d3a:	c1 b8       	rjmp	80002d70 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x58>
    }

  
  if (_num_channels == 0) {
80002d3c:	ef 0a 00 40 	ld.sh	r10,r7[64]
80002d40:	30 09       	mov	r9,0
80002d42:	f2 0a 19 00 	cp.h	r10,r9
80002d46:	c2 30       	breq	80002d8c <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x74>
        return;
	}

    /* Read the conversion registers. */
    {
		if (_active_channel <= 6){
80002d48:	58 68       	cp.w	r8,6
80002d4a:	e0 89 00 0b 	brgt	80002d60 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x48>
			int16_t sample =  ADCIFA_read_resx_sequencer_0(_active_channel) ;
80002d4e:	2d f8       	sub	r8,-33
80002d50:	fc 79 24 00 	mov	r9,-187392
80002d54:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
			/* Give the active channel a new sample */
			_channels[_active_channel]->new_sample( sample );
80002d58:	5c 8b       	casts.h	r11
80002d5a:	f0 1f 00 0e 	mcall	80002d90 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x78>
80002d5e:	c0 98       	rjmp	80002d70 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x58>
			//_active_channel = (_active_channel + 1) % _num_channels;
			
		}
		else if (_active_channel > 6){
			int16_t sample =  ADCIFA_read_resx_sequencer_1(_active_channel - 7) ;
80002d60:	2d e8       	sub	r8,-34
80002d62:	fc 79 24 00 	mov	r9,-187392
80002d66:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
			/* Give the active channel a new sample */
			_channels[_active_channel]->new_sample( sample );
80002d6a:	5c 8b       	casts.h	r11
80002d6c:	f0 1f 00 09 	mcall	80002d90 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x78>
		}
    }
	
next_channel:
    /* stop the previous channel, if a stop pin is defined */
    _channels[_active_channel]->stop_read();
80002d70:	6f 18       	ld.w	r8,r7[0x44]
80002d72:	2f f8       	sub	r8,-1
80002d74:	ee 08 03 2c 	ld.w	r12,r7[r8<<0x2]
80002d78:	f0 1f 00 07 	mcall	80002d94 <_ZN5Empty11AVRAnalogIn12_timer_eventEv+0x7c>
    /* Move to the next channel */
   _active_channel = (_active_channel + 1) % _num_channels;
80002d7c:	6f 19       	ld.w	r9,r7[0x44]
80002d7e:	2f f9       	sub	r9,-1
80002d80:	ef 08 00 40 	ld.sh	r8,r7[64]
80002d84:	f2 08 0c 08 	divs	r8,r9,r8
80002d88:	ef 49 00 44 	st.w	r7[68],r9
80002d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	2c 5e       	sub	lr,-59
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	2c 5c       	sub	r12,-59

80002d98 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE>:
    return ch;
}



void AVRAnalogIn::_register_channel(EmptyAnalogSource* ch) {
80002d98:	eb cd 40 e0 	pushm	r5-r7,lr
	
    if (_num_channels >= AVR_INPUT_MAX_CHANNELS) {
80002d9c:	f9 08 00 40 	ld.sh	r8,r12[64]
80002da0:	30 f9       	mov	r9,15
80002da2:	f2 08 19 00 	cp.h	r8,r9
80002da6:	e0 8a 00 12 	brle	80002dca <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x32>
        for(;;) {
			
            hal.console->print_P(PSTR(
                "Error: AP_HAL_AVR::AVRAnalogIn out of channels\r\n"));
80002daa:	49 78       	lddpc	r8,80002e04 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x6c>
80002dac:	70 07       	ld.w	r7,r8[0x0]
80002dae:	49 76       	lddpc	r6,80002e08 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x70>
            hal.scheduler->delay(1000);
80002db0:	e0 65 03 e8 	mov	r5,1000
	
    if (_num_channels >= AVR_INPUT_MAX_CHANNELS) {
        for(;;) {
			
            hal.console->print_P(PSTR(
                "Error: AP_HAL_AVR::AVRAnalogIn out of channels\r\n"));
80002db4:	6e 1c       	ld.w	r12,r7[0x4]
80002db6:	78 08       	ld.w	r8,r12[0x0]
80002db8:	70 58       	ld.w	r8,r8[0x14]
80002dba:	0c 9b       	mov	r11,r6
80002dbc:	5d 18       	icall	r8
            hal.scheduler->delay(1000);
80002dbe:	6e 4c       	ld.w	r12,r7[0x10]
80002dc0:	78 08       	ld.w	r8,r12[0x0]
80002dc2:	70 18       	ld.w	r8,r8[0x4]
80002dc4:	0a 9b       	mov	r11,r5
80002dc6:	5d 18       	icall	r8
80002dc8:	cf 6b       	rjmp	80002db4 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x1c>
        }
    }
    _channels[_num_channels] = ch;
80002dca:	2f f8       	sub	r8,-1
80002dcc:	f8 08 09 2b 	st.w	r12[r8<<0x2],r11
  
    _num_channels++;
80002dd0:	f9 08 00 40 	ld.sh	r8,r12[64]
80002dd4:	2f f8       	sub	r8,-1
80002dd6:	f9 58 00 40 	st.h	r12[64],r8

    if (_num_channels == 1) {
80002dda:	30 19       	mov	r9,1
80002ddc:	f2 08 19 00 	cp.h	r8,r9
80002de0:	c1 01       	brne	80002e00 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x68>
        /* After registering the first channel, we can enable the ADC */
		
		adcifa_start_itimer(&AVR32_ADCIFA, AVR32_ADCIFA_ITIMER_ITMC);
80002de2:	30 0b       	mov	r11,0
80002de4:	fc 7c 24 00 	mov	r12,-187392
80002de8:	f0 1f 00 09 	mcall	80002e0c <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x74>
		adcifa_start_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ0);
80002dec:	30 0b       	mov	r11,0
80002dee:	fc 7c 24 00 	mov	r12,-187392
80002df2:	f0 1f 00 08 	mcall	80002e10 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x78>
		adcifa_start_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ1);
80002df6:	30 1b       	mov	r11,1
80002df8:	fc 7c 24 00 	mov	r12,-187392
80002dfc:	f0 1f 00 05 	mcall	80002e10 <_ZN5Empty11AVRAnalogIn17_register_channelEPNS_17EmptyAnalogSourceE+0x78>
80002e00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	3c 9c       	mov	r12,-55
80002e08:	80 01       	ld.sh	r1,r0[0x0]
80002e0a:	0f 60       	ld.uh	r0,--r7
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	09 60       	ld.uh	r0,--r4
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	07 d2       	ld.ub	r2,r3[0x5]

80002e14 <_ZN5Empty11AVRAnalogInC1Ev>:

/* CHANNEL_READ_REPEAT: how many reads on a channel before using the value.
 * This seems to be determined empirically */


AVRAnalogIn::AVRAnalogIn() :
80002e14:	d4 01       	pushm	lr
    _vcc(EmptyAnalogSource(ANALOG_INPUT_BOARD_VCC))
80002e16:	48 58       	lddpc	r8,80002e28 <_ZN5Empty11AVRAnalogInC1Ev+0x14>
80002e18:	2f 88       	sub	r8,-8
80002e1a:	99 08       	st.w	r12[0x0],r8
80002e1c:	e0 6b 00 fe 	mov	r11,254
80002e20:	2a 8c       	sub	r12,-88
80002e22:	f0 1f 00 03 	mcall	80002e2c <_ZN5Empty11AVRAnalogInC1Ev+0x18>
{}
80002e26:	d8 02       	popm	pc
80002e28:	80 01       	ld.sh	r1,r0[0x0]
80002e2a:	0e fc       	st.b	--r7,r12
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	2b b8       	sub	r8,-69

80002e30 <_ZN5Empty11AVRAnalogIn15_create_channelEs>:
	

	
}

EmptyAnalogSource* AVRAnalogIn::_create_channel(int16_t chnum) {
80002e30:	eb cd 40 81 	pushm	r0,r7,lr
80002e34:	21 2d       	sub	sp,72
80002e36:	50 2c       	stdsp	sp[0x8],r12
80002e38:	50 3b       	stdsp	sp[0xc],r11
80002e3a:	49 c8       	lddpc	r8,80002ea8 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x78>
80002e3c:	50 b8       	stdsp	sp[0x2c],r8
80002e3e:	49 c8       	lddpc	r8,80002eac <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x7c>
80002e40:	50 c8       	stdsp	sp[0x30],r8
80002e42:	fa c8 ff cc 	sub	r8,sp,-52
80002e46:	fa c9 ff b8 	sub	r9,sp,-72
80002e4a:	91 09       	st.w	r8[0x0],r9
80002e4c:	fe c9 ff d4 	sub	r9,pc,-44
80002e50:	91 19       	st.w	r8[0x4],r9
80002e52:	91 2d       	st.w	r8[0x8],sp
80002e54:	fa cc ff ec 	sub	r12,sp,-20
80002e58:	f0 1f 00 16 	mcall	80002eb0 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x80>
    EmptyAnalogSource *ch = new EmptyAnalogSource(chnum);
80002e5c:	3f f8       	mov	r8,-1
80002e5e:	50 68       	stdsp	sp[0x18],r8
80002e60:	31 8c       	mov	r12,24
80002e62:	f0 1f 00 15 	mcall	80002eb4 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x84>
80002e66:	50 1c       	stdsp	sp[0x4],r12
80002e68:	50 0c       	stdsp	sp[0x0],r12
80002e6a:	30 18       	mov	r8,1
80002e6c:	50 68       	stdsp	sp[0x18],r8
80002e6e:	40 3b       	lddsp	r11,sp[0xc]
80002e70:	5c 5b       	castu.b	r11
80002e72:	f0 1f 00 12 	mcall	80002eb8 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x88>
80002e76:	c0 b8       	rjmp	80002e8c <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x5c>
80002e78:	40 78       	lddsp	r8,sp[0x1c]
80002e7a:	50 48       	stdsp	sp[0x10],r8
80002e7c:	40 1c       	lddsp	r12,sp[0x4]
80002e7e:	f0 1f 00 10 	mcall	80002ebc <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x8c>
80002e82:	3f f8       	mov	r8,-1
80002e84:	50 68       	stdsp	sp[0x18],r8
80002e86:	40 4c       	lddsp	r12,sp[0x10]
80002e88:	f0 1f 00 0e 	mcall	80002ec0 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x90>
    _register_channel(ch);
80002e8c:	3f f8       	mov	r8,-1
80002e8e:	50 68       	stdsp	sp[0x18],r8
80002e90:	40 0b       	lddsp	r11,sp[0x0]
80002e92:	40 2c       	lddsp	r12,sp[0x8]
80002e94:	f0 1f 00 0c 	mcall	80002ec4 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x94>
80002e98:	fa cc ff ec 	sub	r12,sp,-20
80002e9c:	f0 1f 00 0b 	mcall	80002ec8 <_ZN5Empty11AVRAnalogIn15_create_channelEs+0x98>
    return ch;
}
80002ea0:	40 0c       	lddsp	r12,sp[0x0]
80002ea2:	2e ed       	sub	sp,-72
80002ea4:	e3 cd 80 81 	ldm	sp++,r0,r7,pc
80002ea8:	80 00       	ld.sh	r0,r0[0x0]
80002eaa:	54 c4       	stdsp	sp[0x130],r4
80002eac:	00 00       	add	r0,r0
80002eae:	00 04       	add	r4,r0
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	af 78       	lsl	r8,0xf
80002eb4:	80 00       	ld.sh	r0,r0[0x0]
80002eb6:	4a e4       	lddpc	r4,80002f6c <_ZN5Empty11AVRAnalogIn4initEv+0x84>
80002eb8:	80 00       	ld.sh	r0,r0[0x0]
80002eba:	2b b8       	sub	r8,-69
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	4a d4       	lddpc	r4,80002f70 <_ZN5Empty11AVRAnalogIn4initEv+0x88>
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	b1 48       	asr	r8,0x10
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	2d 98       	sub	r8,-39
80002ec8:	80 00       	ld.sh	r0,r0[0x0]
80002eca:	af 88       	lsr	r8,0xe

80002ecc <_ZN5Empty11AVRAnalogIn7channelEs>:

}


AP_HAL::AnalogSource* AVRAnalogIn::channel(int16_t ch) 
{
80002ecc:	d4 01       	pushm	lr
    if (ch == ANALOG_INPUT_BOARD_VCC) {
80002ece:	e0 68 00 fe 	mov	r8,254
80002ed2:	f0 0b 19 00 	cp.h	r11,r8
80002ed6:	c0 31       	brne	80002edc <_ZN5Empty11AVRAnalogIn7channelEs+0x10>
            return &_vcc;
80002ed8:	2a 8c       	sub	r12,-88
80002eda:	d8 02       	popm	pc
    } else {
        return _create_channel(ch);
80002edc:	f0 1f 00 02 	mcall	80002ee4 <_ZN5Empty11AVRAnalogIn7channelEs+0x18>
    }
}
80002ee0:	d8 02       	popm	pc
80002ee2:	00 00       	add	r0,r0
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	2e 30       	sub	r0,-29

80002ee8 <_ZN5Empty11AVRAnalogIn4initEv>:
AVRAnalogIn::AVRAnalogIn() :
    _vcc(EmptyAnalogSource(ANALOG_INPUT_BOARD_VCC))
{}

void AVRAnalogIn::init() 
{
80002ee8:	eb cd 40 fe 	pushm	r1-r7,lr
80002eec:	21 6d       	sub	sp,88
80002eee:	18 92       	mov	r2,r12
    //hal.scheduler->register_timer_process(FUNCTOR_BIND_MEMBER(&AVRAnalogIn::_timer_event, void));
    /* Register each private channel with AVRAnalogIn. */
    
	
	adcifa_opt_t adc_options;
	adc_options.frequency = 1; /**< Internal ADC Frequency in Hz */
80002ef0:	30 14       	mov	r4,1
80002ef2:	50 c4       	stdsp	sp[0x30],r4
	adc_options.reference_source = ADCIFA_ADCREF1; /**< Reference Source */
80002ef4:	30 38       	mov	r8,3
80002ef6:	fb 68 00 34 	st.b	sp[52],r8
	adc_options.sample_and_hold_disable = true; /**< Sample and Hold Selection */
80002efa:	fb 64 00 35 	st.b	sp[53],r4
	adc_options.single_sequencer_mode = true; /**< Single Sequencer Mode */
80002efe:	fb 64 00 36 	st.b	sp[54],r4
	adc_options.free_running_mode_enable = false; /**< Enable Free Running Mode */
80002f02:	30 07       	mov	r7,0
80002f04:	fb 67 00 37 	st.b	sp[55],r7
	adc_options.sleep_mode_enable = false; /**< Sleep Mode Selection */
80002f08:	fb 67 00 38 	st.b	sp[56],r7
	adc_options.mux_settle_more_time = false; /** Multiplexer Settle Time */
80002f0c:	fb 67 00 39 	st.b	sp[57],r7
	adc_options.gain_calibration_value = AVR32_FLASHC_FROW_GCAL_OFFSET; /**< Gain Calibration Value NE YAZICA?IMI B?LM?YORUM */
80002f10:	30 03       	mov	r3,0
80002f12:	fb 53 00 3a 	st.h	sp[58],r3
	adc_options.offset_calibration_value = AVR32_FLASHC_FROW_OCAL_OFFSET; /**< Offset Calibration Value NE YAZICA?IMI B?LM?YORUM */
80002f16:	31 88       	mov	r8,24
80002f18:	fb 58 00 3c 	st.h	sp[60],r8
	adc_options.sh0_calibration_value = 0; /**< S/H Gain Calibration Value for Seq0 NE YAZICA?IMI B?LM?YORUM*/
80002f1c:	fb 53 00 3e 	st.h	sp[62],r3
	adc_options.sh1_calibration_value = 0; /**< S/H Gain Calibration Value for Seq1 NE YAZICA?IMI B?LM?YORUM*/
80002f20:	fb 53 00 40 	st.h	sp[64],r3
	
	adcifa_sequencer_opt_t sequancer_opt_0;
	sequancer_opt_0.convnb = NUMBER_OF_CH_SEQ0; /**< Number of conversion. */
80002f24:	30 88       	mov	r8,8
80002f26:	fb 68 00 4b 	st.b	sp[75],r8
	sequancer_opt_0.resolution = ADCIFA_SRES_12B; /**< Sequencer resolution. */
80002f2a:	fb 67 00 4c 	st.b	sp[76],r7
	sequancer_opt_0.trigger_selection = ADCIFA_TRGSEL_ITIMER; /**< Trigger selection. */
80002f2e:	fb 64 00 4d 	st.b	sp[77],r4
	sequancer_opt_0.start_of_conversion = ADCIFA_SOCB_ALLSEQ; /**< Start of conversion. */
80002f32:	fb 67 00 4e 	st.b	sp[78],r7
	sequancer_opt_0.sh_mode = ADCIFA_SH_MODE_STANDARD;
80002f36:	fb 67 00 4f 	st.b	sp[79],r7
	sequancer_opt_0.half_word_adjustment = ADCIFA_HWLA_NOADJ;
80002f3a:	fb 67 00 50 	st.b	sp[80],r7
	sequancer_opt_0.software_acknowledge = ADCIFA_SA_NO_EOS_SOFTACK;
80002f3e:	fb 64 00 51 	st.b	sp[81],r4
	
	adcifa_sequencer_opt_t sequancer_opt_1;
	sequancer_opt_1.convnb = NUMBER_OF_CH_SEQ1; /**< Number of conversion. */
80002f42:	fb 68 00 44 	st.b	sp[68],r8
	sequancer_opt_1.resolution = ADCIFA_SRES_12B; /**< Sequencer resolution. */
80002f46:	fb 67 00 45 	st.b	sp[69],r7
	sequancer_opt_1.trigger_selection = ADCIFA_TRGSEL_ITIMER; /**< Trigger selection. */
80002f4a:	fb 64 00 46 	st.b	sp[70],r4
	sequancer_opt_1.start_of_conversion = ADCIFA_SOCB_ALLSEQ; /**< Start of conversion. */
80002f4e:	fb 67 00 47 	st.b	sp[71],r7
	sequancer_opt_1.sh_mode = ADCIFA_SH_MODE_STANDARD;
80002f52:	fb 67 00 48 	st.b	sp[72],r7
	sequancer_opt_1.half_word_adjustment = ADCIFA_HWLA_NOADJ;
80002f56:	fb 67 00 49 	st.b	sp[73],r7
	sequancer_opt_1.software_acknowledge = ADCIFA_SA_NO_EOS_SOFTACK;
80002f5a:	fb 64 00 4a 	st.b	sp[74],r4
	
	adcifa_sequencer_conversion_opt_t sequencer_conv_opt_0[NUMBER_OF_CH_SEQ0];
	sequencer_conv_opt_0[0] = {AVR32_ADCIFA_INP_ADCIN0, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002f5e:	fb 67 00 18 	st.b	sp[24],r7
80002f62:	30 91       	mov	r1,9
80002f64:	fb 61 00 19 	st.b	sp[25],r1
80002f68:	fb 67 00 1a 	st.b	sp[26],r7
	sequencer_conv_opt_0[1] = {AVR32_ADCIFA_INP_ADCIN1, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002f6c:	4d a5       	lddpc	r5,800030d4 <_ZN5Empty11AVRAnalogIn4initEv+0x1ec>
80002f6e:	30 36       	mov	r6,3
80002f70:	0c 9a       	mov	r10,r6
80002f72:	0a 9b       	mov	r11,r5
80002f74:	fa cc ff e5 	sub	r12,sp,-27
80002f78:	f0 1f 00 58 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[2] = {AVR32_ADCIFA_INP_ADCIN2, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002f7c:	0c 9a       	mov	r10,r6
80002f7e:	ea 06 00 0b 	add	r11,r5,r6
80002f82:	fa cc ff e2 	sub	r12,sp,-30
80002f86:	f0 1f 00 55 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[3] = {AVR32_ADCIFA_INP_ADCIN3, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002f8a:	0c 9a       	mov	r10,r6
80002f8c:	ea cb ff fa 	sub	r11,r5,-6
80002f90:	fa cc ff df 	sub	r12,sp,-33
80002f94:	f0 1f 00 51 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[4] = {AVR32_ADCIFA_INP_ADCIN4, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002f98:	0c 9a       	mov	r10,r6
80002f9a:	ea cb ff f7 	sub	r11,r5,-9
80002f9e:	fa cc ff dc 	sub	r12,sp,-36
80002fa2:	f0 1f 00 4e 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[5] = {AVR32_ADCIFA_INP_ADCIN5, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fa6:	0c 9a       	mov	r10,r6
80002fa8:	ea cb ff f4 	sub	r11,r5,-12
80002fac:	fa cc ff d9 	sub	r12,sp,-39
80002fb0:	f0 1f 00 4a 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[6] = {AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fb4:	0c 9a       	mov	r10,r6
80002fb6:	ea cb ff f1 	sub	r11,r5,-15
80002fba:	fa cc ff d6 	sub	r12,sp,-42
80002fbe:	f0 1f 00 47 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_0[7] = {AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fc2:	0c 9a       	mov	r10,r6
80002fc4:	ea cb ff ee 	sub	r11,r5,-18
80002fc8:	fa cc ff d3 	sub	r12,sp,-45
80002fcc:	f0 1f 00 43 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
		
	adcifa_sequencer_conversion_opt_t sequencer_conv_opt_1[NUMBER_OF_CH_SEQ1];
	sequencer_conv_opt_1[0] = {AVR32_ADCIFA_INN_ADCIN8, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fd0:	ba 87       	st.b	sp[0x0],r7
80002fd2:	ba 91       	st.b	sp[0x1],r1
80002fd4:	ba a7       	st.b	sp[0x2],r7
	sequencer_conv_opt_1[1] = {AVR32_ADCIFA_INN_ADCIN9, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fd6:	0c 9a       	mov	r10,r6
80002fd8:	ea cb ff eb 	sub	r11,r5,-21
80002fdc:	fa 06 00 0c 	add	r12,sp,r6
80002fe0:	f0 1f 00 3e 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[2] = {AVR32_ADCIFA_INN_ADCIN10, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002fe4:	0c 9a       	mov	r10,r6
80002fe6:	ea cb ff e8 	sub	r11,r5,-24
80002fea:	fa cc ff fa 	sub	r12,sp,-6
80002fee:	f0 1f 00 3b 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[3] = {AVR32_ADCIFA_INN_ADCIN11, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80002ff2:	0c 9a       	mov	r10,r6
80002ff4:	ea cb ff e5 	sub	r11,r5,-27
80002ff8:	fa cc ff f7 	sub	r12,sp,-9
80002ffc:	f0 1f 00 37 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[4] = {AVR32_ADCIFA_INN_ADCIN12, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
80003000:	0c 9a       	mov	r10,r6
80003002:	ea cb ff e2 	sub	r11,r5,-30
80003006:	fa cc ff f4 	sub	r12,sp,-12
8000300a:	f0 1f 00 34 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[5] = {AVR32_ADCIFA_INN_ADCIN13, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
8000300e:	0c 9a       	mov	r10,r6
80003010:	ea cb ff df 	sub	r11,r5,-33
80003014:	fa cc ff f1 	sub	r12,sp,-15
80003018:	f0 1f 00 30 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[6] = {AVR32_ADCIFA_INN_ADCIN14, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
8000301c:	0c 9a       	mov	r10,r6
8000301e:	ea cb ff dc 	sub	r11,r5,-36
80003022:	fa cc ff ee 	sub	r12,sp,-18
80003026:	f0 1f 00 2d 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	sequencer_conv_opt_1[7] = {AVR32_ADCIFA_INN_ADCIN15, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1};
8000302a:	0c 9a       	mov	r10,r6
8000302c:	ea cb ff d9 	sub	r11,r5,-39
80003030:	fa cc ff eb 	sub	r12,sp,-21
80003034:	f0 1f 00 29 	mcall	800030d8 <_ZN5Empty11AVRAnalogIn4initEv+0x1f0>
	
	
	adcifa_window_monitor_opt_t monitor_options;
	monitor_options.mode = ADCIFA_WINDOW_MODE_NONE;
80003038:	fb 67 00 52 	st.b	sp[82],r7
	monitor_options.high_threshold = 0;
8000303c:	fb 53 00 56 	st.h	sp[86],r3
	monitor_options.low_threshold = 0;
80003040:	fb 53 00 54 	st.h	sp[84],r3
	monitor_options.source_index = 0;
80003044:	fb 67 00 53 	st.b	sp[83],r7
	
	adcifa_get_calibration_data(&AVR32_ADCIFA , &adc_options);
80003048:	fa c7 ff d0 	sub	r7,sp,-48
8000304c:	0e 9b       	mov	r11,r7
8000304e:	fc 7c 24 00 	mov	r12,-187392
80003052:	f0 1f 00 23 	mcall	800030dc <_ZN5Empty11AVRAnalogIn4initEv+0x1f4>
	uint8_t ADC_CONFIG_RESULT = adcifa_configure(&AVR32_ADCIFA , &adc_options, sysclk_get_pbb_hz());
80003056:	e0 6a 24 00 	mov	r10,9216
8000305a:	ea 1a 00 f4 	orh	r10,0xf4
8000305e:	0e 9b       	mov	r11,r7
80003060:	fc 7c 24 00 	mov	r12,-187392
80003064:	f0 1f 00 1f 	mcall	800030e0 <_ZN5Empty11AVRAnalogIn4initEv+0x1f8>
	//hal.console->println(ADC_CONFIG_RESULT, 2);
	adcifa_calibrate_offset(&AVR32_ADCIFA , &adc_options, sysclk_get_pbb_hz());
80003068:	e0 6a 24 00 	mov	r10,9216
8000306c:	ea 1a 00 f4 	orh	r10,0xf4
80003070:	0e 9b       	mov	r11,r7
80003072:	fc 7c 24 00 	mov	r12,-187392
80003076:	f0 1f 00 1c 	mcall	800030e4 <_ZN5Empty11AVRAnalogIn4initEv+0x1fc>
	
	
	uint8_t CALIBRATION_RESULT_SEQ1 = adcifa_configure_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ0, &sequancer_opt_0, sequencer_conv_opt_0);
8000307a:	fa c9 ff e8 	sub	r9,sp,-24
8000307e:	fa ca ff b5 	sub	r10,sp,-75
80003082:	30 0b       	mov	r11,0
80003084:	fc 7c 24 00 	mov	r12,-187392
80003088:	f0 1f 00 18 	mcall	800030e8 <_ZN5Empty11AVRAnalogIn4initEv+0x200>
	uint8_t CALIBRATION_RESULT_SEQ2 = adcifa_configure_sequencer(&AVR32_ADCIFA, ADCIFA_SEQ1, &sequancer_opt_1, sequencer_conv_opt_1);
8000308c:	1a 99       	mov	r9,sp
8000308e:	fa ca ff bc 	sub	r10,sp,-68
80003092:	08 9b       	mov	r11,r4
80003094:	fc 7c 24 00 	mov	r12,-187392
80003098:	f0 1f 00 14 	mcall	800030e8 <_ZN5Empty11AVRAnalogIn4initEv+0x200>
	
	adcifa_configure_window_monitor( &AVR32_ADCIFA, ADCIFA_SEQ0,  &monitor_options);
8000309c:	fa c7 ff ae 	sub	r7,sp,-82
800030a0:	0e 9a       	mov	r10,r7
800030a2:	30 0b       	mov	r11,0
800030a4:	fc 7c 24 00 	mov	r12,-187392
800030a8:	f0 1f 00 11 	mcall	800030ec <_ZN5Empty11AVRAnalogIn4initEv+0x204>
	adcifa_configure_window_monitor( &AVR32_ADCIFA, ADCIFA_SEQ1,  &monitor_options);
800030ac:	0e 9a       	mov	r10,r7
800030ae:	08 9b       	mov	r11,r4
800030b0:	fc 7c 24 00 	mov	r12,-187392
800030b4:	f0 1f 00 0e 	mcall	800030ec <_ZN5Empty11AVRAnalogIn4initEv+0x204>
	
	
	//register private channel
	_num_channels = 0;
800030b8:	e5 53 00 40 	st.h	r2[64],r3
	_active_channel = 0;
800030bc:	30 08       	mov	r8,0
800030be:	e5 48 00 44 	st.w	r2[68],r8
	_register_channel(&_vcc);
800030c2:	e4 cb ff a8 	sub	r11,r2,-88
800030c6:	04 9c       	mov	r12,r2
800030c8:	f0 1f 00 0a 	mcall	800030f0 <_ZN5Empty11AVRAnalogIn4initEv+0x208>
	

	
}
800030cc:	2e ad       	sub	sp,-88
800030ce:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800030d2:	00 00       	add	r0,r0
800030d4:	80 00       	ld.sh	r0,r0[0x0]
800030d6:	2c 8a       	sub	r10,-56
800030d8:	80 00       	ld.sh	r0,r0[0x0]
800030da:	bb b8       	sbr	r8,0x1b
800030dc:	80 00       	ld.sh	r0,r0[0x0]
800030de:	02 f4       	st.b	--r1,r4
800030e0:	80 00       	ld.sh	r0,r0[0x0]
800030e2:	03 28       	ld.uh	r8,r1++
800030e4:	80 00       	ld.sh	r0,r0[0x0]
800030e6:	08 08       	add	r8,r4
800030e8:	80 00       	ld.sh	r0,r0[0x0]
800030ea:	03 f4       	ld.ub	r4,r1[0x7]
800030ec:	80 00       	ld.sh	r0,r0[0x0]
800030ee:	07 5c       	ld.sh	r12,--r3
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	2d 98       	sub	r8,-39

800030f4 <_ZN5Empty9HAL_EmptyC1Ev>:
	:
	console(_console),
	uartB(_uartB),
	uartE(_uartE),
	scheduler(_scheduler),
	analogin(_analogin)
800030f4:	48 98       	lddpc	r8,80003118 <_ZN5Empty9HAL_EmptyC1Ev+0x24>
800030f6:	99 18       	st.w	r12[0x4],r8
800030f8:	f0 c9 ff b4 	sub	r9,r8,-76
800030fc:	99 29       	st.w	r12[0x8],r9
800030fe:	30 09       	mov	r9,0
80003100:	99 39       	st.w	r12[0xc],r9
80003102:	f0 c9 ff 68 	sub	r9,r8,-152
80003106:	99 49       	st.w	r12[0x10],r9
80003108:	f0 c8 ff 64 	sub	r8,r8,-156
8000310c:	99 58       	st.w	r12[0x14],r8
        &uartDriverInstance,
		&uartBDriver,
		NULL,
        &schedulerInstance,
		&avrAnalogin
		)
8000310e:	48 48       	lddpc	r8,8000311c <_ZN5Empty9HAL_EmptyC1Ev+0x28>
80003110:	2f 88       	sub	r8,-8
80003112:	99 08       	st.w	r12[0x0],r8
{}
80003114:	5e fc       	retal	r12
80003116:	00 00       	add	r0,r0
80003118:	00 00       	add	r0,r0
8000311a:	07 f0       	ld.ub	r0,r3[0x7]
8000311c:	80 01       	ld.sh	r1,r0[0x0]
8000311e:	0f 94       	ld.ub	r4,r7[0x1]

80003120 <_ZNK5Empty9HAL_Empty4initEiPKPc>:

void Empty::HAL_Empty::init(int argc,char* const argv[]) const {
80003120:	eb cd 40 80 	pushm	r7,lr
80003124:	18 97       	mov	r7,r12
    /* initialize all drivers and private members here.
     * up to the programmer to do this in the correct order.
     * Scheduler should likely come first. */
    scheduler->init(NULL);
80003126:	78 4c       	ld.w	r12,r12[0x10]
80003128:	78 08       	ld.w	r8,r12[0x0]
8000312a:	70 08       	ld.w	r8,r8[0x0]
8000312c:	30 0b       	mov	r11,0
8000312e:	5d 18       	icall	r8
    console->begin(57600);
80003130:	6e 1c       	ld.w	r12,r7[0x4]
80003132:	78 08       	ld.w	r8,r12[0x0]
80003134:	70 b8       	ld.w	r8,r8[0x2c]
80003136:	e0 6b e1 00 	mov	r11,57600
8000313a:	5d 18       	icall	r8
	uartB->begin(9600);
8000313c:	6e 2c       	ld.w	r12,r7[0x8]
8000313e:	78 08       	ld.w	r8,r12[0x0]
80003140:	70 b8       	ld.w	r8,r8[0x2c]
80003142:	e0 6b 25 80 	mov	r11,9600
80003146:	5d 18       	icall	r8

	
}
80003148:	e3 cd 80 80 	ldm	sp++,r7,pc

8000314c <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev>:

const HAL_Empty AP_HAL_Empty;
8000314c:	eb cd 40 80 	pushm	r7,lr


using namespace Empty;
using namespace AP_HAL;

static EmptyUARTDriver uartDriverInstance(&AVR32_USART2);
80003150:	48 d7       	lddpc	r7,80003184 <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x38>
80003152:	fe 7b 2c 00 	mov	r11,-54272
80003156:	0e 9c       	mov	r12,r7
80003158:	f0 1f 00 0c 	mcall	80003188 <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x3c>
static EmptyUARTDriver uartBDriver(&AVR32_USART4);
8000315c:	fc 7b 28 00 	mov	r11,-186368
80003160:	ee cc ff b4 	sub	r12,r7,-76
80003164:	f0 1f 00 09 	mcall	80003188 <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x3c>
//static AVRAnalogIn analogIn; 
static EmptyScheduler schedulerInstance;
80003168:	ee cc ff 68 	sub	r12,r7,-152
8000316c:	f0 1f 00 08 	mcall	8000318c <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x40>
static AVRAnalogIn avrAnalogin;
80003170:	ee cc ff 64 	sub	r12,r7,-156
80003174:	f0 1f 00 07 	mcall	80003190 <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x44>
	uartB->begin(9600);

	
}

const HAL_Empty AP_HAL_Empty;
80003178:	ee cc fe f4 	sub	r12,r7,-268
8000317c:	f0 1f 00 06 	mcall	80003194 <_GLOBAL__I__ZN5Empty9HAL_EmptyC2Ev+0x48>
80003180:	e3 cd 80 80 	ldm	sp++,r7,pc
80003184:	00 00       	add	r0,r0
80003186:	07 f0       	ld.ub	r0,r3[0x7]
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	32 58       	mov	r8,37
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	31 9c       	mov	r12,25
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	2e 14       	sub	r4,-31
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	30 f4       	mov	r4,15

80003198 <_ZN6AP_HAL9Scheduler15set_timer_speedEt>:
    virtual void     reboot(bool hold_in_bootloader) = 0;

    /**
       optional function to set timer speed in Hz
     */
    virtual void     set_timer_speed(uint16_t speed_hz) {}
80003198:	5e fc       	retal	r12

8000319a <_ZN6AP_HAL9Scheduler10stop_clockEy>:

    /**
       optional function to stop clock at a given time, used by log replay
     */
    virtual void     stop_clock(uint64_t time_usec) {}
8000319a:	5e fc       	retal	r12

8000319c <_ZN5Empty14EmptySchedulerC1Ev>:

using namespace Empty;

extern const AP_HAL::HAL& hal;

EmptyScheduler::EmptyScheduler()
8000319c:	48 28       	lddpc	r8,800031a4 <_ZN5Empty14EmptySchedulerC1Ev+0x8>
8000319e:	2f 88       	sub	r8,-8
800031a0:	99 08       	st.w	r12[0x0],r8
{}
800031a2:	5e fc       	retal	r12
800031a4:	80 01       	ld.sh	r1,r0[0x0]
800031a6:	0f d8       	ld.ub	r8,r7[0x5]

800031a8 <_ZN5Empty14EmptyScheduler8millis64Ev>:
	delay_ms(ms);
}

uint64_t EmptyScheduler::millis64() {
    return 10000;
}
800031a8:	e0 6a 27 10 	mov	r10,10000
800031ac:	30 0b       	mov	r11,0
800031ae:	5e fc       	retal	r12

800031b0 <_ZN5Empty14EmptyScheduler8micros64Ev>:

uint64_t EmptyScheduler::micros64() {
    return 200000;
}
800031b0:	e2 7a 0d 40 	mov	r10,200000
800031b4:	30 0b       	mov	r11,0
800031b6:	5e fc       	retal	r12

800031b8 <_ZN5Empty14EmptyScheduler6millisEv>:

uint32_t EmptyScheduler::millis() {
800031b8:	d4 01       	pushm	lr
    return millis64();
800031ba:	f0 1f 00 03 	mcall	800031c4 <_ZN5Empty14EmptyScheduler6millisEv+0xc>
}
800031be:	14 9c       	mov	r12,r10
800031c0:	d8 02       	popm	pc
800031c2:	00 00       	add	r0,r0
800031c4:	80 00       	ld.sh	r0,r0[0x0]
800031c6:	31 a8       	mov	r8,26

800031c8 <_ZN5Empty14EmptyScheduler6microsEv>:

uint32_t EmptyScheduler::micros() {
800031c8:	d4 01       	pushm	lr
    return micros64();
800031ca:	f0 1f 00 03 	mcall	800031d4 <_ZN5Empty14EmptyScheduler6microsEv+0xc>
}
800031ce:	14 9c       	mov	r12,r10
800031d0:	d8 02       	popm	pc
800031d2:	00 00       	add	r0,r0
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	31 b0       	mov	r0,27

800031d8 <_ZN5Empty14EmptyScheduler18delay_microsecondsEt>:

void EmptyScheduler::delay_microseconds(uint16_t us)
{}
800031d8:	5e fc       	retal	r12

800031da <_ZN5Empty14EmptyScheduler23register_delay_callbackEPFvvEt>:

void EmptyScheduler::register_delay_callback(AP_HAL::Proc k,
            uint16_t min_time_ms)
{}
800031da:	5e fc       	retal	r12

800031dc <_ZN5Empty14EmptyScheduler23register_timer_failsafeEPFvvEm>:

//void EmptyScheduler::register_io_process(AP_HAL::MemberProc k)
//{}

void EmptyScheduler::register_timer_failsafe(AP_HAL::Proc, uint32_t period_us)
{}
800031dc:	5e fc       	retal	r12

800031de <_ZN5Empty14EmptyScheduler19suspend_timer_procsEv>:

void EmptyScheduler::suspend_timer_procs()
{}
800031de:	5e fc       	retal	r12

800031e0 <_ZN5Empty14EmptyScheduler18resume_timer_procsEv>:

void EmptyScheduler::resume_timer_procs()
{}
800031e0:	5e fc       	retal	r12

800031e2 <_ZN5Empty14EmptyScheduler15in_timerprocessEv>:

bool EmptyScheduler::in_timerprocess() {
    return false;
}
800031e2:	5e fd       	retal	0

800031e4 <_ZN5Empty14EmptyScheduler19system_initializingEv>:
void EmptyScheduler::end_atomic()
{}

bool EmptyScheduler::system_initializing() {
    return false;
}
800031e4:	5e fd       	retal	0

800031e6 <_ZN5Empty14EmptyScheduler18system_initializedEv>:

void EmptyScheduler::system_initialized()
{}
800031e6:	5e fc       	retal	r12

800031e8 <_ZN5Empty14EmptyScheduler6rebootEb>:
//void EmptyScheduler::panic(const prog_char_t *errormsg) {
//    hal.console->println_P(errormsg);
//    for(;;);
//}

void EmptyScheduler::reboot(bool hold_in_bootloader) {
800031e8:	c0 08       	rjmp	800031e8 <_ZN5Empty14EmptyScheduler6rebootEb>
800031ea:	d7 03       	nop

800031ec <_ZN5Empty14EmptyScheduler5delayEt>:
{
	sysclk_init();
}

void inline EmptyScheduler::delay(uint16_t ms)
{
800031ec:	eb cd 40 b0 	pushm	r4-r5,r7,lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031f0:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031f4:	eb db c0 10 	bfextu	r5,r11,0x0,0x10
800031f8:	e0 68 24 00 	mov	r8,9216
800031fc:	ea 18 00 f4 	orh	r8,0xf4
80003200:	ea 08 06 44 	mulu.d	r4,r5,r8
80003204:	e0 68 03 e8 	mov	r8,1000
80003208:	30 09       	mov	r9,0
8000320a:	e0 6a 03 e7 	mov	r10,999
8000320e:	30 0b       	mov	r11,0
80003210:	e8 0a 00 0a 	add	r10,r4,r10
80003214:	ea 0b 00 4b 	adc	r11,r5,r11
80003218:	f0 1f 00 0b 	mcall	80003244 <_ZN5Empty14EmptyScheduler5delayEt+0x58>
8000321c:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003220:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003224:	14 37       	cp.w	r7,r10
80003226:	e0 88 00 08 	brls	80003236 <_ZN5Empty14EmptyScheduler5delayEt+0x4a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000322a:	10 37       	cp.w	r7,r8
8000322c:	fe 98 ff fa 	brls	80003220 <_ZN5Empty14EmptyScheduler5delayEt+0x34>
80003230:	10 3a       	cp.w	r10,r8
80003232:	c0 73       	brcs	80003240 <_ZN5Empty14EmptyScheduler5delayEt+0x54>
80003234:	cf 6b       	rjmp	80003220 <_ZN5Empty14EmptyScheduler5delayEt+0x34>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003236:	10 37       	cp.w	r7,r8
80003238:	e0 8b 00 04 	brhi	80003240 <_ZN5Empty14EmptyScheduler5delayEt+0x54>
8000323c:	10 3a       	cp.w	r10,r8
8000323e:	cf 12       	brcc	80003220 <_ZN5Empty14EmptyScheduler5delayEt+0x34>
80003240:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	ad 12       	ld.d	r2,--r6

80003248 <_ZN5Empty14EmptyScheduler4initEPv>:

EmptyScheduler::EmptyScheduler()
{}

void inline EmptyScheduler::init(void* implspecific)
{
80003248:	d4 01       	pushm	lr
	sysclk_init();
8000324a:	f0 1f 00 02 	mcall	80003250 <_ZN5Empty14EmptyScheduler4initEPv+0x8>
}
8000324e:	d8 02       	popm	pc
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	17 58       	ld.sh	r8,--r11

80003254 <_ZN5Empty15EmptyUARTDriver16get_flow_controlEv>:
    int _get_fd(void) {
	    return _fd;
    }

    //void set_flow_control(enum flow_control flow_control);
    enum flow_control get_flow_control(void) { return _flow_control; }
80003254:	79 2c       	ld.w	r12,r12[0x48]
80003256:	5e fc       	retal	r12

80003258 <_ZN5Empty15EmptyUARTDriverC1EPV13avr32_usart_t>:

EmptyUARTDriver::EmptyUARTDriver(volatile avr32_usart_t *portNumber)
:
_portNumber(portNumber),
_initialised(false),
_in_timer(false)
80003258:	48 58       	lddpc	r8,8000326c <_ZN5Empty15EmptyUARTDriverC1EPV13avr32_usart_t+0x14>
8000325a:	2f 88       	sub	r8,-8
8000325c:	99 08       	st.w	r12[0x0],r8
8000325e:	99 1b       	st.w	r12[0x4],r11
80003260:	30 08       	mov	r8,0
80003262:	f9 68 00 10 	st.b	r12[16],r8
80003266:	f9 68 00 11 	st.b	r12[17],r8
 {
	 
 }
8000326a:	5e fc       	retal	r12
8000326c:	80 01       	ld.sh	r1,r0[0x0]
8000326e:	10 60       	and	r0,r8

80003270 <_ZN5Empty15EmptyUARTDriver5beginEm>:



void EmptyUARTDriver::begin(uint32_t b) {
80003270:	d4 01       	pushm	lr
    begin (b,0,0);		
80003272:	78 08       	ld.w	r8,r12[0x0]
80003274:	70 c8       	ld.w	r8,r8[0x30]
80003276:	30 09       	mov	r9,0
80003278:	12 9a       	mov	r10,r9
8000327a:	5d 18       	icall	r8
}
8000327c:	d8 02       	popm	pc

8000327e <_ZN5Empty15EmptyUARTDriver3endEv>:
	 

void EmptyUARTDriver::end()
{

}
8000327e:	5e fc       	retal	r12

80003280 <_ZN5Empty15EmptyUARTDriver5flushEv>:

void EmptyUARTDriver::flush() {}
80003280:	5e fc       	retal	r12

80003282 <_ZN5Empty15EmptyUARTDriver14is_initializedEv>:
	
bool EmptyUARTDriver::is_initialized() { 
	
	return false;}
80003282:	5e fd       	retal	0

80003284 <_ZN5Empty15EmptyUARTDriver19set_blocking_writesEb>:
	
void EmptyUARTDriver::set_blocking_writes(bool blocking) {}
80003284:	5e fc       	retal	r12

80003286 <_ZN5Empty15EmptyUARTDriver10tx_pendingEv>:
bool EmptyUARTDriver::tx_pending() { return false; }
80003286:	5e fd       	retal	0

80003288 <_ZN5Empty15EmptyUARTDriver9availableEv>:

/* Empty implementations of Stream virtual methods */
int16_t EmptyUARTDriver::available() 
{ 

}
80003288:	5e fc       	retal	r12

8000328a <_ZN5Empty15EmptyUARTDriver7txspaceEv>:
int16_t EmptyUARTDriver::txspace() {

}
8000328a:	5e fc       	retal	r12

8000328c <_ZN5Empty15EmptyUARTDriver5writeEPKhm>:
} 



size_t EmptyUARTDriver::write(const uint8_t *buffer, size_t size)
{
8000328c:	eb cd 40 f8 	pushm	r3-r7,lr
80003290:	18 96       	mov	r6,r12
80003292:	16 93       	mov	r3,r11
80003294:	14 94       	mov	r4,r10
	size_t n = 0;
	while (size--) {
80003296:	58 0a       	cp.w	r10,0
80003298:	c0 31       	brne	8000329e <_ZN5Empty15EmptyUARTDriver5writeEPKhm+0x12>
8000329a:	30 05       	mov	r5,0
8000329c:	c0 d8       	rjmp	800032b6 <_ZN5Empty15EmptyUARTDriver5writeEPKhm+0x2a>
8000329e:	30 07       	mov	r7,0
800032a0:	0e 95       	mov	r5,r7
		n += write(*buffer++);
800032a2:	6c 08       	ld.w	r8,r6[0x0]
800032a4:	70 08       	ld.w	r8,r8[0x0]
800032a6:	e6 07 07 0b 	ld.ub	r11,r3[r7]
800032aa:	0c 9c       	mov	r12,r6
800032ac:	5d 18       	icall	r8
800032ae:	18 05       	add	r5,r12
800032b0:	2f f7       	sub	r7,-1


size_t EmptyUARTDriver::write(const uint8_t *buffer, size_t size)
{
	size_t n = 0;
	while (size--) {
800032b2:	08 37       	cp.w	r7,r4
800032b4:	cf 71       	brne	800032a2 <_ZN5Empty15EmptyUARTDriver5writeEPKhm+0x16>
		n += write(*buffer++);
	}
	return n;
}
800032b6:	0a 9c       	mov	r12,r5
800032b8:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

800032bc <_ZN5Empty15EmptyUARTDriver5writeEh>:

	/* 
   write one byte to the buffer
 */
size_t EmptyUARTDriver::write(uint8_t c) 
{ 
800032bc:	eb cd 40 c0 	pushm	r6-r7,lr
800032c0:	16 96       	mov	r6,r11
	usart_serial_putchar(_portNumber,c);
800032c2:	78 17       	ld.w	r7,r12[0x4]
 *   \retval 0  The function timed out before the USART transmitter became
 *              ready to send.
 */
static inline int usart_serial_putchar(usart_if usart, uint8_t c)
{
	while (usart_write_char(usart, c)!=USART_SUCCESS);
800032c4:	0c 9b       	mov	r11,r6
800032c6:	0e 9c       	mov	r12,r7
800032c8:	f0 1f 00 03 	mcall	800032d4 <_ZN5Empty15EmptyUARTDriver5writeEh+0x18>
800032cc:	cf c1       	brne	800032c4 <_ZN5Empty15EmptyUARTDriver5writeEh+0x8>
	return 1;
} 
800032ce:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800032d2:	00 00       	add	r0,r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	15 7e       	ld.ub	lr,--r10

800032d8 <_ZN5Empty15EmptyUARTDriver4readEv>:

}
int16_t EmptyUARTDriver::txspace() {

}
uint8_t EmptyUARTDriver::read() { 
800032d8:	d4 01       	pushm	lr
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
800032da:	78 1c       	ld.w	r12,r12[0x4]
800032dc:	f0 1f 00 02 	mcall	800032e4 <_ZN5Empty15EmptyUARTDriver4readEv+0xc>
		uint8_t c;
		usart_serial_getchar(_portNumber, &c);
		return c;
}
800032e0:	5c 5c       	castu.b	r12
800032e2:	d8 02       	popm	pc
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	15 b4       	ld.ub	r4,r10[0x3]

800032e8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800032e8:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800032ea:	18 9b       	mov	r11,r12
800032ec:	30 2c       	mov	r12,2
800032ee:	f0 1f 00 02 	mcall	800032f4 <sysclk_enable_pba_module+0xc>
}
800032f2:	d8 02       	popm	pc
800032f4:	80 00       	ld.sh	r0,r0[0x0]
800032f6:	17 1c       	ld.sh	r12,r11++

800032f8 <_ZN5Empty15EmptyUARTDriver5beginEmtt>:

void EmptyUARTDriver::begin(uint32_t b) {
    begin (b,0,0);		
}

void EmptyUARTDriver::begin(uint32_t b, uint16_t rxS, uint16_t txS) {
800032f8:	eb cd 40 80 	pushm	r7,lr
	
	static usart_serial_options_t usart_options;
	usart_options.baudrate = b;
800032fc:	fe f8 05 30 	ld.w	r8,pc[1328]
80003300:	91 0b       	st.w	r8[0x0],r11
	usart_options.charlength = USART_SERIAL_CHAR_LENGTH;
80003302:	30 89       	mov	r9,8
80003304:	b0 c9       	st.b	r8[0x4],r9
	usart_options.paritytype = USART_SERIAL_PARITY;
80003306:	30 49       	mov	r9,4
80003308:	b0 d9       	st.b	r8[0x5],r9
	usart_options.stopbits = USART_SERIAL_STOP_BITS;
8000330a:	30 09       	mov	r9,0
8000330c:	b0 39       	st.h	r8[0x6],r9
	usart_serial_init(_portNumber, &usart_options);
8000330e:	78 17       	ld.w	r7,r12[0x4]
 */
static inline bool usart_serial_init(volatile avr32_usart_t *usart,
		usart_serial_options_t *opt)
{
	// USART options.
	opt->channelmode = CONFIG_USART_SERIAL_MODE;
80003310:	f1 69 00 08 	st.b	r8[8],r9
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003314:	0e 98       	mov	r8,r7
80003316:	fe 57 10 00 	cp.w	r7,-61440
8000331a:	e0 80 00 ea 	breq	800034ee <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1f6>
8000331e:	e0 8b 00 6e 	brhi	800033fa <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x102>
80003322:	fe 47 00 00 	cp.w	r7,-131072
80003326:	e0 80 01 50 	breq	800035c6 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2ce>
8000332a:	e0 8b 00 38 	brhi	8000339a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0xa2>
8000332e:	fc 57 1c 00 	cp.w	r7,-189440
80003332:	e0 80 01 91 	breq	80003654 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x35c>
80003336:	e0 8b 00 18 	brhi	80003366 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x6e>
8000333a:	fc 57 10 00 	cp.w	r7,-192512
8000333e:	e0 80 01 7c 	breq	80003636 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x33e>
80003342:	e0 8b 00 08 	brhi	80003352 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x5a>
80003346:	fc 57 00 00 	cp.w	r7,-196608
8000334a:	e0 81 01 a7 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
8000334e:	e0 8f 01 6b 	bral	80003624 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x32c>
80003352:	fc 57 14 00 	cp.w	r7,-191488
80003356:	e0 80 01 75 	breq	80003640 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x348>
8000335a:	fc 57 18 00 	cp.w	r7,-190464
8000335e:	e0 81 01 9d 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003362:	e0 8f 01 74 	bral	8000364a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x352>
80003366:	fc 57 28 00 	cp.w	r7,-186368
8000336a:	e0 80 01 88 	breq	8000367a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x382>
8000336e:	e0 8b 00 0c 	brhi	80003386 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x8e>
80003372:	fc 57 20 00 	cp.w	r7,-188416
80003376:	e0 80 01 78 	breq	80003666 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x36e>
8000337a:	fc 57 24 00 	cp.w	r7,-187392
8000337e:	e0 81 01 8d 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003382:	e0 8f 01 77 	bral	80003670 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x378>
80003386:	fc 57 2c 00 	cp.w	r7,-185344
8000338a:	e0 80 01 7d 	breq	80003684 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x38c>
8000338e:	fc 57 30 00 	cp.w	r7,-184320
80003392:	e0 81 01 83 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003396:	e0 8f 01 7c 	bral	8000368e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x396>
8000339a:	fe 47 2c 00 	cp.w	r7,-119808
8000339e:	e0 80 01 39 	breq	80003610 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x318>
800033a2:	e0 8b 00 16 	brhi	800033ce <_ZN5Empty15EmptyUARTDriver5beginEmtt+0xd6>
800033a6:	fe 47 20 00 	cp.w	r7,-122880
800033aa:	e0 80 01 20 	breq	800035ea <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2f2>
800033ae:	e0 8b 00 07 	brhi	800033bc <_ZN5Empty15EmptyUARTDriver5beginEmtt+0xc4>
800033b2:	fe 47 10 00 	cp.w	r7,-126976
800033b6:	e0 81 01 71 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800033ba:	c0 f9       	rjmp	800035d8 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2e0>
800033bc:	fe 47 24 00 	cp.w	r7,-121856
800033c0:	e0 80 01 1a 	breq	800035f4 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2fc>
800033c4:	fe 47 28 00 	cp.w	r7,-120832
800033c8:	e0 81 01 68 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800033cc:	c1 d9       	rjmp	80003606 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x30e>
800033ce:	fe 57 04 00 	cp.w	r7,-64512
800033d2:	c7 f0       	breq	800034d0 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1d8>
800033d4:	e0 8b 00 0b 	brhi	800033ea <_ZN5Empty15EmptyUARTDriver5beginEmtt+0xf2>
800033d8:	fe 47 30 00 	cp.w	r7,-118784
800033dc:	e0 80 01 1f 	breq	8000361a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x322>
800033e0:	fe 57 00 00 	cp.w	r7,-65536
800033e4:	e0 81 01 5a 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800033e8:	c6 f8       	rjmp	800034c6 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1ce>
800033ea:	fe 57 08 00 	cp.w	r7,-63488
800033ee:	c7 60       	breq	800034da <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1e2>
800033f0:	fe 57 0c 00 	cp.w	r7,-62464
800033f4:	e0 81 01 52 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800033f8:	c7 68       	rjmp	800034e4 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1ec>
800033fa:	fe 57 44 00 	cp.w	r7,-48128
800033fe:	e0 80 00 af 	breq	8000355c <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x264>
80003402:	e0 8b 00 30 	brhi	80003462 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x16a>
80003406:	fe 57 2c 00 	cp.w	r7,-54272
8000340a:	e0 80 00 8b 	breq	80003520 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x228>
8000340e:	e0 8b 00 14 	brhi	80003436 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x13e>
80003412:	fe 57 18 00 	cp.w	r7,-59392
80003416:	c7 60       	breq	80003502 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x20a>
80003418:	e0 8b 00 07 	brhi	80003426 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x12e>
8000341c:	fe 57 14 00 	cp.w	r7,-60416
80003420:	e0 81 01 3c 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003424:	c6 a8       	rjmp	800034f8 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x200>
80003426:	fe 57 20 00 	cp.w	r7,-57344
8000342a:	c7 10       	breq	8000350c <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x214>
8000342c:	fe 57 28 00 	cp.w	r7,-55296
80003430:	e0 81 01 34 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003434:	c7 18       	rjmp	80003516 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x21e>
80003436:	fe 57 38 00 	cp.w	r7,-51200
8000343a:	e0 80 00 82 	breq	8000353e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x246>
8000343e:	e0 8b 00 0a 	brhi	80003452 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x15a>
80003442:	fe 57 30 00 	cp.w	r7,-53248
80003446:	c7 20       	breq	8000352a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x232>
80003448:	fe 57 34 00 	cp.w	r7,-52224
8000344c:	e0 81 01 26 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003450:	c7 28       	rjmp	80003534 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x23c>
80003452:	fe 57 3c 00 	cp.w	r7,-50176
80003456:	c7 90       	breq	80003548 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x250>
80003458:	fe 57 40 00 	cp.w	r7,-49152
8000345c:	e0 81 01 1e 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003460:	c7 98       	rjmp	80003552 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x25a>
80003462:	fe 57 5c 00 	cp.w	r7,-41984
80003466:	e0 80 00 94 	breq	8000358e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x296>
8000346a:	e0 8b 00 18 	brhi	8000349a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1a2>
8000346e:	fe 57 50 00 	cp.w	r7,-45056
80003472:	e0 80 00 82 	breq	80003576 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x27e>
80003476:	e0 8b 00 0a 	brhi	8000348a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x192>
8000347a:	fe 57 48 00 	cp.w	r7,-47104
8000347e:	c7 40       	breq	80003566 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x26e>
80003480:	fe 57 4c 00 	cp.w	r7,-46080
80003484:	e0 81 01 0a 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003488:	c7 38       	rjmp	8000356e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x276>
8000348a:	fe 57 54 00 	cp.w	r7,-44032
8000348e:	c7 80       	breq	8000357e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x286>
80003490:	fe 57 58 00 	cp.w	r7,-43008
80003494:	e0 81 01 02 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
80003498:	c7 78       	rjmp	80003586 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x28e>
8000349a:	fe 57 68 00 	cp.w	r7,-38912
8000349e:	e0 80 00 88 	breq	800035ae <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2b6>
800034a2:	e0 8b 00 0a 	brhi	800034b6 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x1be>
800034a6:	fe 57 60 00 	cp.w	r7,-40960
800034aa:	c7 a0       	breq	8000359e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2a6>
800034ac:	fe 57 64 00 	cp.w	r7,-39936
800034b0:	e0 81 00 f4 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800034b4:	c7 98       	rjmp	800035a6 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2ae>
800034b6:	fe 57 6c 00 	cp.w	r7,-37888
800034ba:	c7 e0       	breq	800035b6 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2be>
800034bc:	fe 57 70 00 	cp.w	r7,-36864
800034c0:	e0 81 00 ec 	brne	80003698 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3a0>
800034c4:	c7 d8       	rjmp	800035be <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x2c6>
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800034c6:	30 0c       	mov	r12,0
800034c8:	f0 1f 00 da 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034cc:	e0 8f 01 a5 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800034d0:	30 1c       	mov	r12,1
800034d2:	f0 1f 00 d8 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034d6:	e0 8f 01 a0 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_SCIF_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SCIF);
800034da:	30 2c       	mov	r12,2
800034dc:	f0 1f 00 d5 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034e0:	e0 8f 01 9b 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_AST_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_AST);
800034e4:	30 3c       	mov	r12,3
800034e6:	f0 1f 00 d3 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034ea:	e0 8f 01 96 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_WDT_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_WDT);
800034ee:	30 4c       	mov	r12,4
800034f0:	f0 1f 00 d0 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034f4:	e0 8f 01 91 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_EIC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_EIC);
800034f8:	30 5c       	mov	r12,5
800034fa:	f0 1f 00 ce 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800034fe:	e0 8f 01 8c 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_FREQM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_FREQM);
80003502:	30 6c       	mov	r12,6
80003504:	f0 1f 00 cb 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003508:	e0 8f 01 87 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
8000350c:	30 7c       	mov	r12,7
8000350e:	f0 1f 00 c9 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003512:	e0 8f 01 82 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80003516:	30 8c       	mov	r12,8
80003518:	f0 1f 00 c6 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000351c:	e0 8f 01 7d 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80003520:	30 9c       	mov	r12,9
80003522:	f0 1f 00 c4 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003526:	e0 8f 01 78 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
8000352a:	30 9c       	mov	r12,9
8000352c:	f0 1f 00 c1 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003530:	e0 8f 01 73 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#if (UC3C0 || UC3C1)
	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
80003534:	30 bc       	mov	r12,11
80003536:	f0 1f 00 bf 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000353a:	e0 8f 01 6e 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#endif
	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
8000353e:	30 cc       	mov	r12,12
80003540:	f0 1f 00 bc 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003544:	e0 8f 01 69 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
80003548:	30 dc       	mov	r12,13
8000354a:	f0 1f 00 ba 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000354e:	e0 8f 01 64 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
80003552:	30 ec       	mov	r12,14
80003554:	f0 1f 00 b7 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003558:	e0 8f 01 5f 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
8000355c:	30 fc       	mov	r12,15
8000355e:	f0 1f 00 b5 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003562:	e0 8f 01 5a 	bral	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_IISC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_IISC);
80003566:	31 0c       	mov	r12,16
80003568:	f0 1f 00 b2 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000356c:	c5 59       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
		
	case AVR32_PWM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PWM);
8000356e:	31 1c       	mov	r12,17
80003570:	f0 1f 00 b0 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003574:	c5 19       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_QDEC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_QDEC0);
80003576:	31 2c       	mov	r12,18
80003578:	f0 1f 00 ae 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000357c:	c4 d9       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#if (UC3C0 || UC3C1)
	case AVR32_QDEC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_QDEC1);
8000357e:	31 3c       	mov	r12,19
80003580:	f0 1f 00 ac 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
80003584:	c4 99       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#endif
#if (UC3C0 || UC3C1)
	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003586:	31 4c       	mov	r12,20
80003588:	f0 1f 00 aa 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000358c:	c4 59       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000358e:	30 cb       	mov	r11,12
80003590:	30 1c       	mov	r12,1
80003592:	f0 1f 00 a9 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
		sysclk_enable_pba_module(SYSCLK_TC1);
		break;
#endif
	case AVR32_PEVC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PEVC_HSB);
		sysclk_enable_pba_module(SYSCLK_PEVC_REGS);
80003596:	31 5c       	mov	r12,21
80003598:	f0 1f 00 a6 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
8000359c:	c3 d9       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;

	case AVR32_ACIFA0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ACIFA0);
8000359e:	31 6c       	mov	r12,22
800035a0:	f0 1f 00 a4 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800035a4:	c3 99       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#if (UC3C0 || UC3C1)
	case AVR32_ACIFA1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ACIFA1);
800035a6:	31 7c       	mov	r12,23
800035a8:	f0 1f 00 a2 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800035ac:	c3 59       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#endif
	case AVR32_DACIFB0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DACIFB0);
800035ae:	31 8c       	mov	r12,24
800035b0:	f0 1f 00 a0 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800035b4:	c3 19       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#if (UC3C0 || UC3C1)
	case AVR32_DACIFB1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DACIFB1);
800035b6:	31 9c       	mov	r12,25
800035b8:	f0 1f 00 9e 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800035bc:	c2 d9       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
		break;
#endif
	case AVR32_AW_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_AW);
800035be:	31 ac       	mov	r12,26
800035c0:	f0 1f 00 9c 	mcall	80003830 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x538>
800035c4:	c2 99       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800035c6:	30 5b       	mov	r11,5
800035c8:	30 1c       	mov	r12,1
800035ca:	f0 1f 00 9b 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
static inline void sysclk_enable_pbb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800035ce:	30 0b       	mov	r11,0
800035d0:	30 3c       	mov	r12,3
800035d2:	f0 1f 00 99 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
800035d6:	c2 09       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800035d8:	30 3b       	mov	r11,3
800035da:	30 1c       	mov	r12,1
800035dc:	f0 1f 00 96 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
static inline void sysclk_enable_pbb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800035e0:	30 1b       	mov	r11,1
800035e2:	30 3c       	mov	r12,3
800035e4:	f0 1f 00 94 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
800035e8:	c1 79       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800035ea:	30 2b       	mov	r11,2
800035ec:	30 3c       	mov	r12,3
800035ee:	f0 1f 00 92 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
800035f2:	c1 29       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800035f4:	30 0b       	mov	r11,0
800035f6:	30 1c       	mov	r12,1
800035f8:	f0 1f 00 8f 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
static inline void sysclk_enable_pbb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800035fc:	30 3b       	mov	r11,3
800035fe:	16 9c       	mov	r12,r11
80003600:	f0 1f 00 8d 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003604:	c0 99       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003606:	30 4b       	mov	r11,4
80003608:	30 3c       	mov	r12,3
8000360a:	f0 1f 00 8b 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
8000360e:	c0 49       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003610:	30 5b       	mov	r11,5
80003612:	30 3c       	mov	r12,3
80003614:	f0 1f 00 88 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003618:	cf f8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000361a:	30 6b       	mov	r11,6
8000361c:	30 3c       	mov	r12,3
8000361e:	f0 1f 00 86 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003622:	cf a8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003624:	30 1b       	mov	r11,1
80003626:	16 9c       	mov	r12,r11
80003628:	f0 1f 00 83 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
 * \brief Enable a module clock derived from the PBC clock
 * \param index Index of the module clock in the PBCMASK register
 */
static inline void sysclk_enable_pbc_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBC, index);
8000362c:	30 0b       	mov	r11,0
8000362e:	30 4c       	mov	r12,4
80003630:	f0 1f 00 81 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003634:	cf 18       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003636:	30 1b       	mov	r11,1
80003638:	30 4c       	mov	r12,4
8000363a:	f0 1f 00 7f 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
8000363e:	ce c8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003640:	30 2b       	mov	r11,2
80003642:	30 4c       	mov	r12,4
80003644:	f0 1f 00 7c 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003648:	ce 78       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000364a:	30 3b       	mov	r11,3
8000364c:	30 4c       	mov	r12,4
8000364e:	f0 1f 00 7a 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003652:	ce 28       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003654:	30 4b       	mov	r11,4
80003656:	30 1c       	mov	r12,1
80003658:	f0 1f 00 77 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
 * \brief Enable a module clock derived from the PBC clock
 * \param index Index of the module clock in the PBCMASK register
 */
static inline void sysclk_enable_pbc_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBC, index);
8000365c:	30 4b       	mov	r11,4
8000365e:	16 9c       	mov	r12,r11
80003660:	f0 1f 00 75 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003664:	cd 98       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003666:	30 5b       	mov	r11,5
80003668:	30 4c       	mov	r12,4
8000366a:	f0 1f 00 73 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
8000366e:	cd 48       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003670:	30 6b       	mov	r11,6
80003672:	30 4c       	mov	r12,4
80003674:	f0 1f 00 70 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003678:	cc f8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000367a:	30 7b       	mov	r11,7
8000367c:	30 4c       	mov	r12,4
8000367e:	f0 1f 00 6e 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003682:	cc a8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003684:	30 8b       	mov	r11,8
80003686:	30 4c       	mov	r12,4
80003688:	f0 1f 00 6b 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
8000368c:	cc 58       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000368e:	30 9b       	mov	r11,9
80003690:	30 4c       	mov	r12,4
80003692:	f0 1f 00 69 	mcall	80003834 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x53c>
80003696:	cc 08       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
80003698:	fe 58 10 00 	cp.w	r8,-61440
8000369c:	e0 80 00 bd 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036a0:	e0 8b 00 62 	brhi	80003764 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x46c>
800036a4:	fe 48 00 00 	cp.w	r8,-131072
800036a8:	e0 80 00 b7 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036ac:	e0 8b 00 34 	brhi	80003714 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x41c>
800036b0:	fc 58 1c 00 	cp.w	r8,-189440
800036b4:	e0 80 00 b1 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036b8:	e0 8b 00 16 	brhi	800036e4 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3ec>
800036bc:	fc 58 10 00 	cp.w	r8,-192512
800036c0:	e0 80 00 ab 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036c4:	e0 8b 00 07 	brhi	800036d2 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x3da>
800036c8:	fc 58 00 00 	cp.w	r8,-196608
800036cc:	e0 81 00 a3 	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800036d0:	ca 38       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036d2:	fc 58 14 00 	cp.w	r8,-191488
800036d6:	e0 80 00 a0 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036da:	fc 58 18 00 	cp.w	r8,-190464
800036de:	e0 81 00 9a 	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800036e2:	c9 a8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036e4:	fc 58 28 00 	cp.w	r8,-186368
800036e8:	e0 80 00 97 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036ec:	e0 8b 00 0b 	brhi	80003702 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x40a>
800036f0:	fc 58 20 00 	cp.w	r8,-188416
800036f4:	e0 80 00 91 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800036f8:	fc 58 24 00 	cp.w	r8,-187392
800036fc:	e0 81 00 8b 	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003700:	c8 b8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003702:	fc 58 2c 00 	cp.w	r8,-185344
80003706:	e0 80 00 88 	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000370a:	fc 58 30 00 	cp.w	r8,-184320
8000370e:	e0 81 00 82 	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003712:	c8 28       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003714:	fe 48 2c 00 	cp.w	r8,-119808
80003718:	c7 f0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000371a:	e0 8b 00 12 	brhi	8000373e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x446>
8000371e:	fe 48 20 00 	cp.w	r8,-122880
80003722:	c7 a0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003724:	e0 8b 00 06 	brhi	80003730 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x438>
80003728:	fe 48 10 00 	cp.w	r8,-126976
8000372c:	c7 31       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
8000372e:	c7 48       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003730:	fe 48 24 00 	cp.w	r8,-121856
80003734:	c7 10       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003736:	fe 48 28 00 	cp.w	r8,-120832
8000373a:	c6 c1       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
8000373c:	c6 d8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000373e:	fe 58 04 00 	cp.w	r8,-64512
80003742:	c6 a0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003744:	e0 8b 00 09 	brhi	80003756 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x45e>
80003748:	fe 48 30 00 	cp.w	r8,-118784
8000374c:	c6 50       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000374e:	fe 58 00 00 	cp.w	r8,-65536
80003752:	c6 01       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003754:	c6 18       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003756:	fe 58 08 00 	cp.w	r8,-63488
8000375a:	c5 e0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000375c:	fe 58 0c 00 	cp.w	r8,-62464
80003760:	c5 91       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003762:	c5 a8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003764:	fe 58 44 00 	cp.w	r8,-48128
80003768:	c5 70       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000376a:	e0 8b 00 2a 	brhi	800037be <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x4c6>
8000376e:	fe 58 2c 00 	cp.w	r8,-54272
80003772:	c5 20       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003774:	e0 8b 00 12 	brhi	80003798 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x4a0>
80003778:	fe 58 18 00 	cp.w	r8,-59392
8000377c:	c4 d0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000377e:	e0 8b 00 06 	brhi	8000378a <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x492>
80003782:	fe 58 14 00 	cp.w	r8,-60416
80003786:	c4 61       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003788:	c4 78       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000378a:	fe 58 20 00 	cp.w	r8,-57344
8000378e:	c4 40       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003790:	fe 58 28 00 	cp.w	r8,-55296
80003794:	c3 f1       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003796:	c4 08       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003798:	fe 58 38 00 	cp.w	r8,-51200
8000379c:	c3 d0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000379e:	e0 8b 00 09 	brhi	800037b0 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x4b8>
800037a2:	fe 58 30 00 	cp.w	r8,-53248
800037a6:	c3 80       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037a8:	fe 58 34 00 	cp.w	r8,-52224
800037ac:	c3 31       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800037ae:	c3 48       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037b0:	fe 58 3c 00 	cp.w	r8,-50176
800037b4:	c3 10       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037b6:	fe 58 40 00 	cp.w	r8,-49152
800037ba:	c2 c1       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800037bc:	c2 d8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037be:	fe 58 5c 00 	cp.w	r8,-41984
800037c2:	c2 a0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037c4:	e0 8b 00 15 	brhi	800037ee <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x4f6>
800037c8:	fe 58 50 00 	cp.w	r8,-45056
800037cc:	c2 50       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037ce:	e0 8b 00 09 	brhi	800037e0 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x4e8>
800037d2:	fe 58 48 00 	cp.w	r8,-47104
800037d6:	c2 00       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037d8:	fe 58 4c 00 	cp.w	r8,-46080
800037dc:	c1 b1       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800037de:	c1 c8       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037e0:	fe 58 54 00 	cp.w	r8,-44032
800037e4:	c1 90       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037e6:	fe 58 58 00 	cp.w	r8,-43008
800037ea:	c1 41       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
800037ec:	c1 58       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037ee:	fe 58 68 00 	cp.w	r8,-38912
800037f2:	c1 20       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037f4:	e0 8b 00 09 	brhi	80003806 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x50e>
800037f8:	fe 58 60 00 	cp.w	r8,-40960
800037fc:	c0 d0       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
800037fe:	fe 58 64 00 	cp.w	r8,-39936
80003802:	c0 81       	brne	80003812 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51a>
80003804:	c0 98       	rjmp	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003806:	fe 58 6c 00 	cp.w	r8,-37888
8000380a:	c0 60       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
8000380c:	fe 58 70 00 	cp.w	r8,-36864
80003810:	c0 30       	breq	80003816 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x51e>
80003812:	30 0a       	mov	r10,0
80003814:	c0 58       	rjmp	8000381e <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x526>
80003816:	e0 6a 24 00 	mov	r10,9216
8000381a:	ea 1a 00 f4 	orh	r10,0xf4

	sysclk_enable_peripheral_clock(usart);

	if (usart_init_rs232(usart, opt, sysclk_get_peripheral_bus_hz(usart))) {
8000381e:	48 4b       	lddpc	r11,8000382c <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x534>
80003820:	0e 9c       	mov	r12,r7
80003822:	f0 1f 00 06 	mcall	80003838 <_ZN5Empty15EmptyUARTDriver5beginEmtt+0x540>
}
80003826:	e3 cd 80 80 	ldm	sp++,r7,pc
8000382a:	00 00       	add	r0,r0
8000382c:	00 00       	add	r0,r0
8000382e:	09 14       	ld.sh	r4,r4++
80003830:	80 00       	ld.sh	r0,r0[0x0]
80003832:	32 e8       	mov	r8,46
80003834:	80 00       	ld.sh	r0,r0[0x0]
80003836:	17 1c       	ld.sh	r12,r11++
80003838:	80 00       	ld.sh	r0,r0[0x0]
8000383a:	16 0c       	add	r12,r11

8000383c <_GLOBAL__I__ZN8AP_Param9_num_varsE>:
void AP_Param::convert_old_parameters(const struct ConversionInfo *conversion_table, uint8_t table_size)
{
    for (uint8_t i=0; i<table_size; i++) {
        convert_old_parameter(&conversion_table[i]);
    }
}
8000383c:	d4 01       	pushm	lr

// storage and naming information about all types that can be saved
const AP_Param::Info *AP_Param::_var_info;

// storage object
StorageAccess AP_Param::_storage(StorageManager::StorageParam);
8000383e:	30 0b       	mov	r11,0
80003840:	48 3c       	lddpc	r12,8000384c <_GLOBAL__I__ZN8AP_Param9_num_varsE+0x10>
80003842:	2f 8c       	sub	r12,-8
80003844:	f0 1f 00 03 	mcall	80003850 <_GLOBAL__I__ZN8AP_Param9_num_varsE+0x14>
void AP_Param::convert_old_parameters(const struct ConversionInfo *conversion_table, uint8_t table_size)
{
    for (uint8_t i=0; i<table_size; i++) {
        convert_old_parameter(&conversion_table[i]);
    }
}
80003848:	d8 02       	popm	pc
8000384a:	00 00       	add	r0,r0
8000384c:	00 00       	add	r0,r0
8000384e:	09 20       	ld.uh	r0,r4++
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	3c 58       	mov	r8,-59

80003854 <_ZN6Motors13motor3_updateEifff>:
}

//South Motor,TC0-A2
void Motors::motor3_update(int percent, float pid_pitch, float pid_yaw, float pid_alt)
//void Motors::motor3_update(float percent_manual, float RPSin_S)
{
80003854:	eb cd 40 fc 	pushm	r2-r7,lr
80003858:	14 97       	mov	r7,r10
8000385a:	12 93       	mov	r3,r9
8000385c:	10 92       	mov	r2,r8
// 
// 	
// 	hal.uartB->print("South: ");
// 	hal.uartB->println(percent_turn);

	r = (30000 - 2*k);
8000385e:	16 9c       	mov	r12,r11
80003860:	f0 1f 00 32 	mcall	80003928 <_ZN6Motors13motor3_updateEifff+0xd4>
80003864:	30 08       	mov	r8,0
80003866:	fc 19 40 23 	movh	r9,0x4023
8000386a:	f0 1f 00 31 	mcall	8000392c <_ZN6Motors13motor3_updateEifff+0xd8>
8000386e:	30 08       	mov	r8,0
80003870:	e0 69 68 00 	mov	r9,26624
80003874:	ea 19 40 90 	orh	r9,0x4090
80003878:	f0 1f 00 2e 	mcall	80003930 <_ZN6Motors13motor3_updateEifff+0xdc>
8000387c:	14 94       	mov	r4,r10
8000387e:	16 95       	mov	r5,r11
80003880:	0e 9c       	mov	r12,r7
80003882:	f0 1f 00 2d 	mcall	80003934 <_ZN6Motors13motor3_updateEifff+0xe0>
80003886:	14 98       	mov	r8,r10
80003888:	16 99       	mov	r9,r11
8000388a:	08 9a       	mov	r10,r4
8000388c:	0a 9b       	mov	r11,r5
8000388e:	f0 1f 00 29 	mcall	80003930 <_ZN6Motors13motor3_updateEifff+0xdc>
80003892:	14 96       	mov	r6,r10
80003894:	16 97       	mov	r7,r11
80003896:	06 9c       	mov	r12,r3
80003898:	f0 1f 00 27 	mcall	80003934 <_ZN6Motors13motor3_updateEifff+0xe0>
8000389c:	14 98       	mov	r8,r10
8000389e:	16 99       	mov	r9,r11
800038a0:	0c 9a       	mov	r10,r6
800038a2:	0e 9b       	mov	r11,r7
800038a4:	f0 1f 00 25 	mcall	80003938 <_ZN6Motors13motor3_updateEifff+0xe4>
800038a8:	14 96       	mov	r6,r10
800038aa:	16 97       	mov	r7,r11
800038ac:	04 9c       	mov	r12,r2
800038ae:	f0 1f 00 22 	mcall	80003934 <_ZN6Motors13motor3_updateEifff+0xe0>
800038b2:	14 98       	mov	r8,r10
800038b4:	16 99       	mov	r9,r11
800038b6:	0c 9a       	mov	r10,r6
800038b8:	0e 9b       	mov	r11,r7
800038ba:	f0 1f 00 1e 	mcall	80003930 <_ZN6Motors13motor3_updateEifff+0xdc>
800038be:	f0 1f 00 20 	mcall	8000393c <_ZN6Motors13motor3_updateEifff+0xe8>
800038c2:	e0 68 60 00 	mov	r8,24576
800038c6:	ea 18 46 ea 	orh	r8,0x46ea
800038ca:	fc 19 c0 00 	movh	r9,0xc000
800038ce:	e1 a8 08 c9 	cop	cp0,cr8,cr12,cr9,0x10
800038d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
// 	if(r < 26100){
// 		r = 26100;
// 	}
	if(r <= 27900 && r >= 26000)
800038d6:	f0 c9 65 90 	sub	r9,r8,26000
800038da:	e0 49 07 6c 	cp.w	r9,1900
800038de:	e0 8b 00 0b 	brhi	800038f4 <_ZN6Motors13motor3_updateEifff+0xa0>
	{
		tc_write_ra(&AVR32_TC0,2,r);
800038e2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800038e6:	30 2b       	mov	r11,2
800038e8:	fc 7c 20 00 	mov	r12,-188416
800038ec:	f0 1f 00 15 	mcall	80003940 <_ZN6Motors13motor3_updateEifff+0xec>
800038f0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	}
	else if(r < 26000)
800038f4:	e0 48 65 8f 	cp.w	r8,25999
800038f8:	e0 89 00 0b 	brgt	8000390e <_ZN6Motors13motor3_updateEifff+0xba>
	tc_write_ra(&AVR32_TC1,2,26000);
800038fc:	e0 6a 65 90 	mov	r10,26000
80003900:	30 2b       	mov	r11,2
80003902:	fe 7c 58 00 	mov	r12,-43008
80003906:	f0 1f 00 0f 	mcall	80003940 <_ZN6Motors13motor3_updateEifff+0xec>
8000390a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	else if(r >27900)
8000390e:	e0 48 6c fc 	cp.w	r8,27900
80003912:	e0 8a 00 09 	brle	80003924 <_ZN6Motors13motor3_updateEifff+0xd0>
	tc_write_ra(&AVR32_TC1,2,27900);
80003916:	e0 6a 6c fc 	mov	r10,27900
8000391a:	30 2b       	mov	r11,2
8000391c:	fe 7c 58 00 	mov	r12,-43008
80003920:	f0 1f 00 08 	mcall	80003940 <_ZN6Motors13motor3_updateEifff+0xec>
80003924:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003928:	80 00       	ld.sh	r0,r0[0x0]
8000392a:	a3 26       	st.d	r1++,r6
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	9e 70       	ld.sh	r0,pc[0xe]
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	a1 e4       	*unknown*
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	a9 74       	lsl	r4,0x9
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	a0 48       	st.h	r0[0x8],r8
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	a9 d4       	cbr	r4,0x9
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	0f a2       	ld.ub	r2,r7[0x2]

80003944 <_ZN6Motors11kill_motorsEv>:
// 	motor2_update(percent_manual, RPSin_E);
// 	motor3_update(percent_manual, RPSin_S);
// 	motor4_update(percent_manual, RPSin_W);
}

void Motors::kill_motors() {
80003944:	d4 01       	pushm	lr
	
	tc_write_ra(&AVR32_TC0,0,30000);
80003946:	e0 6a 75 30 	mov	r10,30000
8000394a:	30 0b       	mov	r11,0
8000394c:	fc 7c 20 00 	mov	r12,-188416
80003950:	f0 1f 00 13 	mcall	8000399c <_ZN6Motors11kill_motorsEv+0x58>
	tc_write_rb(&AVR32_TC0,0,30000);
80003954:	e0 6a 75 30 	mov	r10,30000
80003958:	30 0b       	mov	r11,0
8000395a:	fc 7c 20 00 	mov	r12,-188416
8000395e:	f0 1f 00 11 	mcall	800039a0 <_ZN6Motors11kill_motorsEv+0x5c>
	tc_write_ra(&AVR32_TC0,1,30000);
80003962:	e0 6a 75 30 	mov	r10,30000
80003966:	30 1b       	mov	r11,1
80003968:	fc 7c 20 00 	mov	r12,-188416
8000396c:	f0 1f 00 0c 	mcall	8000399c <_ZN6Motors11kill_motorsEv+0x58>
	tc_write_rb(&AVR32_TC0,1,30000);
80003970:	e0 6a 75 30 	mov	r10,30000
80003974:	30 1b       	mov	r11,1
80003976:	fc 7c 20 00 	mov	r12,-188416
8000397a:	f0 1f 00 0a 	mcall	800039a0 <_ZN6Motors11kill_motorsEv+0x5c>
	tc_write_ra(&AVR32_TC0,2,30000);
8000397e:	e0 6a 75 30 	mov	r10,30000
80003982:	30 2b       	mov	r11,2
80003984:	fc 7c 20 00 	mov	r12,-188416
80003988:	f0 1f 00 05 	mcall	8000399c <_ZN6Motors11kill_motorsEv+0x58>
	tc_write_rb(&AVR32_TC0,2,30000);
8000398c:	e0 6a 75 30 	mov	r10,30000
80003990:	30 2b       	mov	r11,2
80003992:	fc 7c 20 00 	mov	r12,-188416
80003996:	f0 1f 00 03 	mcall	800039a0 <_ZN6Motors11kill_motorsEv+0x5c>

	
8000399a:	d8 02       	popm	pc
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	0f a2       	ld.ub	r2,r7[0x2]
800039a0:	80 00       	ld.sh	r0,r0[0x0]
800039a2:	0f d6       	ld.ub	r6,r7[0x5]

800039a4 <_ZN6Motors13motor1_updateEifff>:


//North Motor, TC0-B0
void Motors::motor1_update(int percent, float pid_pitch, float pid_yaw, float pid_alt)
//void Motors::motor1_update(float percent_manual, float RPSin_N) 
{
800039a4:	eb cd 40 fc 	pushm	r2-r7,lr
800039a8:	14 97       	mov	r7,r10
800039aa:	12 93       	mov	r3,r9
800039ac:	10 92       	mov	r2,r8
// 	k = (2000-1050)*0.01*(percent_turn)+1050;
// 	
// 	hal.uartB->print("North: ");
// 	hal.uartB->println(percent_turn);	
	
	r = (30000 - 2*k);
800039ae:	16 9c       	mov	r12,r11
800039b0:	f0 1f 00 32 	mcall	80003a78 <_ZN6Motors13motor1_updateEifff+0xd4>
800039b4:	30 08       	mov	r8,0
800039b6:	fc 19 40 23 	movh	r9,0x4023
800039ba:	f0 1f 00 31 	mcall	80003a7c <_ZN6Motors13motor1_updateEifff+0xd8>
800039be:	30 08       	mov	r8,0
800039c0:	e0 69 68 00 	mov	r9,26624
800039c4:	ea 19 40 90 	orh	r9,0x4090
800039c8:	f0 1f 00 2e 	mcall	80003a80 <_ZN6Motors13motor1_updateEifff+0xdc>
800039cc:	14 94       	mov	r4,r10
800039ce:	16 95       	mov	r5,r11
800039d0:	0e 9c       	mov	r12,r7
800039d2:	f0 1f 00 2d 	mcall	80003a84 <_ZN6Motors13motor1_updateEifff+0xe0>
800039d6:	14 98       	mov	r8,r10
800039d8:	16 99       	mov	r9,r11
800039da:	08 9a       	mov	r10,r4
800039dc:	0a 9b       	mov	r11,r5
800039de:	f0 1f 00 2b 	mcall	80003a88 <_ZN6Motors13motor1_updateEifff+0xe4>
800039e2:	14 96       	mov	r6,r10
800039e4:	16 97       	mov	r7,r11
800039e6:	06 9c       	mov	r12,r3
800039e8:	f0 1f 00 27 	mcall	80003a84 <_ZN6Motors13motor1_updateEifff+0xe0>
800039ec:	14 98       	mov	r8,r10
800039ee:	16 99       	mov	r9,r11
800039f0:	0c 9a       	mov	r10,r6
800039f2:	0e 9b       	mov	r11,r7
800039f4:	f0 1f 00 25 	mcall	80003a88 <_ZN6Motors13motor1_updateEifff+0xe4>
800039f8:	14 96       	mov	r6,r10
800039fa:	16 97       	mov	r7,r11
800039fc:	04 9c       	mov	r12,r2
800039fe:	f0 1f 00 22 	mcall	80003a84 <_ZN6Motors13motor1_updateEifff+0xe0>
80003a02:	14 98       	mov	r8,r10
80003a04:	16 99       	mov	r9,r11
80003a06:	0c 9a       	mov	r10,r6
80003a08:	0e 9b       	mov	r11,r7
80003a0a:	f0 1f 00 1e 	mcall	80003a80 <_ZN6Motors13motor1_updateEifff+0xdc>
80003a0e:	f0 1f 00 20 	mcall	80003a8c <_ZN6Motors13motor1_updateEifff+0xe8>
80003a12:	e0 68 60 00 	mov	r8,24576
80003a16:	ea 18 46 ea 	orh	r8,0x46ea
80003a1a:	fc 19 c0 00 	movh	r9,0xc000
80003a1e:	e1 a8 08 c9 	cop	cp0,cr8,cr12,cr9,0x10
80003a22:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
	
// 	if(r < 26100){
// 		r = 26100;
// 	}
	
	if(r <= 27900 && r >= 26000){
80003a26:	f0 c9 65 90 	sub	r9,r8,26000
80003a2a:	e0 49 07 6c 	cp.w	r9,1900
80003a2e:	e0 8b 00 0b 	brhi	80003a44 <_ZN6Motors13motor1_updateEifff+0xa0>
		tc_write_rb(&AVR32_TC0,0,r);
80003a32:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003a36:	30 0b       	mov	r11,0
80003a38:	fc 7c 20 00 	mov	r12,-188416
80003a3c:	f0 1f 00 15 	mcall	80003a90 <_ZN6Motors13motor1_updateEifff+0xec>
80003a40:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	}
	else if(r < 26000)
80003a44:	e0 48 65 8f 	cp.w	r8,25999
80003a48:	e0 89 00 0b 	brgt	80003a5e <_ZN6Motors13motor1_updateEifff+0xba>
	tc_write_rb(&AVR32_TC0,0,26000);
80003a4c:	e0 6a 65 90 	mov	r10,26000
80003a50:	30 0b       	mov	r11,0
80003a52:	fc 7c 20 00 	mov	r12,-188416
80003a56:	f0 1f 00 0f 	mcall	80003a90 <_ZN6Motors13motor1_updateEifff+0xec>
80003a5a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	else if(r >27900)
80003a5e:	e0 48 6c fc 	cp.w	r8,27900
80003a62:	e0 8a 00 09 	brle	80003a74 <_ZN6Motors13motor1_updateEifff+0xd0>
	tc_write_rb(&AVR32_TC0,0,27900);
80003a66:	e0 6a 6c fc 	mov	r10,27900
80003a6a:	30 0b       	mov	r11,0
80003a6c:	fc 7c 20 00 	mov	r12,-188416
80003a70:	f0 1f 00 08 	mcall	80003a90 <_ZN6Motors13motor1_updateEifff+0xec>
80003a74:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003a78:	80 00       	ld.sh	r0,r0[0x0]
80003a7a:	a3 26       	st.d	r1++,r6
80003a7c:	80 00       	ld.sh	r0,r0[0x0]
80003a7e:	9e 70       	ld.sh	r0,pc[0xe]
80003a80:	80 00       	ld.sh	r0,r0[0x0]
80003a82:	a1 e4       	*unknown*
80003a84:	80 00       	ld.sh	r0,r0[0x0]
80003a86:	a9 74       	lsl	r4,0x9
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	a0 48       	st.h	r0[0x8],r8
80003a8c:	80 00       	ld.sh	r0,r0[0x0]
80003a8e:	a9 d4       	cbr	r4,0x9
80003a90:	80 00       	ld.sh	r0,r0[0x0]
80003a92:	0f d6       	ld.ub	r6,r7[0x5]

80003a94 <_ZN6Motors11motors_initEv>:
#include "libraries/AP_HAL_Empty/AP_HAL_Empty.h"

extern const AP_HAL::HAL& hal;


void Motors::motors_init() {
80003a94:	d4 21       	pushm	r4-r7,lr
	static tc_waveform_opt_t WAVEFORM_OPT1;
	static tc_waveform_opt_t WAVEFORM_OPT2;	
	static tc_waveform_opt_t WAVEFORM_OPT3;

	static tc_interrupt_t TC_INTERRUPT;
	gpio_enable_module_pin(57,0); //TC0_A2
80003a96:	30 0b       	mov	r11,0
80003a98:	33 9c       	mov	r12,57
80003a9a:	f0 1f 00 59 	mcall	80003bfc <_ZN6Motors11motors_initEv+0x168>
	gpio_enable_module_pin(AVR32_TC0_B0_2_PIN,AVR32_TC0_B0_2_FUNCTION);
80003a9e:	30 3b       	mov	r11,3
80003aa0:	37 cc       	mov	r12,124
80003aa2:	f0 1f 00 57 	mcall	80003bfc <_ZN6Motors11motors_initEv+0x168>
	
	gpio_enable_module_pin(AVR32_TC0_A1_0_2_PIN,AVR32_TC0_A1_2_FUNCTION);
80003aa6:	30 3b       	mov	r11,3
80003aa8:	37 ec       	mov	r12,126
80003aaa:	f0 1f 00 55 	mcall	80003bfc <_ZN6Motors11motors_initEv+0x168>
	gpio_enable_module_pin(AVR32_TC0_B1_0_0_PIN,AVR32_TC0_B1_1_FUNCTION);
80003aae:	30 0b       	mov	r11,0
80003ab0:	33 7c       	mov	r12,55
80003ab2:	f0 1f 00 53 	mcall	80003bfc <_ZN6Motors11motors_initEv+0x168>
	
		
	WAVEFORM_OPT0.channel  = 0;									// Channel selection.
80003ab6:	4d 36       	lddpc	r6,80003c00 <_ZN6Motors11motors_initEv+0x16c>
80003ab8:	30 04       	mov	r4,0
80003aba:	8d 04       	st.w	r6[0x0],r4


	WAVEFORM_OPT0.bswtrg   = TC_EVT_EFFECT_NOOP;                // Software trigger effect on TIOB.
80003abc:	6c 18       	ld.w	r8,r6[0x4]
	WAVEFORM_OPT0.beevt    = TC_EVT_EFFECT_NOOP;                // External event effect on TIOB.
	WAVEFORM_OPT0.bcpc     = TC_EVT_EFFECT_CLEAR;               // RC compare effect on TIOB.
80003abe:	f1 d8 c0 1c 	bfextu	r8,r8,0x0,0x1c
80003ac2:	30 27       	mov	r7,2
80003ac4:	f1 d7 d3 42 	bfins	r8,r7,0x1a,0x2
	WAVEFORM_OPT0.bcpb     = TC_EVT_EFFECT_SET;                 // RB compare effect on TIOB.
80003ac8:	30 15       	mov	r5,1
80003aca:	f1 d5 d3 02 	bfins	r8,r5,0x18,0x2
	WAVEFORM_OPT0.aswtrg   = TC_EVT_EFFECT_NOOP;               // Software trigger effect on TIOA.
	WAVEFORM_OPT0.aeevt    = TC_EVT_EFFECT_NOOP;               // External event effect on TIOA.
	WAVEFORM_OPT0.acpc     = TC_EVT_EFFECT_NOOP;              // RC compare effect on TIOA: toggle.
	WAVEFORM_OPT0.acpa     = TC_EVT_EFFECT_NOOP;                // RA compare effect on TIOA: toggle (other possibilities are none; set and clear).

	WAVEFORM_OPT0.wavsel   = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER;// Waveform selection: Up mode with automatic trigger(reset) on RC compare.
80003ace:	e4 18 ff 00 	andh	r8,0xff00
80003ad2:	f1 d7 d1 a2 	bfins	r8,r7,0xd,0x2
	WAVEFORM_OPT0.enetrg   = false;                             // External event trigger enable.
	WAVEFORM_OPT0.eevt     = 1;                                 // External event selection.
80003ad6:	ad c8       	cbr	r8,0xc
80003ad8:	f1 d5 d1 42 	bfins	r8,r5,0xa,0x2
	WAVEFORM_OPT0.cpcdis   = false;                             // Counter disable when RC compare.
	WAVEFORM_OPT0.cpcstop  = false;                             // Counter clock stopped with RC compare.

	WAVEFORM_OPT0.burst    = false;                             // Burst signal selection.
	WAVEFORM_OPT0.clki     = false;                             // Clock inversion.
	WAVEFORM_OPT0.tcclks   = TC_CLOCK_SOURCE_TC3;               // Internal source clock 3, connected to fPBA / 8.
80003adc:	e0 18 fc 07 	andl	r8,0xfc07
80003ae0:	f1 d7 d0 03 	bfins	r8,r7,0x0,0x3
80003ae4:	8d 18       	st.w	r6[0x4],r8
	
	
	WAVEFORM_OPT1.channel  = 1;									// Channel selection.
80003ae6:	8d 25       	st.w	r6[0x8],r5


	WAVEFORM_OPT1.bswtrg   = TC_EVT_EFFECT_NOOP;                // Software trigger effect on TIOB.
80003ae8:	6c 38       	ld.w	r8,r6[0xc]
	WAVEFORM_OPT1.beevt    = TC_EVT_EFFECT_NOOP;                // External event effect on TIOB.
	WAVEFORM_OPT1.bcpc     = TC_EVT_EFFECT_CLEAR;               // RC compare effect on TIOB.
80003aea:	f1 d8 c0 1c 	bfextu	r8,r8,0x0,0x1c
80003aee:	f1 d7 d3 42 	bfins	r8,r7,0x1a,0x2
	WAVEFORM_OPT1.bcpb     = TC_EVT_EFFECT_SET;                 // RB compare effect on TIOB.
80003af2:	f1 d5 d3 02 	bfins	r8,r5,0x18,0x2

	WAVEFORM_OPT1.aswtrg   = TC_EVT_EFFECT_NOOP;               // Software trigger effect on TIOA.
	WAVEFORM_OPT1.aeevt    = TC_EVT_EFFECT_NOOP;               // External event effect on TIOA.
	WAVEFORM_OPT1.acpc     = TC_EVT_EFFECT_CLEAR;              // RC compare effect on TIOA: toggle.
80003af6:	e4 18 ff 0f 	andh	r8,0xff0f
80003afa:	f1 d7 d2 42 	bfins	r8,r7,0x12,0x2
	WAVEFORM_OPT1.acpa     = TC_EVT_EFFECT_SET;                // RA compare effect on TIOA: toggle (other possibilities are none; set and clear).
80003afe:	f1 d5 d2 02 	bfins	r8,r5,0x10,0x2

	WAVEFORM_OPT1.wavsel   = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER;// Waveform selection: Up mode with automatic trigger(reset) on RC compare.
80003b02:	f1 d7 d1 a2 	bfins	r8,r7,0xd,0x2
	WAVEFORM_OPT1.enetrg   = false;                             // External event trigger enable.
	WAVEFORM_OPT1.eevt     = 1;                                 // External event selection.
80003b06:	ad c8       	cbr	r8,0xc
80003b08:	f1 d5 d1 42 	bfins	r8,r5,0xa,0x2
	WAVEFORM_OPT1.cpcdis   = false;                             // Counter disable when RC compare.
	WAVEFORM_OPT1.cpcstop  = false;                             // Counter clock stopped with RC compare.

	WAVEFORM_OPT1.burst    = false;                             // Burst signal selection.
	WAVEFORM_OPT1.clki     = false;                             // Clock inversion.
	WAVEFORM_OPT1.tcclks   = TC_CLOCK_SOURCE_TC3;               // Internal source clock 3, connected to fPBA / 8.
80003b0c:	e0 18 fc 07 	andl	r8,0xfc07
80003b10:	f1 d7 d0 03 	bfins	r8,r7,0x0,0x3
80003b14:	8d 38       	st.w	r6[0xc],r8
	
	
	WAVEFORM_OPT2.channel  = 2;									// Channel selection.
80003b16:	8d 47       	st.w	r6[0x10],r7

	WAVEFORM_OPT2.bswtrg   = TC_EVT_EFFECT_NOOP;                // Software trigger effect on TIOB.
80003b18:	6c 58       	ld.w	r8,r6[0x14]
	WAVEFORM_OPT2.bcpc     = TC_EVT_EFFECT_NOOP;                // RC compare effect on TIOB.
	WAVEFORM_OPT2.bcpb     = TC_EVT_EFFECT_NOOP;                // RB compare effect on TIOB.

	WAVEFORM_OPT2.aswtrg   = TC_EVT_EFFECT_NOOP;               // Software trigger effect on TIOA.
	WAVEFORM_OPT2.aeevt    = TC_EVT_EFFECT_NOOP;               // External event effect on TIOA.
	WAVEFORM_OPT2.acpc     = TC_EVT_EFFECT_CLEAR;              // RC compare effect on TIOA: toggle.
80003b1a:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
80003b1e:	f1 d7 d2 42 	bfins	r8,r7,0x12,0x2
	WAVEFORM_OPT2.acpa     = TC_EVT_EFFECT_SET;                // RA compare effect on TIOA: toggle (other possibilities are none; set and clear).
80003b22:	f1 d5 d2 02 	bfins	r8,r5,0x10,0x2

	WAVEFORM_OPT2.wavsel   = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER;// Waveform selection: Up mode with automatic trigger(reset) on RC compare.
80003b26:	f1 d7 d1 a2 	bfins	r8,r7,0xd,0x2
	WAVEFORM_OPT2.enetrg   = false;                             // External event trigger enable.
	WAVEFORM_OPT2.eevt     = 1;                                 // External event selection.
80003b2a:	ad c8       	cbr	r8,0xc
80003b2c:	f1 d5 d1 42 	bfins	r8,r5,0xa,0x2
	WAVEFORM_OPT2.cpcdis   = false;                             // Counter disable when RC compare.
	WAVEFORM_OPT2.cpcstop  = false;                             // Counter clock stopped with RC compare.

	WAVEFORM_OPT2.burst    = false;                             // Burst signal selection.
	WAVEFORM_OPT2.clki     = false;                             // Clock inversion.
	WAVEFORM_OPT2.tcclks   = TC_CLOCK_SOURCE_TC3;               // Internal source clock 3, connected to fPBA / 8.	
80003b30:	e0 18 fc 07 	andl	r8,0xfc07
80003b34:	f1 d7 d0 03 	bfins	r8,r7,0x0,0x3
80003b38:	8d 58       	st.w	r6[0x14],r8
	
	
	
	
	tc_init_waveform(&AVR32_TC0, &WAVEFORM_OPT0);
80003b3a:	0c 9b       	mov	r11,r6
80003b3c:	fc 7c 20 00 	mov	r12,-188416
80003b40:	f0 1f 00 31 	mcall	80003c04 <_ZN6Motors11motors_initEv+0x170>
	tc_write_rc(&AVR32_TC0,0,30000);
80003b44:	e0 6a 75 30 	mov	r10,30000
80003b48:	08 9b       	mov	r11,r4
80003b4a:	fc 7c 20 00 	mov	r12,-188416
80003b4e:	f0 1f 00 2f 	mcall	80003c08 <_ZN6Motors11motors_initEv+0x174>
	tc_write_ra(&AVR32_TC0,0,27900);
80003b52:	e0 6a 6c fc 	mov	r10,27900
80003b56:	08 9b       	mov	r11,r4
80003b58:	fc 7c 20 00 	mov	r12,-188416
80003b5c:	f0 1f 00 2c 	mcall	80003c0c <_ZN6Motors11motors_initEv+0x178>
	tc_write_rb(&AVR32_TC0,0,27900);
80003b60:	e0 6a 6c fc 	mov	r10,27900
80003b64:	08 9b       	mov	r11,r4
80003b66:	fc 7c 20 00 	mov	r12,-188416
80003b6a:	f0 1f 00 2a 	mcall	80003c10 <_ZN6Motors11motors_initEv+0x17c>
	tc_start(&AVR32_TC0,0);
80003b6e:	08 9b       	mov	r11,r4
80003b70:	fc 7c 20 00 	mov	r12,-188416
80003b74:	f0 1f 00 28 	mcall	80003c14 <_ZN6Motors11motors_initEv+0x180>

	
	tc_init_waveform(&AVR32_TC0, &WAVEFORM_OPT1);
80003b78:	ec cb ff f8 	sub	r11,r6,-8
80003b7c:	fc 7c 20 00 	mov	r12,-188416
80003b80:	f0 1f 00 21 	mcall	80003c04 <_ZN6Motors11motors_initEv+0x170>
	tc_write_rc(&AVR32_TC0,1,30000);
80003b84:	e0 6a 75 30 	mov	r10,30000
80003b88:	0a 9b       	mov	r11,r5
80003b8a:	fc 7c 20 00 	mov	r12,-188416
80003b8e:	f0 1f 00 1f 	mcall	80003c08 <_ZN6Motors11motors_initEv+0x174>
	tc_write_ra(&AVR32_TC0,1,27900);
80003b92:	e0 6a 6c fc 	mov	r10,27900
80003b96:	0a 9b       	mov	r11,r5
80003b98:	fc 7c 20 00 	mov	r12,-188416
80003b9c:	f0 1f 00 1c 	mcall	80003c0c <_ZN6Motors11motors_initEv+0x178>
	tc_write_rb(&AVR32_TC0,1,27900);
80003ba0:	e0 6a 6c fc 	mov	r10,27900
80003ba4:	0a 9b       	mov	r11,r5
80003ba6:	fc 7c 20 00 	mov	r12,-188416
80003baa:	f0 1f 00 1a 	mcall	80003c10 <_ZN6Motors11motors_initEv+0x17c>
	tc_start(&AVR32_TC0,1);
80003bae:	0a 9b       	mov	r11,r5
80003bb0:	fc 7c 20 00 	mov	r12,-188416
80003bb4:	f0 1f 00 18 	mcall	80003c14 <_ZN6Motors11motors_initEv+0x180>
	
	tc_init_waveform(&AVR32_TC0, &WAVEFORM_OPT2);
80003bb8:	ec cb ff f0 	sub	r11,r6,-16
80003bbc:	fc 7c 20 00 	mov	r12,-188416
80003bc0:	f0 1f 00 11 	mcall	80003c04 <_ZN6Motors11motors_initEv+0x170>
	tc_write_rc(&AVR32_TC0,2,30000);
80003bc4:	e0 6a 75 30 	mov	r10,30000
80003bc8:	0e 9b       	mov	r11,r7
80003bca:	fc 7c 20 00 	mov	r12,-188416
80003bce:	f0 1f 00 0f 	mcall	80003c08 <_ZN6Motors11motors_initEv+0x174>
	tc_write_ra(&AVR32_TC0,2,27900);
80003bd2:	e0 6a 6c fc 	mov	r10,27900
80003bd6:	0e 9b       	mov	r11,r7
80003bd8:	fc 7c 20 00 	mov	r12,-188416
80003bdc:	f0 1f 00 0c 	mcall	80003c0c <_ZN6Motors11motors_initEv+0x178>
	tc_write_rb(&AVR32_TC0,2,27900);
80003be0:	e0 6a 6c fc 	mov	r10,27900
80003be4:	0e 9b       	mov	r11,r7
80003be6:	fc 7c 20 00 	mov	r12,-188416
80003bea:	f0 1f 00 0a 	mcall	80003c10 <_ZN6Motors11motors_initEv+0x17c>
	tc_start(&AVR32_TC0,2);	
80003bee:	0e 9b       	mov	r11,r7
80003bf0:	fc 7c 20 00 	mov	r12,-188416
80003bf4:	f0 1f 00 08 	mcall	80003c14 <_ZN6Motors11motors_initEv+0x180>
	
}
80003bf8:	d8 22       	popm	r4-r7,pc
80003bfa:	00 00       	add	r0,r0
80003bfc:	80 00       	ld.sh	r0,r0[0x0]
80003bfe:	17 f8       	ld.ub	r8,r11[0x7]
80003c00:	00 00       	add	r0,r0
80003c02:	09 30       	ld.ub	r0,r4++
80003c04:	80 00       	ld.sh	r0,r0[0x0]
80003c06:	0e f4       	st.b	--r7,r4
80003c08:	80 00       	ld.sh	r0,r0[0x0]
80003c0a:	10 0a       	add	r10,r8
80003c0c:	80 00       	ld.sh	r0,r0[0x0]
80003c0e:	0f a2       	ld.ub	r2,r7[0x2]
80003c10:	80 00       	ld.sh	r0,r0[0x0]
80003c12:	0f d6       	ld.ub	r6,r7[0x5]
80003c14:	80 00       	ld.sh	r0,r0[0x0]
80003c16:	0f 90       	ld.ub	r0,r7[0x1]

80003c18 <_ZN14StorageManager14layout_defaultE>:
80003c18:	00 00 00 00 00 00 05 00 00 00 00 03 05 00 09 ca     ................
80003c28:	00 00 00 02 0e ca 00 96 00 00 00 01 0f 60 00 a0     .............`..

80003c38 <_ZN14StorageManager13layout_copterE>:
80003c38:	00 00 00 00 00 00 06 00 00 00 00 03 06 00 09 76     ...............v
80003c48:	00 00 00 02 0f 76 00 5a 00 00 00 01 0f d0 00 30     .....v.Z.......0

80003c58 <_ZN13StorageAccessC1EN14StorageManager11StorageTypeE>:
}

/*
  constructor for StorageAccess
 */
StorageAccess::StorageAccess(StorageManager::StorageType _type) : 
80003c58:	d4 01       	pushm	lr
    type(_type) 
80003c5a:	99 0b       	st.w	r12[0x0],r11
{
    // calculate available bytes
    total_size = 0;
80003c5c:	30 08       	mov	r8,0
80003c5e:	b8 28       	st.h	r12[0x4],r8
    for (uint8_t i=0; i<STORAGE_NUM_AREAS; i++) {
        const StorageManager::StorageArea &area = StorageManager::layout[i];
        if (pgm_read_byte(&area.type) == type) {
80003c60:	30 08       	mov	r8,0
    type(_type) 
{
    // calculate available bytes
    total_size = 0;
    for (uint8_t i=0; i<STORAGE_NUM_AREAS; i++) {
        const StorageManager::StorageArea &area = StorageManager::layout[i];
80003c62:	48 ae       	lddpc	lr,80003c88 <_ZN13StorageAccessC1EN14StorageManager11StorageTypeE+0x30>
80003c64:	7c 09       	ld.w	r9,lr[0x0]
80003c66:	10 09       	add	r9,r8
        if (pgm_read_byte(&area.type) == type) {
80003c68:	13 8a       	ld.ub	r10,r9[0x0]
            total_size += pgm_read_word(&area.length);
80003c6a:	16 3a       	cp.w	r10,r11
80003c6c:	f9 fa 02 02 	ld.sheq	r10,r12[0x4]
80003c70:	f3 f9 02 03 	ld.sheq	r9,r9[0x6]
80003c74:	f5 d9 e0 09 	addeq	r9,r10,r9
80003c78:	f9 f9 0c 02 	st.heq	r12[0x4],r9
80003c7c:	2f 88       	sub	r8,-8
StorageAccess::StorageAccess(StorageManager::StorageType _type) : 
    type(_type) 
{
    // calculate available bytes
    total_size = 0;
    for (uint8_t i=0; i<STORAGE_NUM_AREAS; i++) {
80003c7e:	e0 48 00 20 	cp.w	r8,32
80003c82:	cf 11       	brne	80003c64 <_ZN13StorageAccessC1EN14StorageManager11StorageTypeE+0xc>
        const StorageManager::StorageArea &area = StorageManager::layout[i];
        if (pgm_read_byte(&area.type) == type) {
            total_size += pgm_read_word(&area.length);
        }
    }
}
80003c84:	d8 02       	popm	pc
80003c86:	00 00       	add	r0,r0
80003c88:	00 00       	add	r0,r0
80003c8a:	00 bc       	st.h	r0++,r12

80003c8c <_ZZN7MPU915011initMPU9150EmE5C.242>:
80003c8c:	00 00 00 43 00 00 00 00 00 00 00 42 00 00 00 00     ...C.......B....

80003c9c <hal>:
80003c9c:	00 00 08 fc                                         ....

80003ca0 <_Z16Pitch_Controllerfffffff>:
float pre_pitch = 0;
float pre_error2 = 0;
float integral_pitch = 0;
float derivative_pitch = 0;

float Pitch_Controller(float measured_pitch, float desired_pitch, float Kp_pitch_1,float Kp_pitch_2, float Ki_pitch, float Kd_pitch,float dtt) {
80003ca0:	d4 31       	pushm	r0-r7,lr
80003ca2:	fa c4 ff dc 	sub	r4,sp,-36
80003ca6:	18 93       	mov	r3,r12
80003ca8:	12 90       	mov	r0,r9
80003caa:	10 91       	mov	r1,r8
80003cac:	68 02       	ld.w	r2,r4[0x0]
80003cae:	68 15       	ld.w	r5,r4[0x4]
	float error,error2;
	error = desired_pitch-measured_pitch;
		
	float block_1 = Kp_pitch_1*error;
	
	error2 = block_1-pitch_rate;
80003cb0:	e5 a1 06 bc 	cop	cp0,cr6,cr11,cr12,0x42
80003cb4:	e5 a2 06 a6 	cop	cp0,cr6,cr10,cr6,0x44
80003cb8:	49 07       	lddpc	r7,80003cf8 <_Z16Pitch_Controllerfffffff+0x58>
80003cba:	6e 0c       	ld.w	r12,r7[0x0]
80003cbc:	0a 9b       	mov	r11,r5
80003cbe:	e5 a1 0c 3c 	cop	cp0,cr12,cr3,cr12,0x42
80003cc2:	f0 1f 00 0f 	mcall	80003cfc <_Z16Pitch_Controllerfffffff+0x5c>
80003cc6:	e5 a1 06 6c 	cop	cp0,cr6,cr6,cr12,0x42
	
	derivative_pitch = Kd_pitch*(error2-pre_error2)/dtt;
80003cca:	6e 1c       	ld.w	r12,r7[0x4]
80003ccc:	e5 a1 0c 6c 	cop	cp0,cr12,cr6,cr12,0x42
80003cd0:	0a 9b       	mov	r11,r5
80003cd2:	e5 a2 0c c2 	cop	cp0,cr12,cr12,cr2,0x44
80003cd6:	f0 1f 00 0a 	mcall	80003cfc <_Z16Pitch_Controllerfffffff+0x5c>
80003cda:	8f 2c       	st.w	r7[0x8],r12
	
	integral_pitch = error2*Ki_pitch*dtt+integral_pitch;
80003cdc:	e5 a2 01 61 	cop	cp0,cr1,cr6,cr1,0x44
80003ce0:	6e 38       	ld.w	r8,r7[0xc]
80003ce2:	e1 a8 05 15 	cop	cp0,cr5,cr1,cr5,0x10
80003ce6:	8f 35       	st.w	r7[0xc],r5
	
	float output = Kp_pitch_2*error2 + integral_pitch + derivative_pitch;
	
	pre_pitch = measured_pitch;
80003ce8:	8f 03       	st.w	r7[0x0],r3
	pre_error2 = error2;
80003cea:	8f 16       	st.w	r7[0x4],r6
80003cec:	e1 a5 05 06 	cop	cp0,cr5,cr0,cr6,0xa

	return output;
80003cf0:	e5 a0 0c c5 	cop	cp0,cr12,cr12,cr5,0x40
80003cf4:	d8 32       	popm	r0-r7,pc
80003cf6:	00 00       	add	r0,r0
80003cf8:	00 00       	add	r0,r0
80003cfa:	09 48       	ld.w	r8,--r4
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	a8 14       	st.h	r4[0x2],r4

80003d00 <_GLOBAL__I_MX_MAX>:
#define USART1_TX_PIN AVR32_USART1_TXD_0_0_PIN
#define USART1_TX_FUNCTION AVR32_USART1_TXD_0_0_FUNCTION
class GPS {
public:
	GPS() {
		updated = false;
80003d00:	30 09       	mov	r9,0
80003d02:	48 38       	lddpc	r8,80003d0c <_GLOBAL__I_MX_MAX+0xc>
80003d04:	f1 69 00 29 	st.b	r8[41],r9
// 		deltat =(float) cpu_cy_2_ms((Get_sys_count()),FOSC0)/1000;
//  		cpu_set_timeout( cpu_ms_2_cy(10000, FOSC0), &timeout);
//  		Set_sys_count(0);
		}
	}
}
80003d08:	5e fc       	retal	r12
80003d0a:	00 00       	add	r0,r0
80003d0c:	00 00       	add	r0,r0
80003d0e:	09 48       	ld.w	r8,--r4

80003d10 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003d10:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003d12:	18 9b       	mov	r11,r12
80003d14:	30 2c       	mov	r12,2
80003d16:	f0 1f 00 02 	mcall	80003d1c <sysclk_enable_pba_module+0xc>
}
80003d1a:	d8 02       	popm	pc
80003d1c:	80 00       	ld.sh	r0,r0[0x0]
80003d1e:	17 1c       	ld.sh	r12,r11++

80003d20 <_ZN7MPU91506updateEv>:
	mz = (int16_t) (mzh <<8) |mzl;
	destination[2]=  mz;

}

void update() {
80003d20:	d4 31       	pushm	r0-r7,lr
80003d22:	21 7d       	sub	sp,92
	int16_t ax,ay,az,gx,gy,gz,mx,my,mz;
	int16_t magData[3];
	
	uint8_t gxh = at42qt1060_read_reg(0x43);
80003d24:	34 3c       	mov	r12,67
80003d26:	f0 1f 01 99 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d2a:	18 96       	mov	r6,r12
	uint8_t gxl = at42qt1060_read_reg(0x44);
80003d2c:	34 4c       	mov	r12,68
80003d2e:	f0 1f 01 97 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d32:	18 95       	mov	r5,r12
	
	uint8_t gyh = at42qt1060_read_reg(0x45);
80003d34:	34 5c       	mov	r12,69
80003d36:	f0 1f 01 95 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d3a:	18 94       	mov	r4,r12
	uint8_t gyl = at42qt1060_read_reg(0x46);
80003d3c:	34 6c       	mov	r12,70
80003d3e:	f0 1f 01 93 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d42:	18 93       	mov	r3,r12
	
	uint8_t gzh = at42qt1060_read_reg(0x47);
80003d44:	34 7c       	mov	r12,71
80003d46:	f0 1f 01 91 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d4a:	18 92       	mov	r2,r12
	uint8_t gzl = at42qt1060_read_reg(0x48);
80003d4c:	34 8c       	mov	r12,72
80003d4e:	f0 1f 01 8f 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d52:	18 91       	mov	r1,r12
	
	uint8_t axh = at42qt1060_read_reg(0x3B);
80003d54:	33 bc       	mov	r12,59
80003d56:	f0 1f 01 8d 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d5a:	18 90       	mov	r0,r12
	uint8_t axl = at42qt1060_read_reg(0x3C);
80003d5c:	33 cc       	mov	r12,60
80003d5e:	f0 1f 01 8b 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d62:	50 0c       	stdsp	sp[0x0],r12
	
	uint8_t ayh = at42qt1060_read_reg(0x3D);
80003d64:	33 dc       	mov	r12,61
80003d66:	f0 1f 01 89 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d6a:	50 1c       	stdsp	sp[0x4],r12
	uint8_t ayl = at42qt1060_read_reg(0x3E);
80003d6c:	33 ec       	mov	r12,62
80003d6e:	f0 1f 01 87 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d72:	50 2c       	stdsp	sp[0x8],r12
	
	uint8_t azh = at42qt1060_read_reg(0x3F);
80003d74:	33 fc       	mov	r12,63
80003d76:	f0 1f 01 85 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d7a:	50 3c       	stdsp	sp[0xc],r12
	uint8_t azl = at42qt1060_read_reg(0x40);
80003d7c:	34 0c       	mov	r12,64
80003d7e:	f0 1f 01 83 	mcall	80004388 <_ZN7MPU91506updateEv+0x668>
80003d82:	50 4c       	stdsp	sp[0x10],r12
	

	//G_Dt = deltat;
	
	gx = (int16_t) (gxh <<8) | gxl;
	converted_gx = (float) ((gx-GYRO_XOUT_OFFSET)*250/32768)+4;
80003d84:	fe f7 06 08 	ld.w	r7,pc[1544]
80003d88:	eb e6 10 89 	or	r9,r5,r6<<0x8
80003d8c:	5c 89       	casts.h	r9
80003d8e:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80003d92:	6e c8       	ld.w	r8,r7[0x30]
80003d94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003d98:	fc 16 43 7a 	movh	r6,0x437a
80003d9c:	e5 a2 09 96 	cop	cp0,cr9,cr9,cr6,0x44
80003da0:	fc 15 38 00 	movh	r5,0x3800
80003da4:	fc 18 40 80 	movh	r8,0x4080
80003da8:	e1 a8 08 95 	cop	cp0,cr8,cr9,cr5,0x10
80003dac:	8f b8       	st.w	r7[0x2c],r8
	gy = (int16_t) (gyh <<8) | gyl;
	converted_gy = (float) (gy-GYRO_YOUT_OFFSET)*250/32768+0.3;
80003dae:	e7 e4 10 8c 	or	r12,r3,r4<<0x8
80003db2:	5c 8c       	casts.h	r12
80003db4:	e5 a6 0c 0c 	cop	cp0,cr12,cr0,cr12,0x4c
80003db8:	6e e8       	ld.w	r8,r7[0x38]
80003dba:	e5 a1 0c c8 	cop	cp0,cr12,cr12,cr8,0x42
80003dbe:	e5 a2 0c c6 	cop	cp0,cr12,cr12,cr6,0x44
80003dc2:	e5 a2 0c c5 	cop	cp0,cr12,cr12,cr5,0x44
80003dc6:	f0 1f 01 73 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80003dca:	e0 68 33 33 	mov	r8,13107
80003dce:	ea 18 33 33 	orh	r8,0x3333
80003dd2:	e0 69 33 33 	mov	r9,13107
80003dd6:	ea 19 3f d3 	orh	r9,0x3fd3
80003dda:	f0 1f 01 6f 	mcall	80004394 <_ZN7MPU91506updateEv+0x674>
80003dde:	f0 1f 01 6f 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80003de2:	8f dc       	st.w	r7[0x34],r12
	gz = (int16_t) (gzh <<8) | gzl;
	converted_gz = (float) (gz-GYRO_ZOUT_OFFSET)*250/32768+1;
80003de4:	e3 e2 10 82 	or	r2,r1,r2<<0x8
80003de8:	5c 82       	casts.h	r2
80003dea:	e5 a6 02 02 	cop	cp0,cr2,cr0,cr2,0x4c
80003dee:	6f 08       	ld.w	r8,r7[0x40]
80003df0:	e5 a1 02 28 	cop	cp0,cr2,cr2,cr8,0x42
80003df4:	e5 a2 06 26 	cop	cp0,cr6,cr2,cr6,0x44
80003df8:	fc 18 3f 80 	movh	r8,0x3f80
80003dfc:	e1 a8 05 65 	cop	cp0,cr5,cr6,cr5,0x10
80003e00:	8f f5       	st.w	r7[0x3c],r5

	ax = (int16_t) (axh <<8) | axl;
	converted_ax = (float) (ax-ACCL_XOUT_OFFSET)/16384;
80003e02:	40 0e       	lddsp	lr,sp[0x0]
80003e04:	fd e0 10 89 	or	r9,lr,r0<<0x8
80003e08:	5c 89       	casts.h	r9
80003e0a:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80003e0e:	6f 28       	ld.w	r8,r7[0x48]
80003e10:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003e14:	fc 18 38 80 	movh	r8,0x3880
80003e18:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003e1c:	ef 49 00 44 	st.w	r7[68],r9
	ay = (int16_t) (ayh <<8) | ayl;
	converted_ay = (float) (ay-ACCL_YOUT_OFFSET)/16384;
80003e20:	40 2c       	lddsp	r12,sp[0x8]
80003e22:	40 1b       	lddsp	r11,sp[0x4]
80003e24:	f9 eb 10 89 	or	r9,r12,r11<<0x8
80003e28:	5c 89       	casts.h	r9
80003e2a:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80003e2e:	6f 4a       	ld.w	r10,r7[0x50]
80003e30:	e5 a1 09 9a 	cop	cp0,cr9,cr9,cr10,0x42
80003e34:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003e38:	ef 49 00 4c 	st.w	r7[76],r9
	az = (int16_t) (azh <<8) | azl;
	converted_az = (float) (az+1-ACCL_ZOUT_OFFSET)/16384-0.07;
80003e3c:	40 4a       	lddsp	r10,sp[0x10]
80003e3e:	40 39       	lddsp	r9,sp[0xc]
80003e40:	f5 e9 10 8c 	or	r12,r10,r9<<0x8
80003e44:	5c 8c       	casts.h	r12
80003e46:	2f fc       	sub	r12,-1
80003e48:	e5 a6 0c 0c 	cop	cp0,cr12,cr0,cr12,0x4c
80003e4c:	6f 69       	ld.w	r9,r7[0x58]
80003e4e:	e5 a1 0c c9 	cop	cp0,cr12,cr12,cr9,0x42
80003e52:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
80003e56:	f0 1f 01 4f 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80003e5a:	e0 68 51 ec 	mov	r8,20972
80003e5e:	ea 18 1e b8 	orh	r8,0x1eb8
80003e62:	e0 69 eb 85 	mov	r9,60293
80003e66:	ea 19 3f b1 	orh	r9,0x3fb1
80003e6a:	f0 1f 01 4d 	mcall	8000439c <_ZN7MPU91506updateEv+0x67c>
80003e6e:	f0 1f 01 4b 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80003e72:	ef 4c 00 54 	st.w	r7[84],r12
}
void readHMC58Data(int16_t * destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	uint16_t mx,my,mz;
	uint8_t mxh = mag_read_reg(0x03);
80003e76:	30 3c       	mov	r12,3
80003e78:	f0 1f 01 4a 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
80003e7c:	18 96       	mov	r6,r12
	uint8_t mxl = mag_read_reg(0x04);
80003e7e:	30 4c       	mov	r12,4
80003e80:	f0 1f 01 48 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
80003e84:	18 95       	mov	r5,r12

	uint8_t mzh = mag_read_reg(0x05);
80003e86:	30 5c       	mov	r12,5
80003e88:	f0 1f 01 46 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
80003e8c:	18 91       	mov	r1,r12
	uint8_t mzl = mag_read_reg(0x06);
80003e8e:	30 6c       	mov	r12,6
80003e90:	f0 1f 01 44 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
80003e94:	18 90       	mov	r0,r12

	uint8_t myh = mag_read_reg(0x07);
80003e96:	30 7c       	mov	r12,7
80003e98:	f0 1f 01 42 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
80003e9c:	18 94       	mov	r4,r12
	uint8_t myl = mag_read_reg(0x08);
80003e9e:	30 8c       	mov	r12,8
80003ea0:	f0 1f 01 40 	mcall	800043a0 <_ZN7MPU91506updateEv+0x680>
	//hal.uartB->println("initialization done");
// 	converted_mx = (float) ((((mx-127.0)*3)*magCalibration[0]))*0.796;
// 	converted_my = (float) ((((my-11263.0)*3)*magCalibration[1]))*1.238;
// 	converted_mz = (float) ((((mz+3584.0)*3)*magCalibration[2]))*1.068;
	
	converted_mx = (float) ((mx+44)*0.92f);
80003ea4:	eb e6 10 83 	or	r3,r5,r6<<0x8
80003ea8:	5c 83       	casts.h	r3
80003eaa:	2d 43       	sub	r3,-44
80003eac:	e5 a6 03 03 	cop	cp0,cr3,cr0,cr3,0x4c
80003eb0:	e0 68 85 1f 	mov	r8,34079
80003eb4:	ea 18 3f 6b 	orh	r8,0x3f6b
80003eb8:	e5 a2 03 38 	cop	cp0,cr3,cr3,cr8,0x44
80003ebc:	ef 43 00 5c 	st.w	r7[92],r3
	converted_my = (float) ((my+170)*0.92f);
80003ec0:	f9 e4 10 84 	or	r4,r12,r4<<0x8
80003ec4:	5c 84       	casts.h	r4
80003ec6:	e8 c4 ff 56 	sub	r4,r4,-170
80003eca:	e5 a6 04 04 	cop	cp0,cr4,cr0,cr4,0x4c
80003ece:	e5 a2 04 48 	cop	cp0,cr4,cr4,cr8,0x44
80003ed2:	ef 44 00 60 	st.w	r7[96],r4
	converted_mz = (float) ((mz-158)*0.92f);
80003ed6:	e1 e1 10 82 	or	r2,r0,r1<<0x8
80003eda:	5c 82       	casts.h	r2
80003edc:	e4 c2 00 9e 	sub	r2,r2,158
80003ee0:	e5 a6 02 02 	cop	cp0,cr2,cr0,cr2,0x4c
80003ee4:	e5 a2 02 28 	cop	cp0,cr2,cr2,cr8,0x44
80003ee8:	ef 42 00 64 	st.w	r7[100],r2

	MahonyQuaternionUpdate(converted_ax, converted_ay, converted_az, converted_gx*PI/180.0f, converted_gy*PI/180.0f, converted_gz*PI/180.0f,  converted_my,  converted_mx, converted_mz);
80003eec:	6e f8       	ld.w	r8,r7[0x3c]
80003eee:	50 68       	stdsp	sp[0x18],r8
80003ef0:	6e de       	ld.w	lr,r7[0x34]
80003ef2:	50 4e       	stdsp	sp[0x10],lr
80003ef4:	6e bc       	ld.w	r12,r7[0x2c]
80003ef6:	50 3c       	stdsp	sp[0xc],r12
80003ef8:	6f 55       	ld.w	r5,r7[0x54]
80003efa:	6f 36       	ld.w	r6,r7[0x4c]
80003efc:	6f 17       	ld.w	r7,r7[0x44]

	// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
	// measured ones.
	void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
	{
		float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
80003efe:	fe f8 04 a6 	ld.w	r8,pc[1190]
80003f02:	70 0b       	ld.w	r11,r8[0x0]
80003f04:	50 2b       	stdsp	sp[0x8],r11
80003f06:	70 10       	ld.w	r0,r8[0x4]
80003f08:	70 2a       	ld.w	r10,r8[0x8]
80003f0a:	50 0a       	stdsp	sp[0x0],r10
80003f0c:	70 38       	ld.w	r8,r8[0xc]
80003f0e:	50 18       	stdsp	sp[0x4],r8
		float q3q3 = q3 * q3;
		float q3q4 = q3 * q4;
		float q4q4 = q4 * q4;

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
80003f10:	e5 a2 0c 66 	cop	cp0,cr12,cr6,cr6,0x44
80003f14:	e1 ac 0c 77 	cop	cp0,cr12,cr7,cr7,0x18
80003f18:	e1 ac 0c 55 	cop	cp0,cr12,cr5,cr5,0x18
80003f1c:	f0 1f 01 1d 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80003f20:	f0 1f 01 22 	mcall	800043a8 <_ZN7MPU91506updateEv+0x688>
80003f24:	f0 1f 01 1d 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80003f28:	18 91       	mov	r1,r12
		if (norm == 0.0f) return; // handle NaN
80003f2a:	30 08       	mov	r8,0
80003f2c:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80003f30:	e0 80 01 9f 	breq	8000426e <_ZN7MPU91506updateEv+0x54e>
		ax *= norm;
		ay *= norm;
		az *= norm;

		// Normalise magnetometer measurement
		norm = sqrt(mx * mx + my * my + mz * mz);
80003f34:	e5 a2 0c 33 	cop	cp0,cr12,cr3,cr3,0x44
80003f38:	e1 ac 0c 44 	cop	cp0,cr12,cr4,cr4,0x18
80003f3c:	e1 ac 0c 22 	cop	cp0,cr12,cr2,cr2,0x18
80003f40:	f0 1f 01 14 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80003f44:	f0 1f 01 19 	mcall	800043a8 <_ZN7MPU91506updateEv+0x688>
80003f48:	f0 1f 01 14 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80003f4c:	50 5c       	stdsp	sp[0x14],r12
		if (norm == 0.0f) return; // handle NaN
80003f4e:	30 08       	mov	r8,0
80003f50:	e5 ac 00 c8 	cop	cp0,cr0,cr12,cr8,0x58
80003f54:	e0 80 01 8d 	breq	8000426e <_ZN7MPU91506updateEv+0x54e>
		float ex, ey, ez;
		float pa, pb, pc;

		// Auxiliary variables to avoid repeated arithmetic
		float q1q1 = q1 * q1;
		float q1q2 = q1 * q2;
80003f58:	40 29       	lddsp	r9,sp[0x8]
80003f5a:	e5 a2 09 90 	cop	cp0,cr9,cr9,cr0,0x44
80003f5e:	50 b9       	stdsp	sp[0x2c],r9
		float q1q3 = q1 * q3;
80003f60:	40 28       	lddsp	r8,sp[0x8]
80003f62:	40 0e       	lddsp	lr,sp[0x0]
80003f64:	e5 a2 08 8e 	cop	cp0,cr8,cr8,cr14,0x44
80003f68:	50 c8       	stdsp	sp[0x30],r8
		float q1q4 = q1 * q4;
80003f6a:	40 2c       	lddsp	r12,sp[0x8]
80003f6c:	40 1b       	lddsp	r11,sp[0x4]
80003f6e:	e5 a2 0c cb 	cop	cp0,cr12,cr12,cr11,0x44
80003f72:	50 fc       	stdsp	sp[0x3c],r12
		float q2q2 = q2 * q2;
80003f74:	e5 a2 0a 00 	cop	cp0,cr10,cr0,cr0,0x44
80003f78:	51 0a       	stdsp	sp[0x40],r10
		float q2q3 = q2 * q3;
80003f7a:	e5 a2 09 0e 	cop	cp0,cr9,cr0,cr14,0x44
80003f7e:	51 19       	stdsp	sp[0x44],r9
		float q2q4 = q2 * q4;
80003f80:	e5 a2 08 0b 	cop	cp0,cr8,cr0,cr11,0x44
80003f84:	51 28       	stdsp	sp[0x48],r8
		float q3q3 = q3 * q3;
80003f86:	e5 a2 0e ee 	cop	cp0,cr14,cr14,cr14,0x44
80003f8a:	50 7e       	stdsp	sp[0x1c],lr
		float q3q4 = q3 * q4;
80003f8c:	40 0c       	lddsp	r12,sp[0x0]
80003f8e:	e5 a2 0c cb 	cop	cp0,cr12,cr12,cr11,0x44
80003f92:	51 3c       	stdsp	sp[0x4c],r12
		float q4q4 = q4 * q4;
80003f94:	e5 a2 0b bb 	cop	cp0,cr11,cr11,cr11,0x44
80003f98:	50 8b       	stdsp	sp[0x20],r11

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
		if (norm == 0.0f) return; // handle NaN
		norm = 1.0f / norm;        // use reciprocal for division
80003f9a:	02 9b       	mov	r11,r1
80003f9c:	fc 1c 3f 80 	movh	r12,0x3f80
80003fa0:	f0 1f 01 03 	mcall	800043ac <_ZN7MPU91506updateEv+0x68c>
		ax *= norm;
80003fa4:	e5 a2 0a 7c 	cop	cp0,cr10,cr7,cr12,0x44
80003fa8:	51 4a       	stdsp	sp[0x50],r10
		ay *= norm;
80003faa:	e5 a2 06 6c 	cop	cp0,cr6,cr6,cr12,0x44
80003fae:	51 56       	stdsp	sp[0x54],r6
		az *= norm;
80003fb0:	e5 a2 0c 5c 	cop	cp0,cr12,cr5,cr12,0x44
80003fb4:	51 6c       	stdsp	sp[0x58],r12

		// Normalise magnetometer measurement
		norm = sqrt(mx * mx + my * my + mz * mz);
		if (norm == 0.0f) return; // handle NaN
		norm = 1.0f / norm;        // use reciprocal for division
80003fb6:	40 5b       	lddsp	r11,sp[0x14]
80003fb8:	fc 1c 3f 80 	movh	r12,0x3f80
80003fbc:	f0 1f 00 fc 	mcall	800043ac <_ZN7MPU91506updateEv+0x68c>
		mx *= norm;
80003fc0:	e5 a2 04 4c 	cop	cp0,cr4,cr4,cr12,0x44
80003fc4:	50 54       	stdsp	sp[0x14],r4
		my *= norm;
80003fc6:	e5 a2 04 3c 	cop	cp0,cr4,cr3,cr12,0x44
		mz *= norm;
80003fca:	e5 a2 02 2c 	cop	cp0,cr2,cr2,cr12,0x44

		// Reference direction of Earth's magnetic field
		hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
80003fce:	40 59       	lddsp	r9,sp[0x14]
80003fd0:	e5 a0 03 99 	cop	cp0,cr3,cr9,cr9,0x40
80003fd4:	fc 18 3f 00 	movh	r8,0x3f00
80003fd8:	40 7e       	lddsp	lr,sp[0x1c]
80003fda:	e5 a1 07 8e 	cop	cp0,cr7,cr8,cr14,0x42
80003fde:	40 8c       	lddsp	r12,sp[0x20]
80003fe0:	e5 a1 0c 7c 	cop	cp0,cr12,cr7,cr12,0x42
80003fe4:	50 9c       	stdsp	sp[0x24],r12
80003fe6:	e5 a0 05 44 	cop	cp0,cr5,cr4,cr4,0x40
80003fea:	41 1b       	lddsp	r11,sp[0x44]
80003fec:	40 fa       	lddsp	r10,sp[0x3c]
80003fee:	e5 a1 0b ba 	cop	cp0,cr11,cr11,cr10,0x42
80003ff2:	50 db       	stdsp	sp[0x34],r11
80003ff4:	e5 a0 01 22 	cop	cp0,cr1,cr2,cr2,0x40
80003ff8:	40 c9       	lddsp	r9,sp[0x30]
80003ffa:	41 28       	lddsp	r8,sp[0x48]
80003ffc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80004000:	50 e9       	stdsp	sp[0x38],r9
80004002:	e5 a2 0c 5b 	cop	cp0,cr12,cr5,cr11,0x44
80004006:	40 9e       	lddsp	lr,sp[0x24]
80004008:	e1 ac 0c 3e 	cop	cp0,cr12,cr3,cr14,0x18
8000400c:	e1 ac 0c 19 	cop	cp0,cr12,cr1,cr9,0x18
		hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
80004010:	fc 1b 3f 00 	movh	r11,0x3f00
80004014:	41 0a       	lddsp	r10,sp[0x40]
80004016:	e5 a1 0b ba 	cop	cp0,cr11,cr11,cr10,0x42
8000401a:	50 ab       	stdsp	sp[0x28],r11
8000401c:	40 f9       	lddsp	r9,sp[0x3c]
8000401e:	41 1e       	lddsp	lr,sp[0x44]
80004020:	e5 a0 08 9e 	cop	cp0,cr8,cr9,cr14,0x40
80004024:	40 8a       	lddsp	r10,sp[0x20]
80004026:	e5 a1 09 ba 	cop	cp0,cr9,cr11,cr10,0x42
8000402a:	e5 a2 09 59 	cop	cp0,cr9,cr5,cr9,0x44
8000402e:	e1 a9 09 38 	cop	cp0,cr9,cr3,cr8,0x12
80004032:	41 3e       	lddsp	lr,sp[0x4c]
80004034:	40 bb       	lddsp	r11,sp[0x2c]
80004036:	e5 a1 08 eb 	cop	cp0,cr8,cr14,cr11,0x42
8000403a:	e1 a9 08 18 	cop	cp0,cr8,cr1,cr8,0x12
		bx = sqrt((hx * hx) + (hy * hy));
8000403e:	e5 a2 08 88 	cop	cp0,cr8,cr8,cr8,0x44
80004042:	e1 a8 0c cc 	cop	cp0,cr12,cr12,cr12,0x10
80004046:	f0 1f 00 d3 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
8000404a:	f0 1f 00 d8 	mcall	800043a8 <_ZN7MPU91506updateEv+0x688>
		bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
8000404e:	41 29       	lddsp	r9,sp[0x48]
80004050:	40 c8       	lddsp	r8,sp[0x30]
80004052:	e5 a1 07 98 	cop	cp0,cr7,cr9,cr8,0x42
80004056:	40 be       	lddsp	lr,sp[0x2c]
80004058:	41 3c       	lddsp	r12,sp[0x4c]
8000405a:	e5 a0 06 ec 	cop	cp0,cr6,cr14,cr12,0x40
8000405e:	40 a9       	lddsp	r9,sp[0x28]
80004060:	40 78       	lddsp	r8,sp[0x1c]
80004062:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004066:	50 a9       	stdsp	sp[0x28],r9

		// Estimated direction of gravity and magnetic field
		vx = 2.0f * (q2q4 - q1q3);
80004068:	e5 a0 0e 77 	cop	cp0,cr14,cr7,cr7,0x40
8000406c:	50 be       	stdsp	sp[0x2c],lr
		vy = 2.0f * (q1q2 + q3q4);
8000406e:	e5 a0 0c 66 	cop	cp0,cr12,cr6,cr6,0x40
80004072:	50 cc       	stdsp	sp[0x30],r12
		vz = q1q1 - q2q2 - q3q3 + q4q4;
80004074:	41 09       	lddsp	r9,sp[0x40]
80004076:	40 2e       	lddsp	lr,sp[0x8]
80004078:	e1 a9 18 ee 	cop	cp0,cr8,cr14,cr14,0x13
8000407c:	40 7c       	lddsp	r12,sp[0x1c]
8000407e:	e5 a1 08 8c 	cop	cp0,cr8,cr8,cr12,0x42
80004082:	40 89       	lddsp	r9,sp[0x20]
80004084:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80004088:	50 78       	stdsp	sp[0x1c],r8
		wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
8000408a:	f0 1f 00 c4 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
8000408e:	e5 a0 0c cc 	cop	cp0,cr12,cr12,cr12,0x40
80004092:	e5 a2 05 56 	cop	cp0,cr5,cr5,cr6,0x44
80004096:	e1 a5 05 37 	cop	cp0,cr5,cr3,cr7,0xa
8000409a:	40 a8       	lddsp	r8,sp[0x28]
8000409c:	e1 a5 05 18 	cop	cp0,cr5,cr1,cr8,0xa
800040a0:	e5 a0 05 55 	cop	cp0,cr5,cr5,cr5,0x40
800040a4:	e5 a2 07 75 	cop	cp0,cr7,cr7,cr5,0x44
800040a8:	40 9e       	lddsp	lr,sp[0x24]
800040aa:	e1 a7 0e ec 	cop	cp0,cr14,cr14,cr12,0xe
800040ae:	50 8e       	stdsp	sp[0x20],lr
		wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
800040b0:	e5 a2 06 65 	cop	cp0,cr6,cr6,cr5,0x44
800040b4:	40 db       	lddsp	r11,sp[0x34]
800040b6:	e1 a6 06 bc 	cop	cp0,cr6,cr11,cr12,0xc
800040ba:	50 96       	stdsp	sp[0x24],r6
		wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
800040bc:	e5 a2 07 85 	cop	cp0,cr7,cr8,cr5,0x44
800040c0:	40 ea       	lddsp	r10,sp[0x38]
800040c2:	e1 a7 07 ac 	cop	cp0,cr7,cr10,cr12,0xe
			eInt[1] += ey;
			eInt[2] += ez;
		}
		else
		{
			eInt[0] = 0.0f;     // prevent integral wind up
800040c6:	fe f8 02 c6 	ld.w	r8,pc[710]
800040ca:	30 01       	mov	r1,0
800040cc:	f1 41 00 68 	st.w	r8[104],r1
			eInt[1] = 0.0f;
800040d0:	f1 41 00 6c 	st.w	r8[108],r1
			eInt[2] = 0.0f;
800040d4:	f1 41 00 70 	st.w	r8[112],r1
		}

		// Apply feedback terms
		gx = gx + Kp * ex + Ki * eInt[0];
800040d8:	40 3c       	lddsp	r12,sp[0xc]
800040da:	f0 1f 00 ae 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
800040de:	e0 68 2d 18 	mov	r8,11544
800040e2:	ea 18 54 44 	orh	r8,0x5444
800040e6:	e0 69 21 fb 	mov	r9,8699
800040ea:	ea 19 40 09 	orh	r9,0x4009
800040ee:	f0 1f 00 b1 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
800040f2:	30 08       	mov	r8,0
800040f4:	e0 69 80 00 	mov	r9,32768
800040f8:	ea 19 40 66 	orh	r9,0x4066
800040fc:	f0 1f 00 ae 	mcall	800043b4 <_ZN7MPU91506updateEv+0x694>
80004100:	f0 1f 00 a6 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80004104:	41 69       	lddsp	r9,sp[0x58]
80004106:	40 c8       	lddsp	r8,sp[0x30]
80004108:	e5 a2 03 98 	cop	cp0,cr3,cr9,cr8,0x44
8000410c:	41 5e       	lddsp	lr,sp[0x54]
8000410e:	40 7b       	lddsp	r11,sp[0x1c]
80004110:	e1 a3 13 eb 	cop	cp0,cr3,cr14,cr11,0x7
80004114:	40 9a       	lddsp	r10,sp[0x24]
80004116:	e5 a2 08 2a 	cop	cp0,cr8,cr2,cr10,0x44
8000411a:	e1 a8 18 47 	cop	cp0,cr8,cr4,cr7,0x11
8000411e:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80004122:	fc 16 41 20 	movh	r6,0x4120
80004126:	e1 ac 03 36 	cop	cp0,cr3,cr3,cr6,0x18
8000412a:	e5 a0 03 31 	cop	cp0,cr3,cr3,cr1,0x40
		gy = gy + Kp * ey + Ki * eInt[1];
8000412e:	40 4c       	lddsp	r12,sp[0x10]
80004130:	f0 1f 00 98 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80004134:	e0 68 2d 18 	mov	r8,11544
80004138:	ea 18 54 44 	orh	r8,0x5444
8000413c:	e0 69 21 fb 	mov	r9,8699
80004140:	ea 19 40 09 	orh	r9,0x4009
80004144:	f0 1f 00 9b 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
80004148:	30 08       	mov	r8,0
8000414a:	e0 69 80 00 	mov	r9,32768
8000414e:	ea 19 40 66 	orh	r9,0x4066
80004152:	f0 1f 00 99 	mcall	800043b4 <_ZN7MPU91506updateEv+0x694>
80004156:	f0 1f 00 91 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
8000415a:	41 49       	lddsp	r9,sp[0x50]
8000415c:	40 78       	lddsp	r8,sp[0x1c]
8000415e:	e5 a2 05 98 	cop	cp0,cr5,cr9,cr8,0x44
80004162:	41 6e       	lddsp	lr,sp[0x58]
80004164:	40 bb       	lddsp	r11,sp[0x2c]
80004166:	e1 a5 15 eb 	cop	cp0,cr5,cr14,cr11,0xb
8000416a:	40 5a       	lddsp	r10,sp[0x14]
8000416c:	e5 a2 07 a7 	cop	cp0,cr7,cr10,cr7,0x44
80004170:	40 89       	lddsp	r9,sp[0x20]
80004172:	e1 a7 12 29 	cop	cp0,cr2,cr2,cr9,0xf
80004176:	e5 a0 02 52 	cop	cp0,cr2,cr5,cr2,0x40
8000417a:	e1 ac 02 26 	cop	cp0,cr2,cr2,cr6,0x18
8000417e:	e5 a0 02 21 	cop	cp0,cr2,cr2,cr1,0x40
		gz = gz + Kp * ez + Ki * eInt[2];
80004182:	40 6c       	lddsp	r12,sp[0x18]
80004184:	f0 1f 00 83 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80004188:	e0 68 2d 18 	mov	r8,11544
8000418c:	ea 18 54 44 	orh	r8,0x5444
80004190:	e0 69 21 fb 	mov	r9,8699
80004194:	ea 19 40 09 	orh	r9,0x4009
80004198:	f0 1f 00 86 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
8000419c:	30 08       	mov	r8,0
8000419e:	e0 69 80 00 	mov	r9,32768
800041a2:	ea 19 40 66 	orh	r9,0x4066
800041a6:	f0 1f 00 84 	mcall	800043b4 <_ZN7MPU91506updateEv+0x694>
800041aa:	f0 1f 00 7c 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
800041ae:	41 5e       	lddsp	lr,sp[0x54]
800041b0:	40 bb       	lddsp	r11,sp[0x2c]
800041b2:	e5 a2 08 eb 	cop	cp0,cr8,cr14,cr11,0x44
800041b6:	41 4a       	lddsp	r10,sp[0x50]
800041b8:	40 c9       	lddsp	r9,sp[0x30]
800041ba:	e1 a8 18 a9 	cop	cp0,cr8,cr10,cr9,0x11
800041be:	40 8e       	lddsp	lr,sp[0x20]
800041c0:	e5 a2 04 4e 	cop	cp0,cr4,cr4,cr14,0x44
800041c4:	40 5b       	lddsp	r11,sp[0x14]
800041c6:	40 9a       	lddsp	r10,sp[0x24]
800041c8:	e1 a4 14 ba 	cop	cp0,cr4,cr11,cr10,0x9
800041cc:	e5 a0 08 84 	cop	cp0,cr8,cr8,cr4,0x40
800041d0:	e1 ac 08 86 	cop	cp0,cr8,cr8,cr6,0x18
800041d4:	e5 a0 08 81 	cop	cp0,cr8,cr8,cr1,0x40

		// Integrate rate of change of quaternion
		pa = q2;
		pb = q3;
		pc = q4;
		q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
800041d8:	4f 36       	lddpc	r6,800043a4 <_ZN7MPU91506updateEv+0x684>
800041da:	6c 49       	ld.w	r9,r6[0x10]
800041dc:	fc 1e 3f 00 	movh	lr,0x3f00
800041e0:	e5 a2 09 9e 	cop	cp0,cr9,cr9,cr14,0x44
800041e4:	00 97       	mov	r7,r0
800041e6:	ee 17 80 00 	eorh	r7,0x8000
800041ea:	40 0c       	lddsp	r12,sp[0x0]
800041ec:	e5 a2 0a c2 	cop	cp0,cr10,cr12,cr2,0x44
800041f0:	e1 aa 17 37 	cop	cp0,cr7,cr3,cr7,0x15
800041f4:	40 1b       	lddsp	r11,sp[0x4]
800041f6:	e3 a7 07 b8 	cop	cp0,cr7,cr11,cr8,0x2e
800041fa:	40 2a       	lddsp	r10,sp[0x8]
800041fc:	e1 aa 07 79 	cop	cp0,cr7,cr7,cr9,0x14
		q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
80004200:	e5 a2 04 c8 	cop	cp0,cr4,cr12,cr8,0x44
80004204:	e1 a4 04 37 	cop	cp0,cr4,cr3,cr7,0x8
80004208:	e3 a4 04 b2 	cop	cp0,cr4,cr11,cr2,0x28
8000420c:	e1 a0 04 94 	cop	cp0,cr4,cr9,cr4,0x0
		q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
80004210:	e5 a2 01 08 	cop	cp0,cr1,cr0,cr8,0x44
80004214:	e1 a1 11 27 	cop	cp0,cr1,cr2,cr7,0x3
80004218:	e1 a1 01 b3 	cop	cp0,cr1,cr11,cr3,0x2
8000421c:	e1 ac 01 91 	cop	cp0,cr1,cr9,cr1,0x18
		q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
80004220:	e5 a2 05 02 	cop	cp0,cr5,cr0,cr2,0x44
80004224:	e1 a5 05 87 	cop	cp0,cr5,cr8,cr7,0xa
80004228:	e3 a5 05 c3 	cop	cp0,cr5,cr12,cr3,0x2a
8000422c:	e1 ab 05 95 	cop	cp0,cr5,cr9,cr5,0x16

		// Normalise quaternion
		norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
80004230:	e5 a2 0c 44 	cop	cp0,cr12,cr4,cr4,0x44
80004234:	e1 ac 0c 77 	cop	cp0,cr12,cr7,cr7,0x18
80004238:	e1 ac 0c 11 	cop	cp0,cr12,cr1,cr1,0x18
8000423c:	e1 ac 0c 55 	cop	cp0,cr12,cr5,cr5,0x18
80004240:	f0 1f 00 54 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80004244:	f0 1f 00 59 	mcall	800043a8 <_ZN7MPU91506updateEv+0x688>
80004248:	f0 1f 00 54 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
		norm = 1.0f / norm;
8000424c:	18 9b       	mov	r11,r12
8000424e:	fc 1c 3f 80 	movh	r12,0x3f80
80004252:	f0 1f 00 57 	mcall	800043ac <_ZN7MPU91506updateEv+0x68c>
		q[0] = q1 * norm;
80004256:	e5 a2 07 7c 	cop	cp0,cr7,cr7,cr12,0x44
8000425a:	8d 07       	st.w	r6[0x0],r7
		q[1] = q2 * norm;
8000425c:	e5 a2 04 4c 	cop	cp0,cr4,cr4,cr12,0x44
80004260:	8d 14       	st.w	r6[0x4],r4
		q[2] = q3 * norm;
80004262:	e5 a2 01 1c 	cop	cp0,cr1,cr1,cr12,0x44
80004266:	8d 21       	st.w	r6[0x8],r1
		q[3] = q4 * norm;
80004268:	e5 a2 05 5c 	cop	cp0,cr5,cr5,cr12,0x44
8000426c:	8d 35       	st.w	r6[0xc],r5
	converted_my = (float) ((my+170)*0.92f);
	converted_mz = (float) ((mz-158)*0.92f);

	MahonyQuaternionUpdate(converted_ax, converted_ay, converted_az, converted_gx*PI/180.0f, converted_gy*PI/180.0f, converted_gz*PI/180.0f,  converted_my,  converted_mx, converted_mz);

	yaw   = (atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]));
8000426e:	4c e7       	lddpc	r7,800043a4 <_ZN7MPU91506updateEv+0x684>
80004270:	6e 06       	ld.w	r6,r7[0x0]
80004272:	6e 14       	ld.w	r4,r7[0x4]
80004274:	6e 23       	ld.w	r3,r7[0x8]
80004276:	6e 35       	ld.w	r5,r7[0xc]
80004278:	e5 a2 0c 44 	cop	cp0,cr12,cr4,cr4,0x44
8000427c:	e1 ac 0c 66 	cop	cp0,cr12,cr6,cr6,0x18
80004280:	e3 ac 0c 33 	cop	cp0,cr12,cr3,cr3,0x38
80004284:	e3 ac 0c 55 	cop	cp0,cr12,cr5,cr5,0x38
80004288:	f0 1f 00 42 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
8000428c:	14 90       	mov	r0,r10
8000428e:	16 91       	mov	r1,r11
80004290:	e5 a2 06 65 	cop	cp0,cr6,cr6,cr5,0x44
80004294:	e1 a6 0c 43 	cop	cp0,cr12,cr4,cr3,0xc
80004298:	e5 a0 0c cc 	cop	cp0,cr12,cr12,cr12,0x40
8000429c:	f0 1f 00 3d 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
800042a0:	00 98       	mov	r8,r0
800042a2:	02 99       	mov	r9,r1
800042a4:	f0 1f 00 45 	mcall	800043b8 <_ZN7MPU91506updateEv+0x698>
800042a8:	4b 96       	lddpc	r6,8000438c <_ZN7MPU91506updateEv+0x66c>
800042aa:	f0 1f 00 3c 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
800042ae:	ed 4c 00 74 	st.w	r6[116],r12
	pitch  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
800042b2:	6e 03       	ld.w	r3,r7[0x0]
800042b4:	6e 12       	ld.w	r2,r7[0x4]
800042b6:	6e 25       	ld.w	r5,r7[0x8]
800042b8:	6e 34       	ld.w	r4,r7[0xc]
800042ba:	e5 a2 0c 22 	cop	cp0,cr12,cr2,cr2,0x44
800042be:	e1 ac 1c 33 	cop	cp0,cr12,cr3,cr3,0x19
800042c2:	e3 ac 0c 55 	cop	cp0,cr12,cr5,cr5,0x38
800042c6:	e1 ac 0c 44 	cop	cp0,cr12,cr4,cr4,0x18
800042ca:	f0 1f 00 32 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
800042ce:	14 90       	mov	r0,r10
800042d0:	16 91       	mov	r1,r11
800042d2:	e5 a2 05 54 	cop	cp0,cr5,cr5,cr4,0x44
800042d6:	e1 a5 0c 32 	cop	cp0,cr12,cr3,cr2,0xa
800042da:	e5 a0 0c cc 	cop	cp0,cr12,cr12,cr12,0x40
800042de:	f0 1f 00 2d 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
800042e2:	00 98       	mov	r8,r0
800042e4:	02 99       	mov	r9,r1
800042e6:	f0 1f 00 35 	mcall	800043b8 <_ZN7MPU91506updateEv+0x698>
800042ea:	f0 1f 00 2c 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
800042ee:	ed 4c 00 78 	st.w	r6[120],r12
	roll = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
800042f2:	6e 1c       	ld.w	r12,r7[0x4]
800042f4:	6e 39       	ld.w	r9,r7[0xc]
800042f6:	6e 0a       	ld.w	r10,r7[0x0]
800042f8:	6e 28       	ld.w	r8,r7[0x8]
800042fa:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800042fe:	e1 a8 1c c9 	cop	cp0,cr12,cr12,cr9,0x11
80004302:	fc 18 c0 00 	movh	r8,0xc000
80004306:	e5 a2 0c c8 	cop	cp0,cr12,cr12,cr8,0x44
8000430a:	f0 1f 00 22 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
8000430e:	f0 1f 00 2c 	mcall	800043bc <_ZN7MPU91506updateEv+0x69c>
80004312:	f0 1f 00 22 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80004316:	18 97       	mov	r7,r12
	pitch *= 180.0f / PI;
80004318:	6d ec       	ld.w	r12,r6[0x78]
8000431a:	f0 1f 00 1e 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
8000431e:	e0 68 c1 f8 	mov	r8,49656
80004322:	ea 18 1a 63 	orh	r8,0x1a63
80004326:	e0 69 a5 dc 	mov	r9,42460
8000432a:	ea 19 40 4c 	orh	r9,0x404c
8000432e:	f0 1f 00 21 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
80004332:	f0 1f 00 1a 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80004336:	ed 4c 00 78 	st.w	r6[120],r12
	yaw   *= 180.0f / PI;
	yaw   += 0; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
8000433a:	6d dc       	ld.w	r12,r6[0x74]
8000433c:	f0 1f 00 15 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80004340:	e0 68 c1 f8 	mov	r8,49656
80004344:	ea 18 1a 63 	orh	r8,0x1a63
80004348:	e0 69 a5 dc 	mov	r9,42460
8000434c:	ea 19 40 4c 	orh	r9,0x404c
80004350:	f0 1f 00 18 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
80004354:	f0 1f 00 11 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80004358:	30 08       	mov	r8,0
8000435a:	e5 a0 08 c8 	cop	cp0,cr8,cr12,cr8,0x40
8000435e:	ed 48 00 74 	st.w	r6[116],r8
	roll  *= 180.0f / PI;	
80004362:	0e 9c       	mov	r12,r7
80004364:	f0 1f 00 0b 	mcall	80004390 <_ZN7MPU91506updateEv+0x670>
80004368:	e0 68 c1 f8 	mov	r8,49656
8000436c:	ea 18 1a 63 	orh	r8,0x1a63
80004370:	e0 69 a5 dc 	mov	r9,42460
80004374:	ea 19 40 4c 	orh	r9,0x404c
80004378:	f0 1f 00 0e 	mcall	800043b0 <_ZN7MPU91506updateEv+0x690>
8000437c:	f0 1f 00 07 	mcall	80004398 <_ZN7MPU91506updateEv+0x678>
80004380:	ed 4c 00 7c 	st.w	r6[124],r12
}
80004384:	2e 9d       	sub	sp,-92
80004386:	d8 32       	popm	r0-r7,pc
80004388:	80 00       	ld.sh	r0,r0[0x0]
8000438a:	01 c4       	ld.ub	r4,r0[0x4]
8000438c:	00 00       	add	r0,r0
8000438e:	09 48       	ld.w	r8,--r4
80004390:	80 00       	ld.sh	r0,r0[0x0]
80004392:	a9 74       	lsl	r4,0x9
80004394:	80 00       	ld.sh	r0,r0[0x0]
80004396:	a1 e4       	*unknown*
80004398:	80 00       	ld.sh	r0,r0[0x0]
8000439a:	a9 d4       	cbr	r4,0x9
8000439c:	80 00       	ld.sh	r0,r0[0x0]
8000439e:	a0 48       	st.h	r0[0x8],r8
800043a0:	80 00       	ld.sh	r0,r0[0x0]
800043a2:	01 0c       	ld.w	r12,r0++
800043a4:	00 00       	add	r0,r0
800043a6:	00 c0       	st.b	r0++,r0
800043a8:	80 00       	ld.sh	r0,r0[0x0]
800043aa:	91 3c       	st.w	r8[0xc],r12
800043ac:	80 00       	ld.sh	r0,r0[0x0]
800043ae:	a8 14       	st.h	r4[0x2],r4
800043b0:	80 00       	ld.sh	r0,r0[0x0]
800043b2:	9e 70       	ld.sh	r0,pc[0xe]
800043b4:	80 00       	ld.sh	r0,r0[0x0]
800043b6:	a4 fc       	st.b	r2[0x7],r12
800043b8:	80 00       	ld.sh	r0,r0[0x0]
800043ba:	91 30       	st.w	r8[0xc],r0
800043bc:	80 00       	ld.sh	r0,r0[0x0]
800043be:	90 80       	ld.uh	r0,r8[0x0]

800043c0 <main>:
GPS gps;
MPU9150 mpu9150;
	float PID_Pitch;

// main function
int main(void) {
800043c0:	d4 31       	pushm	r0-r7,lr
800043c2:	20 bd       	sub	sp,44
	t_cpu_time timeout;
	t_cpu_time timeout_mpu;
	float deltat_2;
	float roll_first, pitch_first;
	
	board_init();
800043c4:	f0 1f 01 9f 	mcall	80004a40 <main+0x680>
	hal.init(0,NULL);
800043c8:	fe f7 06 7c 	ld.w	r7,pc[1660]
800043cc:	6e 08       	ld.w	r8,r7[0x0]
800043ce:	70 08       	ld.w	r8,r8[0x0]
800043d0:	30 0a       	mov	r10,0
800043d2:	14 9b       	mov	r11,r10
800043d4:	0e 9c       	mov	r12,r7
800043d6:	5d 18       	icall	r8
	hal.analogin->init();
800043d8:	6e 5c       	ld.w	r12,r7[0x14]
800043da:	78 08       	ld.w	r8,r12[0x0]
800043dc:	70 08       	ld.w	r8,r8[0x0]
800043de:	5d 18       	icall	r8
	
	sysclk_init();
800043e0:	f0 1f 01 9a 	mcall	80004a48 <main+0x688>
const AP_HAL::HAL& hal = AP_HAL_Empty;

static pcl_freq_param_t pcl_freq_param;
static void init_sys_clocks(void)
{
	pcl_freq_param.cpu_f        = FCPU_HZ;
800043e4:	fe fc 06 68 	ld.w	r12,pc[1640]
800043e8:	e0 68 24 00 	mov	r8,9216
800043ec:	ea 18 00 f4 	orh	r8,0xf4
800043f0:	f9 48 00 84 	st.w	r12[132],r8
	pcl_freq_param.pba_f        = FPBA_HZ;
800043f4:	f9 48 00 88 	st.w	r12[136],r8
	pcl_freq_param.osc0_f       = FOSC0;
800043f8:	f9 48 00 94 	st.w	r12[148],r8
	pcl_freq_param.osc0_startup = OSC0_STARTUP;
800043fc:	30 38       	mov	r8,3
800043fe:	f9 48 00 98 	st.w	r12[152],r8
	// Configure system clocks.
	if (pcl_configure_clocks(&pcl_freq_param) != PASS)
80004402:	28 0c       	sub	r12,-128
80004404:	f0 1f 01 93 	mcall	80004a50 <main+0x690>
80004408:	c0 20       	breq	8000440c <main+0x4c>
8000440a:	c0 08       	rjmp	8000440a <main+0x4a>
	cpu_delay_ms(10,cpu_hz);
}

void initMPU9150(uint32_t fcpu)
{
	cpu_hz = fcpu;
8000440c:	fe f7 06 40 	ld.w	r7,pc[1600]
80004410:	e0 66 24 00 	mov	r6,9216
80004414:	ea 16 00 f4 	orh	r6,0xf4
80004418:	ef 46 00 a4 	st.w	r7[164],r6
	
	irq_initialize_vectors();
8000441c:	f0 1f 01 8e 	mcall	80004a54 <main+0x694>
	cpu_irq_enable();
80004420:	d5 03       	csrf	0x10
		const gpio_map_t AT42QT1060_TWI_GPIO_MAP =
	{
		{AT42QT1060_TWI_SCL_PIN, AT42QT1060_TWI_SCL_FUNCTION},
		{AT42QT1060_TWI_SDA_PIN, AT42QT1060_TWI_SDA_FUNCTION}
	};
80004422:	fe f8 06 36 	ld.w	r8,pc[1590]
80004426:	fa cc ff e4 	sub	r12,sp,-28
8000442a:	70 09       	ld.w	r9,r8[0x0]
8000442c:	99 09       	st.w	r12[0x0],r9
8000442e:	70 19       	ld.w	r9,r8[0x4]
80004430:	99 19       	st.w	r12[0x4],r9
80004432:	70 29       	ld.w	r9,r8[0x8]
80004434:	99 29       	st.w	r12[0x8],r9
80004436:	70 38       	ld.w	r8,r8[0xc]
80004438:	99 38       	st.w	r12[0xc],r8

	twi_options_t AT42QT1060_TWI_OPTIONS;
	
	AT42QT1060_TWI_OPTIONS.pba_hz = 16000000;
8000443a:	50 36       	stdsp	sp[0xc],r6
	AT42QT1060_TWI_OPTIONS.speed = AT42QT1060_TWI_MASTER_SPEED;
8000443c:	e6 68 1a 80 	mov	r8,400000
80004440:	50 48       	stdsp	sp[0x10],r8
	AT42QT1060_TWI_OPTIONS.chip = AT42QT1060_TWI_ADDRESS;
80004442:	36 88       	mov	r8,104
80004444:	50 58       	stdsp	sp[0x14],r8
	

	// Assign I/Os to SPI.
	gpio_enable_module(AT42QT1060_TWI_GPIO_MAP,
	sizeof(AT42QT1060_TWI_GPIO_MAP) / sizeof(AT42QT1060_TWI_GPIO_MAP[0]));
80004446:	30 2b       	mov	r11,2
80004448:	f0 1f 01 85 	mcall	80004a5c <main+0x69c>
	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
		break;
#endif
	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
8000444c:	30 cc       	mov	r12,12
8000444e:	f0 1f 01 85 	mcall	80004a60 <main+0x6a0>
	sysclk_enable_peripheral_clock(AT42QT1060_TWI);
	// Initialize as master.
	twi_master_init(AT42QT1060_TWI, &AT42QT1060_TWI_OPTIONS);
80004452:	fa cb ff f4 	sub	r11,sp,-12
80004456:	fe 7c 38 00 	mov	r12,-51200
8000445a:	f0 1f 01 83 	mcall	80004a64 <main+0x6a4>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000445e:	ee f7 00 a4 	ld.w	r7,r7[164]
80004462:	e0 68 00 e6 	mov	r8,230
80004466:	ee 08 06 46 	mulu.d	r6,r7,r8
8000446a:	e0 68 03 e8 	mov	r8,1000
8000446e:	30 09       	mov	r9,0
80004470:	e0 6a 03 e7 	mov	r10,999
80004474:	30 0b       	mov	r11,0
80004476:	ec 0a 00 0a 	add	r10,r6,r10
8000447a:	ee 0b 00 4b 	adc	r11,r7,r11
8000447e:	f0 1f 01 7b 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004482:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004486:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000448a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000448e:	14 38       	cp.w	r8,r10
80004490:	e0 88 00 09 	brls	800044a2 <main+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004494:	12 38       	cp.w	r8,r9
80004496:	fe 98 ff fa 	brls	8000448a <main+0xca>
8000449a:	12 3a       	cp.w	r10,r9
8000449c:	e0 83 01 bd 	brlo	80004816 <main+0x456>
800044a0:	cf 5b       	rjmp	8000448a <main+0xca>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800044a2:	12 38       	cp.w	r8,r9
800044a4:	e0 8b 01 b9 	brhi	80004816 <main+0x456>
800044a8:	12 3a       	cp.w	r10,r9
800044aa:	e0 83 01 b6 	brlo	80004816 <main+0x456>
800044ae:	ce eb       	rjmp	8000448a <main+0xca>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800044b0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800044b4:	14 38       	cp.w	r8,r10
800044b6:	e0 88 00 09 	brls	800044c8 <main+0x108>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800044ba:	12 38       	cp.w	r8,r9
800044bc:	fe 98 ff fa 	brls	800044b0 <main+0xf0>
800044c0:	12 3a       	cp.w	r10,r9
800044c2:	e0 83 01 c7 	brlo	80004850 <main+0x490>
800044c6:	cf 5b       	rjmp	800044b0 <main+0xf0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800044c8:	12 38       	cp.w	r8,r9
800044ca:	e0 8b 01 c3 	brhi	80004850 <main+0x490>
800044ce:	12 3a       	cp.w	r10,r9
800044d0:	e0 83 01 c0 	brlo	80004850 <main+0x490>
800044d4:	ce eb       	rjmp	800044b0 <main+0xf0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800044d6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800044da:	14 38       	cp.w	r8,r10
800044dc:	e0 88 00 09 	brls	800044ee <main+0x12e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800044e0:	12 38       	cp.w	r8,r9
800044e2:	fe 98 ff fa 	brls	800044d6 <main+0x116>
800044e6:	12 3a       	cp.w	r10,r9
800044e8:	e0 83 02 12 	brlo	8000490c <main+0x54c>
800044ec:	cf 5b       	rjmp	800044d6 <main+0x116>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800044ee:	12 38       	cp.w	r8,r9
800044f0:	e0 8b 02 0e 	brhi	8000490c <main+0x54c>
800044f4:	12 3a       	cp.w	r10,r9
800044f6:	e0 83 02 0b 	brlo	8000490c <main+0x54c>
800044fa:	ce eb       	rjmp	800044d6 <main+0x116>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800044fc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004500:	14 38       	cp.w	r8,r10
80004502:	e0 88 00 09 	brls	80004514 <main+0x154>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004506:	12 38       	cp.w	r8,r9
80004508:	fe 98 ff fa 	brls	800044fc <main+0x13c>
8000450c:	12 3a       	cp.w	r10,r9
8000450e:	e0 83 02 20 	brlo	8000494e <main+0x58e>
80004512:	cf 5b       	rjmp	800044fc <main+0x13c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004514:	12 38       	cp.w	r8,r9
80004516:	e0 8b 02 1c 	brhi	8000494e <main+0x58e>
8000451a:	12 3a       	cp.w	r10,r9
8000451c:	e0 83 02 19 	brlo	8000494e <main+0x58e>
80004520:	ce eb       	rjmp	800044fc <main+0x13c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004522:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004526:	14 38       	cp.w	r8,r10
80004528:	e0 88 00 09 	brls	8000453a <main+0x17a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000452c:	12 38       	cp.w	r8,r9
8000452e:	fe 98 ff fa 	brls	80004522 <main+0x162>
80004532:	12 3a       	cp.w	r10,r9
80004534:	e0 83 02 30 	brlo	80004994 <main+0x5d4>
80004538:	cf 5b       	rjmp	80004522 <main+0x162>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000453a:	12 38       	cp.w	r8,r9
8000453c:	e0 8b 02 2c 	brhi	80004994 <main+0x5d4>
80004540:	12 3a       	cp.w	r10,r9
80004542:	e0 83 02 29 	brlo	80004994 <main+0x5d4>
80004546:	ce eb       	rjmp	80004522 <main+0x162>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004548:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000454c:	14 38       	cp.w	r8,r10
8000454e:	e0 88 00 08 	brls	8000455e <main+0x19e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004552:	12 38       	cp.w	r8,r9
80004554:	fe 98 ff fa 	brls	80004548 <main+0x188>
80004558:	12 3a       	cp.w	r10,r9
8000455a:	c0 73       	brcs	80004568 <main+0x1a8>
8000455c:	cf 6b       	rjmp	80004548 <main+0x188>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000455e:	12 38       	cp.w	r8,r9
80004560:	e0 8b 00 04 	brhi	80004568 <main+0x1a8>
80004564:	12 3a       	cp.w	r10,r9
80004566:	cf 12       	brcc	80004548 <main+0x188>
80004568:	30 07       	mov	r7,0
	ACCL_ZOUT_OFFSET = (float)(ACCL_ZOUT_OFFSET_1000SUM * 0.02);
}
void calibrate_mpu9150 (float* destination){
	float count = 0;
	while(count < 1000){
		update();
8000456a:	fe f6 04 e2 	ld.w	r6,pc[1250]
8000456e:	ec c6 ff 58 	sub	r6,r6,-168
80004572:	0c 9c       	mov	r12,r6
80004574:	f0 1f 01 3e 	mcall	80004a6c <main+0x6ac>
80004578:	2f f7       	sub	r7,-1
	ACCL_YOUT_OFFSET = (float)(ACCL_YOUT_OFFSET_1000SUM * 0.02);
	ACCL_ZOUT_OFFSET = (float)(ACCL_ZOUT_OFFSET_1000SUM * 0.02);
}
void calibrate_mpu9150 (float* destination){
	float count = 0;
	while(count < 1000){
8000457a:	e0 47 03 e8 	cp.w	r7,1000
8000457e:	cf a1       	brne	80004572 <main+0x1b2>
		update();
		count = count + 1;
	}
	destination[0] = roll;
	destination[1] = pitch;
80004580:	fe f6 04 cc 	ld.w	r6,pc[1228]
80004584:	6d ee       	ld.w	lr,r6[0x78]
80004586:	50 1e       	stdsp	sp[0x4],lr
  	mpu9150.initMPU9150(FCPU_HZ);
	mpu9150.initHMC58();
	mpu9150.calibrate_mpu9150(initials);

	int16_t myMagData[3];
	hal.uartB->println("NEE ZAFERINDEN BAHSEDIYORSUUN");
80004588:	fe f7 04 bc 	ld.w	r7,pc[1212]
8000458c:	fe fb 04 e4 	ld.w	r11,pc[1252]
80004590:	6e 2c       	ld.w	r12,r7[0x8]
80004592:	f0 1f 01 39 	mcall	80004a74 <main+0x6b4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004596:	e1 b1 00 42 	mfsr	r1,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000459a:	e2 6b 71 00 	mov	r11,160000
8000459e:	e2 0b 00 0b 	add	r11,r1,r11
800045a2:	50 0b       	stdsp	sp[0x0],r11
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800045a4:	e1 b8 00 42 	mfsr	r8,0x108
	uint8_t c, last_c;
	uint16_t count = 0;
	cpu_set_timeout(cpu_ms_2_cy(10, FOSC0), &timeout_mpu);
	cpu_set_timeout(cpu_ms_2_cy(1000, FOSC0), &timeout);

	hal.uartB->println("VER COSKUYU");
800045a8:	fe fb 04 d0 	ld.w	r11,pc[1232]
800045ac:	6e 2c       	ld.w	r12,r7[0x8]
800045ae:	f0 1f 01 32 	mcall	80004a74 <main+0x6b4>
	c = hal.uartB->read();
800045b2:	6e 2c       	ld.w	r12,r7[0x8]
800045b4:	78 08       	ld.w	r8,r12[0x0]
800045b6:	70 48       	ld.w	r8,r8[0x10]
800045b8:	5d 18       	icall	r8
800045ba:	18 90       	mov	r0,r12
	motor.motors_init();
800045bc:	ec cc ff 56 	sub	r12,r6,-170
800045c0:	f0 1f 01 2f 	mcall	80004a7c <main+0x6bc>
800045c4:	fc 15 42 20 	movh	r5,0x4220
800045c8:	30 04       	mov	r4,0
800045ca:	e0 63 33 33 	mov	r3,13107
800045ce:	ea 13 3f 33 	orh	r3,0x3f33
800045d2:	e0 62 99 9a 	mov	r2,39322
800045d6:	ea 12 40 99 	orh	r2,0x4099
	if (c == '5') {		
// 		
		if(cpu_is_timeout(&timeout_mpu)) {
			
			cpu_stop_timeout(&timeout_mpu);
			mpu9150.update();
800045da:	ec c9 ff 58 	sub	r9,r6,-168
800045de:	50 29       	stdsp	sp[0x8],r9
800045e0:	fc 7e 28 00 	mov	lr,-186368
800045e4:	7c 58       	ld.w	r8,lr[0x14]
	c = hal.uartB->read();
	motor.motors_init();

while(1){	 
	  
	if (usart_test_hit(&AVR32_USART4)) {
800045e6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800045ea:	e0 80 00 fd 	breq	800047e4 <main+0x424>
		hal.uartB->println("I am hit");
800045ee:	fe fb 04 92 	ld.w	r11,pc[1170]
800045f2:	6e 2c       	ld.w	r12,r7[0x8]
800045f4:	f0 1f 01 20 	mcall	80004a74 <main+0x6b4>
		last_c = c;

		c = hal.uartB->read();
800045f8:	6e 2c       	ld.w	r12,r7[0x8]
800045fa:	78 08       	ld.w	r8,r12[0x0]
800045fc:	70 48       	ld.w	r8,r8[0x10]
800045fe:	5d 18       	icall	r8
80004600:	18 96       	mov	r6,r12

		if(c == '9') {
80004602:	33 9b       	mov	r11,57
80004604:	f6 0c 18 00 	cp.b	r12,r11
80004608:	c0 f1       	brne	80004626 <main+0x266>
			motor.kill_motors();
8000460a:	fe fc 04 42 	ld.w	r12,pc[1090]
8000460e:	f8 cc ff 56 	sub	r12,r12,-170
80004612:	f0 1f 01 1d 	mcall	80004a84 <main+0x6c4>
			hal.uartB->println("KIRDIN BENI GOD DAMNIT");
80004616:	fe fb 04 72 	ld.w	r11,pc[1138]
8000461a:	fe f8 04 2a 	ld.w	r8,pc[1066]
8000461e:	70 2c       	ld.w	r12,r8[0x8]
80004620:	f0 1f 01 15 	mcall	80004a74 <main+0x6b4>
80004624:	c0 08       	rjmp	80004624 <main+0x264>
			while(1);
		}
		if (c == '8') {
80004626:	33 89       	mov	r9,56
80004628:	f2 0c 18 00 	cp.b	r12,r9
8000462c:	c1 01       	brne	8000464c <main+0x28c>
			percent += 1;
8000462e:	fc 18 3f 80 	movh	r8,0x3f80
80004632:	e5 a0 05 58 	cop	cp0,cr5,cr5,cr8,0x40
			hal.uartB->print("Percent Increased to: ");
80004636:	fe fb 04 56 	ld.w	r11,pc[1110]
8000463a:	6e 2c       	ld.w	r12,r7[0x8]
8000463c:	f0 1f 01 15 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(percent);
80004640:	30 3a       	mov	r10,3
80004642:	0a 9b       	mov	r11,r5
80004644:	6e 2c       	ld.w	r12,r7[0x8]
80004646:	f0 1f 01 14 	mcall	80004a94 <main+0x6d4>
8000464a:	c3 38       	rjmp	800046b0 <main+0x2f0>
		}
		if (c == '2') {
8000464c:	33 28       	mov	r8,50
8000464e:	f0 0c 18 00 	cp.b	r12,r8
80004652:	c1 01       	brne	80004672 <main+0x2b2>
			percent -= 1;
80004654:	fc 18 3f 80 	movh	r8,0x3f80
80004658:	e5 a1 05 58 	cop	cp0,cr5,cr5,cr8,0x42
			hal.uartB->print("Percent Decreased to: ");
8000465c:	fe fb 04 3c 	ld.w	r11,pc[1084]
80004660:	6e 2c       	ld.w	r12,r7[0x8]
80004662:	f0 1f 01 0c 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(percent);
80004666:	30 3a       	mov	r10,3
80004668:	0a 9b       	mov	r11,r5
8000466a:	6e 2c       	ld.w	r12,r7[0x8]
8000466c:	f0 1f 01 0a 	mcall	80004a94 <main+0x6d4>
80004670:	c3 f8       	rjmp	800046ee <main+0x32e>
		}
		if (c == 'u') {
80004672:	37 58       	mov	r8,117
80004674:	f0 0c 18 00 	cp.b	r12,r8
80004678:	c1 c1       	brne	800046b0 <main+0x2f0>
			kpp = kpp + 0.1;
8000467a:	06 9c       	mov	r12,r3
8000467c:	f0 1f 01 08 	mcall	80004a9c <main+0x6dc>
80004680:	e0 68 99 9a 	mov	r8,39322
80004684:	ea 18 99 99 	orh	r8,0x9999
80004688:	e0 69 99 99 	mov	r9,39321
8000468c:	ea 19 3f b9 	orh	r9,0x3fb9
80004690:	f0 1f 01 04 	mcall	80004aa0 <main+0x6e0>
80004694:	f0 1f 01 04 	mcall	80004aa4 <main+0x6e4>
80004698:	18 93       	mov	r3,r12
			hal.uartB->print("Kpp is: ");
8000469a:	fe fb 04 0e 	ld.w	r11,pc[1038]
8000469e:	6e 2c       	ld.w	r12,r7[0x8]
800046a0:	f0 1f 00 fc 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kpp);
800046a4:	30 3a       	mov	r10,3
800046a6:	06 9b       	mov	r11,r3
800046a8:	6e 2c       	ld.w	r12,r7[0x8]
800046aa:	f0 1f 00 fb 	mcall	80004a94 <main+0x6d4>
800046ae:	c3 f8       	rjmp	8000472c <main+0x36c>
		}
		if (c == 'j') {
800046b0:	36 a8       	mov	r8,106
800046b2:	f0 06 18 00 	cp.b	r6,r8
800046b6:	c1 c1       	brne	800046ee <main+0x32e>
			kpp = kpp - 0.1;
800046b8:	06 9c       	mov	r12,r3
800046ba:	f0 1f 00 f9 	mcall	80004a9c <main+0x6dc>
800046be:	e0 68 99 9a 	mov	r8,39322
800046c2:	ea 18 99 99 	orh	r8,0x9999
800046c6:	e0 69 99 99 	mov	r9,39321
800046ca:	ea 19 3f b9 	orh	r9,0x3fb9
800046ce:	f0 1f 00 f8 	mcall	80004aac <main+0x6ec>
800046d2:	f0 1f 00 f5 	mcall	80004aa4 <main+0x6e4>
800046d6:	18 93       	mov	r3,r12
			hal.uartB->print("Kpp is: ");
800046d8:	fe fb 03 d0 	ld.w	r11,pc[976]
800046dc:	6e 2c       	ld.w	r12,r7[0x8]
800046de:	f0 1f 00 ed 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kpp);
800046e2:	30 3a       	mov	r10,3
800046e4:	06 9b       	mov	r11,r3
800046e6:	6e 2c       	ld.w	r12,r7[0x8]
800046e8:	f0 1f 00 eb 	mcall	80004a94 <main+0x6d4>
800046ec:	c3 f8       	rjmp	8000476a <main+0x3aa>
		}
		if (c == 't') {
800046ee:	37 48       	mov	r8,116
800046f0:	f0 06 18 00 	cp.b	r6,r8
800046f4:	c1 c1       	brne	8000472c <main+0x36c>
			kd = kd + 0.001;
800046f6:	08 9c       	mov	r12,r4
800046f8:	f0 1f 00 e9 	mcall	80004a9c <main+0x6dc>
800046fc:	e0 68 a9 fc 	mov	r8,43516
80004700:	ea 18 d2 f1 	orh	r8,0xd2f1
80004704:	e0 69 62 4d 	mov	r9,25165
80004708:	ea 19 3f 50 	orh	r9,0x3f50
8000470c:	f0 1f 00 e5 	mcall	80004aa0 <main+0x6e0>
80004710:	f0 1f 00 e5 	mcall	80004aa4 <main+0x6e4>
80004714:	18 94       	mov	r4,r12
			hal.uartB->print("Kd is: ");
80004716:	fe fb 03 9a 	ld.w	r11,pc[922]
8000471a:	6e 2c       	ld.w	r12,r7[0x8]
8000471c:	f0 1f 00 dd 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kd);
80004720:	30 3a       	mov	r10,3
80004722:	08 9b       	mov	r11,r4
80004724:	6e 2c       	ld.w	r12,r7[0x8]
80004726:	f0 1f 00 dc 	mcall	80004a94 <main+0x6d4>
8000472a:	c3 f8       	rjmp	800047a8 <main+0x3e8>
		}
		if (c == 'g') {
8000472c:	36 78       	mov	r8,103
8000472e:	f0 06 18 00 	cp.b	r6,r8
80004732:	c1 c1       	brne	8000476a <main+0x3aa>
			kd = kd - 0.001;
80004734:	08 9c       	mov	r12,r4
80004736:	f0 1f 00 da 	mcall	80004a9c <main+0x6dc>
8000473a:	e0 68 a9 fc 	mov	r8,43516
8000473e:	ea 18 d2 f1 	orh	r8,0xd2f1
80004742:	e0 69 62 4d 	mov	r9,25165
80004746:	ea 19 3f 50 	orh	r9,0x3f50
8000474a:	f0 1f 00 d9 	mcall	80004aac <main+0x6ec>
8000474e:	f0 1f 00 d6 	mcall	80004aa4 <main+0x6e4>
80004752:	18 94       	mov	r4,r12
			hal.uartB->print("Kd is: ");
80004754:	fe fb 03 5c 	ld.w	r11,pc[860]
80004758:	6e 2c       	ld.w	r12,r7[0x8]
8000475a:	f0 1f 00 ce 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kd);
8000475e:	30 3a       	mov	r10,3
80004760:	08 9b       	mov	r11,r4
80004762:	6e 2c       	ld.w	r12,r7[0x8]
80004764:	f0 1f 00 cc 	mcall	80004a94 <main+0x6d4>
80004768:	c3 e8       	rjmp	800047e4 <main+0x424>
		}		
		
		if (c == 'y') {
8000476a:	37 98       	mov	r8,121
8000476c:	f0 06 18 00 	cp.b	r6,r8
80004770:	c1 c1       	brne	800047a8 <main+0x3e8>
			kp = kp + 0.1;
80004772:	04 9c       	mov	r12,r2
80004774:	f0 1f 00 ca 	mcall	80004a9c <main+0x6dc>
80004778:	e0 68 99 9a 	mov	r8,39322
8000477c:	ea 18 99 99 	orh	r8,0x9999
80004780:	e0 69 99 99 	mov	r9,39321
80004784:	ea 19 3f b9 	orh	r9,0x3fb9
80004788:	f0 1f 00 c6 	mcall	80004aa0 <main+0x6e0>
8000478c:	f0 1f 00 c6 	mcall	80004aa4 <main+0x6e4>
80004790:	18 92       	mov	r2,r12
			hal.uartB->print("Kp is: ");
80004792:	fe fb 03 22 	ld.w	r11,pc[802]
80004796:	6e 2c       	ld.w	r12,r7[0x8]
80004798:	f0 1f 00 be 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kp);
8000479c:	30 3a       	mov	r10,3
8000479e:	04 9b       	mov	r11,r2
800047a0:	6e 2c       	ld.w	r12,r7[0x8]
800047a2:	f0 1f 00 bd 	mcall	80004a94 <main+0x6d4>
800047a6:	c1 f8       	rjmp	800047e4 <main+0x424>
		}
		if (c == 'h') {
800047a8:	36 88       	mov	r8,104
800047aa:	f0 06 18 00 	cp.b	r6,r8
800047ae:	c1 b1       	brne	800047e4 <main+0x424>
			kp = kp - 0.1;
800047b0:	04 9c       	mov	r12,r2
800047b2:	f0 1f 00 bb 	mcall	80004a9c <main+0x6dc>
800047b6:	e0 68 99 9a 	mov	r8,39322
800047ba:	ea 18 99 99 	orh	r8,0x9999
800047be:	e0 69 99 99 	mov	r9,39321
800047c2:	ea 19 3f b9 	orh	r9,0x3fb9
800047c6:	f0 1f 00 ba 	mcall	80004aac <main+0x6ec>
800047ca:	f0 1f 00 b7 	mcall	80004aa4 <main+0x6e4>
800047ce:	18 92       	mov	r2,r12
			hal.uartB->print("Kp is: ");
800047d0:	fe fb 02 e4 	ld.w	r11,pc[740]
800047d4:	6e 2c       	ld.w	r12,r7[0x8]
800047d6:	f0 1f 00 af 	mcall	80004a90 <main+0x6d0>
			hal.uartB->println(kp);
800047da:	30 3a       	mov	r10,3
800047dc:	04 9b       	mov	r11,r2
800047de:	6e 2c       	ld.w	r12,r7[0x8]
800047e0:	f0 1f 00 ad 	mcall	80004a94 <main+0x6d4>
		}
		c = last_c;
	}

	if (c == '5') {		
800047e4:	33 58       	mov	r8,53
800047e6:	f0 00 18 00 	cp.b	r0,r8
800047ea:	fe 91 fe fb 	brne	800045e0 <main+0x220>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800047ee:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800047f2:	40 0e       	lddsp	lr,sp[0x0]
800047f4:	02 3e       	cp.w	lr,r1
800047f6:	c0 82       	brcc	80004806 <main+0x446>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800047f8:	02 38       	cp.w	r8,r1
800047fa:	fe 92 fe f3 	brhs	800045e0 <main+0x220>
800047fe:	10 3e       	cp.w	lr,r8
80004800:	e0 83 00 ed 	brlo	800049da <main+0x61a>
80004804:	ce ea       	rjmp	800045e0 <main+0x220>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004806:	02 38       	cp.w	r8,r1
80004808:	e0 83 00 e9 	brlo	800049da <main+0x61a>
8000480c:	40 0b       	lddsp	r11,sp[0x0]
8000480e:	10 3b       	cp.w	r11,r8
80004810:	e0 83 00 e5 	brlo	800049da <main+0x61a>
80004814:	ce 6a       	rjmp	800045e0 <main+0x220>
	void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
 {
	 char data_write[2];
	 data_write[0] = subAddress;
	 data_write[1] = data;
	 at42qt1060_write_reg(subAddress, data_write[1]);
80004816:	30 0b       	mov	r11,0
80004818:	36 bc       	mov	r12,107
8000481a:	f0 1f 00 a8 	mcall	80004ab8 <main+0x6f8>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000481e:	fe f8 02 2e 	ld.w	r8,pc[558]
80004822:	f0 f7 00 a4 	ld.w	r7,r8[164]
80004826:	36 48       	mov	r8,100
80004828:	ee 08 06 46 	mulu.d	r6,r7,r8
8000482c:	e0 68 03 e8 	mov	r8,1000
80004830:	30 09       	mov	r9,0
80004832:	e0 6a 03 e7 	mov	r10,999
80004836:	30 0b       	mov	r11,0
80004838:	ec 0a 00 0a 	add	r10,r6,r10
8000483c:	ee 0b 00 4b 	adc	r11,r7,r11
80004840:	f0 1f 00 8a 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004844:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004848:	f0 0a 00 0a 	add	r10,r8,r10
8000484c:	fe 9f fe 32 	bral	800044b0 <main+0xf0>
80004850:	30 1b       	mov	r11,1
80004852:	36 bc       	mov	r12,107
80004854:	f0 1f 00 99 	mcall	80004ab8 <main+0x6f8>
80004858:	30 3b       	mov	r11,3
8000485a:	31 ac       	mov	r12,26
8000485c:	f0 1f 00 97 	mcall	80004ab8 <main+0x6f8>
80004860:	30 4b       	mov	r11,4
80004862:	31 9c       	mov	r12,25
80004864:	f0 1f 00 95 	mcall	80004ab8 <main+0x6f8>
	
 }
char readByte(uint8_t address, uint8_t subAddress)
{
	char data; // `data` will store the register data
	data = at42qt1060_read_reg(subAddress);
80004868:	31 bc       	mov	r12,27
8000486a:	f0 1f 00 95 	mcall	80004abc <main+0x6fc>
8000486e:	18 96       	mov	r6,r12
	void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
 {
	 char data_write[2];
	 data_write[0] = subAddress;
	 data_write[1] = data;
	 at42qt1060_write_reg(subAddress, data_write[1]);
80004870:	f7 dc c0 05 	bfextu	r11,r12,0x0,0x5
80004874:	31 bc       	mov	r12,27
80004876:	f0 1f 00 91 	mcall	80004ab8 <main+0x6f8>
8000487a:	0c 9b       	mov	r11,r6
8000487c:	e2 1b 00 e7 	andl	r11,0xe7,COH
80004880:	31 bc       	mov	r12,27
80004882:	f0 1f 00 8e 	mcall	80004ab8 <main+0x6f8>
80004886:	4f 27       	lddpc	r7,80004a4c <main+0x68c>
80004888:	ef 3b 00 ac 	ld.ub	r11,r7[172]
8000488c:	ed eb 10 3b 	or	r11,r6,r11<<0x3
80004890:	5c 5b       	castu.b	r11
80004892:	31 bc       	mov	r12,27
80004894:	f0 1f 00 89 	mcall	80004ab8 <main+0x6f8>
	
 }
char readByte(uint8_t address, uint8_t subAddress)
{
	char data; // `data` will store the register data
	data = at42qt1060_read_reg(subAddress);
80004898:	31 cc       	mov	r12,28
8000489a:	f0 1f 00 89 	mcall	80004abc <main+0x6fc>
8000489e:	18 96       	mov	r6,r12
	void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
 {
	 char data_write[2];
	 data_write[0] = subAddress;
	 data_write[1] = data;
	 at42qt1060_write_reg(subAddress, data_write[1]);
800048a0:	f7 dc c0 05 	bfextu	r11,r12,0x0,0x5
800048a4:	31 cc       	mov	r12,28
800048a6:	f0 1f 00 85 	mcall	80004ab8 <main+0x6f8>
800048aa:	0c 9b       	mov	r11,r6
800048ac:	e2 1b 00 e7 	andl	r11,0xe7,COH
800048b0:	31 cc       	mov	r12,28
800048b2:	f0 1f 00 82 	mcall	80004ab8 <main+0x6f8>
800048b6:	ef 3b 00 ad 	ld.ub	r11,r7[173]
800048ba:	ed eb 10 3b 	or	r11,r6,r11<<0x3
800048be:	5c 5b       	castu.b	r11
800048c0:	31 cc       	mov	r12,28
800048c2:	f0 1f 00 7e 	mcall	80004ab8 <main+0x6f8>
800048c6:	32 2b       	mov	r11,34
800048c8:	33 7c       	mov	r12,55
800048ca:	f0 1f 00 7c 	mcall	80004ab8 <main+0x6f8>
800048ce:	30 1b       	mov	r11,1
800048d0:	33 8c       	mov	r12,56
800048d2:	f0 1f 00 7a 	mcall	80004ab8 <main+0x6f8>
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
}

void initHMC58()
{
	mag_write_reg(0x01,0x20); // SetMagGain
800048d6:	32 0b       	mov	r11,32
800048d8:	30 1c       	mov	r12,1
800048da:	f0 1f 00 7a 	mcall	80004ac0 <main+0x700>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800048de:	ee f7 00 a4 	ld.w	r7,r7[164]
800048e2:	30 a8       	mov	r8,10
800048e4:	ee 08 06 46 	mulu.d	r6,r7,r8
800048e8:	e0 68 03 e8 	mov	r8,1000
800048ec:	30 09       	mov	r9,0
800048ee:	e0 6a 03 e7 	mov	r10,999
800048f2:	30 0b       	mov	r11,0
800048f4:	ec 0a 00 0a 	add	r10,r6,r10
800048f8:	ee 0b 00 4b 	adc	r11,r7,r11
800048fc:	f0 1f 00 5b 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004900:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004904:	f0 0a 00 0a 	add	r10,r8,r10
80004908:	fe 9f fd e7 	bral	800044d6 <main+0x116>
	cpu_delay_ms(10,cpu_hz);
	uint8_t value;
	
	value = mag_read_reg(0x02);
8000490c:	30 2c       	mov	r12,2
8000490e:	f0 1f 00 6e 	mcall	80004ac4 <main+0x704>
	value &= 0b11111100;
	value |= 0x00;
	mag_write_reg(0x02, value); // Continous Mode
80004912:	18 9b       	mov	r11,r12
80004914:	e2 1b 00 fc 	andl	r11,0xfc,COH
80004918:	30 2c       	mov	r12,2
8000491a:	f0 1f 00 6a 	mcall	80004ac0 <main+0x700>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000491e:	4c c8       	lddpc	r8,80004a4c <main+0x68c>
80004920:	f0 f7 00 a4 	ld.w	r7,r8[164]
80004924:	30 a8       	mov	r8,10
80004926:	ee 08 06 46 	mulu.d	r6,r7,r8
8000492a:	e0 68 03 e8 	mov	r8,1000
8000492e:	30 09       	mov	r9,0
80004930:	e0 6a 03 e7 	mov	r10,999
80004934:	30 0b       	mov	r11,0
80004936:	ec 0a 00 0a 	add	r10,r6,r10
8000493a:	ee 0b 00 4b 	adc	r11,r7,r11
8000493e:	f0 1f 00 4b 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004942:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004946:	f0 0a 00 0a 	add	r10,r8,r10
8000494a:	fe 9f fd d9 	bral	800044fc <main+0x13c>
	cpu_delay_ms(10,cpu_hz);
	
	value = mag_read_reg(0x00);
8000494e:	30 0c       	mov	r12,0
80004950:	f0 1f 00 5d 	mcall	80004ac4 <main+0x704>
	value &= 0b11100011;
80004954:	18 9b       	mov	r11,r12
80004956:	e2 1b 00 e3 	andl	r11,0xe3,COH
	value |= 0b00010100;
	mag_write_reg(0x00, value); // Data rate is 0b101
8000495a:	e8 1b 00 14 	orl	r11,0x14
8000495e:	30 0c       	mov	r12,0
80004960:	f0 1f 00 58 	mcall	80004ac0 <main+0x700>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004964:	4b a8       	lddpc	r8,80004a4c <main+0x68c>
80004966:	f0 f7 00 a4 	ld.w	r7,r8[164]
8000496a:	30 a8       	mov	r8,10
8000496c:	ee 08 06 46 	mulu.d	r6,r7,r8
80004970:	e0 68 03 e8 	mov	r8,1000
80004974:	30 09       	mov	r9,0
80004976:	e0 6a 03 e7 	mov	r10,999
8000497a:	30 0b       	mov	r11,0
8000497c:	ec 0a 00 0a 	add	r10,r6,r10
80004980:	ee 0b 00 4b 	adc	r11,r7,r11
80004984:	f0 1f 00 39 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004988:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000498c:	f0 0a 00 0a 	add	r10,r8,r10
80004990:	fe 9f fd c9 	bral	80004522 <main+0x162>
	cpu_delay_ms(10,cpu_hz);
	
	value = mag_read_reg(0x00);
80004994:	30 0c       	mov	r12,0
80004996:	f0 1f 00 4c 	mcall	80004ac4 <main+0x704>
	value &= 0b10011111;
8000499a:	18 9b       	mov	r11,r12
8000499c:	e2 1b 00 9f 	andl	r11,0x9f,COH
	value |= 0b01100000;
	mag_write_reg(0x00, value); // Sample rate is 8
800049a0:	e8 1b 00 60 	orl	r11,0x60
800049a4:	30 0c       	mov	r12,0
800049a6:	f0 1f 00 47 	mcall	80004ac0 <main+0x700>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800049aa:	4a 98       	lddpc	r8,80004a4c <main+0x68c>
800049ac:	f0 f7 00 a4 	ld.w	r7,r8[164]
800049b0:	30 a8       	mov	r8,10
800049b2:	ee 08 06 46 	mulu.d	r6,r7,r8
800049b6:	e0 68 03 e8 	mov	r8,1000
800049ba:	30 09       	mov	r9,0
800049bc:	e0 6a 03 e7 	mov	r10,999
800049c0:	30 0b       	mov	r11,0
800049c2:	ec 0a 00 0a 	add	r10,r6,r10
800049c6:	ee 0b 00 4b 	adc	r11,r7,r11
800049ca:	f0 1f 00 28 	mcall	80004a68 <main+0x6a8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800049ce:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800049d2:	f0 0a 00 0a 	add	r10,r8,r10
800049d6:	fe 9f fd b9 	bral	80004548 <main+0x188>
// 		
		if(cpu_is_timeout(&timeout_mpu)) {
			
			cpu_stop_timeout(&timeout_mpu);
			mpu9150.update();
800049da:	40 2c       	lddsp	r12,sp[0x8]
800049dc:	f0 1f 00 24 	mcall	80004a6c <main+0x6ac>
			PID_Pitch = Pitch_Controller(pitch,initials[1],kp,kpp,0,kd,0.01f);
800049e0:	e0 69 d7 0a 	mov	r9,55050
800049e4:	ea 19 3c 23 	orh	r9,0x3c23
800049e8:	1a d9       	st.w	--sp,r9
800049ea:	1a d4       	st.w	--sp,r4
800049ec:	30 08       	mov	r8,0
800049ee:	06 99       	mov	r9,r3
800049f0:	04 9a       	mov	r10,r2
800049f2:	40 3b       	lddsp	r11,sp[0xc]
800049f4:	49 6e       	lddpc	lr,80004a4c <main+0x68c>
800049f6:	7d ec       	ld.w	r12,lr[0x78]
800049f8:	f0 1f 00 34 	mcall	80004ac8 <main+0x708>
800049fc:	18 9a       	mov	r10,r12
800049fe:	49 4b       	lddpc	r11,80004a4c <main+0x68c>
80004a00:	f7 4c 00 b0 	st.w	r11[176],r12
			motor.motor1_update(percent,PID_Pitch,0,0);
80004a04:	e5 ab 01 05 	cop	cp0,cr1,cr0,cr5,0x56
80004a08:	2f ed       	sub	sp,-8
80004a0a:	f6 c6 ff 56 	sub	r6,r11,-170
80004a0e:	30 08       	mov	r8,0
80004a10:	10 99       	mov	r9,r8
80004a12:	02 9b       	mov	r11,r1
80004a14:	0c 9c       	mov	r12,r6
80004a16:	f0 1f 00 2e 	mcall	80004acc <main+0x70c>
			motor.motor3_update(percent,PID_Pitch,0,0);
80004a1a:	30 08       	mov	r8,0
80004a1c:	10 99       	mov	r9,r8
80004a1e:	48 ce       	lddpc	lr,80004a4c <main+0x68c>
80004a20:	fc fa 00 b0 	ld.w	r10,lr[176]
80004a24:	02 9b       	mov	r11,r1
80004a26:	0c 9c       	mov	r12,r6
80004a28:	f0 1f 00 2a 	mcall	80004ad0 <main+0x710>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004a2c:	e1 b1 00 42 	mfsr	r1,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004a30:	e2 6b 71 00 	mov	r11,160000
80004a34:	e2 0b 00 0b 	add	r11,r1,r11
80004a38:	50 0b       	stdsp	sp[0x0],r11
80004a3a:	fe 9f fd d3 	bral	800045e0 <main+0x220>
80004a3e:	00 00       	add	r0,r0
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	17 8c       	ld.ub	r12,r11[0x0]
80004a44:	00 00       	add	r0,r0
80004a46:	08 fc       	st.b	--r4,r12
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	17 58       	ld.sh	r8,--r11
80004a4c:	00 00       	add	r0,r0
80004a4e:	09 48       	ld.w	r8,--r4
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	0a c8       	st.b	r5++,r8
80004a54:	80 00       	ld.sh	r0,r0[0x0]
80004a56:	1a 70       	tst	r0,sp
80004a58:	80 00       	ld.sh	r0,r0[0x0]
80004a5a:	3c 8c       	mov	r12,-56
80004a5c:	80 00       	ld.sh	r0,r0[0x0]
80004a5e:	18 8c       	andn	r12,r12
80004a60:	80 00       	ld.sh	r0,r0[0x0]
80004a62:	3d 10       	mov	r0,-47
80004a64:	80 00       	ld.sh	r0,r0[0x0]
80004a66:	14 6c       	and	r12,r10
80004a68:	80 00       	ld.sh	r0,r0[0x0]
80004a6a:	ad 12       	ld.d	r2,--r6
80004a6c:	80 00       	ld.sh	r0,r0[0x0]
80004a6e:	3d 20       	mov	r0,-46
80004a70:	80 01       	ld.sh	r1,r0[0x0]
80004a72:	10 e0       	st.h	--r8,r0
80004a74:	80 00       	ld.sh	r0,r0[0x0]
80004a76:	20 94       	sub	r4,9
80004a78:	80 01       	ld.sh	r1,r0[0x0]
80004a7a:	11 00       	ld.w	r0,r8++
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	3a 94       	mov	r4,-87
80004a80:	80 01       	ld.sh	r1,r0[0x0]
80004a82:	11 0c       	ld.w	r12,r8++
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	39 44       	mov	r4,-108
80004a88:	80 01       	ld.sh	r1,r0[0x0]
80004a8a:	11 18       	ld.sh	r8,r8++
80004a8c:	80 01       	ld.sh	r1,r0[0x0]
80004a8e:	11 30       	ld.ub	r0,r8++
80004a90:	80 00       	ld.sh	r0,r0[0x0]
80004a92:	1f 70       	ld.ub	r0,--pc
80004a94:	80 00       	ld.sh	r0,r0[0x0]
80004a96:	20 74       	sub	r4,7
80004a98:	80 01       	ld.sh	r1,r0[0x0]
80004a9a:	11 48       	ld.w	r8,--r8
80004a9c:	80 00       	ld.sh	r0,r0[0x0]
80004a9e:	a9 74       	lsl	r4,0x9
80004aa0:	80 00       	ld.sh	r0,r0[0x0]
80004aa2:	a1 e4       	*unknown*
80004aa4:	80 00       	ld.sh	r0,r0[0x0]
80004aa6:	a9 d4       	cbr	r4,0x9
80004aa8:	80 01       	ld.sh	r1,r0[0x0]
80004aaa:	11 60       	ld.uh	r0,--r8
80004aac:	80 00       	ld.sh	r0,r0[0x0]
80004aae:	a0 48       	st.h	r0[0x8],r8
80004ab0:	80 01       	ld.sh	r1,r0[0x0]
80004ab2:	11 6c       	ld.uh	r12,--r8
80004ab4:	80 01       	ld.sh	r1,r0[0x0]
80004ab6:	11 74       	ld.ub	r4,--r8
80004ab8:	80 00       	ld.sh	r0,r0[0x0]
80004aba:	02 b8       	st.h	r1++,r8
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	01 c4       	ld.ub	r4,r0[0x4]
80004ac0:	80 00       	ld.sh	r0,r0[0x0]
80004ac2:	02 7c       	tst	r12,r1
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	01 0c       	ld.w	r12,r0++
80004ac8:	80 00       	ld.sh	r0,r0[0x0]
80004aca:	3c a0       	mov	r0,-54
80004acc:	80 00       	ld.sh	r0,r0[0x0]
80004ace:	39 a4       	mov	r4,-102
80004ad0:	80 00       	ld.sh	r0,r0[0x0]
80004ad2:	38 54       	mov	r4,-123

80004ad4 <_ZdlPv>:
80004ad4:	d4 01       	pushm	lr
80004ad6:	58 0c       	cp.w	r12,0
80004ad8:	c0 30       	breq	80004ade <_ZdlPv+0xa>
80004ada:	f0 1f 00 02 	mcall	80004ae0 <_ZdlPv+0xc>
80004ade:	d8 02       	popm	pc
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	b6 fc       	st.b	r11[0x7],r12

80004ae4 <_Znwm>:
80004ae4:	eb cd 40 81 	pushm	r0,r7,lr
80004ae8:	20 fd       	sub	sp,60
80004aea:	fa c9 ff c4 	sub	r9,sp,-60
80004aee:	fa c8 ff d8 	sub	r8,sp,-40
80004af2:	91 09       	st.w	r8[0x0],r9
80004af4:	91 2d       	st.w	r8[0x8],sp
80004af6:	4a 19       	lddpc	r9,80004b78 <_Znwm+0x94>
80004af8:	50 89       	stdsp	sp[0x20],r9
80004afa:	4a 19       	lddpc	r9,80004b7c <_Znwm+0x98>
80004afc:	50 99       	stdsp	sp[0x24],r9
80004afe:	4a 19       	lddpc	r9,80004b80 <_Znwm+0x9c>
80004b00:	50 1c       	stdsp	sp[0x4],r12
80004b02:	91 19       	st.w	r8[0x4],r9
80004b04:	fa cc ff f8 	sub	r12,sp,-8
80004b08:	f0 1f 00 1f 	mcall	80004b84 <_Znwm+0xa0>
80004b0c:	40 18       	lddsp	r8,sp[0x4]
80004b0e:	58 08       	cp.w	r8,0
80004b10:	f9 b8 00 01 	moveq	r8,1
80004b14:	50 18       	stdsp	sp[0x4],r8
80004b16:	10 9c       	mov	r12,r8
80004b18:	f0 1f 00 1c 	mcall	80004b88 <_Znwm+0xa4>
80004b1c:	50 0c       	stdsp	sp[0x0],r12
80004b1e:	c0 d1       	brne	80004b38 <_Znwm+0x54>
80004b20:	49 b9       	lddpc	r9,80004b8c <_Znwm+0xa8>
80004b22:	72 08       	ld.w	r8,r9[0x0]
80004b24:	58 08       	cp.w	r8,0
80004b26:	c1 10       	breq	80004b48 <_Znwm+0x64>
80004b28:	30 19       	mov	r9,1
80004b2a:	50 39       	stdsp	sp[0xc],r9
80004b2c:	5d 18       	icall	r8
80004b2e:	40 1c       	lddsp	r12,sp[0x4]
80004b30:	f0 1f 00 16 	mcall	80004b88 <_Znwm+0xa4>
80004b34:	50 0c       	stdsp	sp[0x0],r12
80004b36:	cf 50       	breq	80004b20 <_Znwm+0x3c>
80004b38:	fa cc ff f8 	sub	r12,sp,-8
80004b3c:	f0 1f 00 15 	mcall	80004b90 <_Znwm+0xac>
80004b40:	40 0c       	lddsp	r12,sp[0x0]
80004b42:	2f 1d       	sub	sp,-60
80004b44:	e3 cd 80 81 	ldm	sp++,r0,r7,pc
80004b48:	30 4c       	mov	r12,4
80004b4a:	f0 1f 00 13 	mcall	80004b94 <_Znwm+0xb0>
80004b4e:	49 38       	lddpc	r8,80004b98 <_Znwm+0xb4>
80004b50:	2f 88       	sub	r8,-8
80004b52:	99 08       	st.w	r12[0x0],r8
80004b54:	30 18       	mov	r8,1
80004b56:	49 2a       	lddpc	r10,80004b9c <_Znwm+0xb8>
80004b58:	50 38       	stdsp	sp[0xc],r8
80004b5a:	49 2b       	lddpc	r11,80004ba0 <_Znwm+0xbc>
80004b5c:	f0 1f 00 12 	mcall	80004ba4 <_Znwm+0xc0>
80004b60:	40 4c       	lddsp	r12,sp[0x10]
80004b62:	40 58       	lddsp	r8,sp[0x14]
80004b64:	5b f8       	cp.w	r8,-1
80004b66:	c0 50       	breq	80004b70 <_Znwm+0x8c>
80004b68:	3f f8       	mov	r8,-1
80004b6a:	50 38       	stdsp	sp[0xc],r8
80004b6c:	f0 1f 00 0f 	mcall	80004ba8 <_Znwm+0xc4>
80004b70:	50 38       	stdsp	sp[0xc],r8
80004b72:	f0 1f 00 0f 	mcall	80004bac <_Znwm+0xc8>
80004b76:	00 00       	add	r0,r0
80004b78:	80 00       	ld.sh	r0,r0[0x0]
80004b7a:	54 c4       	stdsp	sp[0x130],r4
80004b7c:	00 00       	add	r0,r0
80004b7e:	00 0c       	add	r12,r0
80004b80:	80 00       	ld.sh	r0,r0[0x0]
80004b82:	4b 60       	lddpc	r0,80004c58 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x2>
80004b84:	80 00       	ld.sh	r0,r0[0x0]
80004b86:	af 78       	lsl	r8,0xf
80004b88:	80 00       	ld.sh	r0,r0[0x0]
80004b8a:	b7 14       	ld.d	r4,--r11
80004b8c:	00 00       	add	r0,r0
80004b8e:	0b 38       	ld.ub	r8,r5++
80004b90:	80 00       	ld.sh	r0,r0[0x0]
80004b92:	af 88       	lsr	r8,0xe
80004b94:	80 00       	ld.sh	r0,r0[0x0]
80004b96:	4d 5c       	lddpc	r12,80004ce8 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>
80004b98:	80 01       	ld.sh	r1,r0[0x0]
80004b9a:	11 7c       	ld.ub	r12,--r8
80004b9c:	80 00       	ld.sh	r0,r0[0x0]
80004b9e:	4b b8       	lddpc	r8,80004c88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
80004ba0:	80 01       	ld.sh	r1,r0[0x0]
80004ba2:	11 a0       	ld.ub	r0,r8[0x2]
80004ba4:	80 00       	ld.sh	r0,r0[0x0]
80004ba6:	4f bc       	lddpc	r12,80004d90 <__cxa_allocate_exception+0x34>
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	b1 48       	asr	r8,0x10
80004bac:	80 00       	ld.sh	r0,r0[0x0]
80004bae:	53 84       	stdsp	sp[0xe0],r4

80004bb0 <_ZNKSt9bad_alloc4whatEv>:
80004bb0:	48 1c       	lddpc	r12,80004bb4 <_ZNKSt9bad_alloc4whatEv+0x4>
80004bb2:	5e fc       	retal	r12
80004bb4:	80 01       	ld.sh	r1,r0[0x0]
80004bb6:	11 ac       	ld.ub	r12,r8[0x2]

80004bb8 <_ZNSt9bad_allocD1Ev>:
80004bb8:	d4 01       	pushm	lr
80004bba:	48 48       	lddpc	r8,80004bc8 <_ZNSt9bad_allocD1Ev+0x10>
80004bbc:	2f 88       	sub	r8,-8
80004bbe:	99 08       	st.w	r12[0x0],r8
80004bc0:	f0 1f 00 03 	mcall	80004bcc <_ZNSt9bad_allocD1Ev+0x14>
80004bc4:	d8 02       	popm	pc
80004bc6:	00 00       	add	r0,r0
80004bc8:	80 01       	ld.sh	r1,r0[0x0]
80004bca:	11 7c       	ld.ub	r12,--r8
80004bcc:	80 00       	ld.sh	r0,r0[0x0]
80004bce:	58 d0       	cp.w	r0,13

80004bd0 <_ZNSt9bad_allocD0Ev>:
80004bd0:	eb cd 40 80 	pushm	r7,lr
80004bd4:	48 68       	lddpc	r8,80004bec <_ZNSt9bad_allocD0Ev+0x1c>
80004bd6:	2f 88       	sub	r8,-8
80004bd8:	18 97       	mov	r7,r12
80004bda:	99 08       	st.w	r12[0x0],r8
80004bdc:	f0 1f 00 05 	mcall	80004bf0 <_ZNSt9bad_allocD0Ev+0x20>
80004be0:	0e 9c       	mov	r12,r7
80004be2:	f0 1f 00 05 	mcall	80004bf4 <_ZNSt9bad_allocD0Ev+0x24>
80004be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bea:	00 00       	add	r0,r0
80004bec:	80 01       	ld.sh	r1,r0[0x0]
80004bee:	11 7c       	ld.ub	r12,--r8
80004bf0:	80 00       	ld.sh	r0,r0[0x0]
80004bf2:	58 d0       	cp.w	r0,13
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	4a d4       	lddpc	r4,80004ca8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>

80004bf8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
80004bf8:	d4 01       	pushm	lr
80004bfa:	16 98       	mov	r8,r11
80004bfc:	78 1e       	ld.w	lr,r12[0x4]
80004bfe:	76 1b       	ld.w	r11,r11[0x4]
80004c00:	16 3e       	cp.w	lr,r11
80004c02:	c0 b0       	breq	80004c18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x20>
80004c04:	58 39       	cp.w	r9,3
80004c06:	e0 88 00 03 	brls	80004c0c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
80004c0a:	d8 0a       	popm	pc,r12=0
80004c0c:	18 9b       	mov	r11,r12
80004c0e:	10 9c       	mov	r12,r8
80004c10:	70 08       	ld.w	r8,r8[0x0]
80004c12:	70 58       	ld.w	r8,r8[0x14]
80004c14:	5d 18       	icall	r8
80004c16:	d8 02       	popm	pc
80004c18:	da 0a       	popm	pc,r12=1

80004c1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
80004c1a:	eb cd 40 c0 	pushm	r6-r7,lr
80004c1e:	20 4d       	sub	sp,16
80004c20:	31 09       	mov	r9,16
80004c22:	30 07       	mov	r7,0
80004c24:	14 96       	mov	r6,r10
80004c26:	50 07       	stdsp	sp[0x0],r7
80004c28:	50 29       	stdsp	sp[0x8],r9
80004c2a:	50 17       	stdsp	sp[0x4],r7
80004c2c:	50 37       	stdsp	sp[0xc],r7
80004c2e:	78 08       	ld.w	r8,r12[0x0]
80004c30:	1a 99       	mov	r9,sp
80004c32:	70 68       	ld.w	r8,r8[0x18]
80004c34:	74 0a       	ld.w	r10,r10[0x0]
80004c36:	5d 18       	icall	r8
80004c38:	40 18       	lddsp	r8,sp[0x4]
80004c3a:	e2 18 00 06 	andl	r8,0x6,COH
80004c3e:	58 68       	cp.w	r8,6
80004c40:	ee 0c 17 10 	movne	r12,r7
80004c44:	fb f8 00 00 	ld.weq	r8,sp[0x0]
80004c48:	ed f8 0a 00 	st.weq	r6[0x0],r8
80004c4c:	f9 bc 00 01 	moveq	r12,1
80004c50:	2f cd       	sub	sp,-16
80004c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80004c56 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
80004c56:	14 38       	cp.w	r8,r10
80004c58:	f9 bc 00 06 	moveq	r12,6
80004c5c:	f9 bc 01 01 	movne	r12,1
80004c60:	5e fc       	retal	r12

80004c62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
80004c62:	eb cd 40 90 	pushm	r4,r7,lr
80004c66:	fa c4 ff f4 	sub	r4,sp,-12
80004c6a:	68 2e       	ld.w	lr,r4[0x8]
80004c6c:	68 07       	ld.w	r7,r4[0x0]
80004c6e:	68 1b       	ld.w	r11,r4[0x4]
80004c70:	16 38       	cp.w	r8,r11
80004c72:	c0 70       	breq	80004c80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
80004c74:	78 1b       	ld.w	r11,r12[0x4]
80004c76:	72 19       	ld.w	r9,r9[0x4]
80004c78:	12 3b       	cp.w	r11,r9
80004c7a:	c0 90       	breq	80004c8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
80004c7c:	e3 cf 80 90 	ldm	sp++,r4,r7,pc,r12=0
80004c80:	78 1b       	ld.w	r11,r12[0x4]
80004c82:	6e 1c       	ld.w	r12,r7[0x4]
80004c84:	18 3b       	cp.w	r11,r12
80004c86:	cf 81       	brne	80004c76 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
80004c88:	9d 2a       	st.w	lr[0x8],r10
80004c8a:	cf 9b       	rjmp	80004c7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1a>
80004c8c:	9d 08       	st.w	lr[0x0],r8
80004c8e:	9d 1a       	st.w	lr[0x4],r10
80004c90:	30 18       	mov	r8,1
80004c92:	30 0c       	mov	r12,0
80004c94:	9d 38       	st.w	lr[0xc],r8
80004c96:	e3 cd 80 90 	ldm	sp++,r4,r7,pc

80004c9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
80004c9a:	78 18       	ld.w	r8,r12[0x4]
80004c9c:	76 1b       	ld.w	r11,r11[0x4]
80004c9e:	16 38       	cp.w	r8,r11
80004ca0:	f9 bc 01 00 	movne	r12,0
80004ca4:	f3 fa 0a 00 	st.weq	r9[0x0],r10
80004ca8:	f9 b8 00 08 	moveq	r8,8
80004cac:	f3 f8 0a 03 	st.weq	r9[0xc],r8
80004cb0:	f9 b8 00 06 	moveq	r8,6
80004cb4:	f3 f8 0a 01 	st.weq	r9[0x4],r8
80004cb8:	f9 bc 00 01 	moveq	r12,1
80004cbc:	5e fc       	retal	r12
80004cbe:	d7 03       	nop

80004cc0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
80004cc0:	d4 01       	pushm	lr
80004cc2:	48 48       	lddpc	r8,80004cd0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>
80004cc4:	2f 88       	sub	r8,-8
80004cc6:	99 08       	st.w	r12[0x0],r8
80004cc8:	f0 1f 00 03 	mcall	80004cd4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x14>
80004ccc:	d8 02       	popm	pc
80004cce:	00 00       	add	r0,r0
80004cd0:	80 01       	ld.sh	r1,r0[0x0]
80004cd2:	11 bc       	ld.ub	r12,r8[0x3]
80004cd4:	80 00       	ld.sh	r0,r0[0x0]
80004cd6:	5b a0       	cp.w	r0,-6

80004cd8 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
80004cd8:	d4 01       	pushm	lr
80004cda:	48 48       	lddpc	r8,80004ce8 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>
80004cdc:	2f 88       	sub	r8,-8
80004cde:	99 08       	st.w	r12[0x0],r8
80004ce0:	f0 1f 00 03 	mcall	80004cec <_ZN10__cxxabiv117__class_type_infoD2Ev+0x14>
80004ce4:	d8 02       	popm	pc
80004ce6:	00 00       	add	r0,r0
80004ce8:	80 01       	ld.sh	r1,r0[0x0]
80004cea:	11 bc       	ld.ub	r12,r8[0x3]
80004cec:	80 00       	ld.sh	r0,r0[0x0]
80004cee:	5b a0       	cp.w	r0,-6

80004cf0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
80004cf0:	eb cd 40 80 	pushm	r7,lr
80004cf4:	48 68       	lddpc	r8,80004d0c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x1c>
80004cf6:	2f 88       	sub	r8,-8
80004cf8:	18 97       	mov	r7,r12
80004cfa:	99 08       	st.w	r12[0x0],r8
80004cfc:	f0 1f 00 05 	mcall	80004d10 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x20>
80004d00:	0e 9c       	mov	r12,r7
80004d02:	f0 1f 00 05 	mcall	80004d14 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x24>
80004d06:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d0a:	00 00       	add	r0,r0
80004d0c:	80 01       	ld.sh	r1,r0[0x0]
80004d0e:	11 bc       	ld.ub	r12,r8[0x3]
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	5b a0       	cp.w	r0,-6
80004d14:	80 00       	ld.sh	r0,r0[0x0]
80004d16:	4a d4       	lddpc	r4,80004dc8 <__cxa_allocate_exception+0x6c>

80004d18 <_GLOBAL__I___cxa_allocate_exception>:
80004d18:	5e fc       	retal	r12
80004d1a:	d7 03       	nop

80004d1c <__cxa_free_exception>:
80004d1c:	d4 01       	pushm	lr
80004d1e:	48 d8       	lddpc	r8,80004d50 <__cxa_free_exception+0x34>
80004d20:	18 38       	cp.w	r8,r12
80004d22:	e0 8b 00 06 	brhi	80004d2e <__cxa_free_exception+0x12>
80004d26:	f0 c9 f8 00 	sub	r9,r8,-2048
80004d2a:	12 3c       	cp.w	r12,r9
80004d2c:	c0 53       	brcs	80004d36 <__cxa_free_exception+0x1a>
80004d2e:	24 4c       	sub	r12,68
80004d30:	f0 1f 00 09 	mcall	80004d54 <__cxa_free_exception+0x38>
80004d34:	d8 02       	popm	pc
80004d36:	f8 08 01 08 	sub	r8,r12,r8
80004d3a:	48 89       	lddpc	r9,80004d58 <__cxa_free_exception+0x3c>
80004d3c:	a9 98       	lsr	r8,0x9
80004d3e:	72 0a       	ld.w	r10,r9[0x0]
80004d40:	30 1c       	mov	r12,1
80004d42:	f8 08 09 48 	lsl	r8,r12,r8
80004d46:	5c d8       	com	r8
80004d48:	14 68       	and	r8,r10
80004d4a:	93 08       	st.w	r9[0x0],r8
80004d4c:	d8 02       	popm	pc
80004d4e:	00 00       	add	r0,r0
80004d50:	00 00       	add	r0,r0
80004d52:	0b 40       	ld.w	r0,--r5
80004d54:	80 00       	ld.sh	r0,r0[0x0]
80004d56:	b6 fc       	st.b	r11[0x7],r12
80004d58:	00 00       	add	r0,r0
80004d5a:	0b 3c       	ld.ub	r12,r5++

80004d5c <__cxa_allocate_exception>:
80004d5c:	eb cd 40 81 	pushm	r0,r7,lr
80004d60:	21 1d       	sub	sp,68
80004d62:	fa c9 ff bc 	sub	r9,sp,-68
80004d66:	fa c8 ff d0 	sub	r8,sp,-48
80004d6a:	91 09       	st.w	r8[0x0],r9
80004d6c:	91 2d       	st.w	r8[0x8],sp
80004d6e:	4b 19       	lddpc	r9,80004e30 <__cxa_allocate_exception+0xd4>
80004d70:	50 a9       	stdsp	sp[0x28],r9
80004d72:	4b 19       	lddpc	r9,80004e34 <__cxa_allocate_exception+0xd8>
80004d74:	50 b9       	stdsp	sp[0x2c],r9
80004d76:	4b 19       	lddpc	r9,80004e38 <__cxa_allocate_exception+0xdc>
80004d78:	50 2c       	stdsp	sp[0x8],r12
80004d7a:	91 19       	st.w	r8[0x4],r9
80004d7c:	fa cc ff f0 	sub	r12,sp,-16
80004d80:	f0 1f 00 2f 	mcall	80004e3c <__cxa_allocate_exception+0xe0>
80004d84:	40 28       	lddsp	r8,sp[0x8]
80004d86:	2b c8       	sub	r8,-68
80004d88:	50 18       	stdsp	sp[0x4],r8
80004d8a:	10 9c       	mov	r12,r8
80004d8c:	f0 1f 00 2d 	mcall	80004e40 <__cxa_allocate_exception+0xe4>
80004d90:	50 0c       	stdsp	sp[0x0],r12
80004d92:	c1 60       	breq	80004dbe <__cxa_allocate_exception+0x62>
80004d94:	f0 1f 00 2c 	mcall	80004e44 <__cxa_allocate_exception+0xe8>
80004d98:	78 18       	ld.w	r8,r12[0x4]
80004d9a:	2f f8       	sub	r8,-1
80004d9c:	34 4a       	mov	r10,68
80004d9e:	99 18       	st.w	r12[0x4],r8
80004da0:	30 0b       	mov	r11,0
80004da2:	40 0c       	lddsp	r12,sp[0x0]
80004da4:	f0 1f 00 29 	mcall	80004e48 <__cxa_allocate_exception+0xec>
80004da8:	40 08       	lddsp	r8,sp[0x0]
80004daa:	2b c8       	sub	r8,-68
80004dac:	fa cc ff f0 	sub	r12,sp,-16
80004db0:	50 38       	stdsp	sp[0xc],r8
80004db2:	f0 1f 00 27 	mcall	80004e4c <__cxa_allocate_exception+0xf0>
80004db6:	40 3c       	lddsp	r12,sp[0xc]
80004db8:	2e fd       	sub	sp,-68
80004dba:	e3 cd 80 81 	ldm	sp++,r0,r7,pc
80004dbe:	4a 58       	lddpc	r8,80004e50 <__cxa_allocate_exception+0xf4>
80004dc0:	40 19       	lddsp	r9,sp[0x4]
80004dc2:	70 08       	ld.w	r8,r8[0x0]
80004dc4:	e0 49 02 00 	cp.w	r9,512
80004dc8:	e0 88 00 06 	brls	80004dd4 <__cxa_allocate_exception+0x78>
80004dcc:	30 18       	mov	r8,1
80004dce:	50 58       	stdsp	sp[0x14],r8
80004dd0:	f0 1f 00 21 	mcall	80004e54 <__cxa_allocate_exception+0xf8>
80004dd4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80004dd8:	c0 f0       	breq	80004df6 <__cxa_allocate_exception+0x9a>
80004dda:	ed b8 00 01 	bld	r8,0x1
80004dde:	c1 71       	brne	80004e0c <__cxa_allocate_exception+0xb0>
80004de0:	f0 09 16 02 	lsr	r9,r8,0x2
80004de4:	ed b9 00 00 	bld	r9,0x0
80004de8:	c1 51       	brne	80004e12 <__cxa_allocate_exception+0xb6>
80004dea:	ed b9 00 01 	bld	r9,0x1
80004dee:	ce f0       	breq	80004dcc <__cxa_allocate_exception+0x70>
80004df0:	30 8a       	mov	r10,8
80004df2:	30 39       	mov	r9,3
80004df4:	c0 28       	rjmp	80004df8 <__cxa_allocate_exception+0x9c>
80004df6:	30 1a       	mov	r10,1
80004df8:	f5 e8 10 08 	or	r8,r10,r8
80004dfc:	a9 79       	lsl	r9,0x9
80004dfe:	49 5a       	lddpc	r10,80004e50 <__cxa_allocate_exception+0xf4>
80004e00:	95 08       	st.w	r10[0x0],r8
80004e02:	49 68       	lddpc	r8,80004e58 <__cxa_allocate_exception+0xfc>
80004e04:	f0 09 00 09 	add	r9,r8,r9
80004e08:	50 09       	stdsp	sp[0x0],r9
80004e0a:	cc 5b       	rjmp	80004d94 <__cxa_allocate_exception+0x38>
80004e0c:	30 2a       	mov	r10,2
80004e0e:	30 19       	mov	r9,1
80004e10:	cf 4b       	rjmp	80004df8 <__cxa_allocate_exception+0x9c>
80004e12:	30 4a       	mov	r10,4
80004e14:	30 29       	mov	r9,2
80004e16:	cf 1b       	rjmp	80004df8 <__cxa_allocate_exception+0x9c>
80004e18:	40 6c       	lddsp	r12,sp[0x18]
80004e1a:	40 78       	lddsp	r8,sp[0x1c]
80004e1c:	5b f8       	cp.w	r8,-1
80004e1e:	c0 50       	breq	80004e28 <__cxa_allocate_exception+0xcc>
80004e20:	3f f8       	mov	r8,-1
80004e22:	50 58       	stdsp	sp[0x14],r8
80004e24:	f0 1f 00 0e 	mcall	80004e5c <__cxa_allocate_exception+0x100>
80004e28:	50 58       	stdsp	sp[0x14],r8
80004e2a:	f0 1f 00 0e 	mcall	80004e60 <__cxa_allocate_exception+0x104>
80004e2e:	00 00       	add	r0,r0
80004e30:	80 00       	ld.sh	r0,r0[0x0]
80004e32:	54 c4       	stdsp	sp[0x130],r4
80004e34:	00 00       	add	r0,r0
80004e36:	00 20       	rsub	r0,r0
80004e38:	80 00       	ld.sh	r0,r0[0x0]
80004e3a:	4e 18       	lddpc	r8,80004fbc <__cxa_throw>
80004e3c:	80 00       	ld.sh	r0,r0[0x0]
80004e3e:	af 78       	lsl	r8,0xf
80004e40:	80 00       	ld.sh	r0,r0[0x0]
80004e42:	b7 14       	ld.d	r4,--r11
80004e44:	80 00       	ld.sh	r0,r0[0x0]
80004e46:	59 3c       	cp.w	r12,19
80004e48:	80 00       	ld.sh	r0,r0[0x0]
80004e4a:	bd 3e       	mul	lr,lr
80004e4c:	80 00       	ld.sh	r0,r0[0x0]
80004e4e:	af 88       	lsr	r8,0xe
80004e50:	00 00       	add	r0,r0
80004e52:	0b 3c       	ld.ub	r12,r5++
80004e54:	80 00       	ld.sh	r0,r0[0x0]
80004e56:	59 c4       	cp.w	r4,28
80004e58:	00 00       	add	r0,r0
80004e5a:	0b 40       	ld.w	r0,--r5
80004e5c:	80 00       	ld.sh	r0,r0[0x0]
80004e5e:	b1 48       	asr	r8,0x10
80004e60:	80 00       	ld.sh	r0,r0[0x0]
80004e62:	53 84       	stdsp	sp[0xe0],r4

80004e64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
80004e64:	eb cd 40 80 	pushm	r7,lr
80004e68:	14 38       	cp.w	r8,r10
80004e6a:	c0 80       	breq	80004e7a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x16>
80004e6c:	78 27       	ld.w	r7,r12[0x8]
80004e6e:	0e 9c       	mov	r12,r7
80004e70:	6e 07       	ld.w	r7,r7[0x0]
80004e72:	6e 87       	ld.w	r7,r7[0x20]
80004e74:	5d 17       	icall	r7
80004e76:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e7a:	78 1e       	ld.w	lr,r12[0x4]
80004e7c:	72 17       	ld.w	r7,r9[0x4]
80004e7e:	0e 3e       	cp.w	lr,r7
80004e80:	cf 61       	brne	80004e6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x8>
80004e82:	30 6c       	mov	r12,6
80004e84:	e3 cd 80 80 	ldm	sp++,r7,pc

80004e88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
80004e88:	d4 21       	pushm	r4-r7,lr
80004e8a:	fa c4 ff ec 	sub	r4,sp,-20
80004e8e:	72 15       	ld.w	r5,r9[0x4]
80004e90:	68 2e       	ld.w	lr,r4[0x8]
80004e92:	68 06       	ld.w	r6,r4[0x0]
80004e94:	68 17       	ld.w	r7,r4[0x4]
80004e96:	78 14       	ld.w	r4,r12[0x4]
80004e98:	0a 34       	cp.w	r4,r5
80004e9a:	c0 d0       	breq	80004eb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c>
80004e9c:	0e 38       	cp.w	r8,r7
80004e9e:	c1 90       	breq	80004ed0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
80004ea0:	78 24       	ld.w	r4,r12[0x8]
80004ea2:	08 9c       	mov	r12,r4
80004ea4:	68 04       	ld.w	r4,r4[0x0]
80004ea6:	1a de       	st.w	--sp,lr
80004ea8:	1a d7       	st.w	--sp,r7
80004eaa:	1a d6       	st.w	--sp,r6
80004eac:	68 77       	ld.w	r7,r4[0x1c]
80004eae:	5d 17       	icall	r7
80004eb0:	2f dd       	sub	sp,-12
80004eb2:	d8 22       	popm	r4-r7,pc
80004eb4:	9d 1a       	st.w	lr[0x4],r10
80004eb6:	9d 08       	st.w	lr[0x0],r8
80004eb8:	58 0b       	cp.w	r11,0
80004eba:	c1 05       	brlt	80004eda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x52>
80004ebc:	f0 0b 00 0b 	add	r11,r8,r11
80004ec0:	30 0c       	mov	r12,0
80004ec2:	16 37       	cp.w	r7,r11
80004ec4:	f9 b7 00 06 	moveq	r7,6
80004ec8:	f9 b7 01 01 	movne	r7,1
80004ecc:	9d 37       	st.w	lr[0xc],r7
80004ece:	d8 22       	popm	r4-r7,pc
80004ed0:	6c 15       	ld.w	r5,r6[0x4]
80004ed2:	0a 34       	cp.w	r4,r5
80004ed4:	ce 61       	brne	80004ea0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18>
80004ed6:	9d 2a       	st.w	lr[0x8],r10
80004ed8:	d8 2a       	popm	r4-r7,pc,r12=0
80004eda:	5b eb       	cp.w	r11,-2
80004edc:	f9 b8 00 01 	moveq	r8,1
80004ee0:	fd f8 0a 03 	st.weq	lr[0xc],r8
80004ee4:	d8 2a       	popm	r4-r7,pc,r12=0
80004ee6:	d7 03       	nop

80004ee8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
80004ee8:	d4 21       	pushm	r4-r7,lr
80004eea:	18 94       	mov	r4,r12
80004eec:	16 97       	mov	r7,r11
80004eee:	14 96       	mov	r6,r10
80004ef0:	12 95       	mov	r5,r9
80004ef2:	f0 1f 00 07 	mcall	80004f0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x24>
80004ef6:	c0 20       	breq	80004efa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12>
80004ef8:	da 2a       	popm	r4-r7,pc,r12=1
80004efa:	68 28       	ld.w	r8,r4[0x8]
80004efc:	0a 99       	mov	r9,r5
80004efe:	0c 9a       	mov	r10,r6
80004f00:	0e 9b       	mov	r11,r7
80004f02:	10 9c       	mov	r12,r8
80004f04:	70 08       	ld.w	r8,r8[0x0]
80004f06:	70 68       	ld.w	r8,r8[0x18]
80004f08:	5d 18       	icall	r8
80004f0a:	d8 22       	popm	r4-r7,pc
80004f0c:	80 00       	ld.sh	r0,r0[0x0]
80004f0e:	4c 9a       	lddpc	r10,80005030 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x14>

80004f10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
80004f10:	d4 01       	pushm	lr
80004f12:	48 48       	lddpc	r8,80004f20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>
80004f14:	2f 88       	sub	r8,-8
80004f16:	99 08       	st.w	r12[0x0],r8
80004f18:	f0 1f 00 03 	mcall	80004f24 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x14>
80004f1c:	d8 02       	popm	pc
80004f1e:	00 00       	add	r0,r0
80004f20:	80 01       	ld.sh	r1,r0[0x0]
80004f22:	12 18       	sub	r8,r9
80004f24:	80 00       	ld.sh	r0,r0[0x0]
80004f26:	4c d8       	lddpc	r8,80005058 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>

80004f28 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
80004f28:	eb cd 40 80 	pushm	r7,lr
80004f2c:	48 68       	lddpc	r8,80004f44 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x1c>
80004f2e:	2f 88       	sub	r8,-8
80004f30:	18 97       	mov	r7,r12
80004f32:	99 08       	st.w	r12[0x0],r8
80004f34:	f0 1f 00 05 	mcall	80004f48 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x20>
80004f38:	0e 9c       	mov	r12,r7
80004f3a:	f0 1f 00 05 	mcall	80004f4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x24>
80004f3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f42:	00 00       	add	r0,r0
80004f44:	80 01       	ld.sh	r1,r0[0x0]
80004f46:	12 18       	sub	r8,r9
80004f48:	80 00       	ld.sh	r0,r0[0x0]
80004f4a:	4c d8       	lddpc	r8,8000507c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x14>
80004f4c:	80 00       	ld.sh	r0,r0[0x0]
80004f4e:	4a d4       	lddpc	r4,80005000 <__cxa_throw+0x44>

80004f50 <__cxa_rethrow>:
80004f50:	eb cd 40 80 	pushm	r7,lr
80004f54:	f0 1f 00 16 	mcall	80004fac <__cxa_rethrow+0x5c>
80004f58:	78 18       	ld.w	r8,r12[0x4]
80004f5a:	2f f8       	sub	r8,-1
80004f5c:	99 18       	st.w	r12[0x4],r8
80004f5e:	78 07       	ld.w	r7,r12[0x0]
80004f60:	58 07       	cp.w	r7,0
80004f62:	c2 20       	breq	80004fa6 <__cxa_rethrow+0x56>
80004f64:	ee ea 00 2c 	ld.d	r10,r7[44]
80004f68:	e0 68 d5 00 	mov	r8,54528
80004f6c:	ea 18 bc d4 	orh	r8,0xbcd4
80004f70:	e0 69 aa bc 	mov	r9,43708
80004f74:	ea 19 b8 b1 	orh	r9,0xb8b1
80004f78:	f4 08 00 08 	add	r8,r10,r8
80004f7c:	f6 09 00 49 	adc	r9,r11,r9
80004f80:	58 18       	cp.w	r8,1
80004f82:	5c 29       	cpc	r9
80004f84:	f9 b8 0b 00 	movhi	r8,0
80004f88:	f9 f8 ba 00 	st.whi	r12[0x0],r8
80004f8c:	ef f8 80 05 	ld.wls	r8,r7[0x14]
80004f90:	fb b8 08 00 	rsubls	r8,0
80004f94:	ef f8 8a 05 	st.wls	r7[0x14],r8
80004f98:	2d 47       	sub	r7,-44
80004f9a:	0e 9c       	mov	r12,r7
80004f9c:	f0 1f 00 05 	mcall	80004fb0 <__cxa_rethrow+0x60>
80004fa0:	0e 9c       	mov	r12,r7
80004fa2:	f0 1f 00 05 	mcall	80004fb4 <__cxa_rethrow+0x64>
80004fa6:	f0 1f 00 05 	mcall	80004fb8 <__cxa_rethrow+0x68>
80004faa:	00 00       	add	r0,r0
80004fac:	80 00       	ld.sh	r0,r0[0x0]
80004fae:	59 3c       	cp.w	r12,19
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	b2 10       	st.h	r9[0x2],r0
80004fb4:	80 00       	ld.sh	r0,r0[0x0]
80004fb6:	5a c8       	cp.w	r8,-20
80004fb8:	80 00       	ld.sh	r0,r0[0x0]
80004fba:	59 c4       	cp.w	r4,28

80004fbc <__cxa_throw>:
80004fbc:	eb cd 40 80 	pushm	r7,lr
80004fc0:	30 18       	mov	r8,1
80004fc2:	f8 c7 00 14 	sub	r7,r12,20
80004fc6:	24 4c       	sub	r12,68
80004fc8:	99 08       	st.w	r12[0x0],r8
80004fca:	48 f8       	lddpc	r8,80005004 <__cxa_throw+0x48>
80004fcc:	70 08       	ld.w	r8,r8[0x0]
80004fce:	99 38       	st.w	r12[0xc],r8
80004fd0:	48 e8       	lddpc	r8,80005008 <__cxa_throw+0x4c>
80004fd2:	70 08       	ld.w	r8,r8[0x0]
80004fd4:	99 48       	st.w	r12[0x10],r8
80004fd6:	e0 68 2b 00 	mov	r8,11008
80004fda:	ea 18 43 2b 	orh	r8,0x432b
80004fde:	e0 69 55 43 	mov	r9,21827
80004fe2:	ea 19 47 4e 	orh	r9,0x474e
80004fe6:	f8 e9 00 30 	st.d	r12[48],r8
80004fea:	48 98       	lddpc	r8,8000500c <__cxa_throw+0x50>
80004fec:	99 1b       	st.w	r12[0x4],r11
80004fee:	99 2a       	st.w	r12[0x8],r10
80004ff0:	99 e8       	st.w	r12[0x38],r8
80004ff2:	0e 9c       	mov	r12,r7
80004ff4:	f0 1f 00 07 	mcall	80005010 <__cxa_throw+0x54>
80004ff8:	0e 9c       	mov	r12,r7
80004ffa:	f0 1f 00 07 	mcall	80005014 <__cxa_throw+0x58>
80004ffe:	f0 1f 00 07 	mcall	80005018 <__cxa_throw+0x5c>
80005002:	00 00       	add	r0,r0
80005004:	00 00       	add	r0,r0
80005006:	00 e0       	st.h	--r0,r0
80005008:	00 00       	add	r0,r0
8000500a:	00 e4       	st.h	--r0,r4
8000500c:	80 00       	ld.sh	r0,r0[0x0]
8000500e:	50 1c       	stdsp	sp[0x4],r12
80005010:	80 00       	ld.sh	r0,r0[0x0]
80005012:	b1 a8       	sbr	r8,0x10
80005014:	80 00       	ld.sh	r0,r0[0x0]
80005016:	5a c8       	cp.w	r8,-20
80005018:	80 00       	ld.sh	r0,r0[0x0]
8000501a:	59 c4       	cp.w	r4,28

8000501c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
8000501c:	eb cd 40 80 	pushm	r7,lr
80005020:	f6 c9 00 30 	sub	r9,r11,48
80005024:	58 1c       	cp.w	r12,1
80005026:	e0 8b 00 19 	brhi	80005058 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
8000502a:	d2 53       	ssrf	0x5
8000502c:	72 08       	ld.w	r8,r9[0x0]
8000502e:	20 18       	sub	r8,1
80005030:	f3 78 00 00 	stcond	r9[0],r8
80005034:	cf b1       	brne	8000502a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0xe>
80005036:	58 08       	cp.w	r8,0
80005038:	c0 b1       	brne	8000504e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x32>
8000503a:	72 28       	ld.w	r8,r9[0x8]
8000503c:	58 08       	cp.w	r8,0
8000503e:	c0 a0       	breq	80005052 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x36>
80005040:	f6 c7 ff ec 	sub	r7,r11,-20
80005044:	0e 9c       	mov	r12,r7
80005046:	5d 18       	icall	r8
80005048:	0e 9c       	mov	r12,r7
8000504a:	f0 1f 00 06 	mcall	80005060 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x44>
8000504e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005052:	f6 c7 ff ec 	sub	r7,r11,-20
80005056:	cf 9b       	rjmp	80005048 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x2c>
80005058:	72 4c       	ld.w	r12,r9[0x10]
8000505a:	f0 1f 00 03 	mcall	80005064 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
8000505e:	00 00       	add	r0,r0
80005060:	80 00       	ld.sh	r0,r0[0x0]
80005062:	4d 1c       	lddpc	r12,800051a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
80005064:	80 00       	ld.sh	r0,r0[0x0]
80005066:	59 44       	cp.w	r4,20

80005068 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
80005068:	eb cd 40 c0 	pushm	r6-r7,lr
8000506c:	20 2d       	sub	sp,8
8000506e:	74 09       	ld.w	r9,r10[0x0]
80005070:	14 97       	mov	r7,r10
80005072:	18 96       	mov	r6,r12
80005074:	76 08       	ld.w	r8,r11[0x0]
80005076:	50 19       	stdsp	sp[0x4],r9
80005078:	70 28       	ld.w	r8,r8[0x8]
8000507a:	50 0b       	stdsp	sp[0x0],r11
8000507c:	16 9c       	mov	r12,r11
8000507e:	5d 18       	icall	r8
80005080:	fb f8 10 01 	ld.wne	r8,sp[0x4]
80005084:	f1 f8 10 00 	ld.wne	r8,r8[0x0]
80005088:	fb f8 1a 01 	st.wne	sp[0x4],r8
8000508c:	40 0b       	lddsp	r11,sp[0x0]
8000508e:	6c 08       	ld.w	r8,r6[0x0]
80005090:	0c 9c       	mov	r12,r6
80005092:	70 48       	ld.w	r8,r8[0x10]
80005094:	30 19       	mov	r9,1
80005096:	fa ca ff fc 	sub	r10,sp,-4
8000509a:	5d 18       	icall	r8
8000509c:	fb f8 10 01 	ld.wne	r8,sp[0x4]
800050a0:	ef f8 1a 00 	st.wne	r7[0x0],r8
800050a4:	f9 bc 01 01 	movne	r12,1
800050a8:	2f ed       	sub	sp,-8
800050aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800050ae:	d7 03       	nop

800050b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
800050b0:	d4 01       	pushm	lr
800050b2:	3f f8       	mov	r8,-1
800050b4:	f0 0c 18 00 	cp.b	r12,r8
800050b8:	c1 60       	breq	800050e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
800050ba:	18 98       	mov	r8,r12
800050bc:	e2 18 00 70 	andl	r8,0x70,COH
800050c0:	e0 48 00 20 	cp.w	r8,32
800050c4:	c1 80       	breq	800050f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x44>
800050c6:	e0 8a 00 0d 	brle	800050e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
800050ca:	e0 48 00 40 	cp.w	r8,64
800050ce:	c0 f0       	breq	800050ec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
800050d0:	e0 48 00 50 	cp.w	r8,80
800050d4:	c0 80       	breq	800050e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
800050d6:	e0 48 00 30 	cp.w	r8,48
800050da:	c1 10       	breq	800050fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
800050dc:	f0 1f 00 0a 	mcall	80005104 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x54>
800050e0:	58 08       	cp.w	r8,0
800050e2:	c0 21       	brne	800050e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
800050e4:	d8 0a       	popm	pc,r12=0
800050e6:	59 08       	cp.w	r8,16
800050e8:	cf a1       	brne	800050dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
800050ea:	cf db       	rjmp	800050e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
800050ec:	16 9c       	mov	r12,r11
800050ee:	f0 1f 00 07 	mcall	80005108 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
800050f2:	d8 02       	popm	pc
800050f4:	16 9c       	mov	r12,r11
800050f6:	f0 1f 00 06 	mcall	8000510c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
800050fa:	d8 02       	popm	pc
800050fc:	16 9c       	mov	r12,r11
800050fe:	f0 1f 00 05 	mcall	80005110 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x60>
80005102:	d8 02       	popm	pc
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	b2 4c       	st.h	r9[0x8],r12
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	af da       	cbr	r10,0xf
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	af e0       	*unknown*
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	af de       	cbr	lr,0xf

80005114 <_ZL28read_encoded_value_with_basehjPKhPj>:
80005114:	d4 21       	pushm	r4-r7,lr
80005116:	35 08       	mov	r8,80
80005118:	f0 0c 18 00 	cp.b	r12,r8
8000511c:	c6 c0       	breq	800051f4 <_ZL28read_encoded_value_with_basehjPKhPj+0xe0>
8000511e:	14 96       	mov	r6,r10
80005120:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80005124:	58 c8       	cp.w	r8,12
80005126:	e0 88 00 04 	brls	8000512e <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
8000512a:	f0 1f 00 37 	mcall	80005204 <_ZL28read_encoded_value_with_basehjPKhPj+0xf0>
8000512e:	4b 7e       	lddpc	lr,80005208 <_ZL28read_encoded_value_with_basehjPKhPj+0xf4>
80005130:	fc 08 03 2f 	ld.w	pc,lr[r8<<0x2]
80005134:	15 8e       	ld.ub	lr,r10[0x0]
80005136:	15 98       	ld.ub	r8,r10[0x1]
80005138:	b1 68       	lsl	r8,0x10
8000513a:	f1 ee 11 88 	or	r8,r8,lr<<0x18
8000513e:	15 ae       	ld.ub	lr,r10[0x2]
80005140:	f1 ee 10 88 	or	r8,r8,lr<<0x8
80005144:	15 be       	ld.ub	lr,r10[0x3]
80005146:	2f ca       	sub	r10,-4
80005148:	fd e8 10 08 	or	r8,lr,r8
8000514c:	58 08       	cp.w	r8,0
8000514e:	c0 d0       	breq	80005168 <_ZL28read_encoded_value_with_basehjPKhPj+0x54>
80005150:	18 9e       	mov	lr,r12
80005152:	e2 1e 00 70 	andl	lr,0x70,COH
80005156:	59 0e       	cp.w	lr,16
80005158:	ec 0b 17 00 	moveq	r11,r6
8000515c:	16 08       	add	r8,r11
8000515e:	30 0b       	mov	r11,0
80005160:	f6 0c 18 00 	cp.b	r12,r11
80005164:	f1 f8 50 00 	ld.wlt	r8,r8[0x0]
80005168:	93 08       	st.w	r9[0x0],r8
8000516a:	14 9c       	mov	r12,r10
8000516c:	d8 22       	popm	r4-r7,pc
8000516e:	15 ce       	ld.ub	lr,r10[0x4]
80005170:	15 d8       	ld.ub	r8,r10[0x5]
80005172:	b1 68       	lsl	r8,0x10
80005174:	f1 ee 11 88 	or	r8,r8,lr<<0x18
80005178:	15 ee       	ld.ub	lr,r10[0x6]
8000517a:	f1 ee 10 88 	or	r8,r8,lr<<0x8
8000517e:	15 fe       	ld.ub	lr,r10[0x7]
80005180:	2f 8a       	sub	r10,-8
80005182:	fd e8 10 08 	or	r8,lr,r8
80005186:	ce 3b       	rjmp	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
80005188:	30 08       	mov	r8,0
8000518a:	10 9e       	mov	lr,r8
8000518c:	10 94       	mov	r4,r8
8000518e:	15 37       	ld.ub	r7,r10++
80005190:	eb d7 c0 07 	bfextu	r5,r7,0x0,0x7
80005194:	ea 0e 09 45 	lsl	r5,r5,lr
80005198:	2f 9e       	sub	lr,-7
8000519a:	0a 48       	or	r8,r5
8000519c:	0e 95       	mov	r5,r7
8000519e:	e8 07 18 00 	cp.b	r7,r4
800051a2:	cf 65       	brlt	8000518e <_ZL28read_encoded_value_with_basehjPKhPj+0x7a>
800051a4:	59 fe       	cp.w	lr,31
800051a6:	fe 9b ff d3 	brhi	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051aa:	e2 17 00 40 	andl	r7,0x40,COH
800051ae:	cc f0       	breq	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051b0:	3f f7       	mov	r7,-1
800051b2:	ee 0e 09 4e 	lsl	lr,r7,lr
800051b6:	fd e8 10 08 	or	r8,lr,r8
800051ba:	cc 9b       	rjmp	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051bc:	15 8e       	ld.ub	lr,r10[0x0]
800051be:	15 98       	ld.ub	r8,r10[0x1]
800051c0:	2f ea       	sub	r10,-2
800051c2:	f1 ee 10 88 	or	r8,r8,lr<<0x8
800051c6:	b1 68       	lsl	r8,0x10
800051c8:	b1 48       	asr	r8,0x10
800051ca:	cc 1b       	rjmp	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051cc:	15 8e       	ld.ub	lr,r10[0x0]
800051ce:	15 98       	ld.ub	r8,r10[0x1]
800051d0:	2f ea       	sub	r10,-2
800051d2:	f1 ee 10 88 	or	r8,r8,lr<<0x8
800051d6:	cb bb       	rjmp	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051d8:	30 08       	mov	r8,0
800051da:	10 9e       	mov	lr,r8
800051dc:	10 94       	mov	r4,r8
800051de:	15 37       	ld.ub	r7,r10++
800051e0:	eb d7 c0 07 	bfextu	r5,r7,0x0,0x7
800051e4:	ea 0e 09 45 	lsl	r5,r5,lr
800051e8:	2f 9e       	sub	lr,-7
800051ea:	0a 48       	or	r8,r5
800051ec:	e8 07 18 00 	cp.b	r7,r4
800051f0:	cf 75       	brlt	800051de <_ZL28read_encoded_value_with_basehjPKhPj+0xca>
800051f2:	ca db       	rjmp	8000514c <_ZL28read_encoded_value_with_basehjPKhPj+0x38>
800051f4:	2f da       	sub	r10,-3
800051f6:	e0 1a ff fc 	andl	r10,0xfffc
800051fa:	15 08       	ld.w	r8,r10++
800051fc:	93 08       	st.w	r9[0x0],r8
800051fe:	14 9c       	mov	r12,r10
80005200:	d8 22       	popm	r4-r7,pc
80005202:	00 00       	add	r0,r0
80005204:	80 00       	ld.sh	r0,r0[0x0]
80005206:	b2 4c       	st.h	r9[0x8],r12
80005208:	80 01       	ld.sh	r1,r0[0x0]
8000520a:	12 78       	tst	r8,r9

8000520c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
8000520c:	d4 21       	pushm	r4-r7,lr
8000520e:	16 95       	mov	r5,r11
80005210:	14 97       	mov	r7,r10
80005212:	18 94       	mov	r4,r12
80005214:	58 0c       	cp.w	r12,0
80005216:	c0 30       	breq	8000521c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
80005218:	f0 1f 00 26 	mcall	800052b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa4>
8000521c:	8f 0c       	st.w	r7[0x0],r12
8000521e:	3f f8       	mov	r8,-1
80005220:	0b 36       	ld.ub	r6,r5++
80005222:	f0 06 18 00 	cp.b	r6,r8
80005226:	c3 90       	breq	80005298 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
80005228:	08 9b       	mov	r11,r4
8000522a:	0c 9c       	mov	r12,r6
8000522c:	f0 1f 00 22 	mcall	800052b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
80005230:	0a 9a       	mov	r10,r5
80005232:	18 9b       	mov	r11,r12
80005234:	ee c9 ff fc 	sub	r9,r7,-4
80005238:	0c 9c       	mov	r12,r6
8000523a:	f0 1f 00 20 	mcall	800052b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xac>
8000523e:	18 95       	mov	r5,r12
80005240:	0b 38       	ld.ub	r8,r5++
80005242:	ef 68 00 14 	st.b	r7[20],r8
80005246:	3f f9       	mov	r9,-1
80005248:	f2 08 18 00 	cp.b	r8,r9
8000524c:	c2 e0       	breq	800052a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
8000524e:	30 0a       	mov	r10,0
80005250:	14 98       	mov	r8,r10
80005252:	14 9c       	mov	r12,r10
80005254:	0b 39       	ld.ub	r9,r5++
80005256:	f7 d9 c0 07 	bfextu	r11,r9,0x0,0x7
8000525a:	f6 08 09 4b 	lsl	r11,r11,r8
8000525e:	2f 98       	sub	r8,-7
80005260:	16 4a       	or	r10,r11
80005262:	f8 09 18 00 	cp.b	r9,r12
80005266:	cf 75       	brlt	80005254 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x48>
80005268:	ea 0a 00 0a 	add	r10,r5,r10
8000526c:	8f 3a       	st.w	r7[0xc],r10
8000526e:	0a 9c       	mov	r12,r5
80005270:	19 38       	ld.ub	r8,r12++
80005272:	30 0a       	mov	r10,0
80005274:	ef 68 00 15 	st.b	r7[21],r8
80005278:	14 96       	mov	r6,r10
8000527a:	14 98       	mov	r8,r10
8000527c:	19 39       	ld.ub	r9,r12++
8000527e:	f7 d9 c0 07 	bfextu	r11,r9,0x0,0x7
80005282:	f6 08 09 4b 	lsl	r11,r11,r8
80005286:	2f 98       	sub	r8,-7
80005288:	16 4a       	or	r10,r11
8000528a:	ec 09 18 00 	cp.b	r9,r6
8000528e:	cf 75       	brlt	8000527c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x70>
80005290:	f8 0a 00 0a 	add	r10,r12,r10
80005294:	8f 4a       	st.w	r7[0x10],r10
80005296:	d8 22       	popm	r4-r7,pc
80005298:	8f 1c       	st.w	r7[0x4],r12
8000529a:	0b 38       	ld.ub	r8,r5++
8000529c:	ef 68 00 14 	st.b	r7[20],r8
800052a0:	3f f9       	mov	r9,-1
800052a2:	f2 08 18 00 	cp.b	r8,r9
800052a6:	cd 41       	brne	8000524e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
800052a8:	30 08       	mov	r8,0
800052aa:	8f 38       	st.w	r7[0xc],r8
800052ac:	ce 1b       	rjmp	8000526e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x62>
800052ae:	00 00       	add	r0,r0
800052b0:	80 00       	ld.sh	r0,r0[0x0]
800052b2:	af da       	cbr	r10,0xf
800052b4:	80 00       	ld.sh	r0,r0[0x0]
800052b6:	50 b0       	stdsp	sp[0x2c],r0
800052b8:	80 00       	ld.sh	r0,r0[0x0]
800052ba:	51 14       	stdsp	sp[0x44],r4

800052bc <_ZL15get_ttype_entryP16lsda_header_infom>:
800052bc:	d4 01       	pushm	lr
800052be:	20 1d       	sub	sp,4
800052c0:	3f f9       	mov	r9,-1
800052c2:	18 98       	mov	r8,r12
800052c4:	f9 3c 00 14 	ld.ub	r12,r12[20]
800052c8:	f2 0c 18 00 	cp.b	r12,r9
800052cc:	c2 40       	breq	80005314 <_ZL15get_ttype_entryP16lsda_header_infom+0x58>
800052ce:	f3 dc c0 03 	bfextu	r9,r12,0x0,0x3
800052d2:	58 29       	cp.w	r9,2
800052d4:	c1 c0       	breq	8000530c <_ZL15get_ttype_entryP16lsda_header_infom+0x50>
800052d6:	e0 8a 00 08 	brle	800052e6 <_ZL15get_ttype_entryP16lsda_header_infom+0x2a>
800052da:	58 39       	cp.w	r9,3
800052dc:	c0 70       	breq	800052ea <_ZL15get_ttype_entryP16lsda_header_infom+0x2e>
800052de:	58 49       	cp.w	r9,4
800052e0:	c1 20       	breq	80005304 <_ZL15get_ttype_entryP16lsda_header_infom+0x48>
800052e2:	f0 1f 00 0e 	mcall	80005318 <_ZL15get_ttype_entryP16lsda_header_infom+0x5c>
800052e6:	58 09       	cp.w	r9,0
800052e8:	cf d1       	brne	800052e2 <_ZL15get_ttype_entryP16lsda_header_infom+0x26>
800052ea:	f6 0a 15 02 	lsl	r10,r11,0x2
800052ee:	5c 3a       	neg	r10
800052f0:	70 2b       	ld.w	r11,r8[0x8]
800052f2:	70 38       	ld.w	r8,r8[0xc]
800052f4:	1a 99       	mov	r9,sp
800052f6:	f0 0a 00 0a 	add	r10,r8,r10
800052fa:	f0 1f 00 09 	mcall	8000531c <_ZL15get_ttype_entryP16lsda_header_infom+0x60>
800052fe:	40 0c       	lddsp	r12,sp[0x0]
80005300:	2f fd       	sub	sp,-4
80005302:	d8 02       	popm	pc
80005304:	f6 0a 15 03 	lsl	r10,r11,0x3
80005308:	5c 3a       	neg	r10
8000530a:	cf 3b       	rjmp	800052f0 <_ZL15get_ttype_entryP16lsda_header_infom+0x34>
8000530c:	f6 0a 15 01 	lsl	r10,r11,0x1
80005310:	5c 3a       	neg	r10
80005312:	ce fb       	rjmp	800052f0 <_ZL15get_ttype_entryP16lsda_header_infom+0x34>
80005314:	30 0a       	mov	r10,0
80005316:	ce db       	rjmp	800052f0 <_ZL15get_ttype_entryP16lsda_header_infom+0x34>
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	b2 4c       	st.h	r9[0x8],r12
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	51 14       	stdsp	sp[0x44],r4

80005320 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
80005320:	eb cd 40 f8 	pushm	r3-r7,lr
80005324:	20 1d       	sub	sp,4
80005326:	5c d9       	com	r9
80005328:	16 93       	mov	r3,r11
8000532a:	fa c7 ff fc 	sub	r7,sp,-4
8000532e:	30 0b       	mov	r11,0
80005330:	78 35       	ld.w	r5,r12[0xc]
80005332:	18 96       	mov	r6,r12
80005334:	12 05       	add	r5,r9
80005336:	0e da       	st.w	--r7,r10
80005338:	16 99       	mov	r9,r11
8000533a:	16 94       	mov	r4,r11
8000533c:	0b 38       	ld.ub	r8,r5++
8000533e:	f5 d8 c0 07 	bfextu	r10,r8,0x0,0x7
80005342:	f4 09 09 4a 	lsl	r10,r10,r9
80005346:	14 4b       	or	r11,r10
80005348:	e8 08 18 00 	cp.b	r8,r4
8000534c:	c0 e5       	brlt	80005368 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x48>
8000534e:	58 0b       	cp.w	r11,0
80005350:	c0 e0       	breq	8000536c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x4c>
80005352:	0c 9c       	mov	r12,r6
80005354:	f0 1f 00 0a 	mcall	8000537c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x5c>
80005358:	1a 9a       	mov	r10,sp
8000535a:	06 9b       	mov	r11,r3
8000535c:	f0 1f 00 09 	mcall	80005380 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x60>
80005360:	c0 a1       	brne	80005374 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x54>
80005362:	18 9b       	mov	r11,r12
80005364:	18 99       	mov	r9,r12
80005366:	ce bb       	rjmp	8000533c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x1c>
80005368:	2f 99       	sub	r9,-7
8000536a:	ce 9b       	rjmp	8000533c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x1c>
8000536c:	16 9c       	mov	r12,r11
8000536e:	2f fd       	sub	sp,-4
80005370:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80005374:	2f fd       	sub	sp,-4
80005376:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
8000537a:	00 00       	add	r0,r0
8000537c:	80 00       	ld.sh	r0,r0[0x0]
8000537e:	52 bc       	stdsp	sp[0xac],r12
80005380:	80 00       	ld.sh	r0,r0[0x0]
80005382:	50 68       	stdsp	sp[0x18],r8

80005384 <__cxa_call_unexpected>:
80005384:	eb cd 40 c1 	pushm	r0,r6-r7,lr
80005388:	21 9d       	sub	sp,100
8000538a:	4b d9       	lddpc	r9,8000547c <__cxa_call_unexpected+0xf8>
8000538c:	fa c8 ff c8 	sub	r8,sp,-56
80005390:	fa cb ff 9c 	sub	r11,sp,-100
80005394:	91 2d       	st.w	r8[0x8],sp
80005396:	91 0b       	st.w	r8[0x0],r11
80005398:	50 c9       	stdsp	sp[0x30],r9
8000539a:	4b a9       	lddpc	r9,80005480 <__cxa_call_unexpected+0xfc>
8000539c:	50 d9       	stdsp	sp[0x34],r9
8000539e:	4b a9       	lddpc	r9,80005484 <__cxa_call_unexpected+0x100>
800053a0:	50 0c       	stdsp	sp[0x0],r12
800053a2:	91 19       	st.w	r8[0x4],r9
800053a4:	fa cc ff e8 	sub	r12,sp,-24
800053a8:	f0 1f 00 38 	mcall	80005488 <__cxa_call_unexpected+0x104>
800053ac:	40 0c       	lddsp	r12,sp[0x0]
800053ae:	f0 1f 00 38 	mcall	8000548c <__cxa_call_unexpected+0x108>
800053b2:	40 08       	lddsp	r8,sp[0x0]
800053b4:	22 c8       	sub	r8,44
800053b6:	70 99       	ld.w	r9,r8[0x24]
800053b8:	70 6a       	ld.w	r10,r8[0x18]
800053ba:	70 2c       	ld.w	r12,r8[0x8]
800053bc:	51 59       	stdsp	sp[0x54],r9
800053be:	70 89       	ld.w	r9,r8[0x20]
800053c0:	70 38       	ld.w	r8,r8[0xc]
800053c2:	50 28       	stdsp	sp[0x8],r8
800053c4:	30 28       	mov	r8,2
800053c6:	50 1a       	stdsp	sp[0x4],r10
800053c8:	50 39       	stdsp	sp[0xc],r9
800053ca:	50 78       	stdsp	sp[0x1c],r8
800053cc:	f0 1f 00 31 	mcall	80005490 <__cxa_call_unexpected+0x10c>
800053d0:	40 88       	lddsp	r8,sp[0x20]
800053d2:	50 58       	stdsp	sp[0x14],r8
800053d4:	40 78       	lddsp	r8,sp[0x1c]
800053d6:	58 18       	cp.w	r8,1
800053d8:	c0 e0       	breq	800053f4 <__cxa_call_unexpected+0x70>
800053da:	30 0b       	mov	r11,0
800053dc:	50 7b       	stdsp	sp[0x1c],r11
800053de:	f0 1f 00 2e 	mcall	80005494 <__cxa_call_unexpected+0x110>
800053e2:	30 0a       	mov	r10,0
800053e4:	50 7a       	stdsp	sp[0x1c],r10
800053e6:	f0 1f 00 2c 	mcall	80005494 <__cxa_call_unexpected+0x110>
800053ea:	3f f8       	mov	r8,-1
800053ec:	40 5c       	lddsp	r12,sp[0x14]
800053ee:	50 78       	stdsp	sp[0x1c],r8
800053f0:	f0 1f 00 2a 	mcall	80005498 <__cxa_call_unexpected+0x114>
800053f4:	40 5c       	lddsp	r12,sp[0x14]
800053f6:	f0 1f 00 26 	mcall	8000548c <__cxa_call_unexpected+0x108>
800053fa:	f0 1f 00 29 	mcall	8000549c <__cxa_call_unexpected+0x118>
800053fe:	30 16       	mov	r6,1
80005400:	78 08       	ld.w	r8,r12[0x0]
80005402:	30 07       	mov	r7,0
80005404:	f0 ea 00 2c 	ld.d	r10,r8[44]
80005408:	f0 c9 ff c0 	sub	r9,r8,-64
8000540c:	0c 6a       	and	r10,r6
8000540e:	0e 6b       	and	r11,r7
80005410:	2d 48       	sub	r8,-44
80005412:	58 0a       	cp.w	r10,0
80005414:	5c 2b       	cpc	r11
80005416:	c1 80       	breq	80005446 <__cxa_call_unexpected+0xc2>
80005418:	f0 f8 ff d8 	ld.w	r8,r8[-40]
8000541c:	50 48       	stdsp	sp[0x10],r8
8000541e:	30 18       	mov	r8,1
80005420:	fa ca ff b4 	sub	r10,sp,-76
80005424:	50 78       	stdsp	sp[0x1c],r8
80005426:	40 3b       	lddsp	r11,sp[0xc]
80005428:	30 0c       	mov	r12,0
8000542a:	f0 1f 00 1e 	mcall	800054a0 <__cxa_call_unexpected+0x11c>
8000542e:	40 4a       	lddsp	r10,sp[0x10]
80005430:	40 19       	lddsp	r9,sp[0x4]
80005432:	fa cc ff b4 	sub	r12,sp,-76
80005436:	f4 fb ff c0 	ld.w	r11,r10[-64]
8000543a:	f0 1f 00 1b 	mcall	800054a4 <__cxa_call_unexpected+0x120>
8000543e:	18 9a       	mov	r10,r12
80005440:	c0 50       	breq	8000544a <__cxa_call_unexpected+0xc6>
80005442:	f0 1f 00 1a 	mcall	800054a8 <__cxa_call_unexpected+0x124>
80005446:	50 49       	stdsp	sp[0x10],r9
80005448:	ce bb       	rjmp	8000541e <__cxa_call_unexpected+0x9a>
8000544a:	30 18       	mov	r8,1
8000544c:	40 19       	lddsp	r9,sp[0x4]
8000544e:	50 78       	stdsp	sp[0x1c],r8
80005450:	49 7b       	lddpc	r11,800054ac <__cxa_call_unexpected+0x128>
80005452:	fa cc ff b4 	sub	r12,sp,-76
80005456:	f0 1f 00 14 	mcall	800054a4 <__cxa_call_unexpected+0x120>
8000545a:	c0 b0       	breq	80005470 <__cxa_call_unexpected+0xec>
8000545c:	30 4c       	mov	r12,4
8000545e:	f0 1f 00 15 	mcall	800054b0 <__cxa_call_unexpected+0x12c>
80005462:	49 58       	lddpc	r8,800054b4 <__cxa_call_unexpected+0x130>
80005464:	2f 88       	sub	r8,-8
80005466:	49 5a       	lddpc	r10,800054b8 <__cxa_call_unexpected+0x134>
80005468:	99 08       	st.w	r12[0x0],r8
8000546a:	49 1b       	lddpc	r11,800054ac <__cxa_call_unexpected+0x128>
8000546c:	f0 1f 00 14 	mcall	800054bc <__cxa_call_unexpected+0x138>
80005470:	30 18       	mov	r8,1
80005472:	40 2c       	lddsp	r12,sp[0x8]
80005474:	50 78       	stdsp	sp[0x1c],r8
80005476:	f0 1f 00 13 	mcall	800054c0 <__cxa_call_unexpected+0x13c>
8000547a:	00 00       	add	r0,r0
8000547c:	80 00       	ld.sh	r0,r0[0x0]
8000547e:	54 c4       	stdsp	sp[0x130],r4
80005480:	00 00       	add	r0,r0
80005482:	00 30       	cp.w	r0,r0
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	53 d0       	stdsp	sp[0xf4],r0
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	af 78       	lsl	r8,0xf
8000548c:	80 00       	ld.sh	r0,r0[0x0]
8000548e:	5a c8       	cp.w	r8,-20
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	59 d8       	cp.w	r8,29
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	5a 44       	cp.w	r4,-28
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	b1 48       	asr	r8,0x10
8000549c:	80 00       	ld.sh	r0,r0[0x0]
8000549e:	59 34       	cp.w	r4,19
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	52 0c       	stdsp	sp[0x80],r12
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	53 20       	stdsp	sp[0xc8],r0
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	4f 50       	lddpc	r0,8000567c <__gxx_personality_sj0+0x1b8>
800054ac:	80 01       	ld.sh	r1,r0[0x0]
800054ae:	13 3c       	ld.ub	r12,r9++
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	4d 5c       	lddpc	r12,80005604 <__gxx_personality_sj0+0x140>
800054b4:	80 01       	ld.sh	r1,r0[0x0]
800054b6:	12 ac       	st.w	r9++,r12
800054b8:	80 00       	ld.sh	r0,r0[0x0]
800054ba:	58 e8       	cp.w	r8,14
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	4f bc       	lddpc	r12,800056a8 <__gxx_personality_sj0+0x1e4>
800054c0:	80 00       	ld.sh	r0,r0[0x0]
800054c2:	59 44       	cp.w	r4,20

800054c4 <__gxx_personality_sj0>:
800054c4:	eb cd 40 f1 	pushm	r0,r4-r7,lr
800054c8:	fa cd 00 a8 	sub	sp,sp,168
800054cc:	50 3c       	stdsp	sp[0xc],r12
800054ce:	50 7b       	stdsp	sp[0x1c],r11
800054d0:	50 8a       	stdsp	sp[0x20],r10
800054d2:	fa cc ff 58 	sub	r12,sp,-168
800054d6:	fa ca ff 8c 	sub	r10,sp,-116
800054da:	fe fb 03 9e 	ld.w	r11,pc[926]
800054de:	95 0c       	st.w	r10[0x0],r12
800054e0:	95 2d       	st.w	r10[0x8],sp
800054e2:	51 bb       	stdsp	sp[0x6c],r11
800054e4:	fe fb 03 98 	ld.w	r11,pc[920]
800054e8:	43 0e       	lddsp	lr,sp[0xc0]
800054ea:	51 cb       	stdsp	sp[0x70],r11
800054ec:	fe fb 03 94 	ld.w	r11,pc[916]
800054f0:	50 2e       	stdsp	sp[0x8],lr
800054f2:	95 1b       	st.w	r10[0x4],r11
800054f4:	fa e9 00 24 	st.d	sp[36],r8
800054f8:	fa cc ff ac 	sub	r12,sp,-84
800054fc:	f0 1f 00 e2 	mcall	80005884 <__gxx_personality_sj0+0x3c0>
80005500:	40 3b       	lddsp	r11,sp[0xc]
80005502:	58 1b       	cp.w	r11,1
80005504:	c0 b0       	breq	8000551a <__gxx_personality_sj0+0x56>
80005506:	30 3a       	mov	r10,3
80005508:	50 4a       	stdsp	sp[0x10],r10
8000550a:	fa cc ff ac 	sub	r12,sp,-84
8000550e:	f0 1f 00 df 	mcall	80005888 <__gxx_personality_sj0+0x3c4>
80005512:	40 4c       	lddsp	r12,sp[0x10]
80005514:	2d 6d       	sub	sp,-168
80005516:	e3 cd 80 f1 	ldm	sp++,r0,r4-r7,pc
8000551a:	30 08       	mov	r8,0
8000551c:	fa ea 00 24 	ld.d	r10,sp[36]
80005520:	52 88       	stdsp	sp[0xa0],r8
80005522:	52 98       	stdsp	sp[0xa4],r8
80005524:	e0 69 aa bc 	mov	r9,43708
80005528:	ea 19 b8 b1 	orh	r9,0xb8b1
8000552c:	e0 68 d5 00 	mov	r8,54528
80005530:	ea 18 bc d4 	orh	r8,0xbcd4
80005534:	f4 08 00 08 	add	r8,r10,r8
80005538:	f6 09 00 49 	adc	r9,r11,r9
8000553c:	58 18       	cp.w	r8,1
8000553e:	5c 29       	cpc	r9
80005540:	5f ba       	srhi	r10
80005542:	40 89       	lddsp	r9,sp[0x20]
80005544:	50 da       	stdsp	sp[0x34],r10
80005546:	22 c9       	sub	r9,44
80005548:	50 c9       	stdsp	sp[0x30],r9
8000554a:	40 78       	lddsp	r8,sp[0x1c]
8000554c:	58 68       	cp.w	r8,6
8000554e:	c4 90       	breq	800055e0 <__gxx_personality_sj0+0x11c>
80005550:	3f f8       	mov	r8,-1
80005552:	40 2c       	lddsp	r12,sp[0x8]
80005554:	51 68       	stdsp	sp[0x58],r8
80005556:	f0 1f 00 ce 	mcall	8000588c <__gxx_personality_sj0+0x3c8>
8000555a:	50 bc       	stdsp	sp[0x2c],r12
8000555c:	e0 80 00 92 	breq	80005680 <__gxx_personality_sj0+0x1bc>
80005560:	fa ca ff 78 	sub	r10,sp,-136
80005564:	18 9b       	mov	r11,r12
80005566:	40 2c       	lddsp	r12,sp[0x8]
80005568:	f0 1f 00 ca 	mcall	80005890 <__gxx_personality_sj0+0x3cc>
8000556c:	40 2b       	lddsp	r11,sp[0x8]
8000556e:	51 1c       	stdsp	sp[0x44],r12
80005570:	fb 3c 00 9c 	ld.ub	r12,sp[156]
80005574:	f0 1f 00 c8 	mcall	80005894 <__gxx_personality_sj0+0x3d0>
80005578:	fa cb ff 60 	sub	r11,sp,-160
8000557c:	52 4c       	stdsp	sp[0x90],r12
8000557e:	40 2c       	lddsp	r12,sp[0x8]
80005580:	f0 1f 00 c6 	mcall	80005898 <__gxx_personality_sj0+0x3d4>
80005584:	42 88       	lddsp	r8,sp[0xa0]
80005586:	58 08       	cp.w	r8,0
80005588:	f7 bc 00 01 	subeq	r12,1
8000558c:	58 0c       	cp.w	r12,0
8000558e:	c7 95       	brlt	80005680 <__gxx_personality_sj0+0x1bc>
80005590:	c4 a1       	brne	80005624 <__gxx_personality_sj0+0x160>
80005592:	50 1c       	stdsp	sp[0x4],r12
80005594:	30 18       	mov	r8,1
80005596:	50 fc       	stdsp	sp[0x3c],r12
80005598:	50 5c       	stdsp	sp[0x14],r12
8000559a:	40 7e       	lddsp	lr,sp[0x1c]
8000559c:	ed be 00 00 	bld	lr,0x0
800055a0:	c2 f0       	breq	800055fe <__gxx_personality_sj0+0x13a>
800055a2:	40 79       	lddsp	r9,sp[0x1c]
800055a4:	ed b9 00 03 	bld	r9,0x3
800055a8:	e0 81 00 fb 	brne	8000579e <__gxx_personality_sj0+0x2da>
800055ac:	58 18       	cp.w	r8,1
800055ae:	e0 80 01 47 	breq	8000583c <__gxx_personality_sj0+0x378>
800055b2:	40 19       	lddsp	r9,sp[0x4]
800055b4:	58 09       	cp.w	r9,0
800055b6:	e0 85 01 47 	brlt	80005844 <__gxx_personality_sj0+0x380>
800055ba:	3f f8       	mov	r8,-1
800055bc:	40 8a       	lddsp	r10,sp[0x20]
800055be:	51 68       	stdsp	sp[0x58],r8
800055c0:	30 0b       	mov	r11,0
800055c2:	40 2c       	lddsp	r12,sp[0x8]
800055c4:	f0 1f 00 b6 	mcall	8000589c <__gxx_personality_sj0+0x3d8>
800055c8:	40 1a       	lddsp	r10,sp[0x4]
800055ca:	30 1b       	mov	r11,1
800055cc:	40 2c       	lddsp	r12,sp[0x8]
800055ce:	f0 1f 00 b4 	mcall	8000589c <__gxx_personality_sj0+0x3d8>
800055d2:	40 fb       	lddsp	r11,sp[0x3c]
800055d4:	40 2c       	lddsp	r12,sp[0x8]
800055d6:	f0 1f 00 b3 	mcall	800058a0 <__gxx_personality_sj0+0x3dc>
800055da:	30 79       	mov	r9,7
800055dc:	50 49       	stdsp	sp[0x10],r9
800055de:	c9 6b       	rjmp	8000550a <__gxx_personality_sj0+0x46>
800055e0:	58 0a       	cp.w	r10,0
800055e2:	cb 71       	brne	80005550 <__gxx_personality_sj0+0x8c>
800055e4:	72 6e       	ld.w	lr,r9[0x18]
800055e6:	72 8c       	ld.w	r12,r9[0x20]
800055e8:	72 9b       	ld.w	r11,r9[0x24]
800055ea:	50 1e       	stdsp	sp[0x4],lr
800055ec:	50 bc       	stdsp	sp[0x2c],r12
800055ee:	50 fb       	stdsp	sp[0x3c],r11
800055f0:	58 0b       	cp.w	r11,0
800055f2:	c4 a1       	brne	80005686 <__gxx_personality_sj0+0x1c2>
800055f4:	3f f8       	mov	r8,-1
800055f6:	40 8c       	lddsp	r12,sp[0x20]
800055f8:	51 68       	stdsp	sp[0x58],r8
800055fa:	f0 1f 00 ab 	mcall	800058a4 <__gxx_personality_sj0+0x3e0>
800055fe:	58 28       	cp.w	r8,2
80005600:	c4 00       	breq	80005680 <__gxx_personality_sj0+0x1bc>
80005602:	40 dc       	lddsp	r12,sp[0x34]
80005604:	58 0c       	cp.w	r12,0
80005606:	c0 c1       	brne	8000561e <__gxx_personality_sj0+0x15a>
80005608:	40 18       	lddsp	r8,sp[0x4]
8000560a:	40 ca       	lddsp	r10,sp[0x30]
8000560c:	40 f9       	lddsp	r9,sp[0x3c]
8000560e:	95 68       	st.w	r10[0x18],r8
80005610:	40 5e       	lddsp	lr,sp[0x14]
80005612:	40 bc       	lddsp	r12,sp[0x2c]
80005614:	42 98       	lddsp	r8,sp[0xa4]
80005616:	95 99       	st.w	r10[0x24],r9
80005618:	95 7e       	st.w	r10[0x1c],lr
8000561a:	95 8c       	st.w	r10[0x20],r12
8000561c:	95 a8       	st.w	r10[0x28],r8
8000561e:	30 6b       	mov	r11,6
80005620:	50 4b       	stdsp	sp[0x10],r11
80005622:	c7 4b       	rjmp	8000550a <__gxx_personality_sj0+0x46>
80005624:	30 06       	mov	r6,0
80005626:	41 18       	lddsp	r8,sp[0x44]
80005628:	0c 95       	mov	r5,r6
8000562a:	0c 9e       	mov	lr,r6
8000562c:	0c 9b       	mov	r11,r6
8000562e:	0a 99       	mov	r9,r5
80005630:	11 3a       	ld.ub	r10,r8++
80005632:	ef da c0 07 	bfextu	r7,r10,0x0,0x7
80005636:	ee 09 09 47 	lsl	r7,r7,r9
8000563a:	2f 99       	sub	r9,-7
8000563c:	0e 4b       	or	r11,r7
8000563e:	fc 0a 18 00 	cp.b	r10,lr
80005642:	cf 75       	brlt	80005630 <__gxx_personality_sj0+0x16c>
80005644:	0c 9a       	mov	r10,r6
80005646:	0a 99       	mov	r9,r5
80005648:	11 37       	ld.ub	r7,r8++
8000564a:	e9 d7 c0 07 	bfextu	r4,r7,0x0,0x7
8000564e:	e8 09 09 44 	lsl	r4,r4,r9
80005652:	2f 99       	sub	r9,-7
80005654:	08 4a       	or	r10,r4
80005656:	fc 07 18 00 	cp.b	r7,lr
8000565a:	cf 75       	brlt	80005648 <__gxx_personality_sj0+0x184>
8000565c:	20 1c       	sub	r12,1
8000565e:	ce 71       	brne	8000562c <__gxx_personality_sj0+0x168>
80005660:	f4 c8 00 01 	sub	r8,r10,1
80005664:	2f fb       	sub	r11,-1
80005666:	58 0a       	cp.w	r10,0
80005668:	fb fa 0a 05 	st.weq	sp[0x14],r10
8000566c:	fb f9 10 26 	ld.wne	r9,sp[0x98]
80005670:	f3 d8 e1 08 	addne	r8,r9,r8
80005674:	fb f8 1a 05 	st.wne	sp[0x14],r8
80005678:	50 fb       	stdsp	sp[0x3c],r11
8000567a:	40 fa       	lddsp	r10,sp[0x3c]
8000567c:	58 0a       	cp.w	r10,0
8000567e:	c0 61       	brne	8000568a <__gxx_personality_sj0+0x1c6>
80005680:	30 88       	mov	r8,8
80005682:	50 48       	stdsp	sp[0x10],r8
80005684:	c4 3b       	rjmp	8000550a <__gxx_personality_sj0+0x46>
80005686:	30 38       	mov	r8,3
80005688:	c8 db       	rjmp	800055a2 <__gxx_personality_sj0+0xde>
8000568a:	40 59       	lddsp	r9,sp[0x14]
8000568c:	58 09       	cp.w	r9,0
8000568e:	e0 80 00 b5 	breq	800057f8 <__gxx_personality_sj0+0x334>
80005692:	40 78       	lddsp	r8,sp[0x1c]
80005694:	e2 18 00 08 	andl	r8,0x8,COH
80005698:	51 28       	stdsp	sp[0x48],r8
8000569a:	e0 80 00 b3 	breq	80005800 <__gxx_personality_sj0+0x33c>
8000569e:	fe fe 02 0a 	ld.w	lr,pc[522]
800056a2:	51 0e       	stdsp	sp[0x40],lr
800056a4:	30 08       	mov	r8,0
800056a6:	50 e8       	stdsp	sp[0x38],r8
800056a8:	30 0b       	mov	r11,0
800056aa:	40 58       	lddsp	r8,sp[0x14]
800056ac:	16 99       	mov	r9,r11
800056ae:	11 3a       	ld.ub	r10,r8++
800056b0:	30 0e       	mov	lr,0
800056b2:	f9 da c0 07 	bfextu	r12,r10,0x0,0x7
800056b6:	f8 09 09 4c 	lsl	r12,r12,r9
800056ba:	2f 99       	sub	r9,-7
800056bc:	18 4b       	or	r11,r12
800056be:	fc 0a 18 00 	cp.b	r10,lr
800056c2:	cf 65       	brlt	800056ae <__gxx_personality_sj0+0x1ea>
800056c4:	50 68       	stdsp	sp[0x18],r8
800056c6:	59 f9       	cp.w	r9,31
800056c8:	e0 8b 00 0b 	brhi	800056de <__gxx_personality_sj0+0x21a>
800056cc:	ed ba 00 06 	bld	r10,0x6
800056d0:	c0 71       	brne	800056de <__gxx_personality_sj0+0x21a>
800056d2:	30 1c       	mov	r12,1
800056d4:	f8 09 09 49 	lsl	r9,r12,r9
800056d8:	5c 39       	neg	r9
800056da:	f3 eb 10 0b 	or	r11,r9,r11
800056de:	30 0a       	mov	r10,0
800056e0:	50 1b       	stdsp	sp[0x4],r11
800056e2:	50 0a       	stdsp	sp[0x0],r10
800056e4:	14 99       	mov	r9,r10
800056e6:	14 9c       	mov	r12,r10
800056e8:	11 3a       	ld.ub	r10,r8++
800056ea:	fd da c0 07 	bfextu	lr,r10,0x0,0x7
800056ee:	fc 09 09 4e 	lsl	lr,lr,r9
800056f2:	2f 99       	sub	r9,-7
800056f4:	1c 4c       	or	r12,lr
800056f6:	30 0e       	mov	lr,0
800056f8:	fc 0a 18 00 	cp.b	r10,lr
800056fc:	cf 65       	brlt	800056e8 <__gxx_personality_sj0+0x224>
800056fe:	50 0c       	stdsp	sp[0x0],r12
80005700:	59 f9       	cp.w	r9,31
80005702:	e0 8b 00 0d 	brhi	8000571c <__gxx_personality_sj0+0x258>
80005706:	ed ba 00 06 	bld	r10,0x6
8000570a:	c0 91       	brne	8000571c <__gxx_personality_sj0+0x258>
8000570c:	40 0a       	lddsp	r10,sp[0x0]
8000570e:	30 1c       	mov	r12,1
80005710:	f8 09 09 49 	lsl	r9,r12,r9
80005714:	5c 39       	neg	r9
80005716:	f3 ea 10 0a 	or	r10,r9,r10
8000571a:	50 0a       	stdsp	sp[0x0],r10
8000571c:	40 19       	lddsp	r9,sp[0x4]
8000571e:	58 09       	cp.w	r9,0
80005720:	c0 a1       	brne	80005734 <__gxx_personality_sj0+0x270>
80005722:	30 18       	mov	r8,1
80005724:	50 e8       	stdsp	sp[0x38],r8
80005726:	40 0b       	lddsp	r11,sp[0x0]
80005728:	58 0b       	cp.w	r11,0
8000572a:	c6 30       	breq	800057f0 <__gxx_personality_sj0+0x32c>
8000572c:	40 6a       	lddsp	r10,sp[0x18]
8000572e:	16 0a       	add	r10,r11
80005730:	50 5a       	stdsp	sp[0x14],r10
80005732:	cb bb       	rjmp	800056a8 <__gxx_personality_sj0+0x1e4>
80005734:	40 1e       	lddsp	lr,sp[0x4]
80005736:	58 0e       	cp.w	lr,0
80005738:	e0 8a 00 13 	brle	8000575e <__gxx_personality_sj0+0x29a>
8000573c:	3f fc       	mov	r12,-1
8000573e:	51 6c       	stdsp	sp[0x58],r12
80005740:	fa cc ff 78 	sub	r12,sp,-136
80005744:	f0 1f 00 5a 	mcall	800058ac <__gxx_personality_sj0+0x3e8>
80005748:	c0 90       	breq	8000575a <__gxx_personality_sj0+0x296>
8000574a:	41 0b       	lddsp	r11,sp[0x40]
8000574c:	58 0b       	cp.w	r11,0
8000574e:	ce c0       	breq	80005726 <__gxx_personality_sj0+0x262>
80005750:	fa ca ff 5c 	sub	r10,sp,-164
80005754:	f0 1f 00 57 	mcall	800058b0 <__gxx_personality_sj0+0x3ec>
80005758:	ce 70       	breq	80005726 <__gxx_personality_sj0+0x262>
8000575a:	30 38       	mov	r8,3
8000575c:	c1 fb       	rjmp	8000559a <__gxx_personality_sj0+0xd6>
8000575e:	41 0a       	lddsp	r10,sp[0x40]
80005760:	58 0a       	cp.w	r10,0
80005762:	c0 70       	breq	80005770 <__gxx_personality_sj0+0x2ac>
80005764:	41 29       	lddsp	r9,sp[0x48]
80005766:	58 09       	cp.w	r9,0
80005768:	c0 41       	brne	80005770 <__gxx_personality_sj0+0x2ac>
8000576a:	40 d8       	lddsp	r8,sp[0x34]
8000576c:	58 08       	cp.w	r8,0
8000576e:	c3 30       	breq	800057d4 <__gxx_personality_sj0+0x310>
80005770:	42 58       	lddsp	r8,sp[0x94]
80005772:	5c db       	com	r11
80005774:	30 0a       	mov	r10,0
80005776:	f0 0b 00 0b 	add	r11,r8,r11
8000577a:	14 98       	mov	r8,r10
8000577c:	17 39       	ld.ub	r9,r11++
8000577e:	f9 d9 c0 07 	bfextu	r12,r9,0x0,0x7
80005782:	f8 08 09 4c 	lsl	r12,r12,r8
80005786:	2f 98       	sub	r8,-7
80005788:	18 4a       	or	r10,r12
8000578a:	30 0c       	mov	r12,0
8000578c:	f8 09 18 00 	cp.b	r9,r12
80005790:	cf 65       	brlt	8000577c <__gxx_personality_sj0+0x2b8>
80005792:	58 0a       	cp.w	r10,0
80005794:	5f 08       	sreq	r8
80005796:	58 08       	cp.w	r8,0
80005798:	cc 70       	breq	80005726 <__gxx_personality_sj0+0x262>
8000579a:	30 38       	mov	r8,3
8000579c:	cf fa       	rjmp	8000559a <__gxx_personality_sj0+0xd6>
8000579e:	40 da       	lddsp	r10,sp[0x34]
800057a0:	58 0a       	cp.w	r10,0
800057a2:	fe 91 ff 05 	brne	800055ac <__gxx_personality_sj0+0xe8>
800057a6:	58 18       	cp.w	r8,1
800057a8:	fe 90 ff 26 	breq	800055f4 <__gxx_personality_sj0+0x130>
800057ac:	40 1b       	lddsp	r11,sp[0x4]
800057ae:	58 0b       	cp.w	r11,0
800057b0:	fe 94 ff 05 	brge	800055ba <__gxx_personality_sj0+0xf6>
800057b4:	3f f8       	mov	r8,-1
800057b6:	fa ca ff 78 	sub	r10,sp,-136
800057ba:	40 bb       	lddsp	r11,sp[0x2c]
800057bc:	51 68       	stdsp	sp[0x58],r8
800057be:	40 2c       	lddsp	r12,sp[0x8]
800057c0:	f0 1f 00 34 	mcall	80005890 <__gxx_personality_sj0+0x3cc>
800057c4:	40 2b       	lddsp	r11,sp[0x8]
800057c6:	fb 3c 00 9c 	ld.ub	r12,sp[156]
800057ca:	f0 1f 00 33 	mcall	80005894 <__gxx_personality_sj0+0x3d0>
800057ce:	40 ca       	lddsp	r10,sp[0x30]
800057d0:	95 9c       	st.w	r10[0x24],r12
800057d2:	cf 4a       	rjmp	800055ba <__gxx_personality_sj0+0xf6>
800057d4:	3f fe       	mov	lr,-1
800057d6:	42 9a       	lddsp	r10,sp[0xa4]
800057d8:	51 6e       	stdsp	sp[0x58],lr
800057da:	40 19       	lddsp	r9,sp[0x4]
800057dc:	41 0b       	lddsp	r11,sp[0x40]
800057de:	fa cc ff 78 	sub	r12,sp,-136
800057e2:	f0 1f 00 35 	mcall	800058b4 <__gxx_personality_sj0+0x3f0>
800057e6:	18 98       	mov	r8,r12
800057e8:	ec 18 00 01 	eorl	r8,0x1
800057ec:	5c 58       	castu.b	r8
800057ee:	cd 4b       	rjmp	80005796 <__gxx_personality_sj0+0x2d2>
800057f0:	40 ee       	lddsp	lr,sp[0x38]
800057f2:	58 0e       	cp.w	lr,0
800057f4:	fe 90 ff 46 	breq	80005680 <__gxx_personality_sj0+0x1bc>
800057f8:	30 09       	mov	r9,0
800057fa:	30 28       	mov	r8,2
800057fc:	50 19       	stdsp	sp[0x4],r9
800057fe:	cc ea       	rjmp	8000559a <__gxx_personality_sj0+0xd6>
80005800:	40 dc       	lddsp	r12,sp[0x34]
80005802:	58 0c       	cp.w	r12,0
80005804:	c0 40       	breq	8000580c <__gxx_personality_sj0+0x348>
80005806:	4a db       	lddpc	r11,800058b8 <__gxx_personality_sj0+0x3f4>
80005808:	51 0b       	stdsp	sp[0x40],r11
8000580a:	c4 db       	rjmp	800056a4 <__gxx_personality_sj0+0x1e0>
8000580c:	40 8a       	lddsp	r10,sp[0x20]
8000580e:	f4 e6 00 00 	ld.d	r6,r10[0]
80005812:	30 1a       	mov	r10,1
80005814:	30 0b       	mov	r11,0
80005816:	ed ea 00 08 	and	r8,r6,r10
8000581a:	ef eb 00 09 	and	r9,r7,r11
8000581e:	40 8a       	lddsp	r10,sp[0x20]
80005820:	2e ca       	sub	r10,-20
80005822:	58 08       	cp.w	r8,0
80005824:	5c 29       	cpc	r9
80005826:	c0 90       	breq	80005838 <__gxx_personality_sj0+0x374>
80005828:	40 89       	lddsp	r9,sp[0x20]
8000582a:	f2 f8 ff d8 	ld.w	r8,r9[-40]
8000582e:	52 98       	stdsp	sp[0xa4],r8
80005830:	f0 f8 ff c0 	ld.w	r8,r8[-64]
80005834:	51 08       	stdsp	sp[0x40],r8
80005836:	c3 7b       	rjmp	800056a4 <__gxx_personality_sj0+0x1e0>
80005838:	14 98       	mov	r8,r10
8000583a:	cf ab       	rjmp	8000582e <__gxx_personality_sj0+0x36a>
8000583c:	3f f8       	mov	r8,-1
8000583e:	51 68       	stdsp	sp[0x58],r8
80005840:	f0 1f 00 1f 	mcall	800058bc <__gxx_personality_sj0+0x3f8>
80005844:	30 28       	mov	r8,2
80005846:	51 68       	stdsp	sp[0x58],r8
80005848:	f0 1f 00 1e 	mcall	800058c0 <__gxx_personality_sj0+0x3fc>
8000584c:	41 6e       	lddsp	lr,sp[0x58]
8000584e:	41 7c       	lddsp	r12,sp[0x5c]
80005850:	51 4e       	stdsp	sp[0x50],lr
80005852:	51 3c       	stdsp	sp[0x4c],r12
80005854:	58 1e       	cp.w	lr,1
80005856:	c0 a0       	breq	8000586a <__gxx_personality_sj0+0x3a6>
80005858:	30 08       	mov	r8,0
8000585a:	51 68       	stdsp	sp[0x58],r8
8000585c:	f0 1f 00 1a 	mcall	800058c4 <__gxx_personality_sj0+0x400>
80005860:	3f f8       	mov	r8,-1
80005862:	41 3c       	lddsp	r12,sp[0x4c]
80005864:	51 68       	stdsp	sp[0x58],r8
80005866:	f0 1f 00 19 	mcall	800058c8 <__gxx_personality_sj0+0x404>
8000586a:	41 3c       	lddsp	r12,sp[0x4c]
8000586c:	f0 1f 00 18 	mcall	800058cc <__gxx_personality_sj0+0x408>
80005870:	41 48       	lddsp	r8,sp[0x50]
80005872:	51 68       	stdsp	sp[0x58],r8
80005874:	f0 1f 00 12 	mcall	800058bc <__gxx_personality_sj0+0x3f8>
80005878:	80 00       	ld.sh	r0,r0[0x0]
8000587a:	54 c4       	stdsp	sp[0x130],r4
8000587c:	00 00       	add	r0,r0
8000587e:	00 40       	or	r0,r0
80005880:	80 00       	ld.sh	r0,r0[0x0]
80005882:	58 4c       	cp.w	r12,4
80005884:	80 00       	ld.sh	r0,r0[0x0]
80005886:	af 78       	lsl	r8,0xf
80005888:	80 00       	ld.sh	r0,r0[0x0]
8000588a:	af 88       	lsr	r8,0xe
8000588c:	80 00       	ld.sh	r0,r0[0x0]
8000588e:	af d4       	cbr	r4,0xf
80005890:	80 00       	ld.sh	r0,r0[0x0]
80005892:	52 0c       	stdsp	sp[0x80],r12
80005894:	80 00       	ld.sh	r0,r0[0x0]
80005896:	50 b0       	stdsp	sp[0x2c],r0
80005898:	80 00       	ld.sh	r0,r0[0x0]
8000589a:	af ba       	sbr	r10,0xf
8000589c:	80 00       	ld.sh	r0,r0[0x0]
8000589e:	af a8       	sbr	r8,0xe
800058a0:	80 00       	ld.sh	r0,r0[0x0]
800058a2:	af cc       	cbr	r12,0xe
800058a4:	80 00       	ld.sh	r0,r0[0x0]
800058a6:	59 f8       	cp.w	r8,31
800058a8:	80 01       	ld.sh	r1,r0[0x0]
800058aa:	13 20       	ld.uh	r0,r9++
800058ac:	80 00       	ld.sh	r0,r0[0x0]
800058ae:	52 bc       	stdsp	sp[0xac],r12
800058b0:	80 00       	ld.sh	r0,r0[0x0]
800058b2:	50 68       	stdsp	sp[0x18],r8
800058b4:	80 00       	ld.sh	r0,r0[0x0]
800058b6:	53 20       	stdsp	sp[0xc8],r0
800058b8:	80 01       	ld.sh	r1,r0[0x0]
800058ba:	12 f8       	st.b	--r9,r8
800058bc:	80 00       	ld.sh	r0,r0[0x0]
800058be:	59 c4       	cp.w	r4,28
800058c0:	80 00       	ld.sh	r0,r0[0x0]
800058c2:	59 e4       	cp.w	r4,30
800058c4:	80 00       	ld.sh	r0,r0[0x0]
800058c6:	5a 44       	cp.w	r4,-28
800058c8:	80 00       	ld.sh	r0,r0[0x0]
800058ca:	b1 48       	asr	r8,0x10
800058cc:	80 00       	ld.sh	r0,r0[0x0]
800058ce:	5a c8       	cp.w	r8,-20

800058d0 <_ZNSt9exceptionD2Ev>:
800058d0:	48 28       	lddpc	r8,800058d8 <_ZNSt9exceptionD2Ev+0x8>
800058d2:	2f 88       	sub	r8,-8
800058d4:	99 08       	st.w	r12[0x0],r8
800058d6:	5e fc       	retal	r12
800058d8:	80 01       	ld.sh	r1,r0[0x0]
800058da:	12 c0       	st.b	r9++,r0

800058dc <_ZNSt9exceptionD1Ev>:
800058dc:	48 28       	lddpc	r8,800058e4 <_ZNSt9exceptionD1Ev+0x8>
800058de:	2f 88       	sub	r8,-8
800058e0:	99 08       	st.w	r12[0x0],r8
800058e2:	5e fc       	retal	r12
800058e4:	80 01       	ld.sh	r1,r0[0x0]
800058e6:	12 c0       	st.b	r9++,r0

800058e8 <_ZNSt13bad_exceptionD1Ev>:
800058e8:	48 28       	lddpc	r8,800058f0 <_ZNSt13bad_exceptionD1Ev+0x8>
800058ea:	2f 88       	sub	r8,-8
800058ec:	99 08       	st.w	r12[0x0],r8
800058ee:	5e fc       	retal	r12
800058f0:	80 01       	ld.sh	r1,r0[0x0]
800058f2:	12 c0       	st.b	r9++,r0

800058f4 <_ZNKSt9exception4whatEv>:
800058f4:	48 1c       	lddpc	r12,800058f8 <_ZNKSt9exception4whatEv+0x4>
800058f6:	5e fc       	retal	r12
800058f8:	80 01       	ld.sh	r1,r0[0x0]
800058fa:	13 60       	ld.uh	r0,--r9

800058fc <_ZNKSt13bad_exception4whatEv>:
800058fc:	48 1c       	lddpc	r12,80005900 <_ZNKSt13bad_exception4whatEv+0x4>
800058fe:	5e fc       	retal	r12
80005900:	80 01       	ld.sh	r1,r0[0x0]
80005902:	13 70       	ld.ub	r0,--r9

80005904 <_ZNSt9exceptionD0Ev>:
80005904:	d4 01       	pushm	lr
80005906:	48 48       	lddpc	r8,80005914 <_ZNSt9exceptionD0Ev+0x10>
80005908:	2f 88       	sub	r8,-8
8000590a:	99 08       	st.w	r12[0x0],r8
8000590c:	f0 1f 00 03 	mcall	80005918 <_ZNSt9exceptionD0Ev+0x14>
80005910:	d8 02       	popm	pc
80005912:	00 00       	add	r0,r0
80005914:	80 01       	ld.sh	r1,r0[0x0]
80005916:	12 c0       	st.b	r9++,r0
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	4a d4       	lddpc	r4,800059cc <_ZSt9terminatev+0x8>

8000591c <_ZNSt13bad_exceptionD0Ev>:
8000591c:	d4 01       	pushm	lr
8000591e:	48 48       	lddpc	r8,8000592c <_ZNSt13bad_exceptionD0Ev+0x10>
80005920:	2f 88       	sub	r8,-8
80005922:	99 08       	st.w	r12[0x0],r8
80005924:	f0 1f 00 03 	mcall	80005930 <_ZNSt13bad_exceptionD0Ev+0x14>
80005928:	d8 02       	popm	pc
8000592a:	00 00       	add	r0,r0
8000592c:	80 01       	ld.sh	r1,r0[0x0]
8000592e:	12 c0       	st.b	r9++,r0
80005930:	80 00       	ld.sh	r0,r0[0x0]
80005932:	4a d4       	lddpc	r4,800059e4 <_ZSt10unexpectedv>

80005934 <__cxa_get_globals_fast>:
80005934:	48 1c       	lddpc	r12,80005938 <__cxa_get_globals_fast+0x4>
80005936:	5e fc       	retal	r12
80005938:	00 00       	add	r0,r0
8000593a:	13 40       	ld.w	r0,--r9

8000593c <__cxa_get_globals>:
8000593c:	48 1c       	lddpc	r12,80005940 <__cxa_get_globals+0x4>
8000593e:	5e fc       	retal	r12
80005940:	00 00       	add	r0,r0
80005942:	13 40       	ld.w	r0,--r9

80005944 <_ZN10__cxxabiv111__terminateEPFvvE>:
80005944:	eb cd 40 81 	pushm	r0,r7,lr
80005948:	21 0d       	sub	sp,64
8000594a:	fa c9 ff c0 	sub	r9,sp,-64
8000594e:	fa c8 ff d4 	sub	r8,sp,-44
80005952:	91 09       	st.w	r8[0x0],r9
80005954:	91 2d       	st.w	r8[0x8],sp
80005956:	49 49       	lddpc	r9,800059a4 <_ZN10__cxxabiv111__terminateEPFvvE+0x60>
80005958:	50 99       	stdsp	sp[0x24],r9
8000595a:	49 49       	lddpc	r9,800059a8 <_ZN10__cxxabiv111__terminateEPFvvE+0x64>
8000595c:	50 a9       	stdsp	sp[0x28],r9
8000595e:	49 49       	lddpc	r9,800059ac <_ZN10__cxxabiv111__terminateEPFvvE+0x68>
80005960:	50 0c       	stdsp	sp[0x0],r12
80005962:	91 19       	st.w	r8[0x4],r9
80005964:	fa cc ff f4 	sub	r12,sp,-12
80005968:	f0 1f 00 12 	mcall	800059b0 <_ZN10__cxxabiv111__terminateEPFvvE+0x6c>
8000596c:	30 28       	mov	r8,2
8000596e:	50 48       	stdsp	sp[0x10],r8
80005970:	40 08       	lddsp	r8,sp[0x0]
80005972:	5d 18       	icall	r8
80005974:	f0 1f 00 10 	mcall	800059b4 <_ZN10__cxxabiv111__terminateEPFvvE+0x70>
80005978:	40 48       	lddsp	r8,sp[0x10]
8000597a:	40 59       	lddsp	r9,sp[0x14]
8000597c:	50 28       	stdsp	sp[0x8],r8
8000597e:	50 19       	stdsp	sp[0x4],r9
80005980:	58 18       	cp.w	r8,1
80005982:	c0 a0       	breq	80005996 <_ZN10__cxxabiv111__terminateEPFvvE+0x52>
80005984:	30 08       	mov	r8,0
80005986:	50 48       	stdsp	sp[0x10],r8
80005988:	f0 1f 00 0c 	mcall	800059b8 <_ZN10__cxxabiv111__terminateEPFvvE+0x74>
8000598c:	3f f8       	mov	r8,-1
8000598e:	40 1c       	lddsp	r12,sp[0x4]
80005990:	50 48       	stdsp	sp[0x10],r8
80005992:	f0 1f 00 0b 	mcall	800059bc <_ZN10__cxxabiv111__terminateEPFvvE+0x78>
80005996:	40 1c       	lddsp	r12,sp[0x4]
80005998:	f0 1f 00 0a 	mcall	800059c0 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
8000599c:	40 29       	lddsp	r9,sp[0x8]
8000599e:	50 49       	stdsp	sp[0x10],r9
800059a0:	f0 1f 00 05 	mcall	800059b4 <_ZN10__cxxabiv111__terminateEPFvvE+0x70>
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	54 c4       	stdsp	sp[0x130],r4
800059a8:	00 00       	add	r0,r0
800059aa:	00 50       	eor	r0,r0
800059ac:	80 00       	ld.sh	r0,r0[0x0]
800059ae:	59 78       	cp.w	r8,23
800059b0:	80 00       	ld.sh	r0,r0[0x0]
800059b2:	af 78       	lsl	r8,0xf
800059b4:	80 00       	ld.sh	r0,r0[0x0]
800059b6:	b2 4c       	st.h	r9[0x8],r12
800059b8:	80 00       	ld.sh	r0,r0[0x0]
800059ba:	5a 44       	cp.w	r4,-28
800059bc:	80 00       	ld.sh	r0,r0[0x0]
800059be:	b1 48       	asr	r8,0x10
800059c0:	80 00       	ld.sh	r0,r0[0x0]
800059c2:	5a c8       	cp.w	r8,-20

800059c4 <_ZSt9terminatev>:
800059c4:	d4 01       	pushm	lr
800059c6:	48 38       	lddpc	r8,800059d0 <_ZSt9terminatev+0xc>
800059c8:	70 0c       	ld.w	r12,r8[0x0]
800059ca:	f0 1f 00 03 	mcall	800059d4 <_ZSt9terminatev+0x10>
800059ce:	00 00       	add	r0,r0
800059d0:	00 00       	add	r0,r0
800059d2:	00 e4       	st.h	--r0,r4
800059d4:	80 00       	ld.sh	r0,r0[0x0]
800059d6:	59 44       	cp.w	r4,20

800059d8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
800059d8:	d4 01       	pushm	lr
800059da:	5d 1c       	icall	r12
800059dc:	f0 1f 00 01 	mcall	800059e0 <_ZN10__cxxabiv112__unexpectedEPFvvE+0x8>
800059e0:	80 00       	ld.sh	r0,r0[0x0]
800059e2:	59 c4       	cp.w	r4,28

800059e4 <_ZSt10unexpectedv>:
800059e4:	d4 01       	pushm	lr
800059e6:	48 38       	lddpc	r8,800059f0 <_ZSt10unexpectedv+0xc>
800059e8:	70 0c       	ld.w	r12,r8[0x0]
800059ea:	f0 1f 00 03 	mcall	800059f4 <_ZSt10unexpectedv+0x10>
800059ee:	00 00       	add	r0,r0
800059f0:	00 00       	add	r0,r0
800059f2:	00 e0       	st.h	--r0,r0
800059f4:	80 00       	ld.sh	r0,r0[0x0]
800059f6:	59 d8       	cp.w	r8,29

800059f8 <__cxa_call_terminate>:
800059f8:	eb cd 40 80 	pushm	r7,lr
800059fc:	18 97       	mov	r7,r12
800059fe:	58 0c       	cp.w	r12,0
80005a00:	c1 50       	breq	80005a2a <__cxa_call_terminate+0x32>
80005a02:	f0 1f 00 0e 	mcall	80005a38 <__cxa_call_terminate+0x40>
80005a06:	ee ea 00 00 	ld.d	r10,r7[0]
80005a0a:	e0 68 d5 00 	mov	r8,54528
80005a0e:	ea 18 bc d4 	orh	r8,0xbcd4
80005a12:	e0 69 aa bc 	mov	r9,43708
80005a16:	ea 19 b8 b1 	orh	r9,0xb8b1
80005a1a:	f4 08 00 08 	add	r8,r10,r8
80005a1e:	f6 09 00 49 	adc	r9,r11,r9
80005a22:	58 18       	cp.w	r8,1
80005a24:	5c 29       	cpc	r9
80005a26:	e0 88 00 04 	brls	80005a2e <__cxa_call_terminate+0x36>
80005a2a:	f0 1f 00 05 	mcall	80005a3c <__cxa_call_terminate+0x44>
80005a2e:	ee fc ff e0 	ld.w	r12,r7[-32]
80005a32:	f0 1f 00 04 	mcall	80005a40 <__cxa_call_terminate+0x48>
80005a36:	00 00       	add	r0,r0
80005a38:	80 00       	ld.sh	r0,r0[0x0]
80005a3a:	5a c8       	cp.w	r8,-20
80005a3c:	80 00       	ld.sh	r0,r0[0x0]
80005a3e:	59 c4       	cp.w	r4,28
80005a40:	80 00       	ld.sh	r0,r0[0x0]
80005a42:	59 44       	cp.w	r4,20

80005a44 <__cxa_end_catch>:
80005a44:	eb cd 40 c0 	pushm	r6-r7,lr
80005a48:	f0 1f 00 1d 	mcall	80005abc <__cxa_end_catch+0x78>
80005a4c:	18 99       	mov	r9,r12
80005a4e:	78 08       	ld.w	r8,r12[0x0]
80005a50:	58 08       	cp.w	r8,0
80005a52:	c1 b0       	breq	80005a88 <__cxa_end_catch+0x44>
80005a54:	f0 e6 00 2c 	ld.d	r6,r8[44]
80005a58:	e0 6a d5 00 	mov	r10,54528
80005a5c:	ea 1a bc d4 	orh	r10,0xbcd4
80005a60:	e0 6b aa bc 	mov	r11,43708
80005a64:	ea 1b b8 b1 	orh	r11,0xb8b1
80005a68:	ec 0a 00 0a 	add	r10,r6,r10
80005a6c:	ee 0b 00 4b 	adc	r11,r7,r11
80005a70:	58 1a       	cp.w	r10,1
80005a72:	5c 2b       	cpc	r11
80005a74:	e0 8b 00 0c 	brhi	80005a8c <__cxa_end_catch+0x48>
80005a78:	70 5a       	ld.w	r10,r8[0x14]
80005a7a:	58 0a       	cp.w	r10,0
80005a7c:	c1 05       	brlt	80005a9c <__cxa_end_catch+0x58>
80005a7e:	20 1a       	sub	r10,1
80005a80:	c1 30       	breq	80005aa6 <__cxa_end_catch+0x62>
80005a82:	5b fa       	cp.w	r10,-1
80005a84:	c1 90       	breq	80005ab6 <__cxa_end_catch+0x72>
80005a86:	91 5a       	st.w	r8[0x14],r10
80005a88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005a8c:	f0 cc ff d4 	sub	r12,r8,-44
80005a90:	30 08       	mov	r8,0
80005a92:	93 08       	st.w	r9[0x0],r8
80005a94:	f0 1f 00 0b 	mcall	80005ac0 <__cxa_end_catch+0x7c>
80005a98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005a9c:	2f fa       	sub	r10,-1
80005a9e:	cf 41       	brne	80005a86 <__cxa_end_catch+0x42>
80005aa0:	70 4b       	ld.w	r11,r8[0x10]
80005aa2:	99 0b       	st.w	r12[0x0],r11
80005aa4:	cf 1b       	rjmp	80005a86 <__cxa_end_catch+0x42>
80005aa6:	f0 cc ff d4 	sub	r12,r8,-44
80005aaa:	70 48       	ld.w	r8,r8[0x10]
80005aac:	93 08       	st.w	r9[0x0],r8
80005aae:	f0 1f 00 05 	mcall	80005ac0 <__cxa_end_catch+0x7c>
80005ab2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005ab6:	f0 1f 00 04 	mcall	80005ac4 <__cxa_end_catch+0x80>
80005aba:	00 00       	add	r0,r0
80005abc:	80 00       	ld.sh	r0,r0[0x0]
80005abe:	59 34       	cp.w	r4,19
80005ac0:	80 00       	ld.sh	r0,r0[0x0]
80005ac2:	b0 68       	st.h	r8[0xc],r8
80005ac4:	80 00       	ld.sh	r0,r0[0x0]
80005ac6:	59 c4       	cp.w	r4,28

80005ac8 <__cxa_begin_catch>:
80005ac8:	eb cd 40 81 	pushm	r0,r7,lr
80005acc:	20 fd       	sub	sp,60
80005ace:	fa c9 ff c4 	sub	r9,sp,-60
80005ad2:	fa c8 ff d8 	sub	r8,sp,-40
80005ad6:	91 09       	st.w	r8[0x0],r9
80005ad8:	91 2d       	st.w	r8[0x8],sp
80005ada:	4a 99       	lddpc	r9,80005b7c <__cxa_begin_catch+0xb4>
80005adc:	50 89       	stdsp	sp[0x20],r9
80005ade:	4a 99       	lddpc	r9,80005b80 <__cxa_begin_catch+0xb8>
80005ae0:	50 99       	stdsp	sp[0x24],r9
80005ae2:	4a 99       	lddpc	r9,80005b84 <__cxa_begin_catch+0xbc>
80005ae4:	50 0c       	stdsp	sp[0x0],r12
80005ae6:	91 19       	st.w	r8[0x4],r9
80005ae8:	fa cc ff f8 	sub	r12,sp,-8
80005aec:	f0 1f 00 27 	mcall	80005b88 <__cxa_begin_catch+0xc0>
80005af0:	f0 1f 00 27 	mcall	80005b8c <__cxa_begin_catch+0xc4>
80005af4:	40 08       	lddsp	r8,sp[0x0]
80005af6:	e0 69 aa bc 	mov	r9,43708
80005afa:	ea 19 b8 b1 	orh	r9,0xb8b1
80005afe:	f0 ea 00 00 	ld.d	r10,r8[0]
80005b02:	e0 68 d5 00 	mov	r8,54528
80005b06:	ea 18 bc d4 	orh	r8,0xbcd4
80005b0a:	10 0a       	add	r10,r8
80005b0c:	f6 09 00 4b 	adc	r11,r11,r9
80005b10:	40 08       	lddsp	r8,sp[0x0]
80005b12:	78 09       	ld.w	r9,r12[0x0]
80005b14:	22 c8       	sub	r8,44
80005b16:	58 1a       	cp.w	r10,1
80005b18:	5c 2b       	cpc	r11
80005b1a:	e0 88 00 0e 	brls	80005b36 <__cxa_begin_catch+0x6e>
80005b1e:	58 09       	cp.w	r9,0
80005b20:	c1 e1       	brne	80005b5c <__cxa_begin_catch+0x94>
80005b22:	99 08       	st.w	r12[0x0],r8
80005b24:	50 19       	stdsp	sp[0x4],r9
80005b26:	fa cc ff f8 	sub	r12,sp,-8
80005b2a:	f0 1f 00 1a 	mcall	80005b90 <__cxa_begin_catch+0xc8>
80005b2e:	40 1c       	lddsp	r12,sp[0x4]
80005b30:	2f 1d       	sub	sp,-60
80005b32:	e3 cd 80 81 	ldm	sp++,r0,r7,pc
80005b36:	70 5a       	ld.w	r10,r8[0x14]
80005b38:	58 0a       	cp.w	r10,0
80005b3a:	c0 e5       	brlt	80005b56 <__cxa_begin_catch+0x8e>
80005b3c:	2f fa       	sub	r10,-1
80005b3e:	91 5a       	st.w	r8[0x14],r10
80005b40:	10 39       	cp.w	r9,r8
80005b42:	f1 f9 1a 04 	st.wne	r8[0x10],r9
80005b46:	f9 f8 1a 00 	st.wne	r12[0x0],r8
80005b4a:	78 1a       	ld.w	r10,r12[0x4]
80005b4c:	70 a8       	ld.w	r8,r8[0x28]
80005b4e:	20 1a       	sub	r10,1
80005b50:	50 18       	stdsp	sp[0x4],r8
80005b52:	99 1a       	st.w	r12[0x4],r10
80005b54:	ce 9b       	rjmp	80005b26 <__cxa_begin_catch+0x5e>
80005b56:	f4 0a 11 01 	rsub	r10,r10,1
80005b5a:	cf 2b       	rjmp	80005b3e <__cxa_begin_catch+0x76>
80005b5c:	30 18       	mov	r8,1
80005b5e:	50 38       	stdsp	sp[0xc],r8
80005b60:	f0 1f 00 0d 	mcall	80005b94 <__cxa_begin_catch+0xcc>
80005b64:	40 4c       	lddsp	r12,sp[0x10]
80005b66:	40 58       	lddsp	r8,sp[0x14]
80005b68:	5b f8       	cp.w	r8,-1
80005b6a:	c0 50       	breq	80005b74 <__cxa_begin_catch+0xac>
80005b6c:	3f f8       	mov	r8,-1
80005b6e:	50 38       	stdsp	sp[0xc],r8
80005b70:	f0 1f 00 0a 	mcall	80005b98 <__cxa_begin_catch+0xd0>
80005b74:	50 38       	stdsp	sp[0xc],r8
80005b76:	f0 1f 00 0a 	mcall	80005b9c <__cxa_begin_catch+0xd4>
80005b7a:	00 00       	add	r0,r0
80005b7c:	80 00       	ld.sh	r0,r0[0x0]
80005b7e:	54 c4       	stdsp	sp[0x130],r4
80005b80:	00 00       	add	r0,r0
80005b82:	00 60       	and	r0,r0
80005b84:	80 00       	ld.sh	r0,r0[0x0]
80005b86:	5b 64       	cp.w	r4,-10
80005b88:	80 00       	ld.sh	r0,r0[0x0]
80005b8a:	af 78       	lsl	r8,0xf
80005b8c:	80 00       	ld.sh	r0,r0[0x0]
80005b8e:	59 3c       	cp.w	r12,19
80005b90:	80 00       	ld.sh	r0,r0[0x0]
80005b92:	af 88       	lsr	r8,0xe
80005b94:	80 00       	ld.sh	r0,r0[0x0]
80005b96:	59 c4       	cp.w	r4,28
80005b98:	80 00       	ld.sh	r0,r0[0x0]
80005b9a:	b1 48       	asr	r8,0x10
80005b9c:	80 00       	ld.sh	r0,r0[0x0]
80005b9e:	53 84       	stdsp	sp[0xe0],r4

80005ba0 <_ZNSt9type_infoD2Ev>:
80005ba0:	48 28       	lddpc	r8,80005ba8 <_ZNSt9type_infoD2Ev+0x8>
80005ba2:	2f 88       	sub	r8,-8
80005ba4:	99 08       	st.w	r12[0x0],r8
80005ba6:	5e fc       	retal	r12
80005ba8:	80 01       	ld.sh	r1,r0[0x0]
80005baa:	13 84       	ld.ub	r4,r9[0x0]

80005bac <_ZNSt9type_infoD1Ev>:
80005bac:	48 28       	lddpc	r8,80005bb4 <_ZNSt9type_infoD1Ev+0x8>
80005bae:	2f 88       	sub	r8,-8
80005bb0:	99 08       	st.w	r12[0x0],r8
80005bb2:	5e fc       	retal	r12
80005bb4:	80 01       	ld.sh	r1,r0[0x0]
80005bb6:	13 84       	ld.ub	r4,r9[0x0]

80005bb8 <_ZNKSt9type_info14__is_pointer_pEv>:
80005bb8:	5e fd       	retal	0

80005bba <_ZNKSt9type_info15__is_function_pEv>:
80005bba:	5e fd       	retal	0

80005bbc <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
80005bbc:	78 18       	ld.w	r8,r12[0x4]
80005bbe:	76 19       	ld.w	r9,r11[0x4]
80005bc0:	12 38       	cp.w	r8,r9
80005bc2:	5f 0c       	sreq	r12
80005bc4:	5e fc       	retal	r12

80005bc6 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
80005bc6:	5e fd       	retal	0

80005bc8 <_ZNSt9type_infoD0Ev>:
80005bc8:	d4 01       	pushm	lr
80005bca:	48 48       	lddpc	r8,80005bd8 <_ZNSt9type_infoD0Ev+0x10>
80005bcc:	2f 88       	sub	r8,-8
80005bce:	99 08       	st.w	r12[0x0],r8
80005bd0:	f0 1f 00 03 	mcall	80005bdc <_ZNSt9type_infoD0Ev+0x14>
80005bd4:	d8 02       	popm	pc
80005bd6:	00 00       	add	r0,r0
80005bd8:	80 01       	ld.sh	r1,r0[0x0]
80005bda:	13 84       	ld.ub	r4,r9[0x0]
80005bdc:	80 00       	ld.sh	r0,r0[0x0]
80005bde:	4a d4       	lddpc	r4,80005c90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xb0>

80005be0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
80005be0:	eb cd 40 81 	pushm	r0,r7,lr
80005be4:	21 3d       	sub	sp,76
80005be6:	fa c9 ff b4 	sub	r9,sp,-76
80005bea:	fa c8 ff cc 	sub	r8,sp,-52
80005bee:	91 09       	st.w	r8[0x0],r9
80005bf0:	91 2d       	st.w	r8[0x8],sp
80005bf2:	4d 39       	lddpc	r9,80005d3c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x15c>
80005bf4:	50 b9       	stdsp	sp[0x2c],r9
80005bf6:	4d 39       	lddpc	r9,80005d40 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x160>
80005bf8:	50 c9       	stdsp	sp[0x30],r9
80005bfa:	4d 39       	lddpc	r9,80005d44 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x164>
80005bfc:	fa cc ff ec 	sub	r12,sp,-20
80005c00:	91 19       	st.w	r8[0x4],r9
80005c02:	f0 1f 00 52 	mcall	80005d48 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x168>
80005c06:	4d 28       	lddpc	r8,80005d4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x16c>
80005c08:	30 09       	mov	r9,0
80005c0a:	11 8a       	ld.ub	r10,r8[0x0]
80005c0c:	f2 0a 18 00 	cp.b	r10,r9
80005c10:	c0 d0       	breq	80005c2a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4a>
80005c12:	4d 08       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005c14:	70 08       	ld.w	r8,r8[0x0]
80005c16:	70 29       	ld.w	r9,r8[0x8]
80005c18:	3f f8       	mov	r8,-1
80005c1a:	31 da       	mov	r10,29
80005c1c:	50 68       	stdsp	sp[0x18],r8
80005c1e:	30 1b       	mov	r11,1
80005c20:	4c dc       	lddpc	r12,80005d54 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x174>
80005c22:	f0 1f 00 4e 	mcall	80005d58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x178>
80005c26:	f0 1f 00 4e 	mcall	80005d5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x17c>
80005c2a:	30 19       	mov	r9,1
80005c2c:	b0 89       	st.b	r8[0x0],r9
80005c2e:	3f f8       	mov	r8,-1
80005c30:	50 68       	stdsp	sp[0x18],r8
80005c32:	f0 1f 00 4c 	mcall	80005d60 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x180>
80005c36:	c3 70       	breq	80005ca4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
80005c38:	3f f8       	mov	r8,-1
80005c3a:	30 0a       	mov	r10,0
80005c3c:	fa c9 ff b4 	sub	r9,sp,-76
80005c40:	14 9b       	mov	r11,r10
80005c42:	12 d8       	st.w	--r9,r8
80005c44:	78 1c       	ld.w	r12,r12[0x4]
80005c46:	50 0c       	stdsp	sp[0x0],r12
80005c48:	f0 1f 00 47 	mcall	80005d64 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x184>
80005c4c:	4c 19       	lddpc	r9,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005c4e:	72 08       	ld.w	r8,r9[0x0]
80005c50:	50 1c       	stdsp	sp[0x4],r12
80005c52:	70 29       	ld.w	r9,r8[0x8]
80005c54:	33 0a       	mov	r10,48
80005c56:	30 1b       	mov	r11,1
80005c58:	4c 4c       	lddpc	r12,80005d68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x188>
80005c5a:	f0 1f 00 40 	mcall	80005d58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x178>
80005c5e:	41 28       	lddsp	r8,sp[0x48]
80005c60:	58 08       	cp.w	r8,0
80005c62:	c1 81       	brne	80005c92 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xb2>
80005c64:	4b b9       	lddpc	r9,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005c66:	72 08       	ld.w	r8,r9[0x0]
80005c68:	40 1c       	lddsp	r12,sp[0x4]
80005c6a:	70 2b       	ld.w	r11,r8[0x8]
80005c6c:	f0 1f 00 40 	mcall	80005d6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18c>
80005c70:	4b 88       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005c72:	70 08       	ld.w	r8,r8[0x0]
80005c74:	70 29       	ld.w	r9,r8[0x8]
80005c76:	3f f8       	mov	r8,-1
80005c78:	30 2a       	mov	r10,2
80005c7a:	50 68       	stdsp	sp[0x18],r8
80005c7c:	30 1b       	mov	r11,1
80005c7e:	4b dc       	lddpc	r12,80005d70 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x190>
80005c80:	f0 1f 00 36 	mcall	80005d58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x178>
80005c84:	41 28       	lddsp	r8,sp[0x48]
80005c86:	58 08       	cp.w	r8,0
80005c88:	c1 c0       	breq	80005cc0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe0>
80005c8a:	30 28       	mov	r8,2
80005c8c:	50 68       	stdsp	sp[0x18],r8
80005c8e:	f0 1f 00 3a 	mcall	80005d74 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x194>
80005c92:	4b 09       	lddpc	r9,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005c94:	72 08       	ld.w	r8,r9[0x0]
80005c96:	70 2b       	ld.w	r11,r8[0x8]
80005c98:	3f f8       	mov	r8,-1
80005c9a:	40 0c       	lddsp	r12,sp[0x0]
80005c9c:	50 68       	stdsp	sp[0x18],r8
80005c9e:	f0 1f 00 34 	mcall	80005d6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18c>
80005ca2:	ce 7b       	rjmp	80005c70 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
80005ca4:	4a b8       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005ca6:	70 08       	ld.w	r8,r8[0x0]
80005ca8:	70 29       	ld.w	r9,r8[0x8]
80005caa:	3f f8       	mov	r8,-1
80005cac:	32 da       	mov	r10,45
80005cae:	50 68       	stdsp	sp[0x18],r8
80005cb0:	30 1b       	mov	r11,1
80005cb2:	4b 2c       	lddpc	r12,80005d78 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x198>
80005cb4:	f0 1f 00 29 	mcall	80005d58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x178>
80005cb8:	3f f8       	mov	r8,-1
80005cba:	50 68       	stdsp	sp[0x18],r8
80005cbc:	f0 1f 00 28 	mcall	80005d5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x17c>
80005cc0:	40 1c       	lddsp	r12,sp[0x4]
80005cc2:	f0 1f 00 2f 	mcall	80005d7c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x19c>
80005cc6:	ce 2b       	rjmp	80005c8a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xaa>
80005cc8:	40 68       	lddsp	r8,sp[0x18]
80005cca:	40 79       	lddsp	r9,sp[0x1c]
80005ccc:	50 38       	stdsp	sp[0xc],r8
80005cce:	50 29       	stdsp	sp[0x8],r9
80005cd0:	40 88       	lddsp	r8,sp[0x20]
80005cd2:	40 39       	lddsp	r9,sp[0xc]
80005cd4:	58 19       	cp.w	r9,1
80005cd6:	c0 a0       	breq	80005cea <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10a>
80005cd8:	30 08       	mov	r8,0
80005cda:	50 68       	stdsp	sp[0x18],r8
80005cdc:	f0 1f 00 29 	mcall	80005d80 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a0>
80005ce0:	3f f8       	mov	r8,-1
80005ce2:	40 2c       	lddsp	r12,sp[0x8]
80005ce4:	50 68       	stdsp	sp[0x18],r8
80005ce6:	f0 1f 00 28 	mcall	80005d84 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a4>
80005cea:	58 28       	cp.w	r8,2
80005cec:	c0 90       	breq	80005cfe <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x11e>
80005cee:	40 2c       	lddsp	r12,sp[0x8]
80005cf0:	f0 1f 00 26 	mcall	80005d88 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a8>
80005cf4:	30 08       	mov	r8,0
80005cf6:	50 68       	stdsp	sp[0x18],r8
80005cf8:	f0 1f 00 22 	mcall	80005d80 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a0>
80005cfc:	cd eb       	rjmp	80005cb8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd8>
80005cfe:	40 2c       	lddsp	r12,sp[0x8]
80005d00:	f0 1f 00 22 	mcall	80005d88 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a8>
80005d04:	40 39       	lddsp	r9,sp[0xc]
80005d06:	78 08       	ld.w	r8,r12[0x0]
80005d08:	70 28       	ld.w	r8,r8[0x8]
80005d0a:	50 69       	stdsp	sp[0x18],r9
80005d0c:	5d 18       	icall	r8
80005d0e:	49 18       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005d10:	70 08       	ld.w	r8,r8[0x0]
80005d12:	50 4c       	stdsp	sp[0x10],r12
80005d14:	70 29       	ld.w	r9,r8[0x8]
80005d16:	30 ba       	mov	r10,11
80005d18:	30 1b       	mov	r11,1
80005d1a:	49 dc       	lddpc	r12,80005d8c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1ac>
80005d1c:	f0 1f 00 0f 	mcall	80005d58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x178>
80005d20:	48 c8       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005d22:	70 08       	ld.w	r8,r8[0x0]
80005d24:	40 4c       	lddsp	r12,sp[0x10]
80005d26:	70 2b       	ld.w	r11,r8[0x8]
80005d28:	f0 1f 00 11 	mcall	80005d6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18c>
80005d2c:	48 98       	lddpc	r8,80005d50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
80005d2e:	70 08       	ld.w	r8,r8[0x0]
80005d30:	30 ac       	mov	r12,10
80005d32:	70 2b       	ld.w	r11,r8[0x8]
80005d34:	f0 1f 00 17 	mcall	80005d90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1b0>
80005d38:	cd eb       	rjmp	80005cf4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>
80005d3a:	00 00       	add	r0,r0
80005d3c:	80 00       	ld.sh	r0,r0[0x0]
80005d3e:	54 c4       	stdsp	sp[0x130],r4
80005d40:	00 00       	add	r0,r0
80005d42:	00 70       	tst	r0,r0
80005d44:	80 00       	ld.sh	r0,r0[0x0]
80005d46:	5c c8       	swap.bh	r8
80005d48:	80 00       	ld.sh	r0,r0[0x0]
80005d4a:	af 78       	lsl	r8,0xf
80005d4c:	00 00       	add	r0,r0
80005d4e:	13 48       	ld.w	r8,--r9
80005d50:	00 00       	add	r0,r0
80005d52:	01 dc       	ld.ub	r12,r0[0x5]
80005d54:	80 01       	ld.sh	r1,r0[0x0]
80005d56:	13 bc       	ld.ub	r12,r9[0x3]
80005d58:	80 00       	ld.sh	r0,r0[0x0]
80005d5a:	b6 e0       	st.b	r11[0x6],r0
80005d5c:	80 00       	ld.sh	r0,r0[0x0]
80005d5e:	b2 4c       	st.h	r9[0x8],r12
80005d60:	80 00       	ld.sh	r0,r0[0x0]
80005d62:	5d 94       	*unknown*
80005d64:	80 00       	ld.sh	r0,r0[0x0]
80005d66:	88 a8       	ld.uh	r8,r4[0x4]
80005d68:	80 01       	ld.sh	r1,r0[0x0]
80005d6a:	13 dc       	ld.ub	r12,r9[0x5]
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	b3 8c       	lsr	r12,0x12
80005d70:	80 01       	ld.sh	r1,r0[0x0]
80005d72:	14 10       	sub	r0,r10
80005d74:	80 00       	ld.sh	r0,r0[0x0]
80005d76:	4f 50       	lddpc	r0,80005f48 <d_number+0x8>
80005d78:	80 01       	ld.sh	r1,r0[0x0]
80005d7a:	14 20       	rsub	r0,r10
80005d7c:	80 00       	ld.sh	r0,r0[0x0]
80005d7e:	b6 fc       	st.b	r11[0x7],r12
80005d80:	80 00       	ld.sh	r0,r0[0x0]
80005d82:	5a 44       	cp.w	r4,-28
80005d84:	80 00       	ld.sh	r0,r0[0x0]
80005d86:	b1 48       	asr	r8,0x10
80005d88:	80 00       	ld.sh	r0,r0[0x0]
80005d8a:	5a c8       	cp.w	r8,-20
80005d8c:	80 01       	ld.sh	r1,r0[0x0]
80005d8e:	14 14       	sub	r4,r10
80005d90:	80 00       	ld.sh	r0,r0[0x0]
80005d92:	b3 04       	ld.d	r4,r9

80005d94 <__cxa_current_exception_type>:
80005d94:	eb cd 40 c0 	pushm	r6-r7,lr
80005d98:	f0 1f 00 0b 	mcall	80005dc4 <__cxa_current_exception_type+0x30>
80005d9c:	78 0c       	ld.w	r12,r12[0x0]
80005d9e:	58 0c       	cp.w	r12,0
80005da0:	c1 00       	breq	80005dc0 <__cxa_current_exception_type+0x2c>
80005da2:	f8 e6 00 2c 	ld.d	r6,r12[44]
80005da6:	30 1a       	mov	r10,1
80005da8:	30 0b       	mov	r11,0
80005daa:	ed ea 00 08 	and	r8,r6,r10
80005dae:	ef eb 00 09 	and	r9,r7,r11
80005db2:	58 08       	cp.w	r8,0
80005db4:	5c 29       	cpc	r9
80005db6:	f9 fc 10 01 	ld.wne	r12,r12[0x4]
80005dba:	f7 bc 01 40 	subne	r12,64
80005dbe:	78 0c       	ld.w	r12,r12[0x0]
80005dc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005dc4:	80 00       	ld.sh	r0,r0[0x0]
80005dc6:	59 3c       	cp.w	r12,19

80005dc8 <d_make_comp>:
80005dc8:	d4 01       	pushm	lr
80005dca:	f6 c8 00 01 	sub	r8,r11,1
80005dce:	e0 48 00 39 	cp.w	r8,57
80005dd2:	e0 8b 00 97 	brhi	80005f00 <d_make_comp+0x138>
80005dd6:	4c ce       	lddpc	lr,80005f04 <d_make_comp+0x13c>
80005dd8:	fc 08 03 2f 	ld.w	pc,lr[r8<<0x2]
80005ddc:	80 00       	ld.sh	r0,r0[0x0]
80005dde:	5e c4       	retvs	r4
80005de0:	80 00       	ld.sh	r0,r0[0x0]
80005de2:	5e c4       	retvs	r4
80005de4:	80 00       	ld.sh	r0,r0[0x0]
80005de6:	5e c4       	retvs	r4
80005de8:	80 00       	ld.sh	r0,r0[0x0]
80005dea:	5e c4       	retvs	r4
80005dec:	80 00       	ld.sh	r0,r0[0x0]
80005dee:	5f 00       	sreq	r0
80005df0:	80 00       	ld.sh	r0,r0[0x0]
80005df2:	5f 00       	sreq	r0
80005df4:	80 00       	ld.sh	r0,r0[0x0]
80005df6:	5f 00       	sreq	r0
80005df8:	80 00       	ld.sh	r0,r0[0x0]
80005dfa:	5f 00       	sreq	r0
80005dfc:	80 00       	ld.sh	r0,r0[0x0]
80005dfe:	5e d4       	retvc	r4
80005e00:	80 00       	ld.sh	r0,r0[0x0]
80005e02:	5e d4       	retvc	r4
80005e04:	80 00       	ld.sh	r0,r0[0x0]
80005e06:	5e c4       	retvs	r4
80005e08:	80 00       	ld.sh	r0,r0[0x0]
80005e0a:	5e d4       	retvc	r4
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	5e d4       	retvc	r4
80005e10:	80 00       	ld.sh	r0,r0[0x0]
80005e12:	5e d4       	retvc	r4
80005e14:	80 00       	ld.sh	r0,r0[0x0]
80005e16:	5e d4       	retvc	r4
80005e18:	80 00       	ld.sh	r0,r0[0x0]
80005e1a:	5e d4       	retvc	r4
80005e1c:	80 00       	ld.sh	r0,r0[0x0]
80005e1e:	5e d4       	retvc	r4
80005e20:	80 00       	ld.sh	r0,r0[0x0]
80005e22:	5e d4       	retvc	r4
80005e24:	80 00       	ld.sh	r0,r0[0x0]
80005e26:	5e d4       	retvc	r4
80005e28:	80 00       	ld.sh	r0,r0[0x0]
80005e2a:	5e d4       	retvc	r4
80005e2c:	80 00       	ld.sh	r0,r0[0x0]
80005e2e:	5e d4       	retvc	r4
80005e30:	80 00       	ld.sh	r0,r0[0x0]
80005e32:	5f 00       	sreq	r0
80005e34:	80 00       	ld.sh	r0,r0[0x0]
80005e36:	5e de       	retvc	-1
80005e38:	80 00       	ld.sh	r0,r0[0x0]
80005e3a:	5e de       	retvc	-1
80005e3c:	80 00       	ld.sh	r0,r0[0x0]
80005e3e:	5e de       	retvc	-1
80005e40:	80 00       	ld.sh	r0,r0[0x0]
80005e42:	5e de       	retvc	-1
80005e44:	80 00       	ld.sh	r0,r0[0x0]
80005e46:	5e de       	retvc	-1
80005e48:	80 00       	ld.sh	r0,r0[0x0]
80005e4a:	5e de       	retvc	-1
80005e4c:	80 00       	ld.sh	r0,r0[0x0]
80005e4e:	5e c4       	retvs	r4
80005e50:	80 00       	ld.sh	r0,r0[0x0]
80005e52:	5e d4       	retvc	r4
80005e54:	80 00       	ld.sh	r0,r0[0x0]
80005e56:	5e d4       	retvc	r4
80005e58:	80 00       	ld.sh	r0,r0[0x0]
80005e5a:	5e d4       	retvc	r4
80005e5c:	80 00       	ld.sh	r0,r0[0x0]
80005e5e:	5e d4       	retvc	r4
80005e60:	80 00       	ld.sh	r0,r0[0x0]
80005e62:	5e d4       	retvc	r4
80005e64:	80 00       	ld.sh	r0,r0[0x0]
80005e66:	5f 00       	sreq	r0
80005e68:	80 00       	ld.sh	r0,r0[0x0]
80005e6a:	5e d4       	retvc	r4
80005e6c:	80 00       	ld.sh	r0,r0[0x0]
80005e6e:	5e de       	retvc	-1
80005e70:	80 00       	ld.sh	r0,r0[0x0]
80005e72:	5e da       	retvc	r10
80005e74:	80 00       	ld.sh	r0,r0[0x0]
80005e76:	5e c4       	retvs	r4
80005e78:	80 00       	ld.sh	r0,r0[0x0]
80005e7a:	5f 00       	sreq	r0
80005e7c:	80 00       	ld.sh	r0,r0[0x0]
80005e7e:	5e de       	retvc	-1
80005e80:	80 00       	ld.sh	r0,r0[0x0]
80005e82:	5e de       	retvc	-1
80005e84:	80 00       	ld.sh	r0,r0[0x0]
80005e86:	5f 00       	sreq	r0
80005e88:	80 00       	ld.sh	r0,r0[0x0]
80005e8a:	5f 00       	sreq	r0
80005e8c:	80 00       	ld.sh	r0,r0[0x0]
80005e8e:	5e d4       	retvc	r4
80005e90:	80 00       	ld.sh	r0,r0[0x0]
80005e92:	5e c4       	retvs	r4
80005e94:	80 00       	ld.sh	r0,r0[0x0]
80005e96:	5e c4       	retvs	r4
80005e98:	80 00       	ld.sh	r0,r0[0x0]
80005e9a:	5e c4       	retvs	r4
80005e9c:	80 00       	ld.sh	r0,r0[0x0]
80005e9e:	5e c4       	retvs	r4
80005ea0:	80 00       	ld.sh	r0,r0[0x0]
80005ea2:	5e c4       	retvs	r4
80005ea4:	80 00       	ld.sh	r0,r0[0x0]
80005ea6:	5e c4       	retvs	r4
80005ea8:	80 00       	ld.sh	r0,r0[0x0]
80005eaa:	5e c4       	retvs	r4
80005eac:	80 00       	ld.sh	r0,r0[0x0]
80005eae:	5e c4       	retvs	r4
80005eb0:	80 00       	ld.sh	r0,r0[0x0]
80005eb2:	5e d4       	retvc	r4
80005eb4:	80 00       	ld.sh	r0,r0[0x0]
80005eb6:	5e c4       	retvs	r4
80005eb8:	80 00       	ld.sh	r0,r0[0x0]
80005eba:	5f 00       	sreq	r0
80005ebc:	80 00       	ld.sh	r0,r0[0x0]
80005ebe:	5e d4       	retvc	r4
80005ec0:	80 00       	ld.sh	r0,r0[0x0]
80005ec2:	5e d4       	retvc	r4
80005ec4:	58 09       	cp.w	r9,0
80005ec6:	5f 0e       	sreq	lr
80005ec8:	58 0a       	cp.w	r10,0
80005eca:	5f 08       	sreq	r8
80005ecc:	fd e8 10 08 	or	r8,lr,r8
80005ed0:	c0 70       	breq	80005ede <d_make_comp+0x116>
80005ed2:	c1 78       	rjmp	80005f00 <d_make_comp+0x138>
80005ed4:	58 0a       	cp.w	r10,0
80005ed6:	c0 41       	brne	80005ede <d_make_comp+0x116>
80005ed8:	c1 48       	rjmp	80005f00 <d_make_comp+0x138>
80005eda:	58 09       	cp.w	r9,0
80005edc:	c1 20       	breq	80005f00 <d_make_comp+0x138>
80005ede:	78 58       	ld.w	r8,r12[0x14]
80005ee0:	78 6e       	ld.w	lr,r12[0x18]
80005ee2:	1c 38       	cp.w	r8,lr
80005ee4:	c0 e4       	brge	80005f00 <d_make_comp+0x138>
80005ee6:	f0 ce ff ff 	sub	lr,r8,-1
80005eea:	99 5e       	st.w	r12[0x14],lr
80005eec:	f0 08 00 18 	add	r8,r8,r8<<0x1
80005ef0:	78 4e       	ld.w	lr,r12[0x10]
80005ef2:	fc 08 00 2c 	add	r12,lr,r8<<0x2
80005ef6:	c0 60       	breq	80005f02 <d_make_comp+0x13a>
80005ef8:	99 0b       	st.w	r12[0x0],r11
80005efa:	99 1a       	st.w	r12[0x4],r10
80005efc:	99 29       	st.w	r12[0x8],r9
80005efe:	d8 02       	popm	pc
80005f00:	30 0c       	mov	r12,0
80005f02:	d8 02       	popm	pc
80005f04:	80 00       	ld.sh	r0,r0[0x0]
80005f06:	5d dc       	*unknown*

80005f08 <d_make_name>:
80005f08:	78 58       	ld.w	r8,r12[0x14]
80005f0a:	78 69       	ld.w	r9,r12[0x18]
80005f0c:	12 38       	cp.w	r8,r9
80005f0e:	c0 35       	brlt	80005f14 <d_make_name+0xc>
80005f10:	30 0c       	mov	r12,0
80005f12:	c0 98       	rjmp	80005f24 <d_make_name+0x1c>
80005f14:	f0 c9 ff ff 	sub	r9,r8,-1
80005f18:	f0 08 00 18 	add	r8,r8,r8<<0x1
80005f1c:	99 59       	st.w	r12[0x14],r9
80005f1e:	78 49       	ld.w	r9,r12[0x10]
80005f20:	f2 08 00 2c 	add	r12,r9,r8<<0x2
80005f24:	58 0c       	cp.w	r12,0
80005f26:	5f 09       	sreq	r9
80005f28:	58 0b       	cp.w	r11,0
80005f2a:	5f 08       	sreq	r8
80005f2c:	f3 e8 10 08 	or	r8,r9,r8
80005f30:	c0 71       	brne	80005f3e <d_make_name+0x36>
80005f32:	58 0a       	cp.w	r10,0
80005f34:	c0 50       	breq	80005f3e <d_make_name+0x36>
80005f36:	99 1b       	st.w	r12[0x4],r11
80005f38:	99 2a       	st.w	r12[0x8],r10
80005f3a:	99 08       	st.w	r12[0x0],r8
80005f3c:	5e fc       	retal	r12
80005f3e:	5e fd       	retal	0

80005f40 <d_number>:
80005f40:	d4 01       	pushm	lr
80005f42:	78 38       	ld.w	r8,r12[0xc]
80005f44:	11 39       	ld.ub	r9,r8++
80005f46:	36 ea       	mov	r10,110
80005f48:	30 9b       	mov	r11,9
80005f4a:	f4 09 18 00 	cp.b	r9,r10
80005f4e:	f9 ba 01 00 	movne	r10,0
80005f52:	f9 f8 0a 03 	st.weq	r12[0xc],r8
80005f56:	f1 f9 08 00 	ld.ubeq	r9,r8[0x0]
80005f5a:	f9 ba 00 01 	moveq	r10,1
80005f5e:	30 08       	mov	r8,0
80005f60:	f0 08 00 2e 	add	lr,r8,r8<<0x2
80005f64:	f2 0e 00 1e 	add	lr,r9,lr<<0x1
80005f68:	23 09       	sub	r9,48
80005f6a:	f6 09 18 00 	cp.b	r9,r11
80005f6e:	e0 88 00 07 	brls	80005f7c <d_number+0x3c>
80005f72:	58 0a       	cp.w	r10,0
80005f74:	fb b8 01 00 	rsubne	r8,0
80005f78:	10 9c       	mov	r12,r8
80005f7a:	d8 02       	popm	pc
80005f7c:	78 39       	ld.w	r9,r12[0xc]
80005f7e:	fc c8 00 30 	sub	r8,lr,48
80005f82:	2f f9       	sub	r9,-1
80005f84:	99 39       	st.w	r12[0xc],r9
80005f86:	13 89       	ld.ub	r9,r9[0x0]
80005f88:	ce cb       	rjmp	80005f60 <d_number+0x20>

80005f8a <d_call_offset>:
80005f8a:	d4 21       	pushm	r4-r7,lr
80005f8c:	18 97       	mov	r7,r12
80005f8e:	58 0b       	cp.w	r11,0
80005f90:	c0 71       	brne	80005f9e <d_call_offset+0x14>
80005f92:	78 38       	ld.w	r8,r12[0xc]
80005f94:	11 8b       	ld.ub	r11,r8[0x0]
80005f96:	58 0b       	cp.w	r11,0
80005f98:	c1 f0       	breq	80005fd6 <d_call_offset+0x4c>
80005f9a:	2f f8       	sub	r8,-1
80005f9c:	99 38       	st.w	r12[0xc],r8
80005f9e:	e0 4b 00 68 	cp.w	r11,104
80005fa2:	c0 e0       	breq	80005fbe <d_call_offset+0x34>
80005fa4:	e0 4b 00 76 	cp.w	r11,118
80005fa8:	c1 71       	brne	80005fd6 <d_call_offset+0x4c>
80005faa:	0e 9c       	mov	r12,r7
80005fac:	cc af       	rcall	80005f40 <d_number>
80005fae:	6e 38       	ld.w	r8,r7[0xc]
80005fb0:	35 f9       	mov	r9,95
80005fb2:	11 8a       	ld.ub	r10,r8[0x0]
80005fb4:	f2 0a 18 00 	cp.b	r10,r9
80005fb8:	c0 f1       	brne	80005fd6 <d_call_offset+0x4c>
80005fba:	2f f8       	sub	r8,-1
80005fbc:	8f 38       	st.w	r7[0xc],r8
80005fbe:	0e 9c       	mov	r12,r7
80005fc0:	cc 0f       	rcall	80005f40 <d_number>
80005fc2:	6e 38       	ld.w	r8,r7[0xc]
80005fc4:	35 f9       	mov	r9,95
80005fc6:	11 8a       	ld.ub	r10,r8[0x0]
80005fc8:	f2 0a 18 00 	cp.b	r10,r9
80005fcc:	c0 51       	brne	80005fd6 <d_call_offset+0x4c>
80005fce:	2f f8       	sub	r8,-1
80005fd0:	30 1c       	mov	r12,1
80005fd2:	8f 38       	st.w	r7[0xc],r8
80005fd4:	d8 22       	popm	r4-r7,pc
80005fd6:	d8 2a       	popm	r4-r7,pc,r12=0

80005fd8 <d_cv_qualifiers>:
80005fd8:	d4 31       	pushm	r0-r7,lr
80005fda:	20 1d       	sub	sp,4
80005fdc:	78 38       	ld.w	r8,r12[0xc]
80005fde:	18 97       	mov	r7,r12
80005fe0:	11 89       	ld.ub	r9,r8[0x0]
80005fe2:	16 96       	mov	r6,r11
80005fe4:	58 0a       	cp.w	r10,0
80005fe6:	f9 b1 01 1a 	movne	r1,26
80005fea:	f9 b1 00 17 	moveq	r1,23
80005fee:	37 24       	mov	r4,114
80005ff0:	35 65       	mov	r5,86
80005ff2:	30 03       	mov	r3,0
80005ff4:	34 b2       	mov	r2,75
80005ff6:	f9 b0 01 1c 	movne	r0,28
80005ffa:	f9 b0 00 19 	moveq	r0,25
80005ffe:	f9 b8 01 1b 	movne	r8,27
80006002:	f9 b8 00 18 	moveq	r8,24
80006006:	c2 a8       	rjmp	8000605a <d_cv_qualifiers+0x82>
80006008:	6e 39       	ld.w	r9,r7[0xc]
8000600a:	2f f9       	sub	r9,-1
8000600c:	8f 39       	st.w	r7[0xc],r9
8000600e:	58 0b       	cp.w	r11,0
80006010:	c0 60       	breq	8000601c <d_cv_qualifiers+0x44>
80006012:	6e c9       	ld.w	r9,r7[0x30]
80006014:	02 9b       	mov	r11,r1
80006016:	2f 79       	sub	r9,-9
80006018:	8f c9       	st.w	r7[0x30],r9
8000601a:	c1 28       	rjmp	8000603e <d_cv_qualifiers+0x66>
8000601c:	58 0a       	cp.w	r10,0
8000601e:	ef f9 10 0c 	ld.wne	r9,r7[0x30]
80006022:	f7 b9 01 f7 	subne	r9,-9
80006026:	ef f9 1a 0c 	st.wne	r7[0x30],r9
8000602a:	f0 0b 17 10 	movne	r11,r8
8000602e:	ef f9 00 0c 	ld.weq	r9,r7[0x30]
80006032:	f7 b9 00 fa 	subeq	r9,-6
80006036:	ef f9 0a 0c 	st.weq	r7[0x30],r9
8000603a:	e0 0b 17 00 	moveq	r11,r0
8000603e:	30 09       	mov	r9,0
80006040:	50 08       	stdsp	sp[0x0],r8
80006042:	0e 9c       	mov	r12,r7
80006044:	12 9a       	mov	r10,r9
80006046:	cc 1e       	rcall	80005dc8 <d_make_comp>
80006048:	8d 0c       	st.w	r6[0x0],r12
8000604a:	40 08       	lddsp	r8,sp[0x0]
8000604c:	c0 31       	brne	80006052 <d_cv_qualifiers+0x7a>
8000604e:	18 96       	mov	r6,r12
80006050:	c1 38       	rjmp	80006076 <d_cv_qualifiers+0x9e>
80006052:	6e 39       	ld.w	r9,r7[0xc]
80006054:	f8 c6 ff fc 	sub	r6,r12,-4
80006058:	13 89       	ld.ub	r9,r9[0x0]
8000605a:	e8 09 18 00 	cp.b	r9,r4
8000605e:	5f 0b       	sreq	r11
80006060:	ea 09 18 00 	cp.b	r9,r5
80006064:	5f 0a       	sreq	r10
80006066:	f5 eb 10 0c 	or	r12,r10,r11
8000606a:	e6 0c 18 00 	cp.b	r12,r3
8000606e:	cc d1       	brne	80006008 <d_cv_qualifiers+0x30>
80006070:	e4 09 18 00 	cp.b	r9,r2
80006074:	cc a0       	breq	80006008 <d_cv_qualifiers+0x30>
80006076:	0c 9c       	mov	r12,r6
80006078:	2f fd       	sub	sp,-4
8000607a:	d8 32       	popm	r0-r7,pc

8000607c <d_template_param>:
8000607c:	d4 21       	pushm	r4-r7,lr
8000607e:	35 49       	mov	r9,84
80006080:	78 38       	ld.w	r8,r12[0xc]
80006082:	18 97       	mov	r7,r12
80006084:	11 8a       	ld.ub	r10,r8[0x0]
80006086:	f2 0a 18 00 	cp.b	r10,r9
8000608a:	c2 a1       	brne	800060de <d_template_param+0x62>
8000608c:	2f f8       	sub	r8,-1
8000608e:	99 38       	st.w	r12[0xc],r8
80006090:	11 89       	ld.ub	r9,r8[0x0]
80006092:	35 f8       	mov	r8,95
80006094:	f0 09 18 00 	cp.b	r9,r8
80006098:	c0 31       	brne	8000609e <d_template_param+0x22>
8000609a:	30 08       	mov	r8,0
8000609c:	c0 58       	rjmp	800060a6 <d_template_param+0x2a>
8000609e:	c5 1f       	rcall	80005f40 <d_number>
800060a0:	c1 f5       	brlt	800060de <d_template_param+0x62>
800060a2:	f8 c8 ff ff 	sub	r8,r12,-1
800060a6:	6e 39       	ld.w	r9,r7[0xc]
800060a8:	35 fa       	mov	r10,95
800060aa:	13 8b       	ld.ub	r11,r9[0x0]
800060ac:	f4 0b 18 00 	cp.b	r11,r10
800060b0:	c1 71       	brne	800060de <d_template_param+0x62>
800060b2:	2f f9       	sub	r9,-1
800060b4:	8f 39       	st.w	r7[0xc],r9
800060b6:	6e a9       	ld.w	r9,r7[0x28]
800060b8:	2f f9       	sub	r9,-1
800060ba:	8f a9       	st.w	r7[0x28],r9
800060bc:	6e 5c       	ld.w	r12,r7[0x14]
800060be:	6e 69       	ld.w	r9,r7[0x18]
800060c0:	12 3c       	cp.w	r12,r9
800060c2:	c0 e4       	brge	800060de <d_template_param+0x62>
800060c4:	f8 c9 ff ff 	sub	r9,r12,-1
800060c8:	8f 59       	st.w	r7[0x14],r9
800060ca:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
800060ce:	6e 49       	ld.w	r9,r7[0x10]
800060d0:	f2 0c 00 2c 	add	r12,r9,r12<<0x2
800060d4:	c0 60       	breq	800060e0 <d_template_param+0x64>
800060d6:	99 18       	st.w	r12[0x4],r8
800060d8:	30 58       	mov	r8,5
800060da:	99 08       	st.w	r12[0x0],r8
800060dc:	d8 22       	popm	r4-r7,pc
800060de:	30 0c       	mov	r12,0
800060e0:	d8 22       	popm	r4-r7,pc
	...

800060e4 <d_substitution>:
800060e4:	d4 21       	pushm	r4-r7,lr
800060e6:	35 39       	mov	r9,83
800060e8:	18 98       	mov	r8,r12
800060ea:	78 3a       	ld.w	r10,r12[0xc]
800060ec:	15 8c       	ld.ub	r12,r10[0x0]
800060ee:	f2 0c 18 00 	cp.b	r12,r9
800060f2:	e0 81 00 b3 	brne	80006258 <d_substitution+0x174>
800060f6:	2f fa       	sub	r10,-1
800060f8:	91 3a       	st.w	r8[0xc],r10
800060fa:	15 39       	ld.ub	r9,r10++
800060fc:	58 09       	cp.w	r9,0
800060fe:	f1 fa 1a 03 	st.wne	r8[0xc],r10
80006102:	f2 cc 00 30 	sub	r12,r9,48
80006106:	30 9a       	mov	r10,9
80006108:	f4 0c 18 00 	cp.b	r12,r10
8000610c:	5f 8e       	srls	lr
8000610e:	35 fc       	mov	r12,95
80006110:	f8 09 18 00 	cp.b	r9,r12
80006114:	5f 0a       	sreq	r10
80006116:	fd ea 10 0a 	or	r10,lr,r10
8000611a:	30 0e       	mov	lr,0
8000611c:	fc 0a 18 00 	cp.b	r10,lr
80006120:	c0 91       	brne	80006132 <d_substitution+0x4e>
80006122:	f2 ce 00 41 	sub	lr,r9,65
80006126:	31 9c       	mov	r12,25
80006128:	f8 0e 18 00 	cp.b	lr,r12
8000612c:	e0 88 00 08 	brls	8000613c <d_substitution+0x58>
80006130:	c3 b8       	rjmp	800061a6 <d_substitution+0xc2>
80006132:	f8 09 18 00 	cp.b	r9,r12
80006136:	c0 31       	brne	8000613c <d_substitution+0x58>
80006138:	30 0b       	mov	r11,0
8000613a:	c2 c8       	rjmp	80006192 <d_substitution+0xae>
8000613c:	30 0a       	mov	r10,0
8000613e:	30 97       	mov	r7,9
80006140:	31 9e       	mov	lr,25
80006142:	35 fc       	mov	r12,95
80006144:	f2 cb 00 30 	sub	r11,r9,48
80006148:	ee 0b 18 00 	cp.b	r11,r7
8000614c:	e0 8b 00 09 	brhi	8000615e <d_substitution+0x7a>
80006150:	f4 0a 00 3b 	add	r11,r10,r10<<0x3
80006154:	f2 0b 00 29 	add	r9,r9,r11<<0x2
80006158:	f2 cb 00 30 	sub	r11,r9,48
8000615c:	c0 d8       	rjmp	80006176 <d_substitution+0x92>
8000615e:	f2 cb 00 41 	sub	r11,r9,65
80006162:	fc 0b 18 00 	cp.b	r11,lr
80006166:	e0 8b 00 79 	brhi	80006258 <d_substitution+0x174>
8000616a:	f4 0a 00 3b 	add	r11,r10,r10<<0x3
8000616e:	f2 0b 00 29 	add	r9,r9,r11<<0x2
80006172:	f2 cb 00 37 	sub	r11,r9,55
80006176:	14 3b       	cp.w	r11,r10
80006178:	c7 03       	brcs	80006258 <d_substitution+0x174>
8000617a:	70 39       	ld.w	r9,r8[0xc]
8000617c:	16 9a       	mov	r10,r11
8000617e:	f2 c6 ff ff 	sub	r6,r9,-1
80006182:	13 89       	ld.ub	r9,r9[0x0]
80006184:	58 09       	cp.w	r9,0
80006186:	cd f0       	breq	80006144 <d_substitution+0x60>
80006188:	91 36       	st.w	r8[0xc],r6
8000618a:	f8 09 18 00 	cp.b	r9,r12
8000618e:	cd b1       	brne	80006144 <d_substitution+0x60>
80006190:	2f fb       	sub	r11,-1
80006192:	70 89       	ld.w	r9,r8[0x20]
80006194:	12 3b       	cp.w	r11,r9
80006196:	c6 12       	brcc	80006258 <d_substitution+0x174>
80006198:	70 79       	ld.w	r9,r8[0x1c]
8000619a:	f2 0b 03 2c 	ld.w	r12,r9[r11<<0x2]
8000619e:	70 a9       	ld.w	r9,r8[0x28]
800061a0:	2f f9       	sub	r9,-1
800061a2:	91 a9       	st.w	r8[0x28],r9
800061a4:	d8 22       	popm	r4-r7,pc
800061a6:	58 0b       	cp.w	r11,0
800061a8:	5f 1e       	srne	lr
800061aa:	70 2b       	ld.w	r11,r8[0x8]
800061ac:	f7 db c0 61 	bfextu	r11,r11,0x3,0x1
800061b0:	16 9c       	mov	r12,r11
800061b2:	ec 1c 00 01 	eorl	r12,0x1
800061b6:	fd ec 00 0c 	and	r12,lr,r12
800061ba:	f4 0c 18 00 	cp.b	r12,r10
800061be:	c0 80       	breq	800061ce <d_substitution+0xea>
800061c0:	70 3a       	ld.w	r10,r8[0xc]
800061c2:	15 8b       	ld.ub	r11,r10[0x0]
800061c4:	30 1a       	mov	r10,1
800061c6:	24 3b       	sub	r11,67
800061c8:	f4 0b 18 00 	cp.b	r11,r10
800061cc:	5f 8b       	srls	r11
800061ce:	4a 4c       	lddpc	r12,8000625c <d_substitution+0x178>
800061d0:	18 9a       	mov	r10,r12
800061d2:	f8 cc ff 3c 	sub	r12,r12,-196
800061d6:	c3 f8       	rjmp	80006254 <d_substitution+0x170>
800061d8:	15 8e       	ld.ub	lr,r10[0x0]
800061da:	f2 0e 18 00 	cp.b	lr,r9
800061de:	c3 a1       	brne	80006252 <d_substitution+0x16e>
800061e0:	74 5c       	ld.w	r12,r10[0x14]
800061e2:	58 0c       	cp.w	r12,0
800061e4:	c1 90       	breq	80006216 <d_substitution+0x132>
800061e6:	74 6e       	ld.w	lr,r10[0x18]
800061e8:	70 59       	ld.w	r9,r8[0x14]
800061ea:	70 67       	ld.w	r7,r8[0x18]
800061ec:	0e 39       	cp.w	r9,r7
800061ee:	c0 35       	brlt	800061f4 <d_substitution+0x110>
800061f0:	30 09       	mov	r9,0
800061f2:	c1 18       	rjmp	80006214 <d_substitution+0x130>
800061f4:	f2 c7 ff ff 	sub	r7,r9,-1
800061f8:	91 57       	st.w	r8[0x14],r7
800061fa:	f2 09 00 19 	add	r9,r9,r9<<0x1
800061fe:	70 47       	ld.w	r7,r8[0x10]
80006200:	ee 09 00 29 	add	r9,r7,r9<<0x2
80006204:	f3 fc 1a 01 	st.wne	r9[0x4],r12
80006208:	f3 fe 1a 02 	st.wne	r9[0x8],lr
8000620c:	f9 bc 01 16 	movne	r12,22
80006210:	f3 fc 1a 00 	st.wne	r9[0x0],r12
80006214:	91 b9       	st.w	r8[0x2c],r9
80006216:	58 0b       	cp.w	r11,0
80006218:	f5 f9 10 04 	ld.wne	r9,r10[0x10]
8000621c:	f5 fa 10 03 	ld.wne	r10,r10[0xc]
80006220:	f5 f9 00 02 	ld.weq	r9,r10[0x8]
80006224:	f5 fa 00 01 	ld.weq	r10,r10[0x4]
80006228:	70 cb       	ld.w	r11,r8[0x30]
8000622a:	12 0b       	add	r11,r9
8000622c:	91 cb       	st.w	r8[0x30],r11
8000622e:	70 5c       	ld.w	r12,r8[0x14]
80006230:	70 6b       	ld.w	r11,r8[0x18]
80006232:	16 3c       	cp.w	r12,r11
80006234:	c1 24       	brge	80006258 <d_substitution+0x174>
80006236:	f8 cb ff ff 	sub	r11,r12,-1
8000623a:	91 5b       	st.w	r8[0x14],r11
8000623c:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
80006240:	70 48       	ld.w	r8,r8[0x10]
80006242:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80006246:	c0 a0       	breq	8000625a <d_substitution+0x176>
80006248:	31 68       	mov	r8,22
8000624a:	99 1a       	st.w	r12[0x4],r10
8000624c:	99 29       	st.w	r12[0x8],r9
8000624e:	99 08       	st.w	r12[0x0],r8
80006250:	d8 22       	popm	r4-r7,pc
80006252:	2e 4a       	sub	r10,-28
80006254:	18 3a       	cp.w	r10,r12
80006256:	cc 11       	brne	800061d8 <d_substitution+0xf4>
80006258:	30 0c       	mov	r12,0
8000625a:	d8 22       	popm	r4-r7,pc
8000625c:	80 00       	ld.sh	r0,r0[0x0]
8000625e:	89 ec       	st.w	r4[0x38],r12

80006260 <d_append_char>:
80006260:	d4 21       	pushm	r4-r7,lr
80006262:	16 96       	mov	r6,r11
80006264:	18 97       	mov	r7,r12
80006266:	f8 fb 01 04 	ld.w	r11,r12[260]
8000626a:	e0 4b 00 ff 	cp.w	r11,255
8000626e:	c1 21       	brne	80006292 <d_append_char+0x32>
80006270:	30 08       	mov	r8,0
80006272:	f8 fa 01 10 	ld.w	r10,r12[272]
80006276:	f9 68 01 03 	st.b	r12[259],r8
8000627a:	f8 f8 01 0c 	ld.w	r8,r12[268]
8000627e:	2f cc       	sub	r12,-4
80006280:	5d 18       	icall	r8
80006282:	ee f8 01 24 	ld.w	r8,r7[292]
80006286:	2f f8       	sub	r8,-1
80006288:	ef 48 01 24 	st.w	r7[292],r8
8000628c:	30 08       	mov	r8,0
8000628e:	ef 48 01 04 	st.w	r7[260],r8
80006292:	ee f8 01 04 	ld.w	r8,r7[260]
80006296:	ef 66 01 08 	st.b	r7[264],r6
8000629a:	f0 c9 ff ff 	sub	r9,r8,-1
8000629e:	ef 49 01 04 	st.w	r7[260],r9
800062a2:	10 07       	add	r7,r8
800062a4:	ae c6       	st.b	r7[0x4],r6
800062a6:	d8 22       	popm	r4-r7,pc

800062a8 <d_append_buffer>:
800062a8:	d4 21       	pushm	r4-r7,lr
800062aa:	30 05       	mov	r5,0
800062ac:	18 96       	mov	r6,r12
800062ae:	16 97       	mov	r7,r11
800062b0:	14 94       	mov	r4,r10
800062b2:	c0 68       	rjmp	800062be <d_append_buffer+0x16>
800062b4:	ee 05 07 0b 	ld.ub	r11,r7[r5]
800062b8:	0c 9c       	mov	r12,r6
800062ba:	2f f5       	sub	r5,-1
800062bc:	cd 2f       	rcall	80006260 <d_append_char>
800062be:	08 35       	cp.w	r5,r4
800062c0:	cf a3       	brcs	800062b4 <d_append_buffer+0xc>
800062c2:	d8 22       	popm	r4-r7,pc

800062c4 <d_find_pack>:
800062c4:	d4 21       	pushm	r4-r7,lr
800062c6:	18 96       	mov	r6,r12
800062c8:	16 97       	mov	r7,r11
800062ca:	58 07       	cp.w	r7,0
800062cc:	c5 20       	breq	80006370 <d_find_pack+0xac>
800062ce:	6e 08       	ld.w	r8,r7[0x0]
800062d0:	59 68       	cp.w	r8,22
800062d2:	c4 f0       	breq	80006370 <d_find_pack+0xac>
800062d4:	e0 8b 00 10 	brhi	800062f4 <d_find_pack+0x30>
800062d8:	58 68       	cp.w	r8,6
800062da:	c4 b0       	breq	80006370 <d_find_pack+0xac>
800062dc:	e0 8b 00 07 	brhi	800062ea <d_find_pack+0x26>
800062e0:	58 08       	cp.w	r8,0
800062e2:	c4 70       	breq	80006370 <d_find_pack+0xac>
800062e4:	58 58       	cp.w	r8,5
800062e6:	c3 f1       	brne	80006364 <d_find_pack+0xa0>
800062e8:	c1 98       	rjmp	8000631a <d_find_pack+0x56>
800062ea:	58 78       	cp.w	r8,7
800062ec:	c4 00       	breq	8000636c <d_find_pack+0xa8>
800062ee:	58 88       	cp.w	r8,8
800062f0:	c3 a1       	brne	80006364 <d_find_pack+0xa0>
800062f2:	c3 d8       	rjmp	8000636c <d_find_pack+0xa8>
800062f4:	e0 48 00 2c 	cp.w	r8,44
800062f8:	c3 a0       	breq	8000636c <d_find_pack+0xa8>
800062fa:	e0 8b 00 09 	brhi	8000630c <d_find_pack+0x48>
800062fe:	e0 48 00 23 	cp.w	r8,35
80006302:	c3 70       	breq	80006370 <d_find_pack+0xac>
80006304:	e0 48 00 2b 	cp.w	r8,43
80006308:	c2 e1       	brne	80006364 <d_find_pack+0xa0>
8000630a:	c3 38       	rjmp	80006370 <d_find_pack+0xac>
8000630c:	e0 48 00 38 	cp.w	r8,56
80006310:	c3 00       	breq	80006370 <d_find_pack+0xac>
80006312:	e0 48 00 3a 	cp.w	r8,58
80006316:	c2 71       	brne	80006364 <d_find_pack+0xa0>
80006318:	c2 c8       	rjmp	80006370 <d_find_pack+0xac>
8000631a:	ec fc 01 14 	ld.w	r12,r6[276]
8000631e:	58 0c       	cp.w	r12,0
80006320:	c0 51       	brne	8000632a <d_find_pack+0x66>
80006322:	30 18       	mov	r8,1
80006324:	ed 48 01 1c 	st.w	r6[284],r8
80006328:	d8 22       	popm	r4-r7,pc
8000632a:	78 18       	ld.w	r8,r12[0x4]
8000632c:	6e 19       	ld.w	r9,r7[0x4]
8000632e:	c0 98       	rjmp	80006340 <d_find_pack+0x7c>
80006330:	70 0a       	ld.w	r10,r8[0x0]
80006332:	e0 4a 00 2a 	cp.w	r10,42
80006336:	c1 d1       	brne	80006370 <d_find_pack+0xac>
80006338:	58 09       	cp.w	r9,0
8000633a:	e0 8a 00 06 	brle	80006346 <d_find_pack+0x82>
8000633e:	20 19       	sub	r9,1
80006340:	70 28       	ld.w	r8,r8[0x8]
80006342:	58 08       	cp.w	r8,0
80006344:	cf 61       	brne	80006330 <d_find_pack+0x6c>
80006346:	58 09       	cp.w	r9,0
80006348:	5f 19       	srne	r9
8000634a:	58 08       	cp.w	r8,0
8000634c:	5f 0a       	sreq	r10
8000634e:	f5 e9 10 09 	or	r9,r10,r9
80006352:	c0 f1       	brne	80006370 <d_find_pack+0xac>
80006354:	70 1c       	ld.w	r12,r8[0x4]
80006356:	58 0c       	cp.w	r12,0
80006358:	c0 d0       	breq	80006372 <d_find_pack+0xae>
8000635a:	78 08       	ld.w	r8,r12[0x0]
8000635c:	e0 48 00 2a 	cp.w	r8,42
80006360:	c0 81       	brne	80006370 <d_find_pack+0xac>
80006362:	d8 22       	popm	r4-r7,pc
80006364:	6e 1b       	ld.w	r11,r7[0x4]
80006366:	0c 9c       	mov	r12,r6
80006368:	ca ef       	rcall	800062c4 <d_find_pack>
8000636a:	c0 41       	brne	80006372 <d_find_pack+0xae>
8000636c:	6e 27       	ld.w	r7,r7[0x8]
8000636e:	ca eb       	rjmp	800062ca <d_find_pack+0x6>
80006370:	30 0c       	mov	r12,0
80006372:	d8 22       	popm	r4-r7,pc

80006374 <d_append_string>:
80006374:	d4 21       	pushm	r4-r7,lr
80006376:	20 1d       	sub	sp,4
80006378:	18 97       	mov	r7,r12
8000637a:	50 0b       	stdsp	sp[0x0],r11
8000637c:	16 9c       	mov	r12,r11
8000637e:	f0 1f 00 05 	mcall	80006390 <d_append_string+0x1c>
80006382:	40 0b       	lddsp	r11,sp[0x0]
80006384:	18 9a       	mov	r10,r12
80006386:	0e 9c       	mov	r12,r7
80006388:	c9 0f       	rcall	800062a8 <d_append_buffer>
8000638a:	2f fd       	sub	sp,-4
8000638c:	d8 22       	popm	r4-r7,pc
8000638e:	00 00       	add	r0,r0
80006390:	80 00       	ld.sh	r0,r0[0x0]
80006392:	c2 9e       	rcall	80005fe4 <d_cv_qualifiers+0xc>

80006394 <d_source_name>:
80006394:	d4 21       	pushm	r4-r7,lr
80006396:	18 97       	mov	r7,r12
80006398:	fe b0 fd d4 	rcall	80005f40 <d_number>
8000639c:	18 96       	mov	r6,r12
8000639e:	e0 89 00 03 	brgt	800063a4 <d_source_name+0x10>
800063a2:	d8 2a       	popm	r4-r7,pc,r12=0
800063a4:	6e 35       	ld.w	r5,r7[0xc]
800063a6:	6e 18       	ld.w	r8,r7[0x4]
800063a8:	0a 18       	sub	r8,r5
800063aa:	18 38       	cp.w	r8,r12
800063ac:	c0 34       	brge	800063b2 <d_source_name+0x1e>
800063ae:	30 0c       	mov	r12,0
800063b0:	c3 c8       	rjmp	80006428 <d_source_name+0x94>
800063b2:	ea 0c 00 08 	add	r8,r5,r12
800063b6:	8f 38       	st.w	r7[0xc],r8
800063b8:	6e 29       	ld.w	r9,r7[0x8]
800063ba:	ed b9 00 02 	bld	r9,0x2
800063be:	c0 71       	brne	800063cc <d_source_name+0x38>
800063c0:	11 3a       	ld.ub	r10,r8++
800063c2:	32 49       	mov	r9,36
800063c4:	f2 0a 18 00 	cp.b	r10,r9
800063c8:	ef f8 0a 03 	st.weq	r7[0xc],r8
800063cc:	58 96       	cp.w	r6,9
800063ce:	e0 8a 00 28 	brle	8000641e <d_source_name+0x8a>
800063d2:	30 8a       	mov	r10,8
800063d4:	49 6b       	lddpc	r11,8000642c <d_source_name+0x98>
800063d6:	0a 9c       	mov	r12,r5
800063d8:	f0 1f 00 16 	mcall	80006430 <d_source_name+0x9c>
800063dc:	c2 11       	brne	8000641e <d_source_name+0x8a>
800063de:	35 fa       	mov	r10,95
800063e0:	ea c9 ff f8 	sub	r9,r5,-8
800063e4:	13 88       	ld.ub	r8,r9[0x0]
800063e6:	f4 08 18 00 	cp.b	r8,r10
800063ea:	5f 0b       	sreq	r11
800063ec:	32 ea       	mov	r10,46
800063ee:	f4 08 18 00 	cp.b	r8,r10
800063f2:	5f 0a       	sreq	r10
800063f4:	f7 ea 10 0a 	or	r10,r11,r10
800063f8:	f8 0a 18 00 	cp.b	r10,r12
800063fc:	c0 51       	brne	80006406 <d_source_name+0x72>
800063fe:	32 4a       	mov	r10,36
80006400:	f4 08 18 00 	cp.b	r8,r10
80006404:	c0 d1       	brne	8000641e <d_source_name+0x8a>
80006406:	13 99       	ld.ub	r9,r9[0x1]
80006408:	34 e8       	mov	r8,78
8000640a:	f0 09 18 00 	cp.b	r9,r8
8000640e:	c0 81       	brne	8000641e <d_source_name+0x8a>
80006410:	6e c8       	ld.w	r8,r7[0x30]
80006412:	31 5a       	mov	r10,21
80006414:	2e a8       	sub	r8,-22
80006416:	48 8b       	lddpc	r11,80006434 <d_source_name+0xa0>
80006418:	0c 18       	sub	r8,r6
8000641a:	8f c8       	st.w	r7[0x30],r8
8000641c:	c0 38       	rjmp	80006422 <d_source_name+0x8e>
8000641e:	0c 9a       	mov	r10,r6
80006420:	0a 9b       	mov	r11,r5
80006422:	0e 9c       	mov	r12,r7
80006424:	fe b0 fd 72 	rcall	80005f08 <d_make_name>
80006428:	8f bc       	st.w	r7[0x2c],r12
8000642a:	d8 22       	popm	r4-r7,pc
8000642c:	80 01       	ld.sh	r1,r0[0x0]
8000642e:	14 50       	eor	r0,r10
80006430:	80 00       	ld.sh	r0,r0[0x0]
80006432:	bb 92       	lsr	r2,0x1b
80006434:	80 01       	ld.sh	r1,r0[0x0]
80006436:	14 5c       	eor	r12,r10

80006438 <d_expression>:
80006438:	d4 21       	pushm	r4-r7,lr
8000643a:	34 ca       	mov	r10,76
8000643c:	78 38       	ld.w	r8,r12[0xc]
8000643e:	18 97       	mov	r7,r12
80006440:	11 89       	ld.ub	r9,r8[0x0]
80006442:	f4 09 18 00 	cp.b	r9,r10
80006446:	c0 41       	brne	8000644e <d_expression+0x16>
80006448:	e0 a0 05 aa 	rcall	80006f9c <d_expr_primary>
8000644c:	c0 68       	rjmp	80006458 <d_expression+0x20>
8000644e:	35 4a       	mov	r10,84
80006450:	f4 09 18 00 	cp.b	r9,r10
80006454:	c0 41       	brne	8000645c <d_expression+0x24>
80006456:	c1 3e       	rcall	8000607c <d_template_param>
80006458:	18 96       	mov	r6,r12
8000645a:	cf e8       	rjmp	80006656 <d_expression+0x21e>
8000645c:	37 3a       	mov	r10,115
8000645e:	f4 09 18 00 	cp.b	r9,r10
80006462:	c3 01       	brne	800064c2 <d_expression+0x8a>
80006464:	11 9a       	ld.ub	r10,r8[0x1]
80006466:	37 2b       	mov	r11,114
80006468:	f6 0a 18 00 	cp.b	r10,r11
8000646c:	c1 f1       	brne	800064aa <d_expression+0x72>
8000646e:	2f e8       	sub	r8,-2
80006470:	99 38       	st.w	r12[0xc],r8
80006472:	cf bc       	rcall	80006668 <d_type>
80006474:	18 96       	mov	r6,r12
80006476:	0e 9c       	mov	r12,r7
80006478:	e0 a0 04 d6 	rcall	80006e24 <d_unqualified_name>
8000647c:	6e 38       	ld.w	r8,r7[0xc]
8000647e:	18 95       	mov	r5,r12
80006480:	11 89       	ld.ub	r9,r8[0x0]
80006482:	34 98       	mov	r8,73
80006484:	f0 09 18 00 	cp.b	r9,r8
80006488:	c0 30       	breq	8000648e <d_expression+0x56>
8000648a:	18 99       	mov	r9,r12
8000648c:	c0 b8       	rjmp	800064a2 <d_expression+0x6a>
8000648e:	0e 9c       	mov	r12,r7
80006490:	e0 a0 05 ec 	rcall	80007068 <d_template_args>
80006494:	18 99       	mov	r9,r12
80006496:	0a 9a       	mov	r10,r5
80006498:	30 4b       	mov	r11,4
8000649a:	0e 9c       	mov	r12,r7
8000649c:	fe b0 fc 96 	rcall	80005dc8 <d_make_comp>
800064a0:	18 99       	mov	r9,r12
800064a2:	0c 9a       	mov	r10,r6
800064a4:	0e 9c       	mov	r12,r7
800064a6:	30 1b       	mov	r11,1
800064a8:	cb a8       	rjmp	8000661c <d_expression+0x1e4>
800064aa:	37 0b       	mov	r11,112
800064ac:	f6 0a 18 00 	cp.b	r10,r11
800064b0:	c3 c1       	brne	80006528 <d_expression+0xf0>
800064b2:	2f e8       	sub	r8,-2
800064b4:	99 38       	st.w	r12[0xc],r8
800064b6:	cc 1f       	rcall	80006438 <d_expression>
800064b8:	30 09       	mov	r9,0
800064ba:	18 9a       	mov	r10,r12
800064bc:	33 ab       	mov	r11,58
800064be:	0e 9c       	mov	r12,r7
800064c0:	ca e8       	rjmp	8000661c <d_expression+0x1e4>
800064c2:	36 6a       	mov	r10,102
800064c4:	f4 09 18 00 	cp.b	r9,r10
800064c8:	c3 01       	brne	80006528 <d_expression+0xf0>
800064ca:	11 9b       	ld.ub	r11,r8[0x1]
800064cc:	37 0a       	mov	r10,112
800064ce:	f4 0b 18 00 	cp.b	r11,r10
800064d2:	c2 b1       	brne	80006528 <d_expression+0xf0>
800064d4:	2f e8       	sub	r8,-2
800064d6:	99 38       	st.w	r12[0xc],r8
800064d8:	11 89       	ld.ub	r9,r8[0x0]
800064da:	35 f8       	mov	r8,95
800064dc:	f0 09 18 00 	cp.b	r9,r8
800064e0:	c0 31       	brne	800064e6 <d_expression+0xae>
800064e2:	30 1c       	mov	r12,1
800064e4:	c0 68       	rjmp	800064f0 <d_expression+0xb8>
800064e6:	fe b0 fd 2d 	rcall	80005f40 <d_number>
800064ea:	e0 85 00 b5 	brlt	80006654 <d_expression+0x21c>
800064ee:	2f ec       	sub	r12,-2
800064f0:	6e 38       	ld.w	r8,r7[0xc]
800064f2:	35 f9       	mov	r9,95
800064f4:	11 8a       	ld.ub	r10,r8[0x0]
800064f6:	f2 0a 18 00 	cp.b	r10,r9
800064fa:	e0 81 00 ad 	brne	80006654 <d_expression+0x21c>
800064fe:	2f f8       	sub	r8,-1
80006500:	8f 38       	st.w	r7[0xc],r8
80006502:	6e 56       	ld.w	r6,r7[0x14]
80006504:	6e 68       	ld.w	r8,r7[0x18]
80006506:	10 36       	cp.w	r6,r8
80006508:	e0 84 00 a6 	brge	80006654 <d_expression+0x21c>
8000650c:	ec c8 ff ff 	sub	r8,r6,-1
80006510:	8f 58       	st.w	r7[0x14],r8
80006512:	ec 06 00 16 	add	r6,r6,r6<<0x1
80006516:	6e 48       	ld.w	r8,r7[0x10]
80006518:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000651c:	e0 80 00 9d 	breq	80006656 <d_expression+0x21e>
80006520:	30 68       	mov	r8,6
80006522:	8d 1c       	st.w	r6[0x4],r12
80006524:	8d 08       	st.w	r6[0x0],r8
80006526:	c9 88       	rjmp	80006656 <d_expression+0x21e>
80006528:	23 09       	sub	r9,48
8000652a:	30 98       	mov	r8,9
8000652c:	f0 09 18 00 	cp.b	r9,r8
80006530:	e0 8b 00 17 	brhi	8000655e <d_expression+0x126>
80006534:	0e 9c       	mov	r12,r7
80006536:	e0 a0 04 77 	rcall	80006e24 <d_unqualified_name>
8000653a:	18 96       	mov	r6,r12
8000653c:	e0 80 00 8d 	breq	80006656 <d_expression+0x21e>
80006540:	6e 38       	ld.w	r8,r7[0xc]
80006542:	11 89       	ld.ub	r9,r8[0x0]
80006544:	34 98       	mov	r8,73
80006546:	f0 09 18 00 	cp.b	r9,r8
8000654a:	e0 81 00 86 	brne	80006656 <d_expression+0x21e>
8000654e:	0e 9c       	mov	r12,r7
80006550:	e0 a0 05 8c 	rcall	80007068 <d_template_args>
80006554:	0c 9a       	mov	r10,r6
80006556:	18 99       	mov	r9,r12
80006558:	30 4b       	mov	r11,4
8000655a:	0e 9c       	mov	r12,r7
8000655c:	c6 08       	rjmp	8000661c <d_expression+0x1e4>
8000655e:	0e 9c       	mov	r12,r7
80006560:	e0 a0 03 e4 	rcall	80006d28 <d_operator_name>
80006564:	18 96       	mov	r6,r12
80006566:	c7 70       	breq	80006654 <d_expression+0x21c>
80006568:	78 08       	ld.w	r8,r12[0x0]
8000656a:	e0 48 00 2b 	cp.w	r8,43
8000656e:	c0 81       	brne	8000657e <d_expression+0x146>
80006570:	78 18       	ld.w	r8,r12[0x4]
80006572:	6e c9       	ld.w	r9,r7[0x30]
80006574:	70 28       	ld.w	r8,r8[0x8]
80006576:	f2 08 00 08 	add	r8,r9,r8
8000657a:	20 28       	sub	r8,2
8000657c:	8f c8       	st.w	r7[0x30],r8
8000657e:	6c 05       	ld.w	r5,r6[0x0]
80006580:	e0 45 00 2b 	cp.w	r5,43
80006584:	c0 a1       	brne	80006598 <d_expression+0x160>
80006586:	6c 18       	ld.w	r8,r6[0x4]
80006588:	4b 5b       	lddpc	r11,8000665c <d_expression+0x224>
8000658a:	70 0c       	ld.w	r12,r8[0x0]
8000658c:	f0 1f 00 35 	mcall	80006660 <d_expression+0x228>
80006590:	c0 d1       	brne	800065aa <d_expression+0x172>
80006592:	0e 9c       	mov	r12,r7
80006594:	c6 ac       	rcall	80006668 <d_type>
80006596:	c2 58       	rjmp	800065e0 <d_expression+0x1a8>
80006598:	e0 45 00 2c 	cp.w	r5,44
8000659c:	c0 a0       	breq	800065b0 <d_expression+0x178>
8000659e:	e0 45 00 2d 	cp.w	r5,45
800065a2:	c1 10       	breq	800065c4 <d_expression+0x18c>
800065a4:	e0 45 00 2b 	cp.w	r5,43
800065a8:	c5 61       	brne	80006654 <d_expression+0x21c>
800065aa:	6c 18       	ld.w	r8,r6[0x4]
800065ac:	70 38       	ld.w	r8,r8[0xc]
800065ae:	c0 28       	rjmp	800065b2 <d_expression+0x17a>
800065b0:	6c 18       	ld.w	r8,r6[0x4]
800065b2:	58 28       	cp.w	r8,2
800065b4:	c1 b0       	breq	800065ea <d_expression+0x1b2>
800065b6:	58 38       	cp.w	r8,3
800065b8:	c3 50       	breq	80006622 <d_expression+0x1ea>
800065ba:	58 18       	cp.w	r8,1
800065bc:	c4 c1       	brne	80006654 <d_expression+0x21c>
800065be:	e0 45 00 2d 	cp.w	r5,45
800065c2:	c0 d1       	brne	800065dc <d_expression+0x1a4>
800065c4:	6e 38       	ld.w	r8,r7[0xc]
800065c6:	35 f9       	mov	r9,95
800065c8:	11 8a       	ld.ub	r10,r8[0x0]
800065ca:	f2 0a 18 00 	cp.b	r10,r9
800065ce:	c0 71       	brne	800065dc <d_expression+0x1a4>
800065d0:	2f f8       	sub	r8,-1
800065d2:	0e 9c       	mov	r12,r7
800065d4:	8f 38       	st.w	r7[0xc],r8
800065d6:	e0 a0 08 b5 	rcall	80007740 <d_exprlist>
800065da:	c0 38       	rjmp	800065e0 <d_expression+0x1a8>
800065dc:	0e 9c       	mov	r12,r7
800065de:	c2 df       	rcall	80006438 <d_expression>
800065e0:	18 99       	mov	r9,r12
800065e2:	0c 9a       	mov	r10,r6
800065e4:	0e 9c       	mov	r12,r7
800065e6:	32 eb       	mov	r11,46
800065e8:	c1 a8       	rjmp	8000661c <d_expression+0x1e4>
800065ea:	0e 9c       	mov	r12,r7
800065ec:	c2 6f       	rcall	80006438 <d_expression>
800065ee:	6c 18       	ld.w	r8,r6[0x4]
800065f0:	18 95       	mov	r5,r12
800065f2:	49 db       	lddpc	r11,80006664 <d_expression+0x22c>
800065f4:	70 0c       	ld.w	r12,r8[0x0]
800065f6:	f0 1f 00 1b 	mcall	80006660 <d_expression+0x228>
800065fa:	c0 51       	brne	80006604 <d_expression+0x1cc>
800065fc:	0e 9c       	mov	r12,r7
800065fe:	e0 a0 08 a1 	rcall	80007740 <d_exprlist>
80006602:	c0 38       	rjmp	80006608 <d_expression+0x1d0>
80006604:	0e 9c       	mov	r12,r7
80006606:	c1 9f       	rcall	80006438 <d_expression>
80006608:	18 99       	mov	r9,r12
8000660a:	0a 9a       	mov	r10,r5
8000660c:	33 0b       	mov	r11,48
8000660e:	0e 9c       	mov	r12,r7
80006610:	fe b0 fb dc 	rcall	80005dc8 <d_make_comp>
80006614:	0c 9a       	mov	r10,r6
80006616:	18 99       	mov	r9,r12
80006618:	32 fb       	mov	r11,47
8000661a:	0e 9c       	mov	r12,r7
8000661c:	fe b0 fb d6 	rcall	80005dc8 <d_make_comp>
80006620:	c1 cb       	rjmp	80006458 <d_expression+0x20>
80006622:	0e 9c       	mov	r12,r7
80006624:	c0 af       	rcall	80006438 <d_expression>
80006626:	18 95       	mov	r5,r12
80006628:	0e 9c       	mov	r12,r7
8000662a:	c0 7f       	rcall	80006438 <d_expression>
8000662c:	18 94       	mov	r4,r12
8000662e:	0e 9c       	mov	r12,r7
80006630:	c0 4f       	rcall	80006438 <d_expression>
80006632:	08 9a       	mov	r10,r4
80006634:	18 99       	mov	r9,r12
80006636:	33 3b       	mov	r11,51
80006638:	0e 9c       	mov	r12,r7
8000663a:	fe b0 fb c7 	rcall	80005dc8 <d_make_comp>
8000663e:	0a 9a       	mov	r10,r5
80006640:	18 99       	mov	r9,r12
80006642:	33 2b       	mov	r11,50
80006644:	0e 9c       	mov	r12,r7
80006646:	fe b0 fb c1 	rcall	80005dc8 <d_make_comp>
8000664a:	0c 9a       	mov	r10,r6
8000664c:	18 99       	mov	r9,r12
8000664e:	33 1b       	mov	r11,49
80006650:	0e 9c       	mov	r12,r7
80006652:	ce 5b       	rjmp	8000661c <d_expression+0x1e4>
80006654:	30 06       	mov	r6,0
80006656:	0c 9c       	mov	r12,r6
80006658:	d8 22       	popm	r4-r7,pc
8000665a:	00 00       	add	r0,r0
8000665c:	80 01       	ld.sh	r1,r0[0x0]
8000665e:	16 78       	tst	r8,r11
80006660:	80 00       	ld.sh	r0,r0[0x0]
80006662:	c1 e4       	brge	8000669e <d_type+0x36>
80006664:	80 01       	ld.sh	r1,r0[0x0]
80006666:	14 74       	tst	r4,r10

80006668 <d_type>:
80006668:	d4 21       	pushm	r4-r7,lr
8000666a:	20 2d       	sub	sp,8
8000666c:	35 69       	mov	r9,86
8000666e:	78 3b       	ld.w	r11,r12[0xc]
80006670:	18 97       	mov	r7,r12
80006672:	17 88       	ld.ub	r8,r11[0x0]
80006674:	f2 08 18 00 	cp.b	r8,r9
80006678:	5f 0a       	sreq	r10
8000667a:	37 29       	mov	r9,114
8000667c:	f2 08 18 00 	cp.b	r8,r9
80006680:	5f 09       	sreq	r9
80006682:	f5 e9 10 09 	or	r9,r10,r9
80006686:	c0 51       	brne	80006690 <d_type+0x28>
80006688:	34 b9       	mov	r9,75
8000668a:	f2 08 18 00 	cp.b	r8,r9
8000668e:	c1 11       	brne	800066b0 <d_type+0x48>
80006690:	30 0a       	mov	r10,0
80006692:	fa cb ff fc 	sub	r11,sp,-4
80006696:	0e 9c       	mov	r12,r7
80006698:	fe b0 fc a0 	rcall	80005fd8 <d_cv_qualifiers>
8000669c:	18 96       	mov	r6,r12
8000669e:	e0 80 02 eb 	breq	80006c74 <d_type+0x60c>
800066a2:	0e 9c       	mov	r12,r7
800066a4:	ce 2f       	rcall	80006668 <d_type>
800066a6:	8d 0c       	st.w	r6[0x0],r12
800066a8:	e0 80 02 e6 	breq	80006c74 <d_type+0x60c>
800066ac:	e0 8f 02 e7 	bral	80006c7a <d_type+0x612>
800066b0:	f0 c9 00 30 	sub	r9,r8,48
800066b4:	e0 49 00 4a 	cp.w	r9,74
800066b8:	e0 8b 02 de 	brhi	80006c74 <d_type+0x60c>
800066bc:	fe fa 02 20 	ld.w	r10,pc[544]
800066c0:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800066c4:	80 00       	ld.sh	r0,r0[0x0]
800066c6:	68 72       	ld.w	r2,r4[0x1c]
800066c8:	80 00       	ld.sh	r0,r0[0x0]
800066ca:	68 72       	ld.w	r2,r4[0x1c]
800066cc:	80 00       	ld.sh	r0,r0[0x0]
800066ce:	68 72       	ld.w	r2,r4[0x1c]
800066d0:	80 00       	ld.sh	r0,r0[0x0]
800066d2:	68 72       	ld.w	r2,r4[0x1c]
800066d4:	80 00       	ld.sh	r0,r0[0x0]
800066d6:	68 72       	ld.w	r2,r4[0x1c]
800066d8:	80 00       	ld.sh	r0,r0[0x0]
800066da:	68 72       	ld.w	r2,r4[0x1c]
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	68 72       	ld.w	r2,r4[0x1c]
800066e0:	80 00       	ld.sh	r0,r0[0x0]
800066e2:	68 72       	ld.w	r2,r4[0x1c]
800066e4:	80 00       	ld.sh	r0,r0[0x0]
800066e6:	68 72       	ld.w	r2,r4[0x1c]
800066e8:	80 00       	ld.sh	r0,r0[0x0]
800066ea:	68 72       	ld.w	r2,r4[0x1c]
800066ec:	80 00       	ld.sh	r0,r0[0x0]
800066ee:	6c 74       	ld.w	r4,r6[0x1c]
800066f0:	80 00       	ld.sh	r0,r0[0x0]
800066f2:	6c 74       	ld.w	r4,r6[0x1c]
800066f4:	80 00       	ld.sh	r0,r0[0x0]
800066f6:	6c 74       	ld.w	r4,r6[0x1c]
800066f8:	80 00       	ld.sh	r0,r0[0x0]
800066fa:	6c 74       	ld.w	r4,r6[0x1c]
800066fc:	80 00       	ld.sh	r0,r0[0x0]
800066fe:	6c 74       	ld.w	r4,r6[0x1c]
80006700:	80 00       	ld.sh	r0,r0[0x0]
80006702:	6c 74       	ld.w	r4,r6[0x1c]
80006704:	80 00       	ld.sh	r0,r0[0x0]
80006706:	6c 74       	ld.w	r4,r6[0x1c]
80006708:	80 00       	ld.sh	r0,r0[0x0]
8000670a:	68 78       	ld.w	r8,r4[0x1c]
8000670c:	80 00       	ld.sh	r0,r0[0x0]
8000670e:	6c 74       	ld.w	r4,r6[0x1c]
80006710:	80 00       	ld.sh	r0,r0[0x0]
80006712:	69 f4       	ld.w	r4,r4[0x7c]
80006714:	80 00       	ld.sh	r0,r0[0x0]
80006716:	6a 30       	ld.w	r0,r5[0xc]
80006718:	80 00       	ld.sh	r0,r0[0x0]
8000671a:	6c 74       	ld.w	r4,r6[0x1c]
8000671c:	80 00       	ld.sh	r0,r0[0x0]
8000671e:	68 4c       	ld.w	r12,r4[0x10]
80006720:	80 00       	ld.sh	r0,r0[0x0]
80006722:	6a 02       	ld.w	r2,r5[0x0]
80006724:	80 00       	ld.sh	r0,r0[0x0]
80006726:	6c 74       	ld.w	r4,r6[0x1c]
80006728:	80 00       	ld.sh	r0,r0[0x0]
8000672a:	6c 74       	ld.w	r4,r6[0x1c]
8000672c:	80 00       	ld.sh	r0,r0[0x0]
8000672e:	6c 74       	ld.w	r4,r6[0x1c]
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	6c 74       	ld.w	r4,r6[0x1c]
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	6c 74       	ld.w	r4,r6[0x1c]
80006738:	80 00       	ld.sh	r0,r0[0x0]
8000673a:	68 e4       	ld.w	r4,r4[0x38]
8000673c:	80 00       	ld.sh	r0,r0[0x0]
8000673e:	68 72       	ld.w	r2,r4[0x1c]
80006740:	80 00       	ld.sh	r0,r0[0x0]
80006742:	69 ca       	ld.w	r10,r4[0x70]
80006744:	80 00       	ld.sh	r0,r0[0x0]
80006746:	69 d8       	ld.w	r8,r4[0x74]
80006748:	80 00       	ld.sh	r0,r0[0x0]
8000674a:	6c 74       	ld.w	r4,r6[0x1c]
8000674c:	80 00       	ld.sh	r0,r0[0x0]
8000674e:	69 e6       	ld.w	r6,r4[0x78]
80006750:	80 00       	ld.sh	r0,r0[0x0]
80006752:	69 68       	ld.w	r8,r4[0x58]
80006754:	80 00       	ld.sh	r0,r0[0x0]
80006756:	69 36       	ld.w	r6,r4[0x4c]
80006758:	80 00       	ld.sh	r0,r0[0x0]
8000675a:	6a 18       	ld.w	r8,r5[0x4]
8000675c:	80 00       	ld.sh	r0,r0[0x0]
8000675e:	6c 74       	ld.w	r4,r6[0x1c]
80006760:	80 00       	ld.sh	r0,r0[0x0]
80006762:	6c 74       	ld.w	r4,r6[0x1c]
80006764:	80 00       	ld.sh	r0,r0[0x0]
80006766:	6c 74       	ld.w	r4,r6[0x1c]
80006768:	80 00       	ld.sh	r0,r0[0x0]
8000676a:	6c 74       	ld.w	r4,r6[0x1c]
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	68 72       	ld.w	r2,r4[0x1c]
80006770:	80 00       	ld.sh	r0,r0[0x0]
80006772:	6c 74       	ld.w	r4,r6[0x1c]
80006774:	80 00       	ld.sh	r0,r0[0x0]
80006776:	6c 74       	ld.w	r4,r6[0x1c]
80006778:	80 00       	ld.sh	r0,r0[0x0]
8000677a:	6c 74       	ld.w	r4,r6[0x1c]
8000677c:	80 00       	ld.sh	r0,r0[0x0]
8000677e:	6c 74       	ld.w	r4,r6[0x1c]
80006780:	80 00       	ld.sh	r0,r0[0x0]
80006782:	6c 74       	ld.w	r4,r6[0x1c]
80006784:	80 00       	ld.sh	r0,r0[0x0]
80006786:	6c 74       	ld.w	r4,r6[0x1c]
80006788:	80 00       	ld.sh	r0,r0[0x0]
8000678a:	67 f0       	ld.w	r0,r3[0x7c]
8000678c:	80 00       	ld.sh	r0,r0[0x0]
8000678e:	67 f0       	ld.w	r0,r3[0x7c]
80006790:	80 00       	ld.sh	r0,r0[0x0]
80006792:	67 f0       	ld.w	r0,r3[0x7c]
80006794:	80 00       	ld.sh	r0,r0[0x0]
80006796:	67 f0       	ld.w	r0,r3[0x7c]
80006798:	80 00       	ld.sh	r0,r0[0x0]
8000679a:	67 f0       	ld.w	r0,r3[0x7c]
8000679c:	80 00       	ld.sh	r0,r0[0x0]
8000679e:	67 f0       	ld.w	r0,r3[0x7c]
800067a0:	80 00       	ld.sh	r0,r0[0x0]
800067a2:	67 f0       	ld.w	r0,r3[0x7c]
800067a4:	80 00       	ld.sh	r0,r0[0x0]
800067a6:	67 f0       	ld.w	r0,r3[0x7c]
800067a8:	80 00       	ld.sh	r0,r0[0x0]
800067aa:	67 f0       	ld.w	r0,r3[0x7c]
800067ac:	80 00       	ld.sh	r0,r0[0x0]
800067ae:	67 f0       	ld.w	r0,r3[0x7c]
800067b0:	80 00       	ld.sh	r0,r0[0x0]
800067b2:	6c 74       	ld.w	r4,r6[0x1c]
800067b4:	80 00       	ld.sh	r0,r0[0x0]
800067b6:	67 f0       	ld.w	r0,r3[0x7c]
800067b8:	80 00       	ld.sh	r0,r0[0x0]
800067ba:	67 f0       	ld.w	r0,r3[0x7c]
800067bc:	80 00       	ld.sh	r0,r0[0x0]
800067be:	67 f0       	ld.w	r0,r3[0x7c]
800067c0:	80 00       	ld.sh	r0,r0[0x0]
800067c2:	67 f0       	ld.w	r0,r3[0x7c]
800067c4:	80 00       	ld.sh	r0,r0[0x0]
800067c6:	6c 74       	ld.w	r4,r6[0x1c]
800067c8:	80 00       	ld.sh	r0,r0[0x0]
800067ca:	6c 74       	ld.w	r4,r6[0x1c]
800067cc:	80 00       	ld.sh	r0,r0[0x0]
800067ce:	6c 74       	ld.w	r4,r6[0x1c]
800067d0:	80 00       	ld.sh	r0,r0[0x0]
800067d2:	67 f0       	ld.w	r0,r3[0x7c]
800067d4:	80 00       	ld.sh	r0,r0[0x0]
800067d6:	67 f0       	ld.w	r0,r3[0x7c]
800067d8:	80 00       	ld.sh	r0,r0[0x0]
800067da:	68 3c       	ld.w	r12,r4[0xc]
800067dc:	80 00       	ld.sh	r0,r0[0x0]
800067de:	67 f0       	ld.w	r0,r3[0x7c]
800067e0:	80 00       	ld.sh	r0,r0[0x0]
800067e2:	67 f0       	ld.w	r0,r3[0x7c]
800067e4:	80 00       	ld.sh	r0,r0[0x0]
800067e6:	67 f0       	ld.w	r0,r3[0x7c]
800067e8:	80 00       	ld.sh	r0,r0[0x0]
800067ea:	67 f0       	ld.w	r0,r3[0x7c]
800067ec:	80 00       	ld.sh	r0,r0[0x0]
800067ee:	67 f0       	ld.w	r0,r3[0x7c]
800067f0:	f0 08 00 28 	add	r8,r8,r8<<0x2
800067f4:	4b b9       	lddpc	r9,800068e0 <d_type+0x278>
800067f6:	f2 08 00 29 	add	r9,r9,r8<<0x2
800067fa:	f2 c9 06 d0 	sub	r9,r9,1744
800067fe:	c1 20       	breq	80006822 <d_type+0x1ba>
80006800:	78 58       	ld.w	r8,r12[0x14]
80006802:	78 6a       	ld.w	r10,r12[0x18]
80006804:	14 38       	cp.w	r8,r10
80006806:	c0 e4       	brge	80006822 <d_type+0x1ba>
80006808:	f0 ca ff ff 	sub	r10,r8,-1
8000680c:	99 5a       	st.w	r12[0x14],r10
8000680e:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006812:	78 4a       	ld.w	r10,r12[0x10]
80006814:	f4 08 00 28 	add	r8,r10,r8<<0x2
80006818:	c0 60       	breq	80006824 <d_type+0x1bc>
8000681a:	91 19       	st.w	r8[0x4],r9
8000681c:	32 39       	mov	r9,35
8000681e:	91 09       	st.w	r8[0x0],r9
80006820:	c0 28       	rjmp	80006824 <d_type+0x1bc>
80006822:	30 08       	mov	r8,0
80006824:	6e c9       	ld.w	r9,r7[0x30]
80006826:	50 18       	stdsp	sp[0x4],r8
80006828:	70 18       	ld.w	r8,r8[0x4]
8000682a:	70 18       	ld.w	r8,r8[0x4]
8000682c:	f2 08 00 08 	add	r8,r9,r8
80006830:	8f c8       	st.w	r7[0x30],r8
80006832:	6e 38       	ld.w	r8,r7[0xc]
80006834:	2f f8       	sub	r8,-1
80006836:	8f 38       	st.w	r7[0xc],r8
80006838:	e0 8f 02 1c 	bral	80006c70 <d_type+0x608>
8000683c:	2f fb       	sub	r11,-1
8000683e:	99 3b       	st.w	r12[0xc],r11
80006840:	fe b0 fd aa 	rcall	80006394 <d_source_name>
80006844:	30 09       	mov	r9,0
80006846:	18 9a       	mov	r10,r12
80006848:	32 4b       	mov	r11,36
8000684a:	ce 28       	rjmp	80006a0e <d_type+0x3a6>
8000684c:	2f fb       	sub	r11,-1
8000684e:	35 98       	mov	r8,89
80006850:	99 3b       	st.w	r12[0xc],r11
80006852:	17 39       	ld.ub	r9,r11++
80006854:	f0 09 18 00 	cp.b	r9,r8
80006858:	f9 fb 0a 03 	st.weq	r12[0xc],r11
8000685c:	30 1b       	mov	r11,1
8000685e:	e0 a0 02 12 	rcall	80006c82 <d_bare_function_type>
80006862:	6e 38       	ld.w	r8,r7[0xc]
80006864:	34 59       	mov	r9,69
80006866:	11 3a       	ld.ub	r10,r8++
80006868:	f2 0a 18 00 	cp.b	r10,r9
8000686c:	c6 31       	brne	80006932 <d_type+0x2ca>
8000686e:	8f 38       	st.w	r7[0xc],r8
80006870:	cd 28       	rjmp	80006a14 <d_type+0x3ac>
80006872:	e0 a0 04 57 	rcall	80007120 <d_name>
80006876:	cc f8       	rjmp	80006a14 <d_type+0x3ac>
80006878:	2f fb       	sub	r11,-1
8000687a:	99 3b       	st.w	r12[0xc],r11
8000687c:	35 f9       	mov	r9,95
8000687e:	17 88       	ld.ub	r8,r11[0x0]
80006880:	f2 08 18 00 	cp.b	r8,r9
80006884:	c0 31       	brne	8000688a <d_type+0x222>
80006886:	30 06       	mov	r6,0
80006888:	c1 b8       	rjmp	800068be <d_type+0x256>
8000688a:	f0 c9 00 30 	sub	r9,r8,48
8000688e:	30 98       	mov	r8,9
80006890:	f0 09 18 00 	cp.b	r9,r8
80006894:	e0 8b 00 10 	brhi	800068b4 <d_type+0x24c>
80006898:	6e 3a       	ld.w	r10,r7[0xc]
8000689a:	2f fa       	sub	r10,-1
8000689c:	8f 3a       	st.w	r7[0xc],r10
8000689e:	15 89       	ld.ub	r9,r10[0x0]
800068a0:	23 09       	sub	r9,48
800068a2:	f0 09 18 00 	cp.b	r9,r8
800068a6:	fe 98 ff f9 	brls	80006898 <d_type+0x230>
800068aa:	16 1a       	sub	r10,r11
800068ac:	0e 9c       	mov	r12,r7
800068ae:	fe b0 fb 2d 	rcall	80005f08 <d_make_name>
800068b2:	c0 38       	rjmp	800068b8 <d_type+0x250>
800068b4:	fe b0 fd c2 	rcall	80006438 <d_expression>
800068b8:	18 96       	mov	r6,r12
800068ba:	58 0c       	cp.w	r12,0
800068bc:	c3 b0       	breq	80006932 <d_type+0x2ca>
800068be:	6e 38       	ld.w	r8,r7[0xc]
800068c0:	35 f9       	mov	r9,95
800068c2:	11 8a       	ld.ub	r10,r8[0x0]
800068c4:	f2 0a 18 00 	cp.b	r10,r9
800068c8:	c3 51       	brne	80006932 <d_type+0x2ca>
800068ca:	2f f8       	sub	r8,-1
800068cc:	0e 9c       	mov	r12,r7
800068ce:	8f 38       	st.w	r7[0xc],r8
800068d0:	cc ce       	rcall	80006668 <d_type>
800068d2:	0c 9a       	mov	r10,r6
800068d4:	18 99       	mov	r9,r12
800068d6:	32 6b       	mov	r11,38
800068d8:	c9 b8       	rjmp	80006a0e <d_type+0x3a6>
800068da:	00 00       	add	r0,r0
800068dc:	80 00       	ld.sh	r0,r0[0x0]
800068de:	66 c4       	ld.w	r4,r3[0x30]
800068e0:	80 00       	ld.sh	r0,r0[0x0]
800068e2:	89 ec       	st.w	r4[0x38],r12
800068e4:	2f fb       	sub	r11,-1
800068e6:	99 3b       	st.w	r12[0xc],r11
800068e8:	cc 0e       	rcall	80006668 <d_type>
800068ea:	30 1a       	mov	r10,1
800068ec:	18 95       	mov	r5,r12
800068ee:	1a 9b       	mov	r11,sp
800068f0:	0e 9c       	mov	r12,r7
800068f2:	1a 96       	mov	r6,sp
800068f4:	fe b0 fb 72 	rcall	80005fd8 <d_cv_qualifiers>
800068f8:	18 94       	mov	r4,r12
800068fa:	c1 c0       	breq	80006932 <d_type+0x2ca>
800068fc:	0e 9c       	mov	r12,r7
800068fe:	cb 5e       	rcall	80006668 <d_type>
80006900:	89 0c       	st.w	r4[0x0],r12
80006902:	c1 80       	breq	80006932 <d_type+0x2ca>
80006904:	1a 34       	cp.w	r4,sp
80006906:	c1 20       	breq	8000692a <d_type+0x2c2>
80006908:	78 08       	ld.w	r8,r12[0x0]
8000690a:	e0 48 00 25 	cp.w	r8,37
8000690e:	c0 e0       	breq	8000692a <d_type+0x2c2>
80006910:	40 09       	lddsp	r9,sp[0x0]
80006912:	58 09       	cp.w	r9,0
80006914:	c0 f0       	breq	80006932 <d_type+0x2ca>
80006916:	6e 88       	ld.w	r8,r7[0x20]
80006918:	6e 9a       	ld.w	r10,r7[0x24]
8000691a:	14 38       	cp.w	r8,r10
8000691c:	c0 b4       	brge	80006932 <d_type+0x2ca>
8000691e:	f0 ca ff ff 	sub	r10,r8,-1
80006922:	8f 8a       	st.w	r7[0x20],r10
80006924:	6e 7a       	ld.w	r10,r7[0x1c]
80006926:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
8000692a:	0a 9a       	mov	r10,r5
8000692c:	40 09       	lddsp	r9,sp[0x0]
8000692e:	32 7b       	mov	r11,39
80006930:	c6 f8       	rjmp	80006a0e <d_type+0x3a6>
80006932:	30 0c       	mov	r12,0
80006934:	c7 08       	rjmp	80006a14 <d_type+0x3ac>
80006936:	fe b0 fb a3 	rcall	8000607c <d_template_param>
8000693a:	6e 38       	ld.w	r8,r7[0xc]
8000693c:	50 1c       	stdsp	sp[0x4],r12
8000693e:	11 89       	ld.ub	r9,r8[0x0]
80006940:	34 98       	mov	r8,73
80006942:	f0 09 18 00 	cp.b	r9,r8
80006946:	e0 81 01 9a 	brne	80006c7a <d_type+0x612>
8000694a:	58 0c       	cp.w	r12,0
8000694c:	e0 80 01 94 	breq	80006c74 <d_type+0x60c>
80006950:	6e 88       	ld.w	r8,r7[0x20]
80006952:	6e 99       	ld.w	r9,r7[0x24]
80006954:	12 38       	cp.w	r8,r9
80006956:	e0 84 01 8f 	brge	80006c74 <d_type+0x60c>
8000695a:	f0 c9 ff ff 	sub	r9,r8,-1
8000695e:	8f 89       	st.w	r7[0x20],r9
80006960:	6e 79       	ld.w	r9,r7[0x1c]
80006962:	f2 08 09 2c 	st.w	r9[r8<<0x2],r12
80006966:	c2 18       	rjmp	800069a8 <d_type+0x340>
80006968:	30 99       	mov	r9,9
8000696a:	17 98       	ld.ub	r8,r11[0x1]
8000696c:	f0 ca 00 30 	sub	r10,r8,48
80006970:	f2 0a 18 00 	cp.b	r10,r9
80006974:	5f 8a       	srls	r10
80006976:	35 f9       	mov	r9,95
80006978:	f2 08 18 00 	cp.b	r8,r9
8000697c:	5f 09       	sreq	r9
8000697e:	f5 e9 10 09 	or	r9,r10,r9
80006982:	c0 71       	brne	80006990 <d_type+0x328>
80006984:	24 18       	sub	r8,65
80006986:	31 99       	mov	r9,25
80006988:	f2 08 18 00 	cp.b	r8,r9
8000698c:	e0 8b 00 15 	brhi	800069b6 <d_type+0x34e>
80006990:	30 0b       	mov	r11,0
80006992:	0e 9c       	mov	r12,r7
80006994:	fe b0 fb a8 	rcall	800060e4 <d_substitution>
80006998:	6e 38       	ld.w	r8,r7[0xc]
8000699a:	50 1c       	stdsp	sp[0x4],r12
8000699c:	11 89       	ld.ub	r9,r8[0x0]
8000699e:	34 98       	mov	r8,73
800069a0:	f0 09 18 00 	cp.b	r9,r8
800069a4:	e0 81 01 66 	brne	80006c70 <d_type+0x608>
800069a8:	0e 9c       	mov	r12,r7
800069aa:	e0 a0 03 5f 	rcall	80007068 <d_template_args>
800069ae:	40 1a       	lddsp	r10,sp[0x4]
800069b0:	18 99       	mov	r9,r12
800069b2:	30 4b       	mov	r11,4
800069b4:	c2 d8       	rjmp	80006a0e <d_type+0x3a6>
800069b6:	e0 a0 03 b5 	rcall	80007120 <d_name>
800069ba:	50 1c       	stdsp	sp[0x4],r12
800069bc:	e0 80 01 5f 	breq	80006c7a <d_type+0x612>
800069c0:	78 08       	ld.w	r8,r12[0x0]
800069c2:	59 68       	cp.w	r8,22
800069c4:	e0 81 01 5b 	brne	80006c7a <d_type+0x612>
800069c8:	c5 49       	rjmp	80006c70 <d_type+0x608>
800069ca:	2f fb       	sub	r11,-1
800069cc:	99 3b       	st.w	r12[0xc],r11
800069ce:	c4 de       	rcall	80006668 <d_type>
800069d0:	30 09       	mov	r9,0
800069d2:	18 9a       	mov	r10,r12
800069d4:	32 0b       	mov	r11,32
800069d6:	c1 c8       	rjmp	80006a0e <d_type+0x3a6>
800069d8:	2f fb       	sub	r11,-1
800069da:	99 3b       	st.w	r12[0xc],r11
800069dc:	c4 6e       	rcall	80006668 <d_type>
800069de:	30 09       	mov	r9,0
800069e0:	18 9a       	mov	r10,r12
800069e2:	31 eb       	mov	r11,30
800069e4:	c1 58       	rjmp	80006a0e <d_type+0x3a6>
800069e6:	2f fb       	sub	r11,-1
800069e8:	99 3b       	st.w	r12[0xc],r11
800069ea:	c3 fe       	rcall	80006668 <d_type>
800069ec:	30 09       	mov	r9,0
800069ee:	18 9a       	mov	r10,r12
800069f0:	31 fb       	mov	r11,31
800069f2:	c0 e8       	rjmp	80006a0e <d_type+0x3a6>
800069f4:	2f fb       	sub	r11,-1
800069f6:	99 3b       	st.w	r12[0xc],r11
800069f8:	c3 8e       	rcall	80006668 <d_type>
800069fa:	30 09       	mov	r9,0
800069fc:	18 9a       	mov	r10,r12
800069fe:	32 1b       	mov	r11,33
80006a00:	c0 78       	rjmp	80006a0e <d_type+0x3a6>
80006a02:	2f fb       	sub	r11,-1
80006a04:	99 3b       	st.w	r12[0xc],r11
80006a06:	c3 1e       	rcall	80006668 <d_type>
80006a08:	30 09       	mov	r9,0
80006a0a:	18 9a       	mov	r10,r12
80006a0c:	32 2b       	mov	r11,34
80006a0e:	0e 9c       	mov	r12,r7
80006a10:	fe b0 f9 dc 	rcall	80005dc8 <d_make_comp>
80006a14:	50 1c       	stdsp	sp[0x4],r12
80006a16:	c3 29       	rjmp	80006c7a <d_type+0x612>
80006a18:	2f fb       	sub	r11,-1
80006a1a:	99 3b       	st.w	r12[0xc],r11
80006a1c:	fe b0 fc bc 	rcall	80006394 <d_source_name>
80006a20:	18 96       	mov	r6,r12
80006a22:	50 1c       	stdsp	sp[0x4],r12
80006a24:	0e 9c       	mov	r12,r7
80006a26:	c2 1e       	rcall	80006668 <d_type>
80006a28:	0c 99       	mov	r9,r6
80006a2a:	18 9a       	mov	r10,r12
80006a2c:	31 db       	mov	r11,29
80006a2e:	cf 0b       	rjmp	80006a0e <d_type+0x3a6>
80006a30:	2f fb       	sub	r11,-1
80006a32:	99 3b       	st.w	r12[0xc],r11
80006a34:	17 88       	ld.ub	r8,r11[0x0]
80006a36:	58 08       	cp.w	r8,0
80006a38:	e0 80 01 1e 	breq	80006c74 <d_type+0x60c>
80006a3c:	2f fb       	sub	r11,-1
80006a3e:	99 3b       	st.w	r12[0xc],r11
80006a40:	36 69       	mov	r9,102
80006a42:	f2 08 18 00 	cp.b	r8,r9
80006a46:	c5 60       	breq	80006af2 <d_type+0x48a>
80006a48:	e0 8b 00 18 	brhi	80006a78 <d_type+0x410>
80006a4c:	35 49       	mov	r9,84
80006a4e:	f2 08 18 00 	cp.b	r8,r9
80006a52:	c2 c0       	breq	80006aaa <d_type+0x442>
80006a54:	e0 8b 00 08 	brhi	80006a64 <d_type+0x3fc>
80006a58:	34 69       	mov	r9,70
80006a5a:	f2 08 18 00 	cp.b	r8,r9
80006a5e:	e0 81 01 0b 	brne	80006c74 <d_type+0x60c>
80006a62:	cc 48       	rjmp	80006bea <d_type+0x582>
80006a64:	36 49       	mov	r9,100
80006a66:	f2 08 18 00 	cp.b	r8,r9
80006a6a:	c5 70       	breq	80006b18 <d_type+0x4b0>
80006a6c:	36 59       	mov	r9,101
80006a6e:	f2 08 18 00 	cp.b	r8,r9
80006a72:	e0 81 01 01 	brne	80006c74 <d_type+0x60c>
80006a76:	c6 48       	rjmp	80006b3e <d_type+0x4d6>
80006a78:	37 09       	mov	r9,112
80006a7a:	f2 08 18 00 	cp.b	r8,r9
80006a7e:	c3 00       	breq	80006ade <d_type+0x476>
80006a80:	e0 8b 00 0c 	brhi	80006a98 <d_type+0x430>
80006a84:	36 89       	mov	r9,104
80006a86:	f2 08 18 00 	cp.b	r8,r9
80006a8a:	c6 d0       	breq	80006b64 <d_type+0x4fc>
80006a8c:	36 99       	mov	r9,105
80006a8e:	f2 08 18 00 	cp.b	r8,r9
80006a92:	e0 81 00 f1 	brne	80006c74 <d_type+0x60c>
80006a96:	c8 d8       	rjmp	80006bb0 <d_type+0x548>
80006a98:	37 39       	mov	r9,115
80006a9a:	f2 08 18 00 	cp.b	r8,r9
80006a9e:	c7 60       	breq	80006b8a <d_type+0x522>
80006aa0:	37 49       	mov	r9,116
80006aa2:	f2 08 18 00 	cp.b	r8,r9
80006aa6:	e0 81 00 e7 	brne	80006c74 <d_type+0x60c>
80006aaa:	0e 9c       	mov	r12,r7
80006aac:	fe b0 fc c6 	rcall	80006438 <d_expression>
80006ab0:	30 09       	mov	r9,0
80006ab2:	18 9a       	mov	r10,r12
80006ab4:	33 9b       	mov	r11,57
80006ab6:	0e 9c       	mov	r12,r7
80006ab8:	fe b0 f9 88 	rcall	80005dc8 <d_make_comp>
80006abc:	50 1c       	stdsp	sp[0x4],r12
80006abe:	e0 80 00 d9 	breq	80006c70 <d_type+0x608>
80006ac2:	6e 39       	ld.w	r9,r7[0xc]
80006ac4:	13 88       	ld.ub	r8,r9[0x0]
80006ac6:	58 08       	cp.w	r8,0
80006ac8:	c0 80       	breq	80006ad8 <d_type+0x470>
80006aca:	2f f9       	sub	r9,-1
80006acc:	8f 39       	st.w	r7[0xc],r9
80006ace:	34 59       	mov	r9,69
80006ad0:	f2 08 18 00 	cp.b	r8,r9
80006ad4:	e0 80 00 ce 	breq	80006c70 <d_type+0x608>
80006ad8:	30 08       	mov	r8,0
80006ada:	50 18       	stdsp	sp[0x4],r8
80006adc:	cc a8       	rjmp	80006c70 <d_type+0x608>
80006ade:	fe b0 fd c5 	rcall	80006668 <d_type>
80006ae2:	30 09       	mov	r9,0
80006ae4:	18 9a       	mov	r10,r12
80006ae6:	33 ab       	mov	r11,58
80006ae8:	0e 9c       	mov	r12,r7
80006aea:	fe b0 f9 6f 	rcall	80005dc8 <d_make_comp>
80006aee:	50 1c       	stdsp	sp[0x4],r12
80006af0:	cc 08       	rjmp	80006c70 <d_type+0x608>
80006af2:	78 58       	ld.w	r8,r12[0x14]
80006af4:	78 69       	ld.w	r9,r12[0x18]
80006af6:	12 38       	cp.w	r8,r9
80006af8:	c6 04       	brge	80006bb8 <d_type+0x550>
80006afa:	f0 c9 ff ff 	sub	r9,r8,-1
80006afe:	99 59       	st.w	r12[0x14],r9
80006b00:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006b04:	78 49       	ld.w	r9,r12[0x10]
80006b06:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006b0a:	c6 80       	breq	80006bda <d_type+0x572>
80006b0c:	32 39       	mov	r9,35
80006b0e:	91 09       	st.w	r8[0x0],r9
80006b10:	4b a9       	lddpc	r9,80006bf8 <d_type+0x590>
80006b12:	f2 c9 fd 34 	sub	r9,r9,-716
80006b16:	c6 18       	rjmp	80006bd8 <d_type+0x570>
80006b18:	78 58       	ld.w	r8,r12[0x14]
80006b1a:	78 69       	ld.w	r9,r12[0x18]
80006b1c:	12 38       	cp.w	r8,r9
80006b1e:	c4 d4       	brge	80006bb8 <d_type+0x550>
80006b20:	f0 c9 ff ff 	sub	r9,r8,-1
80006b24:	99 59       	st.w	r12[0x14],r9
80006b26:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006b2a:	78 49       	ld.w	r9,r12[0x10]
80006b2c:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006b30:	c5 50       	breq	80006bda <d_type+0x572>
80006b32:	32 39       	mov	r9,35
80006b34:	91 09       	st.w	r8[0x0],r9
80006b36:	4b 19       	lddpc	r9,80006bf8 <d_type+0x590>
80006b38:	f2 c9 fd 20 	sub	r9,r9,-736
80006b3c:	c4 e8       	rjmp	80006bd8 <d_type+0x570>
80006b3e:	78 58       	ld.w	r8,r12[0x14]
80006b40:	78 69       	ld.w	r9,r12[0x18]
80006b42:	12 38       	cp.w	r8,r9
80006b44:	c3 a4       	brge	80006bb8 <d_type+0x550>
80006b46:	f0 c9 ff ff 	sub	r9,r8,-1
80006b4a:	99 59       	st.w	r12[0x14],r9
80006b4c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006b50:	78 49       	ld.w	r9,r12[0x10]
80006b52:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006b56:	c4 20       	breq	80006bda <d_type+0x572>
80006b58:	32 39       	mov	r9,35
80006b5a:	91 09       	st.w	r8[0x0],r9
80006b5c:	4a 79       	lddpc	r9,80006bf8 <d_type+0x590>
80006b5e:	f2 c9 fd 0c 	sub	r9,r9,-756
80006b62:	c3 b8       	rjmp	80006bd8 <d_type+0x570>
80006b64:	78 58       	ld.w	r8,r12[0x14]
80006b66:	78 69       	ld.w	r9,r12[0x18]
80006b68:	12 38       	cp.w	r8,r9
80006b6a:	c2 74       	brge	80006bb8 <d_type+0x550>
80006b6c:	f0 c9 ff ff 	sub	r9,r8,-1
80006b70:	99 59       	st.w	r12[0x14],r9
80006b72:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006b76:	78 49       	ld.w	r9,r12[0x10]
80006b78:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006b7c:	c2 f0       	breq	80006bda <d_type+0x572>
80006b7e:	32 39       	mov	r9,35
80006b80:	91 09       	st.w	r8[0x0],r9
80006b82:	49 e9       	lddpc	r9,80006bf8 <d_type+0x590>
80006b84:	f2 c9 fc f8 	sub	r9,r9,-776
80006b88:	c2 88       	rjmp	80006bd8 <d_type+0x570>
80006b8a:	78 58       	ld.w	r8,r12[0x14]
80006b8c:	78 69       	ld.w	r9,r12[0x18]
80006b8e:	12 38       	cp.w	r8,r9
80006b90:	c1 44       	brge	80006bb8 <d_type+0x550>
80006b92:	f0 c9 ff ff 	sub	r9,r8,-1
80006b96:	99 59       	st.w	r12[0x14],r9
80006b98:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006b9c:	78 49       	ld.w	r9,r12[0x10]
80006b9e:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006ba2:	c1 c0       	breq	80006bda <d_type+0x572>
80006ba4:	32 39       	mov	r9,35
80006ba6:	91 09       	st.w	r8[0x0],r9
80006ba8:	49 49       	lddpc	r9,80006bf8 <d_type+0x590>
80006baa:	f2 c9 fc e4 	sub	r9,r9,-796
80006bae:	c1 58       	rjmp	80006bd8 <d_type+0x570>
80006bb0:	78 58       	ld.w	r8,r12[0x14]
80006bb2:	78 69       	ld.w	r9,r12[0x18]
80006bb4:	12 38       	cp.w	r8,r9
80006bb6:	c0 35       	brlt	80006bbc <d_type+0x554>
80006bb8:	30 08       	mov	r8,0
80006bba:	c1 08       	rjmp	80006bda <d_type+0x572>
80006bbc:	f0 c9 ff ff 	sub	r9,r8,-1
80006bc0:	99 59       	st.w	r12[0x14],r9
80006bc2:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006bc6:	78 49       	ld.w	r9,r12[0x10]
80006bc8:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006bcc:	c0 70       	breq	80006bda <d_type+0x572>
80006bce:	32 39       	mov	r9,35
80006bd0:	91 09       	st.w	r8[0x0],r9
80006bd2:	48 a9       	lddpc	r9,80006bf8 <d_type+0x590>
80006bd4:	f2 c9 fc d0 	sub	r9,r9,-816
80006bd8:	91 19       	st.w	r8[0x4],r9
80006bda:	6e c9       	ld.w	r9,r7[0x30]
80006bdc:	50 18       	stdsp	sp[0x4],r8
80006bde:	70 18       	ld.w	r8,r8[0x4]
80006be0:	70 18       	ld.w	r8,r8[0x4]
80006be2:	f2 08 00 08 	add	r8,r9,r8
80006be6:	8f c8       	st.w	r7[0x30],r8
80006be8:	c4 48       	rjmp	80006c70 <d_type+0x608>
80006bea:	78 58       	ld.w	r8,r12[0x14]
80006bec:	78 69       	ld.w	r9,r12[0x18]
80006bee:	12 38       	cp.w	r8,r9
80006bf0:	c0 65       	brlt	80006bfc <d_type+0x594>
80006bf2:	30 08       	mov	r8,0
80006bf4:	c0 c8       	rjmp	80006c0c <d_type+0x5a4>
80006bf6:	00 00       	add	r0,r0
80006bf8:	80 00       	ld.sh	r0,r0[0x0]
80006bfa:	89 ec       	st.w	r4[0x38],r12
80006bfc:	f0 c9 ff ff 	sub	r9,r8,-1
80006c00:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006c04:	99 59       	st.w	r12[0x14],r9
80006c06:	78 49       	ld.w	r9,r12[0x10]
80006c08:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006c0c:	6e 39       	ld.w	r9,r7[0xc]
80006c0e:	50 18       	stdsp	sp[0x4],r8
80006c10:	32 8a       	mov	r10,40
80006c12:	91 0a       	st.w	r8[0x0],r10
80006c14:	13 8a       	ld.ub	r10,r9[0x0]
80006c16:	30 99       	mov	r9,9
80006c18:	23 0a       	sub	r10,48
80006c1a:	f2 0a 18 00 	cp.b	r10,r9
80006c1e:	5f 89       	srls	r9
80006c20:	b0 49       	st.h	r8[0x8],r9
80006c22:	58 09       	cp.w	r9,0
80006c24:	c0 40       	breq	80006c2c <d_type+0x5c4>
80006c26:	0e 9c       	mov	r12,r7
80006c28:	fe b0 f9 8c 	rcall	80005f40 <d_number>
80006c2c:	40 16       	lddsp	r6,sp[0x4]
80006c2e:	0e 9c       	mov	r12,r7
80006c30:	fe b0 fd 1c 	rcall	80006668 <d_type>
80006c34:	8d 1c       	st.w	r6[0x4],r12
80006c36:	40 18       	lddsp	r8,sp[0x4]
80006c38:	70 18       	ld.w	r8,r8[0x4]
80006c3a:	58 08       	cp.w	r8,0
80006c3c:	c1 c0       	breq	80006c74 <d_type+0x60c>
80006c3e:	0e 9c       	mov	r12,r7
80006c40:	fe b0 f9 80 	rcall	80005f40 <d_number>
80006c44:	6e 38       	ld.w	r8,r7[0xc]
80006c46:	11 39       	ld.ub	r9,r8++
80006c48:	58 09       	cp.w	r9,0
80006c4a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80006c4e:	37 38       	mov	r8,115
80006c50:	f0 09 18 00 	cp.b	r9,r8
80006c54:	5f 09       	sreq	r9
80006c56:	40 18       	lddsp	r8,sp[0x4]
80006c58:	b0 59       	st.h	r8[0xa],r9
80006c5a:	c0 b8       	rjmp	80006c70 <d_type+0x608>
80006c5c:	6e 88       	ld.w	r8,r7[0x20]
80006c5e:	6e 9a       	ld.w	r10,r7[0x24]
80006c60:	14 38       	cp.w	r8,r10
80006c62:	c0 94       	brge	80006c74 <d_type+0x60c>
80006c64:	f0 ca ff ff 	sub	r10,r8,-1
80006c68:	8f 8a       	st.w	r7[0x20],r10
80006c6a:	6e 7a       	ld.w	r10,r7[0x1c]
80006c6c:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
80006c70:	40 1c       	lddsp	r12,sp[0x4]
80006c72:	c0 28       	rjmp	80006c76 <d_type+0x60e>
80006c74:	30 0c       	mov	r12,0
80006c76:	2f ed       	sub	sp,-8
80006c78:	d8 22       	popm	r4-r7,pc
80006c7a:	40 19       	lddsp	r9,sp[0x4]
80006c7c:	58 09       	cp.w	r9,0
80006c7e:	ce f1       	brne	80006c5c <d_type+0x5f4>
80006c80:	cf ab       	rjmp	80006c74 <d_type+0x60c>

80006c82 <d_bare_function_type>:
80006c82:	d4 31       	pushm	r0-r7,lr
80006c84:	20 1d       	sub	sp,4
80006c86:	78 38       	ld.w	r8,r12[0xc]
80006c88:	16 95       	mov	r5,r11
80006c8a:	11 3a       	ld.ub	r10,r8++
80006c8c:	34 a9       	mov	r9,74
80006c8e:	fa c7 ff fc 	sub	r7,sp,-4
80006c92:	f2 0a 18 00 	cp.b	r10,r9
80006c96:	f9 f8 0a 03 	st.weq	r12[0xc],r8
80006c9a:	f9 b5 00 01 	moveq	r5,1
80006c9e:	30 08       	mov	r8,0
80006ca0:	18 96       	mov	r6,r12
80006ca2:	10 94       	mov	r4,r8
80006ca4:	0e d8       	st.w	--r7,r8
80006ca6:	34 52       	mov	r2,69
80006ca8:	10 93       	mov	r3,r8
80006caa:	6c 38       	ld.w	r8,r6[0xc]
80006cac:	11 88       	ld.ub	r8,r8[0x0]
80006cae:	e6 08 18 00 	cp.b	r8,r3
80006cb2:	5f 09       	sreq	r9
80006cb4:	e4 08 18 00 	cp.b	r8,r2
80006cb8:	5f 08       	sreq	r8
80006cba:	12 48       	or	r8,r9
80006cbc:	e6 08 18 00 	cp.b	r8,r3
80006cc0:	c1 51       	brne	80006cea <d_bare_function_type+0x68>
80006cc2:	0c 9c       	mov	r12,r6
80006cc4:	fe b0 fc d2 	rcall	80006668 <d_type>
80006cc8:	18 9a       	mov	r10,r12
80006cca:	c2 c0       	breq	80006d22 <d_bare_function_type+0xa0>
80006ccc:	58 05       	cp.w	r5,0
80006cce:	c0 40       	breq	80006cd6 <d_bare_function_type+0x54>
80006cd0:	18 94       	mov	r4,r12
80006cd2:	30 05       	mov	r5,0
80006cd4:	ce bb       	rjmp	80006caa <d_bare_function_type+0x28>
80006cd6:	0a 99       	mov	r9,r5
80006cd8:	32 9b       	mov	r11,41
80006cda:	0c 9c       	mov	r12,r6
80006cdc:	fe b0 f8 76 	rcall	80005dc8 <d_make_comp>
80006ce0:	8f 0c       	st.w	r7[0x0],r12
80006ce2:	c2 00       	breq	80006d22 <d_bare_function_type+0xa0>
80006ce4:	f8 c7 ff f8 	sub	r7,r12,-8
80006ce8:	ce 1b       	rjmp	80006caa <d_bare_function_type+0x28>
80006cea:	40 08       	lddsp	r8,sp[0x0]
80006cec:	58 08       	cp.w	r8,0
80006cee:	c1 a0       	breq	80006d22 <d_bare_function_type+0xa0>
80006cf0:	70 29       	ld.w	r9,r8[0x8]
80006cf2:	58 09       	cp.w	r9,0
80006cf4:	c1 01       	brne	80006d14 <d_bare_function_type+0x92>
80006cf6:	70 18       	ld.w	r8,r8[0x4]
80006cf8:	70 0a       	ld.w	r10,r8[0x0]
80006cfa:	e0 4a 00 23 	cp.w	r10,35
80006cfe:	c0 b1       	brne	80006d14 <d_bare_function_type+0x92>
80006d00:	70 18       	ld.w	r8,r8[0x4]
80006d02:	70 4a       	ld.w	r10,r8[0x10]
80006d04:	58 9a       	cp.w	r10,9
80006d06:	c0 71       	brne	80006d14 <d_bare_function_type+0x92>
80006d08:	70 18       	ld.w	r8,r8[0x4]
80006d0a:	50 09       	stdsp	sp[0x0],r9
80006d0c:	6c c9       	ld.w	r9,r6[0x30]
80006d0e:	f2 08 01 08 	sub	r8,r9,r8
80006d12:	8d c8       	st.w	r6[0x30],r8
80006d14:	08 9a       	mov	r10,r4
80006d16:	0c 9c       	mov	r12,r6
80006d18:	40 09       	lddsp	r9,sp[0x0]
80006d1a:	32 5b       	mov	r11,37
80006d1c:	fe b0 f8 56 	rcall	80005dc8 <d_make_comp>
80006d20:	c0 28       	rjmp	80006d24 <d_bare_function_type+0xa2>
80006d22:	30 0c       	mov	r12,0
80006d24:	2f fd       	sub	sp,-4
80006d26:	d8 32       	popm	r0-r7,pc

80006d28 <d_operator_name>:
80006d28:	d4 31       	pushm	r0-r7,lr
80006d2a:	78 39       	ld.w	r9,r12[0xc]
80006d2c:	13 38       	ld.ub	r8,r9++
80006d2e:	58 08       	cp.w	r8,0
80006d30:	f9 f9 1a 03 	st.wne	r12[0xc],r9
80006d34:	78 39       	ld.w	r9,r12[0xc]
80006d36:	13 36       	ld.ub	r6,r9++
80006d38:	58 06       	cp.w	r6,0
80006d3a:	f9 f9 1a 03 	st.wne	r12[0xc],r9
80006d3e:	18 97       	mov	r7,r12
80006d40:	37 69       	mov	r9,118
80006d42:	f2 08 18 00 	cp.b	r8,r9
80006d46:	c1 f1       	brne	80006d84 <d_operator_name+0x5c>
80006d48:	ec ca 00 30 	sub	r10,r6,48
80006d4c:	30 99       	mov	r9,9
80006d4e:	f2 0a 18 00 	cp.b	r10,r9
80006d52:	e0 8b 00 19 	brhi	80006d84 <d_operator_name+0x5c>
80006d56:	fe b0 fb 1f 	rcall	80006394 <d_source_name>
80006d5a:	6e 58       	ld.w	r8,r7[0x14]
80006d5c:	18 99       	mov	r9,r12
80006d5e:	6e 6a       	ld.w	r10,r7[0x18]
80006d60:	14 38       	cp.w	r8,r10
80006d62:	c5 d4       	brge	80006e1c <d_operator_name+0xf4>
80006d64:	f0 ca ff ff 	sub	r10,r8,-1
80006d68:	8f 5a       	st.w	r7[0x14],r10
80006d6a:	f0 08 00 18 	add	r8,r8,r8<<0x1
80006d6e:	6e 4a       	ld.w	r10,r7[0x10]
80006d70:	f4 08 00 2c 	add	r12,r10,r8<<0x2
80006d74:	c5 50       	breq	80006e1e <d_operator_name+0xf6>
80006d76:	58 09       	cp.w	r9,0
80006d78:	c5 20       	breq	80006e1c <d_operator_name+0xf4>
80006d7a:	23 06       	sub	r6,48
80006d7c:	99 29       	st.w	r12[0x8],r9
80006d7e:	99 16       	st.w	r12[0x4],r6
80006d80:	32 c8       	mov	r8,44
80006d82:	c3 e8       	rjmp	80006dfe <d_operator_name+0xd6>
80006d84:	37 69       	mov	r9,118
80006d86:	f2 06 18 00 	cp.b	r6,r9
80006d8a:	5f 0a       	sreq	r10
80006d8c:	36 39       	mov	r9,99
80006d8e:	f2 08 18 00 	cp.b	r8,r9
80006d92:	5f 09       	sreq	r9
80006d94:	f5 e9 00 09 	and	r9,r10,r9
80006d98:	c0 b0       	breq	80006dae <d_operator_name+0x86>
80006d9a:	0e 9c       	mov	r12,r7
80006d9c:	fe b0 fc 66 	rcall	80006668 <d_type>
80006da0:	30 09       	mov	r9,0
80006da2:	18 9a       	mov	r10,r12
80006da4:	32 db       	mov	r11,45
80006da6:	0e 9c       	mov	r12,r7
80006da8:	fe b0 f8 10 	rcall	80005dc8 <d_make_comp>
80006dac:	d8 32       	popm	r0-r7,pc
80006dae:	49 d3       	lddpc	r3,80006e20 <d_operator_name+0xf8>
80006db0:	33 4a       	mov	r10,52
80006db2:	e6 c3 fc bc 	sub	r3,r3,-836
80006db6:	30 09       	mov	r9,0
80006db8:	30 24       	mov	r4,2
80006dba:	f4 09 01 01 	sub	r1,r10,r9
80006dbe:	e2 04 0c 00 	divs	r0,r1,r4
80006dc2:	f2 00 00 0b 	add	r11,r9,r0
80006dc6:	f6 0e 15 04 	lsl	lr,r11,0x4
80006dca:	e6 0e 00 0e 	add	lr,r3,lr
80006dce:	7c 05       	ld.w	r5,lr[0x0]
80006dd0:	0b 8c       	ld.ub	r12,r5[0x0]
80006dd2:	f8 08 18 00 	cp.b	r8,r12
80006dd6:	c1 61       	brne	80006e02 <d_operator_name+0xda>
80006dd8:	0b 9c       	ld.ub	r12,r5[0x1]
80006dda:	f8 06 18 00 	cp.b	r6,r12
80006dde:	c1 61       	brne	80006e0a <d_operator_name+0xe2>
80006de0:	6e 5c       	ld.w	r12,r7[0x14]
80006de2:	6e 68       	ld.w	r8,r7[0x18]
80006de4:	10 3c       	cp.w	r12,r8
80006de6:	c1 b4       	brge	80006e1c <d_operator_name+0xf4>
80006de8:	f8 c8 ff ff 	sub	r8,r12,-1
80006dec:	8f 58       	st.w	r7[0x14],r8
80006dee:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
80006df2:	6e 48       	ld.w	r8,r7[0x10]
80006df4:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80006df8:	c1 30       	breq	80006e1e <d_operator_name+0xf6>
80006dfa:	99 1e       	st.w	r12[0x4],lr
80006dfc:	32 b8       	mov	r8,43
80006dfe:	99 08       	st.w	r12[0x0],r8
80006e00:	d8 32       	popm	r0-r7,pc
80006e02:	f8 08 18 00 	cp.b	r8,r12
80006e06:	c0 83       	brcs	80006e16 <d_operator_name+0xee>
80006e08:	c0 48       	rjmp	80006e10 <d_operator_name+0xe8>
80006e0a:	f8 06 18 00 	cp.b	r6,r12
80006e0e:	c0 43       	brcs	80006e16 <d_operator_name+0xee>
80006e10:	f6 c9 ff ff 	sub	r9,r11,-1
80006e14:	c0 28       	rjmp	80006e18 <d_operator_name+0xf0>
80006e16:	16 9a       	mov	r10,r11
80006e18:	14 39       	cp.w	r9,r10
80006e1a:	cd 01       	brne	80006dba <d_operator_name+0x92>
80006e1c:	30 0c       	mov	r12,0
80006e1e:	d8 32       	popm	r0-r7,pc
80006e20:	80 00       	ld.sh	r0,r0[0x0]
80006e22:	89 ec       	st.w	r4[0x38],r12

80006e24 <d_unqualified_name>:
80006e24:	d4 21       	pushm	r4-r7,lr
80006e26:	30 9a       	mov	r10,9
80006e28:	78 39       	ld.w	r9,r12[0xc]
80006e2a:	18 97       	mov	r7,r12
80006e2c:	13 88       	ld.ub	r8,r9[0x0]
80006e2e:	f0 cb 00 30 	sub	r11,r8,48
80006e32:	f4 0b 18 00 	cp.b	r11,r10
80006e36:	e0 8b 00 05 	brhi	80006e40 <d_unqualified_name+0x1c>
80006e3a:	fe b0 fa ad 	rcall	80006394 <d_source_name>
80006e3e:	d8 22       	popm	r4-r7,pc
80006e40:	f0 cb 00 61 	sub	r11,r8,97
80006e44:	31 9a       	mov	r10,25
80006e46:	f4 0b 18 00 	cp.b	r11,r10
80006e4a:	e0 8b 00 12 	brhi	80006e6e <d_unqualified_name+0x4a>
80006e4e:	c6 df       	rcall	80006d28 <d_operator_name>
80006e50:	e0 80 00 a5 	breq	80006f9a <d_unqualified_name+0x176>
80006e54:	78 08       	ld.w	r8,r12[0x0]
80006e56:	e0 48 00 2b 	cp.w	r8,43
80006e5a:	e0 81 00 a0 	brne	80006f9a <d_unqualified_name+0x176>
80006e5e:	78 18       	ld.w	r8,r12[0x4]
80006e60:	6e c9       	ld.w	r9,r7[0x30]
80006e62:	70 28       	ld.w	r8,r8[0x8]
80006e64:	f2 08 00 08 	add	r8,r9,r8
80006e68:	2f 98       	sub	r8,-7
80006e6a:	8f c8       	st.w	r7[0x30],r8
80006e6c:	d8 22       	popm	r4-r7,pc
80006e6e:	f0 cb 00 43 	sub	r11,r8,67
80006e72:	30 1a       	mov	r10,1
80006e74:	f4 0b 18 00 	cp.b	r11,r10
80006e78:	e0 8b 00 79 	brhi	80006f6a <d_unqualified_name+0x146>
80006e7c:	78 b8       	ld.w	r8,r12[0x2c]
80006e7e:	58 08       	cp.w	r8,0
80006e80:	c0 b0       	breq	80006e96 <d_unqualified_name+0x72>
80006e82:	70 09       	ld.w	r9,r8[0x0]
80006e84:	58 09       	cp.w	r9,0
80006e86:	c0 30       	breq	80006e8c <d_unqualified_name+0x68>
80006e88:	59 69       	cp.w	r9,22
80006e8a:	c0 61       	brne	80006e96 <d_unqualified_name+0x72>
80006e8c:	70 28       	ld.w	r8,r8[0x8]
80006e8e:	6e c9       	ld.w	r9,r7[0x30]
80006e90:	f2 08 00 08 	add	r8,r9,r8
80006e94:	8f c8       	st.w	r7[0x30],r8
80006e96:	6e 38       	ld.w	r8,r7[0xc]
80006e98:	34 3a       	mov	r10,67
80006e9a:	11 89       	ld.ub	r9,r8[0x0]
80006e9c:	f4 09 18 00 	cp.b	r9,r10
80006ea0:	c0 60       	breq	80006eac <d_unqualified_name+0x88>
80006ea2:	34 4a       	mov	r10,68
80006ea4:	f4 09 18 00 	cp.b	r9,r10
80006ea8:	c7 71       	brne	80006f96 <d_unqualified_name+0x172>
80006eaa:	c3 08       	rjmp	80006f0a <d_unqualified_name+0xe6>
80006eac:	11 99       	ld.ub	r9,r8[0x1]
80006eae:	33 2a       	mov	r10,50
80006eb0:	f4 09 18 00 	cp.b	r9,r10
80006eb4:	c0 a0       	breq	80006ec8 <d_unqualified_name+0xa4>
80006eb6:	33 3a       	mov	r10,51
80006eb8:	f4 09 18 00 	cp.b	r9,r10
80006ebc:	c0 a0       	breq	80006ed0 <d_unqualified_name+0xac>
80006ebe:	33 1a       	mov	r10,49
80006ec0:	f4 09 18 00 	cp.b	r9,r10
80006ec4:	c6 91       	brne	80006f96 <d_unqualified_name+0x172>
80006ec6:	c0 38       	rjmp	80006ecc <d_unqualified_name+0xa8>
80006ec8:	30 29       	mov	r9,2
80006eca:	c0 48       	rjmp	80006ed2 <d_unqualified_name+0xae>
80006ecc:	30 19       	mov	r9,1
80006ece:	c0 28       	rjmp	80006ed2 <d_unqualified_name+0xae>
80006ed0:	30 39       	mov	r9,3
80006ed2:	2f e8       	sub	r8,-2
80006ed4:	8f 38       	st.w	r7[0xc],r8
80006ed6:	6e 5c       	ld.w	r12,r7[0x14]
80006ed8:	6e b8       	ld.w	r8,r7[0x2c]
80006eda:	6e 6a       	ld.w	r10,r7[0x18]
80006edc:	14 3c       	cp.w	r12,r10
80006ede:	c0 35       	brlt	80006ee4 <d_unqualified_name+0xc0>
80006ee0:	30 0c       	mov	r12,0
80006ee2:	c0 98       	rjmp	80006ef4 <d_unqualified_name+0xd0>
80006ee4:	f8 ca ff ff 	sub	r10,r12,-1
80006ee8:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
80006eec:	8f 5a       	st.w	r7[0x14],r10
80006eee:	6e 4a       	ld.w	r10,r7[0x10]
80006ef0:	f4 0c 00 2c 	add	r12,r10,r12<<0x2
80006ef4:	58 0c       	cp.w	r12,0
80006ef6:	5f 0b       	sreq	r11
80006ef8:	58 08       	cp.w	r8,0
80006efa:	5f 0a       	sreq	r10
80006efc:	f7 ea 10 0a 	or	r10,r11,r10
80006f00:	c4 b1       	brne	80006f96 <d_unqualified_name+0x172>
80006f02:	99 28       	st.w	r12[0x8],r8
80006f04:	99 19       	st.w	r12[0x4],r9
80006f06:	30 78       	mov	r8,7
80006f08:	c2 f8       	rjmp	80006f66 <d_unqualified_name+0x142>
80006f0a:	11 99       	ld.ub	r9,r8[0x1]
80006f0c:	33 1a       	mov	r10,49
80006f0e:	f4 09 18 00 	cp.b	r9,r10
80006f12:	c0 a0       	breq	80006f26 <d_unqualified_name+0x102>
80006f14:	33 2a       	mov	r10,50
80006f16:	f4 09 18 00 	cp.b	r9,r10
80006f1a:	c0 a0       	breq	80006f2e <d_unqualified_name+0x10a>
80006f1c:	33 0a       	mov	r10,48
80006f1e:	f4 09 18 00 	cp.b	r9,r10
80006f22:	c3 a1       	brne	80006f96 <d_unqualified_name+0x172>
80006f24:	c0 38       	rjmp	80006f2a <d_unqualified_name+0x106>
80006f26:	30 29       	mov	r9,2
80006f28:	c0 48       	rjmp	80006f30 <d_unqualified_name+0x10c>
80006f2a:	30 19       	mov	r9,1
80006f2c:	c0 28       	rjmp	80006f30 <d_unqualified_name+0x10c>
80006f2e:	30 39       	mov	r9,3
80006f30:	2f e8       	sub	r8,-2
80006f32:	8f 38       	st.w	r7[0xc],r8
80006f34:	6e 5c       	ld.w	r12,r7[0x14]
80006f36:	6e b8       	ld.w	r8,r7[0x2c]
80006f38:	6e 6a       	ld.w	r10,r7[0x18]
80006f3a:	14 3c       	cp.w	r12,r10
80006f3c:	c0 35       	brlt	80006f42 <d_unqualified_name+0x11e>
80006f3e:	30 0c       	mov	r12,0
80006f40:	c0 98       	rjmp	80006f52 <d_unqualified_name+0x12e>
80006f42:	f8 ca ff ff 	sub	r10,r12,-1
80006f46:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
80006f4a:	8f 5a       	st.w	r7[0x14],r10
80006f4c:	6e 4a       	ld.w	r10,r7[0x10]
80006f4e:	f4 0c 00 2c 	add	r12,r10,r12<<0x2
80006f52:	58 0c       	cp.w	r12,0
80006f54:	5f 0b       	sreq	r11
80006f56:	58 08       	cp.w	r8,0
80006f58:	5f 0a       	sreq	r10
80006f5a:	f7 ea 10 0a 	or	r10,r11,r10
80006f5e:	c1 c1       	brne	80006f96 <d_unqualified_name+0x172>
80006f60:	99 28       	st.w	r12[0x8],r8
80006f62:	99 19       	st.w	r12[0x4],r9
80006f64:	30 88       	mov	r8,8
80006f66:	99 08       	st.w	r12[0x0],r8
80006f68:	d8 22       	popm	r4-r7,pc
80006f6a:	34 ca       	mov	r10,76
80006f6c:	f4 08 18 00 	cp.b	r8,r10
80006f70:	c1 31       	brne	80006f96 <d_unqualified_name+0x172>
80006f72:	2f f9       	sub	r9,-1
80006f74:	99 39       	st.w	r12[0xc],r9
80006f76:	fe b0 fa 0f 	rcall	80006394 <d_source_name>
80006f7a:	18 96       	mov	r6,r12
80006f7c:	c0 d0       	breq	80006f96 <d_unqualified_name+0x172>
80006f7e:	6e 38       	ld.w	r8,r7[0xc]
80006f80:	35 f9       	mov	r9,95
80006f82:	11 8a       	ld.ub	r10,r8[0x0]
80006f84:	f2 0a 18 00 	cp.b	r10,r9
80006f88:	c0 81       	brne	80006f98 <d_unqualified_name+0x174>
80006f8a:	2f f8       	sub	r8,-1
80006f8c:	0e 9c       	mov	r12,r7
80006f8e:	8f 38       	st.w	r7[0xc],r8
80006f90:	fe b0 f7 d8 	rcall	80005f40 <d_number>
80006f94:	c0 24       	brge	80006f98 <d_unqualified_name+0x174>
80006f96:	d8 2a       	popm	r4-r7,pc,r12=0
80006f98:	0c 9c       	mov	r12,r6
80006f9a:	d8 22       	popm	r4-r7,pc

80006f9c <d_expr_primary>:
80006f9c:	d4 21       	pushm	r4-r7,lr
80006f9e:	34 c9       	mov	r9,76
80006fa0:	78 38       	ld.w	r8,r12[0xc]
80006fa2:	18 97       	mov	r7,r12
80006fa4:	11 8a       	ld.ub	r10,r8[0x0]
80006fa6:	f2 0a 18 00 	cp.b	r10,r9
80006faa:	c5 e1       	brne	80007066 <d_expr_primary+0xca>
80006fac:	2f f8       	sub	r8,-1
80006fae:	99 38       	st.w	r12[0xc],r8
80006fb0:	35 f9       	mov	r9,95
80006fb2:	11 8a       	ld.ub	r10,r8[0x0]
80006fb4:	35 ab       	mov	r11,90
80006fb6:	f2 0a 18 00 	cp.b	r10,r9
80006fba:	5f 09       	sreq	r9
80006fbc:	f6 0a 18 00 	cp.b	r10,r11
80006fc0:	5f 0a       	sreq	r10
80006fc2:	f3 ea 10 0a 	or	r10,r9,r10
80006fc6:	c1 20       	breq	80006fea <d_expr_primary+0x4e>
80006fc8:	2f f8       	sub	r8,-1
80006fca:	58 09       	cp.w	r9,0
80006fcc:	f9 f8 1a 03 	st.wne	r12[0xc],r8
80006fd0:	35 a9       	mov	r9,90
80006fd2:	78 38       	ld.w	r8,r12[0xc]
80006fd4:	11 8a       	ld.ub	r10,r8[0x0]
80006fd6:	f2 0a 18 00 	cp.b	r10,r9
80006fda:	c0 30       	breq	80006fe0 <d_expr_primary+0x44>
80006fdc:	30 0c       	mov	r12,0
80006fde:	c3 b8       	rjmp	80007054 <d_expr_primary+0xb8>
80006fe0:	2f f8       	sub	r8,-1
80006fe2:	30 0b       	mov	r11,0
80006fe4:	99 38       	st.w	r12[0xc],r8
80006fe6:	cc bd       	rcall	8000737c <d_encoding>
80006fe8:	c3 68       	rjmp	80007054 <d_expr_primary+0xb8>
80006fea:	fe b0 fb 3f 	rcall	80006668 <d_type>
80006fee:	18 96       	mov	r6,r12
80006ff0:	c3 b0       	breq	80007066 <d_expr_primary+0xca>
80006ff2:	78 08       	ld.w	r8,r12[0x0]
80006ff4:	e0 48 00 23 	cp.w	r8,35
80006ff8:	c0 c1       	brne	80007010 <d_expr_primary+0x74>
80006ffa:	78 18       	ld.w	r8,r12[0x4]
80006ffc:	70 49       	ld.w	r9,r8[0x10]
80006ffe:	58 09       	cp.w	r9,0
80007000:	f1 f8 10 01 	ld.wne	r8,r8[0x4]
80007004:	ef f9 10 0c 	ld.wne	r9,r7[0x30]
80007008:	f3 d8 e1 18 	subne	r8,r9,r8
8000700c:	ef f8 1a 0c 	st.wne	r7[0x30],r8
80007010:	36 e9       	mov	r9,110
80007012:	6e 38       	ld.w	r8,r7[0xc]
80007014:	11 3a       	ld.ub	r10,r8++
80007016:	f2 0a 18 00 	cp.b	r10,r9
8000701a:	f9 b5 01 34 	movne	r5,52
8000701e:	ef f8 0a 03 	st.weq	r7[0xc],r8
80007022:	f9 b5 00 35 	moveq	r5,53
80007026:	6e 3b       	ld.w	r11,r7[0xc]
80007028:	34 59       	mov	r9,69
8000702a:	c0 48       	rjmp	80007032 <d_expr_primary+0x96>
8000702c:	58 08       	cp.w	r8,0
8000702e:	c1 c0       	breq	80007066 <d_expr_primary+0xca>
80007030:	8f 3c       	st.w	r7[0xc],r12
80007032:	6e 3a       	ld.w	r10,r7[0xc]
80007034:	f4 cc ff ff 	sub	r12,r10,-1
80007038:	15 88       	ld.ub	r8,r10[0x0]
8000703a:	f2 08 18 00 	cp.b	r8,r9
8000703e:	cf 71       	brne	8000702c <d_expr_primary+0x90>
80007040:	16 1a       	sub	r10,r11
80007042:	0e 9c       	mov	r12,r7
80007044:	fe b0 f7 62 	rcall	80005f08 <d_make_name>
80007048:	0c 9a       	mov	r10,r6
8000704a:	18 99       	mov	r9,r12
8000704c:	0a 9b       	mov	r11,r5
8000704e:	0e 9c       	mov	r12,r7
80007050:	fe b0 f6 bc 	rcall	80005dc8 <d_make_comp>
80007054:	6e 38       	ld.w	r8,r7[0xc]
80007056:	34 59       	mov	r9,69
80007058:	11 8a       	ld.ub	r10,r8[0x0]
8000705a:	f2 0a 18 00 	cp.b	r10,r9
8000705e:	c0 41       	brne	80007066 <d_expr_primary+0xca>
80007060:	2f f8       	sub	r8,-1
80007062:	8f 38       	st.w	r7[0xc],r8
80007064:	d8 22       	popm	r4-r7,pc
80007066:	d8 2a       	popm	r4-r7,pc,r12=0

80007068 <d_template_args>:
80007068:	d4 31       	pushm	r0-r7,lr
8000706a:	20 1d       	sub	sp,4
8000706c:	34 99       	mov	r9,73
8000706e:	78 38       	ld.w	r8,r12[0xc]
80007070:	18 96       	mov	r6,r12
80007072:	78 b1       	ld.w	r1,r12[0x2c]
80007074:	11 84       	ld.ub	r4,r8[0x0]
80007076:	f2 04 18 00 	cp.b	r4,r9
8000707a:	c4 f1       	brne	80007118 <d_template_args+0xb0>
8000707c:	2f f8       	sub	r8,-1
8000707e:	99 38       	st.w	r12[0xc],r8
80007080:	34 55       	mov	r5,69
80007082:	11 89       	ld.ub	r9,r8[0x0]
80007084:	ea 09 18 00 	cp.b	r9,r5
80007088:	c0 91       	brne	8000709a <d_template_args+0x32>
8000708a:	2f f8       	sub	r8,-1
8000708c:	30 09       	mov	r9,0
8000708e:	99 38       	st.w	r12[0xc],r8
80007090:	32 ab       	mov	r11,42
80007092:	12 9a       	mov	r10,r9
80007094:	fe b0 f6 9a 	rcall	80005dc8 <d_make_comp>
80007098:	c4 18       	rjmp	8000711a <d_template_args+0xb2>
8000709a:	fa c7 ff fc 	sub	r7,sp,-4
8000709e:	30 08       	mov	r8,0
800070a0:	34 c3       	mov	r3,76
800070a2:	0e d8       	st.w	--r7,r8
800070a4:	35 82       	mov	r2,88
800070a6:	6c 39       	ld.w	r9,r6[0xc]
800070a8:	13 88       	ld.ub	r8,r9[0x0]
800070aa:	e6 08 18 00 	cp.b	r8,r3
800070ae:	c1 50       	breq	800070d8 <d_template_args+0x70>
800070b0:	e4 08 18 00 	cp.b	r8,r2
800070b4:	c0 50       	breq	800070be <d_template_args+0x56>
800070b6:	e8 08 18 00 	cp.b	r8,r4
800070ba:	c1 51       	brne	800070e4 <d_template_args+0x7c>
800070bc:	c1 18       	rjmp	800070de <d_template_args+0x76>
800070be:	2f f9       	sub	r9,-1
800070c0:	0c 9c       	mov	r12,r6
800070c2:	8d 39       	st.w	r6[0xc],r9
800070c4:	fe b0 f9 ba 	rcall	80006438 <d_expression>
800070c8:	6c 38       	ld.w	r8,r6[0xc]
800070ca:	11 89       	ld.ub	r9,r8[0x0]
800070cc:	ea 09 18 00 	cp.b	r9,r5
800070d0:	c2 41       	brne	80007118 <d_template_args+0xb0>
800070d2:	2f f8       	sub	r8,-1
800070d4:	8d 38       	st.w	r6[0xc],r8
800070d6:	c0 a8       	rjmp	800070ea <d_template_args+0x82>
800070d8:	0c 9c       	mov	r12,r6
800070da:	c6 1f       	rcall	80006f9c <d_expr_primary>
800070dc:	c0 78       	rjmp	800070ea <d_template_args+0x82>
800070de:	0c 9c       	mov	r12,r6
800070e0:	cc 4f       	rcall	80007068 <d_template_args>
800070e2:	c0 48       	rjmp	800070ea <d_template_args+0x82>
800070e4:	0c 9c       	mov	r12,r6
800070e6:	fe b0 fa c1 	rcall	80006668 <d_type>
800070ea:	58 0c       	cp.w	r12,0
800070ec:	c1 60       	breq	80007118 <d_template_args+0xb0>
800070ee:	18 9a       	mov	r10,r12
800070f0:	30 09       	mov	r9,0
800070f2:	32 ab       	mov	r11,42
800070f4:	0c 9c       	mov	r12,r6
800070f6:	fe b0 f6 69 	rcall	80005dc8 <d_make_comp>
800070fa:	8f 0c       	st.w	r7[0x0],r12
800070fc:	c0 e0       	breq	80007118 <d_template_args+0xb0>
800070fe:	6c 38       	ld.w	r8,r6[0xc]
80007100:	11 89       	ld.ub	r9,r8[0x0]
80007102:	ea 09 18 00 	cp.b	r9,r5
80007106:	c0 40       	breq	8000710e <d_template_args+0xa6>
80007108:	f8 c7 ff f8 	sub	r7,r12,-8
8000710c:	cc db       	rjmp	800070a6 <d_template_args+0x3e>
8000710e:	8d b1       	st.w	r6[0x2c],r1
80007110:	2f f8       	sub	r8,-1
80007112:	40 0c       	lddsp	r12,sp[0x0]
80007114:	8d 38       	st.w	r6[0xc],r8
80007116:	c0 28       	rjmp	8000711a <d_template_args+0xb2>
80007118:	30 0c       	mov	r12,0
8000711a:	2f fd       	sub	sp,-4
8000711c:	d8 32       	popm	r0-r7,pc
	...

80007120 <d_name>:
80007120:	d4 31       	pushm	r0-r7,lr
80007122:	20 1d       	sub	sp,4
80007124:	34 ea       	mov	r10,78
80007126:	78 38       	ld.w	r8,r12[0xc]
80007128:	18 97       	mov	r7,r12
8000712a:	11 89       	ld.ub	r9,r8[0x0]
8000712c:	f4 09 18 00 	cp.b	r9,r10
80007130:	c1 40       	breq	80007158 <d_name+0x38>
80007132:	e0 8b 00 08 	brhi	80007142 <d_name+0x22>
80007136:	34 c8       	mov	r8,76
80007138:	f0 09 18 00 	cp.b	r9,r8
8000713c:	e0 81 00 f8 	brne	8000732c <d_name+0x20c>
80007140:	cc 98       	rjmp	800072d2 <d_name+0x1b2>
80007142:	35 3a       	mov	r10,83
80007144:	f4 09 18 00 	cp.b	r9,r10
80007148:	e0 80 00 c9 	breq	800072da <d_name+0x1ba>
8000714c:	35 aa       	mov	r10,90
8000714e:	f4 09 18 00 	cp.b	r9,r10
80007152:	e0 81 00 ed 	brne	8000732c <d_name+0x20c>
80007156:	c8 48       	rjmp	8000725e <d_name+0x13e>
80007158:	2f f8       	sub	r8,-1
8000715a:	30 1a       	mov	r10,1
8000715c:	99 38       	st.w	r12[0xc],r8
8000715e:	1a 9b       	mov	r11,sp
80007160:	fe b0 f7 3c 	rcall	80005fd8 <d_cv_qualifiers>
80007164:	18 93       	mov	r3,r12
80007166:	e0 80 01 02 	breq	8000736a <d_name+0x24a>
8000716a:	30 02       	mov	r2,0
8000716c:	31 91       	mov	r1,25
8000716e:	30 90       	mov	r0,9
80007170:	04 94       	mov	r4,r2
80007172:	35 35       	mov	r5,83
80007174:	6e 38       	ld.w	r8,r7[0xc]
80007176:	11 86       	ld.ub	r6,r8[0x0]
80007178:	58 06       	cp.w	r6,0
8000717a:	c6 20       	breq	8000723e <d_name+0x11e>
8000717c:	ec c8 00 61 	sub	r8,r6,97
80007180:	e2 08 18 00 	cp.b	r8,r1
80007184:	5f 89       	srls	r9
80007186:	ec c8 00 30 	sub	r8,r6,48
8000718a:	e0 08 18 00 	cp.b	r8,r0
8000718e:	5f 88       	srls	r8
80007190:	f3 e8 10 08 	or	r8,r9,r8
80007194:	e8 08 18 00 	cp.b	r8,r4
80007198:	c1 21       	brne	800071bc <d_name+0x9c>
8000719a:	34 48       	mov	r8,68
8000719c:	f0 06 18 00 	cp.b	r6,r8
800071a0:	5f 09       	sreq	r9
800071a2:	34 38       	mov	r8,67
800071a4:	f0 06 18 00 	cp.b	r6,r8
800071a8:	5f 08       	sreq	r8
800071aa:	f3 e8 10 08 	or	r8,r9,r8
800071ae:	e8 08 18 00 	cp.b	r8,r4
800071b2:	c0 51       	brne	800071bc <d_name+0x9c>
800071b4:	34 c8       	mov	r8,76
800071b6:	f0 06 18 00 	cp.b	r6,r8
800071ba:	c0 41       	brne	800071c2 <d_name+0xa2>
800071bc:	0e 9c       	mov	r12,r7
800071be:	c3 3e       	rcall	80006e24 <d_unqualified_name>
800071c0:	c2 08       	rjmp	80007200 <d_name+0xe0>
800071c2:	ea 06 18 00 	cp.b	r6,r5
800071c6:	c0 61       	brne	800071d2 <d_name+0xb2>
800071c8:	30 1b       	mov	r11,1
800071ca:	0e 9c       	mov	r12,r7
800071cc:	fe b0 f7 8c 	rcall	800060e4 <d_substitution>
800071d0:	c1 88       	rjmp	80007200 <d_name+0xe0>
800071d2:	34 98       	mov	r8,73
800071d4:	f0 06 18 00 	cp.b	r6,r8
800071d8:	c0 71       	brne	800071e6 <d_name+0xc6>
800071da:	58 02       	cp.w	r2,0
800071dc:	c3 20       	breq	80007240 <d_name+0x120>
800071de:	0e 9c       	mov	r12,r7
800071e0:	c4 4f       	rcall	80007068 <d_template_args>
800071e2:	30 4b       	mov	r11,4
800071e4:	c1 18       	rjmp	80007206 <d_name+0xe6>
800071e6:	35 48       	mov	r8,84
800071e8:	f0 06 18 00 	cp.b	r6,r8
800071ec:	c0 51       	brne	800071f6 <d_name+0xd6>
800071ee:	0e 9c       	mov	r12,r7
800071f0:	fe b0 f7 46 	rcall	8000607c <d_template_param>
800071f4:	c0 68       	rjmp	80007200 <d_name+0xe0>
800071f6:	34 58       	mov	r8,69
800071f8:	f0 06 18 00 	cp.b	r6,r8
800071fc:	c2 11       	brne	8000723e <d_name+0x11e>
800071fe:	c2 18       	rjmp	80007240 <d_name+0x120>
80007200:	58 02       	cp.w	r2,0
80007202:	c0 70       	breq	80007210 <d_name+0xf0>
80007204:	30 1b       	mov	r11,1
80007206:	18 99       	mov	r9,r12
80007208:	04 9a       	mov	r10,r2
8000720a:	0e 9c       	mov	r12,r7
8000720c:	fe b0 f5 de 	rcall	80005dc8 <d_make_comp>
80007210:	18 92       	mov	r2,r12
80007212:	ea 06 18 00 	cp.b	r6,r5
80007216:	ca f0       	breq	80007174 <d_name+0x54>
80007218:	6e 38       	ld.w	r8,r7[0xc]
8000721a:	11 89       	ld.ub	r9,r8[0x0]
8000721c:	34 58       	mov	r8,69
8000721e:	f0 09 18 00 	cp.b	r9,r8
80007222:	ca 90       	breq	80007174 <d_name+0x54>
80007224:	58 0c       	cp.w	r12,0
80007226:	c0 d0       	breq	80007240 <d_name+0x120>
80007228:	6e 88       	ld.w	r8,r7[0x20]
8000722a:	6e 99       	ld.w	r9,r7[0x24]
8000722c:	12 38       	cp.w	r8,r9
8000722e:	c0 84       	brge	8000723e <d_name+0x11e>
80007230:	f0 c9 ff ff 	sub	r9,r8,-1
80007234:	8f 89       	st.w	r7[0x20],r9
80007236:	6e 79       	ld.w	r9,r7[0x1c]
80007238:	f2 08 09 2c 	st.w	r9[r8<<0x2],r12
8000723c:	c9 cb       	rjmp	80007174 <d_name+0x54>
8000723e:	30 02       	mov	r2,0
80007240:	87 02       	st.w	r3[0x0],r2
80007242:	58 02       	cp.w	r2,0
80007244:	e0 80 00 93 	breq	8000736a <d_name+0x24a>
80007248:	6e 38       	ld.w	r8,r7[0xc]
8000724a:	34 59       	mov	r9,69
8000724c:	11 8a       	ld.ub	r10,r8[0x0]
8000724e:	f2 0a 18 00 	cp.b	r10,r9
80007252:	e0 81 00 8c 	brne	8000736a <d_name+0x24a>
80007256:	2f f8       	sub	r8,-1
80007258:	40 06       	lddsp	r6,sp[0x0]
8000725a:	8f 38       	st.w	r7[0xc],r8
8000725c:	c8 88       	rjmp	8000736c <d_name+0x24c>
8000725e:	2f f8       	sub	r8,-1
80007260:	30 0b       	mov	r11,0
80007262:	99 38       	st.w	r12[0xc],r8
80007264:	c8 cc       	rcall	8000737c <d_encoding>
80007266:	6e 38       	ld.w	r8,r7[0xc]
80007268:	18 96       	mov	r6,r12
8000726a:	11 8a       	ld.ub	r10,r8[0x0]
8000726c:	34 59       	mov	r9,69
8000726e:	f2 0a 18 00 	cp.b	r10,r9
80007272:	c7 c1       	brne	8000736a <d_name+0x24a>
80007274:	2f f8       	sub	r8,-1
80007276:	8f 38       	st.w	r7[0xc],r8
80007278:	37 39       	mov	r9,115
8000727a:	11 8a       	ld.ub	r10,r8[0x0]
8000727c:	f2 0a 18 00 	cp.b	r10,r9
80007280:	c1 51       	brne	800072aa <d_name+0x18a>
80007282:	2f f8       	sub	r8,-1
80007284:	8f 38       	st.w	r7[0xc],r8
80007286:	35 f9       	mov	r9,95
80007288:	11 8a       	ld.ub	r10,r8[0x0]
8000728a:	f2 0a 18 00 	cp.b	r10,r9
8000728e:	c0 71       	brne	8000729c <d_name+0x17c>
80007290:	2f f8       	sub	r8,-1
80007292:	0e 9c       	mov	r12,r7
80007294:	8f 38       	st.w	r7[0xc],r8
80007296:	fe b0 f6 55 	rcall	80005f40 <d_number>
8000729a:	c6 85       	brlt	8000736a <d_name+0x24a>
8000729c:	4b 6b       	lddpc	r11,80007374 <d_name+0x254>
8000729e:	30 ea       	mov	r10,14
800072a0:	0e 9c       	mov	r12,r7
800072a2:	fe b0 f6 33 	rcall	80005f08 <d_make_name>
800072a6:	18 99       	mov	r9,r12
800072a8:	c1 18       	rjmp	800072ca <d_name+0x1aa>
800072aa:	0e 9c       	mov	r12,r7
800072ac:	c3 af       	rcall	80007120 <d_name>
800072ae:	6e 38       	ld.w	r8,r7[0xc]
800072b0:	18 95       	mov	r5,r12
800072b2:	11 8a       	ld.ub	r10,r8[0x0]
800072b4:	35 f9       	mov	r9,95
800072b6:	f2 0a 18 00 	cp.b	r10,r9
800072ba:	c0 71       	brne	800072c8 <d_name+0x1a8>
800072bc:	2f f8       	sub	r8,-1
800072be:	0e 9c       	mov	r12,r7
800072c0:	8f 38       	st.w	r7[0xc],r8
800072c2:	fe b0 f6 3f 	rcall	80005f40 <d_number>
800072c6:	c5 25       	brlt	8000736a <d_name+0x24a>
800072c8:	0a 99       	mov	r9,r5
800072ca:	0c 9a       	mov	r10,r6
800072cc:	0e 9c       	mov	r12,r7
800072ce:	30 2b       	mov	r11,2
800072d0:	c4 a8       	rjmp	80007364 <d_name+0x244>
800072d2:	fe b0 fd a9 	rcall	80006e24 <d_unqualified_name>
800072d6:	18 96       	mov	r6,r12
800072d8:	c4 a8       	rjmp	8000736c <d_name+0x24c>
800072da:	11 9a       	ld.ub	r10,r8[0x1]
800072dc:	37 49       	mov	r9,116
800072de:	f2 0a 18 00 	cp.b	r10,r9
800072e2:	c0 70       	breq	800072f0 <d_name+0x1d0>
800072e4:	30 0b       	mov	r11,0
800072e6:	fe b0 f6 ff 	rcall	800060e4 <d_substitution>
800072ea:	30 18       	mov	r8,1
800072ec:	18 96       	mov	r6,r12
800072ee:	c1 68       	rjmp	8000731a <d_name+0x1fa>
800072f0:	2f e8       	sub	r8,-2
800072f2:	99 38       	st.w	r12[0xc],r8
800072f4:	fe b0 fd 98 	rcall	80006e24 <d_unqualified_name>
800072f8:	4a 0b       	lddpc	r11,80007378 <d_name+0x258>
800072fa:	18 96       	mov	r6,r12
800072fc:	30 3a       	mov	r10,3
800072fe:	0e 9c       	mov	r12,r7
80007300:	fe b0 f6 04 	rcall	80005f08 <d_make_name>
80007304:	0c 99       	mov	r9,r6
80007306:	18 9a       	mov	r10,r12
80007308:	30 1b       	mov	r11,1
8000730a:	0e 9c       	mov	r12,r7
8000730c:	fe b0 f5 5e 	rcall	80005dc8 <d_make_comp>
80007310:	6e c8       	ld.w	r8,r7[0x30]
80007312:	2f d8       	sub	r8,-3
80007314:	18 96       	mov	r6,r12
80007316:	8f c8       	st.w	r7[0x30],r8
80007318:	30 08       	mov	r8,0
8000731a:	6e 39       	ld.w	r9,r7[0xc]
8000731c:	13 8a       	ld.ub	r10,r9[0x0]
8000731e:	34 99       	mov	r9,73
80007320:	f2 0a 18 00 	cp.b	r10,r9
80007324:	c2 41       	brne	8000736c <d_name+0x24c>
80007326:	58 08       	cp.w	r8,0
80007328:	c1 81       	brne	80007358 <d_name+0x238>
8000732a:	c0 b8       	rjmp	80007340 <d_name+0x220>
8000732c:	0e 9c       	mov	r12,r7
8000732e:	fe b0 fd 7b 	rcall	80006e24 <d_unqualified_name>
80007332:	6e 38       	ld.w	r8,r7[0xc]
80007334:	18 96       	mov	r6,r12
80007336:	11 89       	ld.ub	r9,r8[0x0]
80007338:	34 98       	mov	r8,73
8000733a:	f0 09 18 00 	cp.b	r9,r8
8000733e:	c1 71       	brne	8000736c <d_name+0x24c>
80007340:	58 06       	cp.w	r6,0
80007342:	c1 50       	breq	8000736c <d_name+0x24c>
80007344:	6e 88       	ld.w	r8,r7[0x20]
80007346:	6e 99       	ld.w	r9,r7[0x24]
80007348:	12 38       	cp.w	r8,r9
8000734a:	c1 04       	brge	8000736a <d_name+0x24a>
8000734c:	f0 c9 ff ff 	sub	r9,r8,-1
80007350:	8f 89       	st.w	r7[0x20],r9
80007352:	6e 79       	ld.w	r9,r7[0x1c]
80007354:	f2 08 09 26 	st.w	r9[r8<<0x2],r6
80007358:	0e 9c       	mov	r12,r7
8000735a:	c8 7e       	rcall	80007068 <d_template_args>
8000735c:	0c 9a       	mov	r10,r6
8000735e:	18 99       	mov	r9,r12
80007360:	30 4b       	mov	r11,4
80007362:	0e 9c       	mov	r12,r7
80007364:	fe b0 f5 32 	rcall	80005dc8 <d_make_comp>
80007368:	cb 7b       	rjmp	800072d6 <d_name+0x1b6>
8000736a:	30 06       	mov	r6,0
8000736c:	0c 9c       	mov	r12,r6
8000736e:	2f fd       	sub	sp,-4
80007370:	d8 32       	popm	r0-r7,pc
80007372:	00 00       	add	r0,r0
80007374:	80 01       	ld.sh	r1,r0[0x0]
80007376:	14 78       	tst	r8,r10
80007378:	80 01       	ld.sh	r1,r0[0x0]
8000737a:	14 88       	andn	r8,r10

8000737c <d_encoding>:
8000737c:	d4 31       	pushm	r0-r7,lr
8000737e:	78 38       	ld.w	r8,r12[0xc]
80007380:	11 89       	ld.ub	r9,r8[0x0]
80007382:	16 94       	mov	r4,r11
80007384:	35 4a       	mov	r10,84
80007386:	34 7b       	mov	r11,71
80007388:	f4 09 18 00 	cp.b	r9,r10
8000738c:	5f 05       	sreq	r5
8000738e:	f6 09 18 00 	cp.b	r9,r11
80007392:	5f 06       	sreq	r6
80007394:	18 97       	mov	r7,r12
80007396:	0c 45       	or	r5,r6
80007398:	30 09       	mov	r9,0
8000739a:	f2 05 18 00 	cp.b	r5,r9
8000739e:	e0 80 01 68 	breq	8000766e <d_encoding+0x2f2>
800073a2:	78 c9       	ld.w	r9,r12[0x30]
800073a4:	f2 c6 ff ec 	sub	r6,r9,-20
800073a8:	99 c6       	st.w	r12[0x30],r6
800073aa:	11 86       	ld.ub	r6,r8[0x0]
800073ac:	f4 06 18 00 	cp.b	r6,r10
800073b0:	c0 81       	brne	800073c0 <d_encoding+0x44>
800073b2:	f0 cb ff ff 	sub	r11,r8,-1
800073b6:	99 3b       	st.w	r12[0xc],r11
800073b8:	17 88       	ld.ub	r8,r11[0x0]
800073ba:	58 08       	cp.w	r8,0
800073bc:	c0 71       	brne	800073ca <d_encoding+0x4e>
800073be:	c5 69       	rjmp	8000766a <d_encoding+0x2ee>
800073c0:	f6 06 18 00 	cp.b	r6,r11
800073c4:	e0 81 01 53 	brne	8000766a <d_encoding+0x2ee>
800073c8:	cb 08       	rjmp	80007528 <d_encoding+0x1ac>
800073ca:	2f fb       	sub	r11,-1
800073cc:	99 3b       	st.w	r12[0xc],r11
800073ce:	35 3b       	mov	r11,83
800073d0:	f6 08 18 00 	cp.b	r8,r11
800073d4:	c4 c0       	breq	8000746c <d_encoding+0xf0>
800073d6:	e0 8b 00 19 	brhi	80007408 <d_encoding+0x8c>
800073da:	34 69       	mov	r9,70
800073dc:	f2 08 18 00 	cp.b	r8,r9
800073e0:	e0 80 00 96 	breq	8000750c <d_encoding+0x190>
800073e4:	e0 8b 00 08 	brhi	800073f4 <d_encoding+0x78>
800073e8:	34 39       	mov	r9,67
800073ea:	f2 08 18 00 	cp.b	r8,r9
800073ee:	e0 81 01 3e 	brne	8000766a <d_encoding+0x2ee>
800073f2:	c7 18       	rjmp	800074d4 <d_encoding+0x158>
800073f4:	34 99       	mov	r9,73
800073f6:	f2 08 18 00 	cp.b	r8,r9
800073fa:	c3 20       	breq	8000745e <d_encoding+0xe2>
800073fc:	34 a9       	mov	r9,74
800073fe:	f2 08 18 00 	cp.b	r8,r9
80007402:	e0 81 01 34 	brne	8000766a <d_encoding+0x2ee>
80007406:	c8 a8       	rjmp	8000751a <d_encoding+0x19e>
80007408:	36 3b       	mov	r11,99
8000740a:	f6 08 18 00 	cp.b	r8,r11
8000740e:	c5 00       	breq	800074ae <d_encoding+0x132>
80007410:	e0 8b 00 0b 	brhi	80007426 <d_encoding+0xaa>
80007414:	f4 08 18 00 	cp.b	r8,r10
80007418:	c1 a0       	breq	8000744c <d_encoding+0xd0>
8000741a:	35 6a       	mov	r10,86
8000741c:	f4 08 18 00 	cp.b	r8,r10
80007420:	e0 81 01 25 	brne	8000766a <d_encoding+0x2ee>
80007424:	c0 b8       	rjmp	8000743a <d_encoding+0xbe>
80007426:	36 89       	mov	r9,104
80007428:	f2 08 18 00 	cp.b	r8,r9
8000742c:	c2 70       	breq	8000747a <d_encoding+0xfe>
8000742e:	37 69       	mov	r9,118
80007430:	f2 08 18 00 	cp.b	r8,r9
80007434:	e0 81 01 1b 	brne	8000766a <d_encoding+0x2ee>
80007438:	c2 e8       	rjmp	80007494 <d_encoding+0x118>
8000743a:	2f 19       	sub	r9,-15
8000743c:	99 c9       	st.w	r12[0x30],r9
8000743e:	fe b0 f9 15 	rcall	80006668 <d_type>
80007442:	30 09       	mov	r9,0
80007444:	18 9a       	mov	r10,r12
80007446:	30 9b       	mov	r11,9
80007448:	0e 9c       	mov	r12,r7
8000744a:	c7 69       	rjmp	80007736 <d_encoding+0x3ba>
8000744c:	2f 69       	sub	r9,-10
8000744e:	99 c9       	st.w	r12[0x30],r9
80007450:	fe b0 f9 0c 	rcall	80006668 <d_type>
80007454:	30 09       	mov	r9,0
80007456:	18 9a       	mov	r10,r12
80007458:	30 ab       	mov	r11,10
8000745a:	0e 9c       	mov	r12,r7
8000745c:	c6 d9       	rjmp	80007736 <d_encoding+0x3ba>
8000745e:	fe b0 f9 05 	rcall	80006668 <d_type>
80007462:	30 09       	mov	r9,0
80007464:	18 9a       	mov	r10,r12
80007466:	30 cb       	mov	r11,12
80007468:	0e 9c       	mov	r12,r7
8000746a:	c6 69       	rjmp	80007736 <d_encoding+0x3ba>
8000746c:	fe b0 f8 fe 	rcall	80006668 <d_type>
80007470:	30 09       	mov	r9,0
80007472:	18 9a       	mov	r10,r12
80007474:	30 db       	mov	r11,13
80007476:	0e 9c       	mov	r12,r7
80007478:	c5 f9       	rjmp	80007736 <d_encoding+0x3ba>
8000747a:	36 8b       	mov	r11,104
8000747c:	fe b0 f5 87 	rcall	80005f8a <d_call_offset>
80007480:	e0 80 00 f5 	breq	8000766a <d_encoding+0x2ee>
80007484:	30 0b       	mov	r11,0
80007486:	0e 9c       	mov	r12,r7
80007488:	c7 af       	rcall	8000737c <d_encoding>
8000748a:	30 09       	mov	r9,0
8000748c:	18 9a       	mov	r10,r12
8000748e:	30 fb       	mov	r11,15
80007490:	0e 9c       	mov	r12,r7
80007492:	c5 29       	rjmp	80007736 <d_encoding+0x3ba>
80007494:	37 6b       	mov	r11,118
80007496:	fe b0 f5 7a 	rcall	80005f8a <d_call_offset>
8000749a:	e0 80 00 e8 	breq	8000766a <d_encoding+0x2ee>
8000749e:	30 0b       	mov	r11,0
800074a0:	0e 9c       	mov	r12,r7
800074a2:	c6 df       	rcall	8000737c <d_encoding>
800074a4:	30 09       	mov	r9,0
800074a6:	18 9a       	mov	r10,r12
800074a8:	31 0b       	mov	r11,16
800074aa:	0e 9c       	mov	r12,r7
800074ac:	c4 59       	rjmp	80007736 <d_encoding+0x3ba>
800074ae:	30 0b       	mov	r11,0
800074b0:	fe b0 f5 6d 	rcall	80005f8a <d_call_offset>
800074b4:	e0 80 00 db 	breq	8000766a <d_encoding+0x2ee>
800074b8:	30 0b       	mov	r11,0
800074ba:	0e 9c       	mov	r12,r7
800074bc:	fe b0 f5 67 	rcall	80005f8a <d_call_offset>
800074c0:	e0 80 00 d5 	breq	8000766a <d_encoding+0x2ee>
800074c4:	30 0b       	mov	r11,0
800074c6:	0e 9c       	mov	r12,r7
800074c8:	c5 af       	rcall	8000737c <d_encoding>
800074ca:	30 09       	mov	r9,0
800074cc:	18 9a       	mov	r10,r12
800074ce:	31 1b       	mov	r11,17
800074d0:	0e 9c       	mov	r12,r7
800074d2:	c3 29       	rjmp	80007736 <d_encoding+0x3ba>
800074d4:	fe b0 f8 ca 	rcall	80006668 <d_type>
800074d8:	18 96       	mov	r6,r12
800074da:	0e 9c       	mov	r12,r7
800074dc:	fe b0 f5 32 	rcall	80005f40 <d_number>
800074e0:	e0 85 00 c5 	brlt	8000766a <d_encoding+0x2ee>
800074e4:	6e 38       	ld.w	r8,r7[0xc]
800074e6:	35 f9       	mov	r9,95
800074e8:	11 8a       	ld.ub	r10,r8[0x0]
800074ea:	f2 0a 18 00 	cp.b	r10,r9
800074ee:	e0 81 00 be 	brne	8000766a <d_encoding+0x2ee>
800074f2:	2f f8       	sub	r8,-1
800074f4:	0e 9c       	mov	r12,r7
800074f6:	8f 38       	st.w	r7[0xc],r8
800074f8:	fe b0 f8 b8 	rcall	80006668 <d_type>
800074fc:	6e c8       	ld.w	r8,r7[0x30]
800074fe:	18 9a       	mov	r10,r12
80007500:	2f b8       	sub	r8,-5
80007502:	0c 99       	mov	r9,r6
80007504:	0e 9c       	mov	r12,r7
80007506:	8f c8       	st.w	r7[0x30],r8
80007508:	30 bb       	mov	r11,11
8000750a:	c1 69       	rjmp	80007736 <d_encoding+0x3ba>
8000750c:	fe b0 f8 ae 	rcall	80006668 <d_type>
80007510:	30 09       	mov	r9,0
80007512:	18 9a       	mov	r10,r12
80007514:	30 eb       	mov	r11,14
80007516:	0e 9c       	mov	r12,r7
80007518:	c0 f9       	rjmp	80007736 <d_encoding+0x3ba>
8000751a:	fe b0 f8 a7 	rcall	80006668 <d_type>
8000751e:	30 09       	mov	r9,0
80007520:	18 9a       	mov	r10,r12
80007522:	31 2b       	mov	r11,18
80007524:	0e 9c       	mov	r12,r7
80007526:	c0 89       	rjmp	80007736 <d_encoding+0x3ba>
80007528:	f0 c9 ff ff 	sub	r9,r8,-1
8000752c:	99 39       	st.w	r12[0xc],r9
8000752e:	13 88       	ld.ub	r8,r9[0x0]
80007530:	58 08       	cp.w	r8,0
80007532:	e0 80 00 9c 	breq	8000766a <d_encoding+0x2ee>
80007536:	2f f9       	sub	r9,-1
80007538:	99 39       	st.w	r12[0xc],r9
8000753a:	35 29       	mov	r9,82
8000753c:	f2 08 18 00 	cp.b	r8,r9
80007540:	c1 a0       	breq	80007574 <d_encoding+0x1f8>
80007542:	e0 8b 00 08 	brhi	80007552 <d_encoding+0x1d6>
80007546:	34 19       	mov	r9,65
80007548:	f2 08 18 00 	cp.b	r8,r9
8000754c:	e0 81 00 8f 	brne	8000766a <d_encoding+0x2ee>
80007550:	c1 98       	rjmp	80007582 <d_encoding+0x206>
80007552:	35 69       	mov	r9,86
80007554:	f2 08 18 00 	cp.b	r8,r9
80007558:	c0 70       	breq	80007566 <d_encoding+0x1ea>
8000755a:	37 29       	mov	r9,114
8000755c:	f2 08 18 00 	cp.b	r8,r9
80007560:	e0 81 00 85 	brne	8000766a <d_encoding+0x2ee>
80007564:	c1 68       	rjmp	80007590 <d_encoding+0x214>
80007566:	fe b0 fd dd 	rcall	80007120 <d_name>
8000756a:	30 09       	mov	r9,0
8000756c:	18 9a       	mov	r10,r12
8000756e:	31 3b       	mov	r11,19
80007570:	0e 9c       	mov	r12,r7
80007572:	ce 28       	rjmp	80007736 <d_encoding+0x3ba>
80007574:	fe b0 fd d6 	rcall	80007120 <d_name>
80007578:	30 09       	mov	r9,0
8000757a:	18 9a       	mov	r10,r12
8000757c:	31 4b       	mov	r11,20
8000757e:	0e 9c       	mov	r12,r7
80007580:	cd b8       	rjmp	80007736 <d_encoding+0x3ba>
80007582:	30 0b       	mov	r11,0
80007584:	cf ce       	rcall	8000737c <d_encoding>
80007586:	30 09       	mov	r9,0
80007588:	18 9a       	mov	r10,r12
8000758a:	31 5b       	mov	r11,21
8000758c:	0e 9c       	mov	r12,r7
8000758e:	cd 48       	rjmp	80007736 <d_encoding+0x3ba>
80007590:	fe b0 f4 d8 	rcall	80005f40 <d_number>
80007594:	58 1c       	cp.w	r12,1
80007596:	e0 8a 00 6a 	brle	8000766a <d_encoding+0x2ee>
8000759a:	6e 36       	ld.w	r6,r7[0xc]
8000759c:	0d 81       	ld.ub	r1,r6[0x0]
8000759e:	58 01       	cp.w	r1,0
800075a0:	c6 50       	breq	8000766a <d_encoding+0x2ee>
800075a2:	2f f6       	sub	r6,-1
800075a4:	8f 36       	st.w	r7[0xc],r6
800075a6:	35 f8       	mov	r8,95
800075a8:	f0 01 18 00 	cp.b	r1,r8
800075ac:	c5 f1       	brne	8000766a <d_encoding+0x2ee>
800075ae:	f8 c5 00 01 	sub	r5,r12,1
800075b2:	30 03       	mov	r3,0
800075b4:	32 44       	mov	r4,36
800075b6:	35 30       	mov	r0,83
800075b8:	0d 88       	ld.ub	r8,r6[0x0]
800075ba:	58 08       	cp.w	r8,0
800075bc:	c5 70       	breq	8000766a <d_encoding+0x2ee>
800075be:	e8 08 18 00 	cp.b	r8,r4
800075c2:	c0 30       	breq	800075c8 <d_encoding+0x24c>
800075c4:	30 02       	mov	r2,0
800075c6:	c2 d8       	rjmp	80007620 <d_encoding+0x2a4>
800075c8:	0d 99       	ld.ub	r9,r6[0x1]
800075ca:	e0 09 18 00 	cp.b	r9,r0
800075ce:	c0 a0       	breq	800075e2 <d_encoding+0x266>
800075d0:	e2 09 18 00 	cp.b	r9,r1
800075d4:	c0 50       	breq	800075de <d_encoding+0x262>
800075d6:	e8 09 18 00 	cp.b	r9,r4
800075da:	c4 81       	brne	8000766a <d_encoding+0x2ee>
800075dc:	c0 48       	rjmp	800075e4 <d_encoding+0x268>
800075de:	32 e8       	mov	r8,46
800075e0:	c0 28       	rjmp	800075e4 <d_encoding+0x268>
800075e2:	32 f8       	mov	r8,47
800075e4:	6e 5c       	ld.w	r12,r7[0x14]
800075e6:	6e 69       	ld.w	r9,r7[0x18]
800075e8:	12 3c       	cp.w	r12,r9
800075ea:	c0 35       	brlt	800075f0 <d_encoding+0x274>
800075ec:	30 0c       	mov	r12,0
800075ee:	c0 f8       	rjmp	8000760c <d_encoding+0x290>
800075f0:	f8 c9 ff ff 	sub	r9,r12,-1
800075f4:	8f 59       	st.w	r7[0x14],r9
800075f6:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
800075fa:	6e 49       	ld.w	r9,r7[0x10]
800075fc:	f2 0c 00 2c 	add	r12,r9,r12<<0x2
80007600:	f9 f8 1a 01 	st.wne	r12[0x4],r8
80007604:	f9 b8 01 38 	movne	r8,56
80007608:	f9 f8 1a 00 	st.wne	r12[0x0],r8
8000760c:	6e 36       	ld.w	r6,r7[0xc]
8000760e:	2f e6       	sub	r6,-2
80007610:	8f 36       	st.w	r7[0xc],r6
80007612:	58 0c       	cp.w	r12,0
80007614:	c2 b0       	breq	8000766a <d_encoding+0x2ee>
80007616:	20 25       	sub	r5,2
80007618:	c1 68       	rjmp	80007644 <d_encoding+0x2c8>
8000761a:	2f f2       	sub	r2,-1
8000761c:	0a 32       	cp.w	r2,r5
8000761e:	c0 84       	brge	8000762e <d_encoding+0x2b2>
80007620:	ec 02 07 08 	ld.ub	r8,r6[r2]
80007624:	58 08       	cp.w	r8,0
80007626:	c0 40       	breq	8000762e <d_encoding+0x2b2>
80007628:	e8 08 18 00 	cp.b	r8,r4
8000762c:	cf 71       	brne	8000761a <d_encoding+0x29e>
8000762e:	0c 9b       	mov	r11,r6
80007630:	04 9a       	mov	r10,r2
80007632:	0e 9c       	mov	r12,r7
80007634:	fe b0 f4 6a 	rcall	80005f08 <d_make_name>
80007638:	6e 36       	ld.w	r6,r7[0xc]
8000763a:	04 06       	add	r6,r2
8000763c:	8f 36       	st.w	r7[0xc],r6
8000763e:	58 0c       	cp.w	r12,0
80007640:	c1 50       	breq	8000766a <d_encoding+0x2ee>
80007642:	04 15       	sub	r5,r2
80007644:	58 03       	cp.w	r3,0
80007646:	c0 80       	breq	80007656 <d_encoding+0x2da>
80007648:	18 99       	mov	r9,r12
8000764a:	06 9a       	mov	r10,r3
8000764c:	33 7b       	mov	r11,55
8000764e:	0e 9c       	mov	r12,r7
80007650:	fe b0 f3 bc 	rcall	80005dc8 <d_make_comp>
80007654:	c0 b0       	breq	8000766a <d_encoding+0x2ee>
80007656:	58 05       	cp.w	r5,0
80007658:	e0 8a 00 04 	brle	80007660 <d_encoding+0x2e4>
8000765c:	18 93       	mov	r3,r12
8000765e:	ca db       	rjmp	800075b8 <d_encoding+0x23c>
80007660:	18 9a       	mov	r10,r12
80007662:	30 09       	mov	r9,0
80007664:	0e 9c       	mov	r12,r7
80007666:	33 6b       	mov	r11,54
80007668:	c6 78       	rjmp	80007736 <d_encoding+0x3ba>
8000766a:	30 06       	mov	r6,0
8000766c:	c6 88       	rjmp	8000773c <d_encoding+0x3c0>
8000766e:	fe b0 fd 59 	rcall	80007120 <d_name>
80007672:	58 04       	cp.w	r4,0
80007674:	5f 18       	srne	r8
80007676:	58 0c       	cp.w	r12,0
80007678:	5f 19       	srne	r9
8000767a:	18 96       	mov	r6,r12
8000767c:	f3 e8 00 08 	and	r8,r9,r8
80007680:	ea 08 18 00 	cp.b	r8,r5
80007684:	c1 90       	breq	800076b6 <d_encoding+0x33a>
80007686:	6e 28       	ld.w	r8,r7[0x8]
80007688:	ed b8 00 00 	bld	r8,0x0
8000768c:	c0 31       	brne	80007692 <d_encoding+0x316>
8000768e:	c1 48       	rjmp	800076b6 <d_encoding+0x33a>
80007690:	6c 16       	ld.w	r6,r6[0x4]
80007692:	6c 08       	ld.w	r8,r6[0x0]
80007694:	f0 c9 00 1a 	sub	r9,r8,26
80007698:	58 29       	cp.w	r9,2
8000769a:	fe 98 ff fb 	brls	80007690 <d_encoding+0x314>
8000769e:	58 28       	cp.w	r8,2
800076a0:	c4 e1       	brne	8000773c <d_encoding+0x3c0>
800076a2:	6c 28       	ld.w	r8,r6[0x8]
800076a4:	c0 28       	rjmp	800076a8 <d_encoding+0x32c>
800076a6:	70 18       	ld.w	r8,r8[0x4]
800076a8:	70 09       	ld.w	r9,r8[0x0]
800076aa:	21 a9       	sub	r9,26
800076ac:	58 29       	cp.w	r9,2
800076ae:	fe 98 ff fc 	brls	800076a6 <d_encoding+0x32a>
800076b2:	8d 28       	st.w	r6[0x8],r8
800076b4:	c4 48       	rjmp	8000773c <d_encoding+0x3c0>
800076b6:	58 06       	cp.w	r6,0
800076b8:	5f 0b       	sreq	r11
800076ba:	6e 38       	ld.w	r8,r7[0xc]
800076bc:	30 09       	mov	r9,0
800076be:	11 88       	ld.ub	r8,r8[0x0]
800076c0:	f2 08 18 00 	cp.b	r8,r9
800076c4:	5f 0a       	sreq	r10
800076c6:	f7 ea 10 0a 	or	r10,r11,r10
800076ca:	f2 0a 18 00 	cp.b	r10,r9
800076ce:	c3 71       	brne	8000773c <d_encoding+0x3c0>
800076d0:	34 59       	mov	r9,69
800076d2:	f2 08 18 00 	cp.b	r8,r9
800076d6:	c3 30       	breq	8000773c <d_encoding+0x3c0>
800076d8:	0c 98       	mov	r8,r6
800076da:	58 08       	cp.w	r8,0
800076dc:	c2 50       	breq	80007726 <d_encoding+0x3aa>
800076de:	70 09       	ld.w	r9,r8[0x0]
800076e0:	58 49       	cp.w	r9,4
800076e2:	c0 70       	breq	800076f0 <d_encoding+0x374>
800076e4:	c2 13       	brcs	80007726 <d_encoding+0x3aa>
800076e6:	21 a9       	sub	r9,26
800076e8:	58 29       	cp.w	r9,2
800076ea:	e0 8b 00 1e 	brhi	80007726 <d_encoding+0x3aa>
800076ee:	c1 a8       	rjmp	80007722 <d_encoding+0x3a6>
800076f0:	70 19       	ld.w	r9,r8[0x4]
800076f2:	58 09       	cp.w	r9,0
800076f4:	c1 30       	breq	8000771a <d_encoding+0x39e>
800076f6:	72 08       	ld.w	r8,r9[0x0]
800076f8:	58 88       	cp.w	r8,8
800076fa:	e0 8b 00 09 	brhi	8000770c <d_encoding+0x390>
800076fe:	58 78       	cp.w	r8,7
80007700:	c0 92       	brcc	80007712 <d_encoding+0x396>
80007702:	20 18       	sub	r8,1
80007704:	58 18       	cp.w	r8,1
80007706:	e0 8b 00 0a 	brhi	8000771a <d_encoding+0x39e>
8000770a:	c0 68       	rjmp	80007716 <d_encoding+0x39a>
8000770c:	e0 48 00 2d 	cp.w	r8,45
80007710:	c0 51       	brne	8000771a <d_encoding+0x39e>
80007712:	30 1b       	mov	r11,1
80007714:	c0 48       	rjmp	8000771c <d_encoding+0x3a0>
80007716:	72 29       	ld.w	r9,r9[0x8]
80007718:	ce db       	rjmp	800076f2 <d_encoding+0x376>
8000771a:	30 0b       	mov	r11,0
8000771c:	ec 1b 00 01 	eorl	r11,0x1
80007720:	c0 48       	rjmp	80007728 <d_encoding+0x3ac>
80007722:	70 18       	ld.w	r8,r8[0x4]
80007724:	cd bb       	rjmp	800076da <d_encoding+0x35e>
80007726:	30 0b       	mov	r11,0
80007728:	0e 9c       	mov	r12,r7
8000772a:	fe b0 fa ac 	rcall	80006c82 <d_bare_function_type>
8000772e:	0c 9a       	mov	r10,r6
80007730:	18 99       	mov	r9,r12
80007732:	30 3b       	mov	r11,3
80007734:	0e 9c       	mov	r12,r7
80007736:	fe b0 f3 49 	rcall	80005dc8 <d_make_comp>
8000773a:	18 96       	mov	r6,r12
8000773c:	0c 9c       	mov	r12,r6
8000773e:	d8 32       	popm	r0-r7,pc

80007740 <d_exprlist>:
80007740:	d4 21       	pushm	r4-r7,lr
80007742:	20 1d       	sub	sp,4
80007744:	30 09       	mov	r9,0
80007746:	50 09       	stdsp	sp[0x0],r9
80007748:	78 38       	ld.w	r8,r12[0xc]
8000774a:	18 97       	mov	r7,r12
8000774c:	34 55       	mov	r5,69
8000774e:	11 8a       	ld.ub	r10,r8[0x0]
80007750:	ea 0a 18 00 	cp.b	r10,r5
80007754:	c0 81       	brne	80007764 <d_exprlist+0x24>
80007756:	2f f8       	sub	r8,-1
80007758:	32 9b       	mov	r11,41
8000775a:	99 38       	st.w	r12[0xc],r8
8000775c:	12 9a       	mov	r10,r9
8000775e:	fe b0 f3 35 	rcall	80005dc8 <d_make_comp>
80007762:	c1 c8       	rjmp	8000779a <d_exprlist+0x5a>
80007764:	1a 96       	mov	r6,sp
80007766:	0e 9c       	mov	r12,r7
80007768:	fe b0 f6 68 	rcall	80006438 <d_expression>
8000776c:	30 09       	mov	r9,0
8000776e:	18 98       	mov	r8,r12
80007770:	18 9a       	mov	r10,r12
80007772:	32 9b       	mov	r11,41
80007774:	0e 9c       	mov	r12,r7
80007776:	58 08       	cp.w	r8,0
80007778:	c1 00       	breq	80007798 <d_exprlist+0x58>
8000777a:	fe b0 f3 27 	rcall	80005dc8 <d_make_comp>
8000777e:	8d 0c       	st.w	r6[0x0],r12
80007780:	c0 c0       	breq	80007798 <d_exprlist+0x58>
80007782:	6e 38       	ld.w	r8,r7[0xc]
80007784:	f8 c6 ff f8 	sub	r6,r12,-8
80007788:	11 89       	ld.ub	r9,r8[0x0]
8000778a:	ea 09 18 00 	cp.b	r9,r5
8000778e:	ce c1       	brne	80007766 <d_exprlist+0x26>
80007790:	2f f8       	sub	r8,-1
80007792:	40 0c       	lddsp	r12,sp[0x0]
80007794:	8f 38       	st.w	r7[0xc],r8
80007796:	c0 28       	rjmp	8000779a <d_exprlist+0x5a>
80007798:	30 0c       	mov	r12,0
8000779a:	2f fd       	sub	sp,-4
8000779c:	d8 22       	popm	r4-r7,pc
	...

800077a0 <d_print_comp>:
800077a0:	d4 31       	pushm	r0-r7,lr
800077a2:	21 2d       	sub	sp,72
800077a4:	18 97       	mov	r7,r12
800077a6:	16 96       	mov	r6,r11
800077a8:	58 0b       	cp.w	r11,0
800077aa:	e0 80 05 4e 	breq	80008246 <d_print_comp+0xaa6>
800077ae:	f8 f8 01 1c 	ld.w	r8,r12[284]
800077b2:	58 08       	cp.w	r8,0
800077b4:	e0 81 05 4c 	brne	8000824c <d_print_comp+0xaac>
800077b8:	76 08       	ld.w	r8,r11[0x0]
800077ba:	e0 48 00 3a 	cp.w	r8,58
800077be:	e0 8b 05 44 	brhi	80008246 <d_print_comp+0xaa6>
800077c2:	fe f9 02 4e 	ld.w	r9,pc[590]
800077c6:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
800077ca:	00 00       	add	r0,r0
800077cc:	80 00       	ld.sh	r0,r0[0x0]
800077ce:	78 b8       	ld.w	r8,r12[0x2c]
800077d0:	80 00       	ld.sh	r0,r0[0x0]
800077d2:	79 70       	ld.w	r0,r12[0x5c]
800077d4:	80 00       	ld.sh	r0,r0[0x0]
800077d6:	79 70       	ld.w	r0,r12[0x5c]
800077d8:	80 00       	ld.sh	r0,r0[0x0]
800077da:	79 8a       	ld.w	r10,r12[0x60]
800077dc:	80 00       	ld.sh	r0,r0[0x0]
800077de:	7a 9e       	ld.w	lr,sp[0x24]
800077e0:	80 00       	ld.sh	r0,r0[0x0]
800077e2:	7b 24       	ld.w	r4,sp[0x48]
800077e4:	80 00       	ld.sh	r0,r0[0x0]
800077e6:	82 24       	ld.sh	r4,r1[0x4]
800077e8:	80 00       	ld.sh	r0,r0[0x0]
800077ea:	81 86       	st.w	r0[0x20],r6
800077ec:	80 00       	ld.sh	r0,r0[0x0]
800077ee:	7b bc       	ld.w	r12,sp[0x6c]
800077f0:	80 00       	ld.sh	r0,r0[0x0]
800077f2:	7b c6       	ld.w	r6,sp[0x70]
800077f4:	80 00       	ld.sh	r0,r0[0x0]
800077f6:	7b cc       	ld.w	r12,sp[0x70]
800077f8:	80 00       	ld.sh	r0,r0[0x0]
800077fa:	7b d2       	ld.w	r2,sp[0x74]
800077fc:	80 00       	ld.sh	r0,r0[0x0]
800077fe:	7c 04       	ld.w	r4,lr[0x0]
80007800:	80 00       	ld.sh	r0,r0[0x0]
80007802:	7c 0a       	ld.w	r10,lr[0x0]
80007804:	80 00       	ld.sh	r0,r0[0x0]
80007806:	7c 10       	ld.w	r0,lr[0x4]
80007808:	80 00       	ld.sh	r0,r0[0x0]
8000780a:	7c 16       	ld.w	r6,lr[0x4]
8000780c:	80 00       	ld.sh	r0,r0[0x0]
8000780e:	7c 1c       	ld.w	r12,lr[0x4]
80007810:	80 00       	ld.sh	r0,r0[0x0]
80007812:	7c 22       	ld.w	r2,lr[0x8]
80007814:	80 00       	ld.sh	r0,r0[0x0]
80007816:	7c 28       	ld.w	r8,lr[0x8]
80007818:	80 00       	ld.sh	r0,r0[0x0]
8000781a:	7c 2e       	ld.w	lr,lr[0x8]
8000781c:	80 00       	ld.sh	r0,r0[0x0]
8000781e:	7c 34       	ld.w	r4,lr[0xc]
80007820:	80 00       	ld.sh	r0,r0[0x0]
80007822:	7c 3a       	ld.w	r10,lr[0xc]
80007824:	80 00       	ld.sh	r0,r0[0x0]
80007826:	7c 40       	ld.w	r0,lr[0x10]
80007828:	80 00       	ld.sh	r0,r0[0x0]
8000782a:	7c 4c       	ld.w	r12,lr[0x10]
8000782c:	80 00       	ld.sh	r0,r0[0x0]
8000782e:	7c 4c       	ld.w	r12,lr[0x10]
80007830:	80 00       	ld.sh	r0,r0[0x0]
80007832:	7c 4c       	ld.w	r12,lr[0x10]
80007834:	80 00       	ld.sh	r0,r0[0x0]
80007836:	7c 72       	ld.w	r2,lr[0x1c]
80007838:	80 00       	ld.sh	r0,r0[0x0]
8000783a:	7c 72       	ld.w	r2,lr[0x1c]
8000783c:	80 00       	ld.sh	r0,r0[0x0]
8000783e:	7c 72       	ld.w	r2,lr[0x1c]
80007840:	80 00       	ld.sh	r0,r0[0x0]
80007842:	7c 72       	ld.w	r2,lr[0x1c]
80007844:	80 00       	ld.sh	r0,r0[0x0]
80007846:	7c 72       	ld.w	r2,lr[0x1c]
80007848:	80 00       	ld.sh	r0,r0[0x0]
8000784a:	7c 72       	ld.w	r2,lr[0x1c]
8000784c:	80 00       	ld.sh	r0,r0[0x0]
8000784e:	7c 72       	ld.w	r2,lr[0x1c]
80007850:	80 00       	ld.sh	r0,r0[0x0]
80007852:	7c 72       	ld.w	r2,lr[0x1c]
80007854:	80 00       	ld.sh	r0,r0[0x0]
80007856:	7c 72       	ld.w	r2,lr[0x1c]
80007858:	80 00       	ld.sh	r0,r0[0x0]
8000785a:	7c a2       	ld.w	r2,lr[0x28]
8000785c:	80 00       	ld.sh	r0,r0[0x0]
8000785e:	81 7c       	st.w	r0[0x1c],r12
80007860:	80 00       	ld.sh	r0,r0[0x0]
80007862:	7c ec       	ld.w	r12,lr[0x38]
80007864:	80 00       	ld.sh	r0,r0[0x0]
80007866:	7d 58       	ld.w	r8,lr[0x54]
80007868:	80 00       	ld.sh	r0,r0[0x0]
8000786a:	7e 0a       	ld.w	r10,pc[0x0]
8000786c:	80 00       	ld.sh	r0,r0[0x0]
8000786e:	7e 4e       	ld.w	lr,pc[0x10]
80007870:	80 00       	ld.sh	r0,r0[0x0]
80007872:	7e 94       	ld.w	r4,pc[0x24]
80007874:	80 00       	ld.sh	r0,r0[0x0]
80007876:	7e 94       	ld.w	r4,pc[0x24]
80007878:	80 00       	ld.sh	r0,r0[0x0]
8000787a:	7f 10       	ld.w	r0,pc[0x44]
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	7f 3c       	ld.w	r12,pc[0x4c]
80007880:	80 00       	ld.sh	r0,r0[0x0]
80007882:	7f 44       	ld.w	r4,pc[0x50]
80007884:	80 00       	ld.sh	r0,r0[0x0]
80007886:	7f 78       	ld.w	r8,pc[0x5c]
80007888:	80 00       	ld.sh	r0,r0[0x0]
8000788a:	7f a4       	ld.w	r4,pc[0x68]
8000788c:	80 00       	ld.sh	r0,r0[0x0]
8000788e:	82 46       	ld.sh	r6,r1[0x8]
80007890:	80 00       	ld.sh	r0,r0[0x0]
80007892:	80 24       	ld.sh	r4,r0[0x4]
80007894:	80 00       	ld.sh	r0,r0[0x0]
80007896:	82 46       	ld.sh	r6,r1[0x8]
80007898:	80 00       	ld.sh	r0,r0[0x0]
8000789a:	82 46       	ld.sh	r6,r1[0x8]
8000789c:	80 00       	ld.sh	r0,r0[0x0]
8000789e:	80 6c       	ld.sh	r12,r0[0xc]
800078a0:	80 00       	ld.sh	r0,r0[0x0]
800078a2:	80 6c       	ld.sh	r12,r0[0xc]
800078a4:	80 00       	ld.sh	r0,r0[0x0]
800078a6:	81 76       	st.w	r0[0x1c],r6
800078a8:	80 00       	ld.sh	r0,r0[0x0]
800078aa:	81 80       	st.w	r0[0x20],r0
800078ac:	80 00       	ld.sh	r0,r0[0x0]
800078ae:	81 90       	st.w	r0[0x24],r0
800078b0:	80 00       	ld.sh	r0,r0[0x0]
800078b2:	81 94       	st.w	r0[0x24],r4
800078b4:	80 00       	ld.sh	r0,r0[0x0]
800078b6:	81 ac       	st.w	r0[0x28],r12
800078b8:	78 08       	ld.w	r8,r12[0x0]
800078ba:	76 1b       	ld.w	r11,r11[0x4]
800078bc:	e2 18 00 04 	andl	r8,0x4,COH
800078c0:	6c 2a       	ld.w	r10,r6[0x8]
800078c2:	e0 80 01 c1 	breq	80007c44 <d_print_comp+0x4a4>
800078c6:	16 96       	mov	r6,r11
800078c8:	f6 0a 00 04 	add	r4,r11,r10
800078cc:	35 f5       	mov	r5,95
800078ce:	35 50       	mov	r0,85
800078d0:	30 91       	mov	r1,9
800078d2:	30 53       	mov	r3,5
800078d4:	30 02       	mov	r2,0
800078d6:	c4 98       	rjmp	80007968 <d_print_comp+0x1c8>
800078d8:	e8 06 01 08 	sub	r8,r4,r6
800078dc:	58 38       	cp.w	r8,3
800078de:	e0 8a 00 40 	brle	8000795e <d_print_comp+0x1be>
800078e2:	0d 88       	ld.ub	r8,r6[0x0]
800078e4:	ea 08 18 00 	cp.b	r8,r5
800078e8:	c3 b1       	brne	8000795e <d_print_comp+0x1be>
800078ea:	0d 98       	ld.ub	r8,r6[0x1]
800078ec:	ea 08 18 00 	cp.b	r8,r5
800078f0:	c3 71       	brne	8000795e <d_print_comp+0x1be>
800078f2:	0d a8       	ld.ub	r8,r6[0x2]
800078f4:	e0 08 18 00 	cp.b	r8,r0
800078f8:	c3 31       	brne	8000795e <d_print_comp+0x1be>
800078fa:	ec c8 ff fd 	sub	r8,r6,-3
800078fe:	30 0b       	mov	r11,0
80007900:	c1 e8       	rjmp	8000793c <d_print_comp+0x19c>
80007902:	11 89       	ld.ub	r9,r8[0x0]
80007904:	f2 ca 00 30 	sub	r10,r9,48
80007908:	f2 cc 00 30 	sub	r12,r9,48
8000790c:	e2 0c 18 00 	cp.b	r12,r1
80007910:	e0 88 00 12 	brls	80007934 <d_print_comp+0x194>
80007914:	f2 ca 00 37 	sub	r10,r9,55
80007918:	f2 cc 00 41 	sub	r12,r9,65
8000791c:	e6 0c 18 00 	cp.b	r12,r3
80007920:	e0 88 00 0a 	brls	80007934 <d_print_comp+0x194>
80007924:	f2 ca 00 57 	sub	r10,r9,87
80007928:	f2 cc 00 61 	sub	r12,r9,97
8000792c:	e6 0c 18 00 	cp.b	r12,r3
80007930:	e0 8b 00 09 	brhi	80007942 <d_print_comp+0x1a2>
80007934:	a5 6b       	lsl	r11,0x4
80007936:	2f f8       	sub	r8,-1
80007938:	f4 0b 00 0b 	add	r11,r10,r11
8000793c:	08 38       	cp.w	r8,r4
8000793e:	ce 23       	brcs	80007902 <d_print_comp+0x162>
80007940:	c0 f8       	rjmp	8000795e <d_print_comp+0x1be>
80007942:	ea 09 18 00 	cp.b	r9,r5
80007946:	5f 0a       	sreq	r10
80007948:	e0 4b 00 ff 	cp.w	r11,255
8000794c:	5f 89       	srls	r9
8000794e:	f5 e9 00 09 	and	r9,r10,r9
80007952:	e4 09 18 00 	cp.b	r9,r2
80007956:	c0 40       	breq	8000795e <d_print_comp+0x1be>
80007958:	5c 5b       	castu.b	r11
8000795a:	10 96       	mov	r6,r8
8000795c:	c0 28       	rjmp	80007960 <d_print_comp+0x1c0>
8000795e:	0d 8b       	ld.ub	r11,r6[0x0]
80007960:	0e 9c       	mov	r12,r7
80007962:	2f f6       	sub	r6,-1
80007964:	fe b0 f4 7e 	rcall	80006260 <d_append_char>
80007968:	08 36       	cp.w	r6,r4
8000796a:	cb 73       	brcs	800078d8 <d_print_comp+0x138>
8000796c:	e0 8f 04 70 	bral	8000824c <d_print_comp+0xaac>
80007970:	76 1b       	ld.w	r11,r11[0x4]
80007972:	c1 7f       	rcall	800077a0 <d_print_comp>
80007974:	6e 08       	ld.w	r8,r7[0x0]
80007976:	ed b8 00 02 	bld	r8,0x2
8000797a:	c0 50       	breq	80007984 <d_print_comp+0x1e4>
8000797c:	4a 6b       	lddpc	r11,80007a14 <d_print_comp+0x274>
8000797e:	0e 9c       	mov	r12,r7
80007980:	e0 8f 02 df 	bral	80007f3e <d_print_comp+0x79e>
80007984:	32 eb       	mov	r11,46
80007986:	0e 9c       	mov	r12,r7
80007988:	c1 b9       	rjmp	80007bbe <d_print_comp+0x41e>
8000798a:	30 08       	mov	r8,0
8000798c:	f8 f3 01 18 	ld.w	r3,r12[280]
80007990:	10 95       	mov	r5,r8
80007992:	f9 48 01 18 	st.w	r12[280],r8
80007996:	0a 9a       	mov	r10,r5
80007998:	1a 98       	mov	r8,sp
8000799a:	76 14       	ld.w	r4,r11[0x4]
8000799c:	c1 78       	rjmp	800079ca <d_print_comp+0x22a>
8000799e:	58 45       	cp.w	r5,4
800079a0:	e0 80 04 53 	breq	80008246 <d_print_comp+0xaa6>
800079a4:	ee f9 01 18 	ld.w	r9,r7[280]
800079a8:	91 09       	st.w	r8[0x0],r9
800079aa:	ef 48 01 18 	st.w	r7[280],r8
800079ae:	ee f9 01 14 	ld.w	r9,r7[276]
800079b2:	91 14       	st.w	r8[0x4],r4
800079b4:	91 39       	st.w	r8[0xc],r9
800079b6:	91 2a       	st.w	r8[0x8],r10
800079b8:	68 09       	ld.w	r9,r4[0x0]
800079ba:	2f f5       	sub	r5,-1
800079bc:	2f 08       	sub	r8,-16
800079be:	f2 cb 00 1a 	sub	r11,r9,26
800079c2:	58 2b       	cp.w	r11,2
800079c4:	e0 8b 00 07 	brhi	800079d2 <d_print_comp+0x232>
800079c8:	68 14       	ld.w	r4,r4[0x4]
800079ca:	58 04       	cp.w	r4,0
800079cc:	ce 91       	brne	8000799e <d_print_comp+0x1fe>
800079ce:	e0 8f 04 3c 	bral	80008246 <d_print_comp+0xaa6>
800079d2:	58 49       	cp.w	r9,4
800079d4:	c0 91       	brne	800079e6 <d_print_comp+0x246>
800079d6:	ee f8 01 14 	ld.w	r8,r7[276]
800079da:	51 08       	stdsp	sp[0x40],r8
800079dc:	51 14       	stdsp	sp[0x44],r4
800079de:	fa c8 ff c0 	sub	r8,sp,-64
800079e2:	ef 48 01 14 	st.w	r7[276],r8
800079e6:	68 08       	ld.w	r8,r4[0x0]
800079e8:	58 28       	cp.w	r8,2
800079ea:	c3 71       	brne	80007a58 <d_print_comp+0x2b8>
800079ec:	ea 08 15 04 	lsl	r8,r5,0x4
800079f0:	ea cb 00 01 	sub	r11,r5,1
800079f4:	21 08       	sub	r8,16
800079f6:	a5 6b       	lsl	r11,0x4
800079f8:	ea 0a 15 04 	lsl	r10,r5,0x4
800079fc:	fa 08 00 08 	add	r8,sp,r8
80007a00:	fa 0b 00 0b 	add	r11,sp,r11
80007a04:	fa 0a 00 0a 	add	r10,sp,r10
80007a08:	68 29       	ld.w	r9,r4[0x8]
80007a0a:	30 02       	mov	r2,0
80007a0c:	c1 e8       	rjmp	80007a48 <d_print_comp+0x2a8>
80007a0e:	00 00       	add	r0,r0
80007a10:	80 00       	ld.sh	r0,r0[0x0]
80007a12:	77 cc       	ld.w	r12,r11[0x70]
80007a14:	80 01       	ld.sh	r1,r0[0x0]
80007a16:	14 8c       	andn	r12,r10
80007a18:	58 35       	cp.w	r5,3
80007a1a:	e0 8b 04 16 	brhi	80008246 <d_print_comp+0xaa6>
80007a1e:	78 11       	ld.w	r1,r12[0x4]
80007a20:	91 11       	st.w	r8[0x4],r1
80007a22:	78 21       	ld.w	r1,r12[0x8]
80007a24:	91 21       	st.w	r8[0x8],r1
80007a26:	78 3c       	ld.w	r12,r12[0xc]
80007a28:	91 0b       	st.w	r8[0x0],r11
80007a2a:	91 3c       	st.w	r8[0xc],r12
80007a2c:	ef 4a 01 18 	st.w	r7[280],r10
80007a30:	f1 49 ff f4 	st.w	r8[-12],r9
80007a34:	f1 42 ff f8 	st.w	r8[-8],r2
80007a38:	ee fc 01 14 	ld.w	r12,r7[276]
80007a3c:	2f f5       	sub	r5,-1
80007a3e:	f1 4c ff fc 	st.w	r8[-4],r12
80007a42:	2f 0b       	sub	r11,-16
80007a44:	2f 0a       	sub	r10,-16
80007a46:	72 19       	ld.w	r9,r9[0x4]
80007a48:	2f 08       	sub	r8,-16
80007a4a:	72 01       	ld.w	r1,r9[0x0]
80007a4c:	f0 cc 00 10 	sub	r12,r8,16
80007a50:	21 a1       	sub	r1,26
80007a52:	58 21       	cp.w	r1,2
80007a54:	fe 98 ff e2 	brls	80007a18 <d_print_comp+0x278>
80007a58:	6c 2b       	ld.w	r11,r6[0x8]
80007a5a:	0e 9c       	mov	r12,r7
80007a5c:	ca 2e       	rcall	800077a0 <d_print_comp>
80007a5e:	68 08       	ld.w	r8,r4[0x0]
80007a60:	58 48       	cp.w	r8,4
80007a62:	fb f8 00 10 	ld.weq	r8,sp[0x40]
80007a66:	ef f8 0a 45 	st.weq	r7[0x114],r8
80007a6a:	ea 06 15 04 	lsl	r6,r5,0x4
80007a6e:	fa c8 ff b8 	sub	r8,sp,-72
80007a72:	f0 06 00 06 	add	r6,r8,r6
80007a76:	25 46       	sub	r6,84
80007a78:	20 15       	sub	r5,1
80007a7a:	6c 18       	ld.w	r8,r6[0x4]
80007a7c:	58 08       	cp.w	r8,0
80007a7e:	c0 91       	brne	80007a90 <d_print_comp+0x2f0>
80007a80:	32 0b       	mov	r11,32
80007a82:	0e 9c       	mov	r12,r7
80007a84:	fe b0 f3 ee 	rcall	80006260 <d_append_char>
80007a88:	6c 0b       	ld.w	r11,r6[0x0]
80007a8a:	0e 9c       	mov	r12,r7
80007a8c:	e0 a0 04 f2 	rcall	80008470 <d_print_mod>
80007a90:	21 06       	sub	r6,16
80007a92:	58 05       	cp.w	r5,0
80007a94:	cf 21       	brne	80007a78 <d_print_comp+0x2d8>
80007a96:	ef 43 01 18 	st.w	r7[280],r3
80007a9a:	e0 8f 03 d9 	bral	8000824c <d_print_comp+0xaac>
80007a9e:	30 08       	mov	r8,0
80007aa0:	f8 f4 01 18 	ld.w	r4,r12[280]
80007aa4:	f9 48 01 18 	st.w	r12[280],r8
80007aa8:	78 08       	ld.w	r8,r12[0x0]
80007aaa:	76 15       	ld.w	r5,r11[0x4]
80007aac:	e2 18 00 04 	andl	r8,0x4,COH
80007ab0:	c1 40       	breq	80007ad8 <d_print_comp+0x338>
80007ab2:	6a 08       	ld.w	r8,r5[0x0]
80007ab4:	58 08       	cp.w	r8,0
80007ab6:	c1 11       	brne	80007ad8 <d_print_comp+0x338>
80007ab8:	6a 2a       	ld.w	r10,r5[0x8]
80007aba:	58 6a       	cp.w	r10,6
80007abc:	c0 e1       	brne	80007ad8 <d_print_comp+0x338>
80007abe:	4c bb       	lddpc	r11,80007be8 <d_print_comp+0x448>
80007ac0:	6a 1c       	ld.w	r12,r5[0x4]
80007ac2:	f0 1f 00 4b 	mcall	80007bec <d_print_comp+0x44c>
80007ac6:	c0 91       	brne	80007ad8 <d_print_comp+0x338>
80007ac8:	6c 2b       	ld.w	r11,r6[0x8]
80007aca:	0e 9c       	mov	r12,r7
80007acc:	c6 ae       	rcall	800077a0 <d_print_comp>
80007ace:	4c 9b       	lddpc	r11,80007bf0 <d_print_comp+0x450>
80007ad0:	0e 9c       	mov	r12,r7
80007ad2:	fe b0 f4 51 	rcall	80006374 <d_append_string>
80007ad6:	c2 38       	rjmp	80007b1c <d_print_comp+0x37c>
80007ad8:	0a 9b       	mov	r11,r5
80007ada:	0e 9c       	mov	r12,r7
80007adc:	c6 2e       	rcall	800077a0 <d_print_comp>
80007ade:	ef 39 01 08 	ld.ub	r9,r7[264]
80007ae2:	33 c8       	mov	r8,60
80007ae4:	f0 09 18 00 	cp.b	r9,r8
80007ae8:	c0 51       	brne	80007af2 <d_print_comp+0x352>
80007aea:	32 0b       	mov	r11,32
80007aec:	0e 9c       	mov	r12,r7
80007aee:	fe b0 f3 b9 	rcall	80006260 <d_append_char>
80007af2:	33 cb       	mov	r11,60
80007af4:	0e 9c       	mov	r12,r7
80007af6:	fe b0 f3 b5 	rcall	80006260 <d_append_char>
80007afa:	6c 2b       	ld.w	r11,r6[0x8]
80007afc:	0e 9c       	mov	r12,r7
80007afe:	c5 1e       	rcall	800077a0 <d_print_comp>
80007b00:	ef 39 01 08 	ld.ub	r9,r7[264]
80007b04:	33 e8       	mov	r8,62
80007b06:	f0 09 18 00 	cp.b	r9,r8
80007b0a:	c0 51       	brne	80007b14 <d_print_comp+0x374>
80007b0c:	32 0b       	mov	r11,32
80007b0e:	0e 9c       	mov	r12,r7
80007b10:	fe b0 f3 a8 	rcall	80006260 <d_append_char>
80007b14:	33 eb       	mov	r11,62
80007b16:	0e 9c       	mov	r12,r7
80007b18:	fe b0 f3 a4 	rcall	80006260 <d_append_char>
80007b1c:	ef 44 01 18 	st.w	r7[280],r4
80007b20:	e0 8f 03 96 	bral	8000824c <d_print_comp+0xaac>
80007b24:	f8 f5 01 14 	ld.w	r5,r12[276]
80007b28:	58 05       	cp.w	r5,0
80007b2a:	c0 61       	brne	80007b36 <d_print_comp+0x396>
80007b2c:	30 18       	mov	r8,1
80007b2e:	f9 48 01 1c 	st.w	r12[284],r8
80007b32:	e0 8f 03 8a 	bral	80008246 <d_print_comp+0xaa6>
80007b36:	76 19       	ld.w	r9,r11[0x4]
80007b38:	6a 18       	ld.w	r8,r5[0x4]
80007b3a:	c0 a8       	rjmp	80007b4e <d_print_comp+0x3ae>
80007b3c:	70 0a       	ld.w	r10,r8[0x0]
80007b3e:	e0 4a 00 2a 	cp.w	r10,42
80007b42:	e0 81 03 82 	brne	80008246 <d_print_comp+0xaa6>
80007b46:	58 09       	cp.w	r9,0
80007b48:	e0 8a 00 06 	brle	80007b54 <d_print_comp+0x3b4>
80007b4c:	20 19       	sub	r9,1
80007b4e:	70 28       	ld.w	r8,r8[0x8]
80007b50:	58 08       	cp.w	r8,0
80007b52:	cf 51       	brne	80007b3c <d_print_comp+0x39c>
80007b54:	58 09       	cp.w	r9,0
80007b56:	5f 19       	srne	r9
80007b58:	58 08       	cp.w	r8,0
80007b5a:	5f 0a       	sreq	r10
80007b5c:	f5 e9 10 09 	or	r9,r10,r9
80007b60:	e0 81 03 73 	brne	80008246 <d_print_comp+0xaa6>
80007b64:	70 1b       	ld.w	r11,r8[0x4]
80007b66:	58 0b       	cp.w	r11,0
80007b68:	e0 80 03 6f 	breq	80008246 <d_print_comp+0xaa6>
80007b6c:	76 08       	ld.w	r8,r11[0x0]
80007b6e:	e0 48 00 2a 	cp.w	r8,42
80007b72:	c1 b1       	brne	80007ba8 <d_print_comp+0x408>
80007b74:	ee f8 01 20 	ld.w	r8,r7[288]
80007b78:	76 09       	ld.w	r9,r11[0x0]
80007b7a:	e0 49 00 2a 	cp.w	r9,42
80007b7e:	e0 81 03 64 	brne	80008246 <d_print_comp+0xaa6>
80007b82:	58 08       	cp.w	r8,0
80007b84:	e0 8a 00 06 	brle	80007b90 <d_print_comp+0x3f0>
80007b88:	20 18       	sub	r8,1
80007b8a:	76 2b       	ld.w	r11,r11[0x8]
80007b8c:	58 0b       	cp.w	r11,0
80007b8e:	cf 51       	brne	80007b78 <d_print_comp+0x3d8>
80007b90:	58 08       	cp.w	r8,0
80007b92:	5f 18       	srne	r8
80007b94:	58 0b       	cp.w	r11,0
80007b96:	5f 09       	sreq	r9
80007b98:	f3 e8 10 08 	or	r8,r9,r8
80007b9c:	e0 81 03 55 	brne	80008246 <d_print_comp+0xaa6>
80007ba0:	76 1b       	ld.w	r11,r11[0x4]
80007ba2:	58 0b       	cp.w	r11,0
80007ba4:	e0 80 03 51 	breq	80008246 <d_print_comp+0xaa6>
80007ba8:	6a 08       	ld.w	r8,r5[0x0]
80007baa:	0e 9c       	mov	r12,r7
80007bac:	ef 48 01 14 	st.w	r7[276],r8
80007bb0:	fe b0 fd f8 	rcall	800077a0 <d_print_comp>
80007bb4:	ef 45 01 14 	st.w	r7[276],r5
80007bb8:	e0 8f 03 4a 	bral	8000824c <d_print_comp+0xaac>
80007bbc:	37 eb       	mov	r11,126
80007bbe:	fe b0 f3 51 	rcall	80006260 <d_append_char>
80007bc2:	e0 8f 02 e2 	bral	80008186 <d_print_comp+0x9e6>
80007bc6:	48 cb       	lddpc	r11,80007bf4 <d_print_comp+0x454>
80007bc8:	e0 8f 02 d8 	bral	80008178 <d_print_comp+0x9d8>
80007bcc:	48 bb       	lddpc	r11,80007bf8 <d_print_comp+0x458>
80007bce:	e0 8f 02 d5 	bral	80008178 <d_print_comp+0x9d8>
80007bd2:	48 bb       	lddpc	r11,80007bfc <d_print_comp+0x45c>
80007bd4:	fe b0 f3 d0 	rcall	80006374 <d_append_string>
80007bd8:	6c 1b       	ld.w	r11,r6[0x4]
80007bda:	0e 9c       	mov	r12,r7
80007bdc:	fe b0 fd e2 	rcall	800077a0 <d_print_comp>
80007be0:	0e 9c       	mov	r12,r7
80007be2:	48 8b       	lddpc	r11,80007c00 <d_print_comp+0x460>
80007be4:	e0 8f 01 ad 	bral	80007f3e <d_print_comp+0x79e>
80007be8:	80 01       	ld.sh	r1,r0[0x0]
80007bea:	14 90       	mov	r0,r10
80007bec:	80 00       	ld.sh	r0,r0[0x0]
80007bee:	c2 b4       	brge	80007c44 <d_print_comp+0x4a4>
80007bf0:	80 01       	ld.sh	r1,r0[0x0]
80007bf2:	14 98       	mov	r8,r10
80007bf4:	80 01       	ld.sh	r1,r0[0x0]
80007bf6:	14 9c       	mov	r12,r10
80007bf8:	80 01       	ld.sh	r1,r0[0x0]
80007bfa:	14 a8       	st.w	r10++,r8
80007bfc:	80 01       	ld.sh	r1,r0[0x0]
80007bfe:	14 b4       	st.h	r10++,r4
80007c00:	80 01       	ld.sh	r1,r0[0x0]
80007c02:	14 d0       	st.w	--r10,r0
80007c04:	4b 0b       	lddpc	r11,80007cc4 <d_print_comp+0x524>
80007c06:	e0 8f 02 b9 	bral	80008178 <d_print_comp+0x9d8>
80007c0a:	4b 0b       	lddpc	r11,80007cc8 <d_print_comp+0x528>
80007c0c:	e0 8f 02 b6 	bral	80008178 <d_print_comp+0x9d8>
80007c10:	4a fb       	lddpc	r11,80007ccc <d_print_comp+0x52c>
80007c12:	e0 8f 02 b3 	bral	80008178 <d_print_comp+0x9d8>
80007c16:	4a fb       	lddpc	r11,80007cd0 <d_print_comp+0x530>
80007c18:	e0 8f 02 b0 	bral	80008178 <d_print_comp+0x9d8>
80007c1c:	4a eb       	lddpc	r11,80007cd4 <d_print_comp+0x534>
80007c1e:	e0 8f 02 ad 	bral	80008178 <d_print_comp+0x9d8>
80007c22:	4a eb       	lddpc	r11,80007cd8 <d_print_comp+0x538>
80007c24:	e0 8f 02 aa 	bral	80008178 <d_print_comp+0x9d8>
80007c28:	4a db       	lddpc	r11,80007cdc <d_print_comp+0x53c>
80007c2a:	e0 8f 02 a7 	bral	80008178 <d_print_comp+0x9d8>
80007c2e:	4a db       	lddpc	r11,80007ce0 <d_print_comp+0x540>
80007c30:	e0 8f 02 a4 	bral	80008178 <d_print_comp+0x9d8>
80007c34:	4a cb       	lddpc	r11,80007ce4 <d_print_comp+0x544>
80007c36:	e0 8f 02 a1 	bral	80008178 <d_print_comp+0x9d8>
80007c3a:	4a cb       	lddpc	r11,80007ce8 <d_print_comp+0x548>
80007c3c:	e0 8f 02 9e 	bral	80008178 <d_print_comp+0x9d8>
80007c40:	76 1b       	ld.w	r11,r11[0x4]
80007c42:	6c 2a       	ld.w	r10,r6[0x8]
80007c44:	fe b0 f3 32 	rcall	800062a8 <d_append_buffer>
80007c48:	e0 8f 03 02 	bral	8000824c <d_print_comp+0xaac>
80007c4c:	f8 f9 01 18 	ld.w	r9,r12[280]
80007c50:	c0 f8       	rjmp	80007c6e <d_print_comp+0x4ce>
80007c52:	72 2a       	ld.w	r10,r9[0x8]
80007c54:	58 0a       	cp.w	r10,0
80007c56:	c0 b1       	brne	80007c6c <d_print_comp+0x4cc>
80007c58:	72 1a       	ld.w	r10,r9[0x4]
80007c5a:	74 0a       	ld.w	r10,r10[0x0]
80007c5c:	f4 cb 00 17 	sub	r11,r10,23
80007c60:	58 2b       	cp.w	r11,2
80007c62:	e0 8b 00 08 	brhi	80007c72 <d_print_comp+0x4d2>
80007c66:	10 3a       	cp.w	r10,r8
80007c68:	e0 80 02 8a 	breq	8000817c <d_print_comp+0x9dc>
80007c6c:	72 09       	ld.w	r9,r9[0x0]
80007c6e:	58 09       	cp.w	r9,0
80007c70:	cf 11       	brne	80007c52 <d_print_comp+0x4b2>
80007c72:	ee f8 01 18 	ld.w	r8,r7[280]
80007c76:	50 08       	stdsp	sp[0x0],r8
80007c78:	ee f8 01 14 	ld.w	r8,r7[276]
80007c7c:	50 38       	stdsp	sp[0xc],r8
80007c7e:	30 08       	mov	r8,0
80007c80:	50 16       	stdsp	sp[0x4],r6
80007c82:	50 28       	stdsp	sp[0x8],r8
80007c84:	ef 4d 01 18 	st.w	r7[280],sp
80007c88:	0e 9c       	mov	r12,r7
80007c8a:	6c 1b       	ld.w	r11,r6[0x4]
80007c8c:	fe b0 fd 8a 	rcall	800077a0 <d_print_comp>
80007c90:	40 28       	lddsp	r8,sp[0x8]
80007c92:	58 08       	cp.w	r8,0
80007c94:	e0 81 00 d8 	brne	80007e44 <d_print_comp+0x6a4>
80007c98:	0c 9b       	mov	r11,r6
80007c9a:	0e 9c       	mov	r12,r7
80007c9c:	e0 a0 03 ea 	rcall	80008470 <d_print_mod>
80007ca0:	cd 28       	rjmp	80007e44 <d_print_comp+0x6a4>
80007ca2:	76 18       	ld.w	r8,r11[0x4]
80007ca4:	78 09       	ld.w	r9,r12[0x0]
80007ca6:	ed b9 00 02 	bld	r9,0x2
80007caa:	f1 fb 10 00 	ld.wne	r11,r8[0x0]
80007cae:	f8 0c 17 10 	movne	r12,r12
80007cb2:	f1 fa 10 01 	ld.wne	r10,r8[0x4]
80007cb6:	f1 fb 00 02 	ld.weq	r11,r8[0x8]
80007cba:	ee 0c 17 00 	moveq	r12,r7
80007cbe:	f1 fa 00 03 	ld.weq	r10,r8[0xc]
80007cc2:	cc 1b       	rjmp	80007c44 <d_print_comp+0x4a4>
80007cc4:	80 01       	ld.sh	r1,r0[0x0]
80007cc6:	14 d8       	st.w	--r10,r8
80007cc8:	80 01       	ld.sh	r1,r0[0x0]
80007cca:	14 e8       	st.h	--r10,r8
80007ccc:	80 01       	ld.sh	r1,r0[0x0]
80007cce:	14 fc       	st.b	--r10,r12
80007cd0:	80 01       	ld.sh	r1,r0[0x0]
80007cd2:	15 10       	ld.sh	r0,r10++
80007cd4:	80 01       	ld.sh	r1,r0[0x0]
80007cd6:	15 14       	ld.sh	r4,r10++
80007cd8:	80 01       	ld.sh	r1,r0[0x0]
80007cda:	15 28       	ld.uh	r8,r10++
80007cdc:	80 01       	ld.sh	r1,r0[0x0]
80007cde:	15 44       	ld.w	r4,--r10
80007ce0:	80 01       	ld.sh	r1,r0[0x0]
80007ce2:	15 54       	ld.sh	r4,--r10
80007ce4:	80 01       	ld.sh	r1,r0[0x0]
80007ce6:	15 68       	ld.uh	r8,--r10
80007ce8:	80 01       	ld.sh	r1,r0[0x0]
80007cea:	15 84       	ld.ub	r4,r10[0x0]
80007cec:	78 08       	ld.w	r8,r12[0x0]
80007cee:	ed b8 00 05 	bld	r8,0x5
80007cf2:	c0 51       	brne	80007cfc <d_print_comp+0x55c>
80007cf4:	f8 fa 01 18 	ld.w	r10,r12[280]
80007cf8:	e0 a0 04 5a 	rcall	800085ac <d_print_function_type>
80007cfc:	6c 18       	ld.w	r8,r6[0x4]
80007cfe:	58 08       	cp.w	r8,0
80007d00:	c1 f0       	breq	80007d3e <d_print_comp+0x59e>
80007d02:	ee f8 01 18 	ld.w	r8,r7[280]
80007d06:	50 08       	stdsp	sp[0x0],r8
80007d08:	ee f8 01 14 	ld.w	r8,r7[276]
80007d0c:	50 38       	stdsp	sp[0xc],r8
80007d0e:	30 08       	mov	r8,0
80007d10:	50 16       	stdsp	sp[0x4],r6
80007d12:	50 28       	stdsp	sp[0x8],r8
80007d14:	ef 4d 01 18 	st.w	r7[280],sp
80007d18:	0e 9c       	mov	r12,r7
80007d1a:	6c 1b       	ld.w	r11,r6[0x4]
80007d1c:	fe b0 fd 42 	rcall	800077a0 <d_print_comp>
80007d20:	40 08       	lddsp	r8,sp[0x0]
80007d22:	ef 48 01 18 	st.w	r7[280],r8
80007d26:	40 28       	lddsp	r8,sp[0x8]
80007d28:	58 08       	cp.w	r8,0
80007d2a:	e0 81 02 91 	brne	8000824c <d_print_comp+0xaac>
80007d2e:	6e 08       	ld.w	r8,r7[0x0]
80007d30:	ed b8 00 05 	bld	r8,0x5
80007d34:	c0 50       	breq	80007d3e <d_print_comp+0x59e>
80007d36:	32 0b       	mov	r11,32
80007d38:	0e 9c       	mov	r12,r7
80007d3a:	fe b0 f2 93 	rcall	80006260 <d_append_char>
80007d3e:	6e 08       	ld.w	r8,r7[0x0]
80007d40:	ed b8 00 05 	bld	r8,0x5
80007d44:	e0 80 02 84 	breq	8000824c <d_print_comp+0xaac>
80007d48:	0c 9b       	mov	r11,r6
80007d4a:	0e 9c       	mov	r12,r7
80007d4c:	ee fa 01 18 	ld.w	r10,r7[280]
80007d50:	e0 a0 04 2e 	rcall	800085ac <d_print_function_type>
80007d54:	e0 8f 02 7c 	bral	8000824c <d_print_comp+0xaac>
80007d58:	f8 f4 01 18 	ld.w	r4,r12[280]
80007d5c:	30 09       	mov	r9,0
80007d5e:	50 04       	stdsp	sp[0x0],r4
80007d60:	50 1b       	stdsp	sp[0x4],r11
80007d62:	50 29       	stdsp	sp[0x8],r9
80007d64:	30 15       	mov	r5,1
80007d66:	ee f9 01 14 	ld.w	r9,r7[276]
80007d6a:	ef 4d 01 18 	st.w	r7[280],sp
80007d6e:	1a 9c       	mov	r12,sp
80007d70:	50 39       	stdsp	sp[0xc],r9
80007d72:	08 98       	mov	r8,r4
80007d74:	0a 9b       	mov	r11,r5
80007d76:	c1 78       	rjmp	80007da4 <d_print_comp+0x604>
80007d78:	70 23       	ld.w	r3,r8[0x8]
80007d7a:	58 03       	cp.w	r3,0
80007d7c:	c1 31       	brne	80007da2 <d_print_comp+0x602>
80007d7e:	58 35       	cp.w	r5,3
80007d80:	e0 8b 02 63 	brhi	80008246 <d_print_comp+0xaa6>
80007d84:	70 03       	ld.w	r3,r8[0x0]
80007d86:	93 03       	st.w	r9[0x0],r3
80007d88:	70 13       	ld.w	r3,r8[0x4]
80007d8a:	93 13       	st.w	r9[0x4],r3
80007d8c:	70 23       	ld.w	r3,r8[0x8]
80007d8e:	93 23       	st.w	r9[0x8],r3
80007d90:	70 33       	ld.w	r3,r8[0xc]
80007d92:	93 33       	st.w	r9[0xc],r3
80007d94:	ee f3 01 18 	ld.w	r3,r7[280]
80007d98:	93 03       	st.w	r9[0x0],r3
80007d9a:	ef 4a 01 18 	st.w	r7[280],r10
80007d9e:	91 2b       	st.w	r8[0x8],r11
80007da0:	2f f5       	sub	r5,-1
80007da2:	70 08       	ld.w	r8,r8[0x0]
80007da4:	ea 0a 15 04 	lsl	r10,r5,0x4
80007da8:	fa c9 ff b8 	sub	r9,sp,-72
80007dac:	14 09       	add	r9,r10
80007dae:	24 89       	sub	r9,72
80007db0:	58 08       	cp.w	r8,0
80007db2:	c0 90       	breq	80007dc4 <d_print_comp+0x624>
80007db4:	70 13       	ld.w	r3,r8[0x4]
80007db6:	f8 0a 00 0a 	add	r10,r12,r10
80007dba:	66 03       	ld.w	r3,r3[0x0]
80007dbc:	21 73       	sub	r3,23
80007dbe:	58 23       	cp.w	r3,2
80007dc0:	fe 98 ff dc 	brls	80007d78 <d_print_comp+0x5d8>
80007dc4:	6c 2b       	ld.w	r11,r6[0x8]
80007dc6:	0e 9c       	mov	r12,r7
80007dc8:	fe b0 fc ec 	rcall	800077a0 <d_print_comp>
80007dcc:	ef 44 01 18 	st.w	r7[280],r4
80007dd0:	40 28       	lddsp	r8,sp[0x8]
80007dd2:	58 08       	cp.w	r8,0
80007dd4:	e0 81 02 3c 	brne	8000824c <d_print_comp+0xaac>
80007dd8:	ea 04 15 04 	lsl	r4,r5,0x4
80007ddc:	fa c8 ff b8 	sub	r8,sp,-72
80007de0:	f0 04 00 04 	add	r4,r8,r4
80007de4:	25 44       	sub	r4,84
80007de6:	c0 78       	rjmp	80007df4 <d_print_comp+0x654>
80007de8:	68 0b       	ld.w	r11,r4[0x0]
80007dea:	20 15       	sub	r5,1
80007dec:	21 04       	sub	r4,16
80007dee:	0e 9c       	mov	r12,r7
80007df0:	e0 a0 03 40 	rcall	80008470 <d_print_mod>
80007df4:	58 15       	cp.w	r5,1
80007df6:	fe 9b ff f9 	brhi	80007de8 <d_print_comp+0x648>
80007dfa:	0c 9b       	mov	r11,r6
80007dfc:	0e 9c       	mov	r12,r7
80007dfe:	ee fa 01 18 	ld.w	r10,r7[280]
80007e02:	e0 a0 04 a9 	rcall	80008754 <d_print_array_type>
80007e06:	e0 8f 02 23 	bral	8000824c <d_print_comp+0xaac>
80007e0a:	f8 f8 01 18 	ld.w	r8,r12[280]
80007e0e:	50 08       	stdsp	sp[0x0],r8
80007e10:	f8 f8 01 14 	ld.w	r8,r12[276]
80007e14:	50 38       	stdsp	sp[0xc],r8
80007e16:	30 08       	mov	r8,0
80007e18:	50 1b       	stdsp	sp[0x4],r11
80007e1a:	50 28       	stdsp	sp[0x8],r8
80007e1c:	ef 4d 01 18 	st.w	r7[280],sp
80007e20:	76 2b       	ld.w	r11,r11[0x8]
80007e22:	fe b0 fc bf 	rcall	800077a0 <d_print_comp>
80007e26:	40 28       	lddsp	r8,sp[0x8]
80007e28:	58 08       	cp.w	r8,0
80007e2a:	c0 d1       	brne	80007e44 <d_print_comp+0x6a4>
80007e2c:	32 0b       	mov	r11,32
80007e2e:	0e 9c       	mov	r12,r7
80007e30:	fe b0 f2 18 	rcall	80006260 <d_append_char>
80007e34:	6c 1b       	ld.w	r11,r6[0x4]
80007e36:	0e 9c       	mov	r12,r7
80007e38:	fe b0 fc b4 	rcall	800077a0 <d_print_comp>
80007e3c:	4c 7b       	lddpc	r11,80007f58 <d_print_comp+0x7b8>
80007e3e:	0e 9c       	mov	r12,r7
80007e40:	fe b0 f2 9a 	rcall	80006374 <d_append_string>
80007e44:	40 08       	lddsp	r8,sp[0x0]
80007e46:	ef 48 01 18 	st.w	r7[280],r8
80007e4a:	e0 8f 02 01 	bral	8000824c <d_print_comp+0xaac>
80007e4e:	96 59       	ld.sh	r9,r11[0xa]
80007e50:	30 08       	mov	r8,0
80007e52:	f0 09 19 00 	cp.h	r9,r8
80007e56:	c0 40       	breq	80007e5e <d_print_comp+0x6be>
80007e58:	4c 1b       	lddpc	r11,80007f5c <d_print_comp+0x7bc>
80007e5a:	fe b0 f2 8d 	rcall	80006374 <d_append_string>
80007e5e:	6c 1b       	ld.w	r11,r6[0x4]
80007e60:	4c 08       	lddpc	r8,80007f60 <d_print_comp+0x7c0>
80007e62:	76 19       	ld.w	r9,r11[0x4]
80007e64:	f0 c8 fe 9c 	sub	r8,r8,-356
80007e68:	10 39       	cp.w	r9,r8
80007e6a:	c0 80       	breq	80007e7a <d_print_comp+0x6da>
80007e6c:	0e 9c       	mov	r12,r7
80007e6e:	fe b0 fc 99 	rcall	800077a0 <d_print_comp>
80007e72:	32 0b       	mov	r11,32
80007e74:	0e 9c       	mov	r12,r7
80007e76:	fe b0 f1 f5 	rcall	80006260 <d_append_char>
80007e7a:	8c 49       	ld.sh	r9,r6[0x8]
80007e7c:	30 08       	mov	r8,0
80007e7e:	f0 09 19 00 	cp.h	r9,r8
80007e82:	c0 50       	breq	80007e8c <d_print_comp+0x6ec>
80007e84:	0e 9c       	mov	r12,r7
80007e86:	4b 8b       	lddpc	r11,80007f64 <d_print_comp+0x7c4>
80007e88:	e0 8f 01 9e 	bral	800081c4 <d_print_comp+0xa24>
80007e8c:	0e 9c       	mov	r12,r7
80007e8e:	4b 7b       	lddpc	r11,80007f68 <d_print_comp+0x7c8>
80007e90:	e0 8f 01 9a 	bral	800081c4 <d_print_comp+0xa24>
80007e94:	76 1b       	ld.w	r11,r11[0x4]
80007e96:	58 0b       	cp.w	r11,0
80007e98:	c0 30       	breq	80007e9e <d_print_comp+0x6fe>
80007e9a:	fe b0 fc 83 	rcall	800077a0 <d_print_comp>
80007e9e:	6c 28       	ld.w	r8,r6[0x8]
80007ea0:	58 08       	cp.w	r8,0
80007ea2:	e0 80 01 d5 	breq	8000824c <d_print_comp+0xaac>
80007ea6:	ee f8 01 04 	ld.w	r8,r7[260]
80007eaa:	e0 48 00 fd 	cp.w	r8,253
80007eae:	e0 88 00 16 	brls	80007eda <d_print_comp+0x73a>
80007eb2:	10 9b       	mov	r11,r8
80007eb4:	30 09       	mov	r9,0
80007eb6:	ee 08 00 08 	add	r8,r7,r8
80007eba:	ee fa 01 10 	ld.w	r10,r7[272]
80007ebe:	b0 c9       	st.b	r8[0x4],r9
80007ec0:	ee cc ff fc 	sub	r12,r7,-4
80007ec4:	ee f8 01 0c 	ld.w	r8,r7[268]
80007ec8:	5d 18       	icall	r8
80007eca:	ee f8 01 24 	ld.w	r8,r7[292]
80007ece:	2f f8       	sub	r8,-1
80007ed0:	ef 48 01 24 	st.w	r7[292],r8
80007ed4:	30 08       	mov	r8,0
80007ed6:	ef 48 01 04 	st.w	r7[260],r8
80007eda:	4a 5b       	lddpc	r11,80007f6c <d_print_comp+0x7cc>
80007edc:	0e 9c       	mov	r12,r7
80007ede:	fe b0 f2 4b 	rcall	80006374 <d_append_string>
80007ee2:	6c 2b       	ld.w	r11,r6[0x8]
80007ee4:	ee f5 01 24 	ld.w	r5,r7[292]
80007ee8:	ee f6 01 04 	ld.w	r6,r7[260]
80007eec:	0e 9c       	mov	r12,r7
80007eee:	fe b0 fc 59 	rcall	800077a0 <d_print_comp>
80007ef2:	ee f8 01 24 	ld.w	r8,r7[292]
80007ef6:	0a 38       	cp.w	r8,r5
80007ef8:	e0 81 01 aa 	brne	8000824c <d_print_comp+0xaac>
80007efc:	ee f8 01 04 	ld.w	r8,r7[260]
80007f00:	0c 38       	cp.w	r8,r6
80007f02:	e0 81 01 a5 	brne	8000824c <d_print_comp+0xaac>
80007f06:	20 28       	sub	r8,2
80007f08:	ef 48 01 04 	st.w	r7[260],r8
80007f0c:	e0 8f 01 a0 	bral	8000824c <d_print_comp+0xaac>
80007f10:	49 8b       	lddpc	r11,80007f70 <d_print_comp+0x7d0>
80007f12:	fe b0 f2 31 	rcall	80006374 <d_append_string>
80007f16:	6c 18       	ld.w	r8,r6[0x4]
80007f18:	70 18       	ld.w	r8,r8[0x4]
80007f1a:	11 89       	ld.ub	r9,r8[0x0]
80007f1c:	31 98       	mov	r8,25
80007f1e:	26 19       	sub	r9,97
80007f20:	f0 09 18 00 	cp.b	r9,r8
80007f24:	e0 8b 00 06 	brhi	80007f30 <d_print_comp+0x790>
80007f28:	32 0b       	mov	r11,32
80007f2a:	0e 9c       	mov	r12,r7
80007f2c:	fe b0 f1 9a 	rcall	80006260 <d_append_char>
80007f30:	6c 18       	ld.w	r8,r6[0x4]
80007f32:	0e 9c       	mov	r12,r7
80007f34:	70 1b       	ld.w	r11,r8[0x4]
80007f36:	70 2a       	ld.w	r10,r8[0x8]
80007f38:	fe 9f fe 86 	bral	80007c44 <d_print_comp+0x4a4>
80007f3c:	48 eb       	lddpc	r11,80007f74 <d_print_comp+0x7d4>
80007f3e:	fe b0 f2 1b 	rcall	80006374 <d_append_string>
80007f42:	c2 29       	rjmp	80008186 <d_print_comp+0x9e6>
80007f44:	48 cb       	lddpc	r11,80007f74 <d_print_comp+0x7d4>
80007f46:	fe b0 f2 17 	rcall	80006374 <d_append_string>
80007f4a:	0c 9b       	mov	r11,r6
80007f4c:	0e 9c       	mov	r12,r7
80007f4e:	e0 a0 04 41 	rcall	800087d0 <d_print_cast>
80007f52:	e0 8f 01 7d 	bral	8000824c <d_print_comp+0xaac>
80007f56:	00 00       	add	r0,r0
80007f58:	80 01       	ld.sh	r1,r0[0x0]
80007f5a:	15 98       	ld.ub	r8,r10[0x1]
80007f5c:	80 01       	ld.sh	r1,r0[0x0]
80007f5e:	15 9c       	ld.ub	r12,r10[0x1]
80007f60:	80 00       	ld.sh	r0,r0[0x0]
80007f62:	89 ec       	st.w	r4[0x38],r12
80007f64:	80 01       	ld.sh	r1,r0[0x0]
80007f66:	15 a4       	ld.ub	r4,r10[0x2]
80007f68:	80 01       	ld.sh	r1,r0[0x0]
80007f6a:	15 ac       	ld.ub	r12,r10[0x2]
80007f6c:	80 01       	ld.sh	r1,r0[0x0]
80007f6e:	15 b4       	ld.ub	r4,r10[0x3]
80007f70:	80 01       	ld.sh	r1,r0[0x0]
80007f72:	15 b8       	ld.ub	r8,r10[0x3]
80007f74:	80 01       	ld.sh	r1,r0[0x0]
80007f76:	15 c4       	ld.ub	r4,r10[0x4]
80007f78:	76 1b       	ld.w	r11,r11[0x4]
80007f7a:	76 08       	ld.w	r8,r11[0x0]
80007f7c:	e0 48 00 2d 	cp.w	r8,45
80007f80:	c0 40       	breq	80007f88 <d_print_comp+0x7e8>
80007f82:	e0 a0 04 69 	rcall	80008854 <d_print_expr_op>
80007f86:	c0 c8       	rjmp	80007f9e <d_print_comp+0x7fe>
80007f88:	32 8b       	mov	r11,40
80007f8a:	fe b0 f1 6b 	rcall	80006260 <d_append_char>
80007f8e:	6c 1b       	ld.w	r11,r6[0x4]
80007f90:	0e 9c       	mov	r12,r7
80007f92:	e0 a0 04 1f 	rcall	800087d0 <d_print_cast>
80007f96:	32 9b       	mov	r11,41
80007f98:	0e 9c       	mov	r12,r7
80007f9a:	fe b0 f1 63 	rcall	80006260 <d_append_char>
80007f9e:	6c 2b       	ld.w	r11,r6[0x8]
80007fa0:	0e 9c       	mov	r12,r7
80007fa2:	c6 28       	rjmp	80008066 <d_print_comp+0x8c6>
80007fa4:	76 28       	ld.w	r8,r11[0x8]
80007fa6:	70 08       	ld.w	r8,r8[0x0]
80007fa8:	e0 48 00 30 	cp.w	r8,48
80007fac:	e0 81 01 4d 	brne	80008246 <d_print_comp+0xaa6>
80007fb0:	76 18       	ld.w	r8,r11[0x4]
80007fb2:	70 09       	ld.w	r9,r8[0x0]
80007fb4:	e0 49 00 2b 	cp.w	r9,43
80007fb8:	c0 e1       	brne	80007fd4 <d_print_comp+0x834>
80007fba:	70 18       	ld.w	r8,r8[0x4]
80007fbc:	70 29       	ld.w	r9,r8[0x8]
80007fbe:	58 19       	cp.w	r9,1
80007fc0:	c0 a1       	brne	80007fd4 <d_print_comp+0x834>
80007fc2:	70 18       	ld.w	r8,r8[0x4]
80007fc4:	11 89       	ld.ub	r9,r8[0x0]
80007fc6:	33 e8       	mov	r8,62
80007fc8:	f0 09 18 00 	cp.b	r9,r8
80007fcc:	c0 41       	brne	80007fd4 <d_print_comp+0x834>
80007fce:	32 8b       	mov	r11,40
80007fd0:	fe b0 f1 48 	rcall	80006260 <d_append_char>
80007fd4:	6c 28       	ld.w	r8,r6[0x8]
80007fd6:	0e 9c       	mov	r12,r7
80007fd8:	70 1b       	ld.w	r11,r8[0x4]
80007fda:	e0 a0 04 4b 	rcall	80008870 <d_print_subexpr>
80007fde:	6c 15       	ld.w	r5,r6[0x4]
80007fe0:	6a 18       	ld.w	r8,r5[0x4]
80007fe2:	4c 1b       	lddpc	r11,800080e4 <d_print_comp+0x944>
80007fe4:	70 0c       	ld.w	r12,r8[0x0]
80007fe6:	f0 1f 00 41 	mcall	800080e8 <d_print_comp+0x948>
80007fea:	c0 50       	breq	80007ff4 <d_print_comp+0x854>
80007fec:	0a 9b       	mov	r11,r5
80007fee:	0e 9c       	mov	r12,r7
80007ff0:	e0 a0 04 32 	rcall	80008854 <d_print_expr_op>
80007ff4:	6c 28       	ld.w	r8,r6[0x8]
80007ff6:	0e 9c       	mov	r12,r7
80007ff8:	70 2b       	ld.w	r11,r8[0x8]
80007ffa:	e0 a0 04 3b 	rcall	80008870 <d_print_subexpr>
80007ffe:	6c 18       	ld.w	r8,r6[0x4]
80008000:	70 09       	ld.w	r9,r8[0x0]
80008002:	e0 49 00 2b 	cp.w	r9,43
80008006:	e0 81 01 23 	brne	8000824c <d_print_comp+0xaac>
8000800a:	70 18       	ld.w	r8,r8[0x4]
8000800c:	70 29       	ld.w	r9,r8[0x8]
8000800e:	58 19       	cp.w	r9,1
80008010:	e0 81 01 1e 	brne	8000824c <d_print_comp+0xaac>
80008014:	70 18       	ld.w	r8,r8[0x4]
80008016:	11 89       	ld.ub	r9,r8[0x0]
80008018:	33 e8       	mov	r8,62
8000801a:	f0 09 18 00 	cp.b	r9,r8
8000801e:	e0 81 01 17 	brne	8000824c <d_print_comp+0xaac>
80008022:	cc 08       	rjmp	800081a2 <d_print_comp+0xa02>
80008024:	76 28       	ld.w	r8,r11[0x8]
80008026:	70 09       	ld.w	r9,r8[0x0]
80008028:	e0 49 00 32 	cp.w	r9,50
8000802c:	e0 81 01 0d 	brne	80008246 <d_print_comp+0xaa6>
80008030:	70 29       	ld.w	r9,r8[0x8]
80008032:	72 09       	ld.w	r9,r9[0x0]
80008034:	e0 49 00 33 	cp.w	r9,51
80008038:	e0 81 01 07 	brne	80008246 <d_print_comp+0xaa6>
8000803c:	70 1b       	ld.w	r11,r8[0x4]
8000803e:	e0 a0 04 19 	rcall	80008870 <d_print_subexpr>
80008042:	6c 1b       	ld.w	r11,r6[0x4]
80008044:	0e 9c       	mov	r12,r7
80008046:	e0 a0 04 07 	rcall	80008854 <d_print_expr_op>
8000804a:	6c 28       	ld.w	r8,r6[0x8]
8000804c:	70 28       	ld.w	r8,r8[0x8]
8000804e:	0e 9c       	mov	r12,r7
80008050:	70 1b       	ld.w	r11,r8[0x4]
80008052:	e0 a0 04 0f 	rcall	80008870 <d_print_subexpr>
80008056:	0e 9c       	mov	r12,r7
80008058:	4a 5b       	lddpc	r11,800080ec <d_print_comp+0x94c>
8000805a:	fe b0 f1 8d 	rcall	80006374 <d_append_string>
8000805e:	6c 28       	ld.w	r8,r6[0x8]
80008060:	0e 9c       	mov	r12,r7
80008062:	70 28       	ld.w	r8,r8[0x8]
80008064:	70 2b       	ld.w	r11,r8[0x8]
80008066:	e0 a0 04 05 	rcall	80008870 <d_print_subexpr>
8000806a:	cf 18       	rjmp	8000824c <d_print_comp+0xaac>
8000806c:	76 19       	ld.w	r9,r11[0x4]
8000806e:	72 0a       	ld.w	r10,r9[0x0]
80008070:	e0 4a 00 23 	cp.w	r10,35
80008074:	c5 d1       	brne	8000812e <d_print_comp+0x98e>
80008076:	72 19       	ld.w	r9,r9[0x4]
80008078:	72 45       	ld.w	r5,r9[0x10]
8000807a:	58 15       	cp.w	r5,1
8000807c:	c5 a3       	brcs	80008130 <d_print_comp+0x990>
8000807e:	58 65       	cp.w	r5,6
80008080:	e0 88 00 05 	brls	8000808a <d_print_comp+0x8ea>
80008084:	58 75       	cp.w	r5,7
80008086:	c5 51       	brne	80008130 <d_print_comp+0x990>
80008088:	c3 a8       	rjmp	800080fc <d_print_comp+0x95c>
8000808a:	76 29       	ld.w	r9,r11[0x8]
8000808c:	72 09       	ld.w	r9,r9[0x0]
8000808e:	58 09       	cp.w	r9,0
80008090:	c5 01       	brne	80008130 <d_print_comp+0x990>
80008092:	e0 48 00 35 	cp.w	r8,53
80008096:	c0 41       	brne	8000809e <d_print_comp+0x8fe>
80008098:	32 db       	mov	r11,45
8000809a:	fe b0 f0 e3 	rcall	80006260 <d_append_char>
8000809e:	6c 2b       	ld.w	r11,r6[0x8]
800080a0:	0e 9c       	mov	r12,r7
800080a2:	fe b0 fb 7f 	rcall	800077a0 <d_print_comp>
800080a6:	58 45       	cp.w	r5,4
800080a8:	c1 50       	breq	800080d2 <d_print_comp+0x932>
800080aa:	e0 8b 00 08 	brhi	800080ba <d_print_comp+0x91a>
800080ae:	58 25       	cp.w	r5,2
800080b0:	c0 b0       	breq	800080c6 <d_print_comp+0x926>
800080b2:	58 35       	cp.w	r5,3
800080b4:	e0 81 00 cc 	brne	8000824c <d_print_comp+0xaac>
800080b8:	c0 a8       	rjmp	800080cc <d_print_comp+0x92c>
800080ba:	58 55       	cp.w	r5,5
800080bc:	c0 e0       	breq	800080d8 <d_print_comp+0x938>
800080be:	58 65       	cp.w	r5,6
800080c0:	e0 81 00 c6 	brne	8000824c <d_print_comp+0xaac>
800080c4:	c0 d8       	rjmp	800080de <d_print_comp+0x93e>
800080c6:	0e 9c       	mov	r12,r7
800080c8:	37 5b       	mov	r11,117
800080ca:	c6 e8       	rjmp	800081a6 <d_print_comp+0xa06>
800080cc:	0e 9c       	mov	r12,r7
800080ce:	36 cb       	mov	r11,108
800080d0:	c6 b8       	rjmp	800081a6 <d_print_comp+0xa06>
800080d2:	0e 9c       	mov	r12,r7
800080d4:	48 7b       	lddpc	r11,800080f0 <d_print_comp+0x950>
800080d6:	c7 78       	rjmp	800081c4 <d_print_comp+0xa24>
800080d8:	0e 9c       	mov	r12,r7
800080da:	48 7b       	lddpc	r11,800080f4 <d_print_comp+0x954>
800080dc:	c7 48       	rjmp	800081c4 <d_print_comp+0xa24>
800080de:	0e 9c       	mov	r12,r7
800080e0:	48 6b       	lddpc	r11,800080f8 <d_print_comp+0x958>
800080e2:	c7 18       	rjmp	800081c4 <d_print_comp+0xa24>
800080e4:	80 01       	ld.sh	r1,r0[0x0]
800080e6:	14 74       	tst	r4,r10
800080e8:	80 00       	ld.sh	r0,r0[0x0]
800080ea:	c1 e4       	brge	80008126 <d_print_comp+0x986>
800080ec:	80 01       	ld.sh	r1,r0[0x0]
800080ee:	15 d0       	ld.ub	r0,r10[0x5]
800080f0:	80 01       	ld.sh	r1,r0[0x0]
800080f2:	15 d4       	ld.ub	r4,r10[0x5]
800080f4:	80 01       	ld.sh	r1,r0[0x0]
800080f6:	15 d8       	ld.ub	r8,r10[0x5]
800080f8:	80 01       	ld.sh	r1,r0[0x0]
800080fa:	15 dc       	ld.ub	r12,r10[0x5]
800080fc:	76 29       	ld.w	r9,r11[0x8]
800080fe:	72 0a       	ld.w	r10,r9[0x0]
80008100:	58 0a       	cp.w	r10,0
80008102:	c1 71       	brne	80008130 <d_print_comp+0x990>
80008104:	72 2a       	ld.w	r10,r9[0x8]
80008106:	58 1a       	cp.w	r10,1
80008108:	c1 41       	brne	80008130 <d_print_comp+0x990>
8000810a:	e0 48 00 34 	cp.w	r8,52
8000810e:	c1 11       	brne	80008130 <d_print_comp+0x990>
80008110:	72 18       	ld.w	r8,r9[0x4]
80008112:	33 09       	mov	r9,48
80008114:	11 88       	ld.ub	r8,r8[0x0]
80008116:	f2 08 18 00 	cp.b	r8,r9
8000811a:	c0 60       	breq	80008126 <d_print_comp+0x986>
8000811c:	33 19       	mov	r9,49
8000811e:	f2 08 18 00 	cp.b	r8,r9
80008122:	c0 71       	brne	80008130 <d_print_comp+0x990>
80008124:	c0 38       	rjmp	8000812a <d_print_comp+0x98a>
80008126:	4b ab       	lddpc	r11,8000820c <d_print_comp+0xa6c>
80008128:	c4 e8       	rjmp	800081c4 <d_print_comp+0xa24>
8000812a:	4b ab       	lddpc	r11,80008210 <d_print_comp+0xa70>
8000812c:	c4 c8       	rjmp	800081c4 <d_print_comp+0xa24>
8000812e:	30 05       	mov	r5,0
80008130:	32 8b       	mov	r11,40
80008132:	0e 9c       	mov	r12,r7
80008134:	fe b0 f0 96 	rcall	80006260 <d_append_char>
80008138:	6c 1b       	ld.w	r11,r6[0x4]
8000813a:	0e 9c       	mov	r12,r7
8000813c:	fe b0 fb 32 	rcall	800077a0 <d_print_comp>
80008140:	32 9b       	mov	r11,41
80008142:	0e 9c       	mov	r12,r7
80008144:	fe b0 f0 8e 	rcall	80006260 <d_append_char>
80008148:	6c 08       	ld.w	r8,r6[0x0]
8000814a:	e0 48 00 35 	cp.w	r8,53
8000814e:	c0 51       	brne	80008158 <d_print_comp+0x9b8>
80008150:	32 db       	mov	r11,45
80008152:	0e 9c       	mov	r12,r7
80008154:	fe b0 f0 86 	rcall	80006260 <d_append_char>
80008158:	58 85       	cp.w	r5,8
8000815a:	c0 51       	brne	80008164 <d_print_comp+0x9c4>
8000815c:	35 bb       	mov	r11,91
8000815e:	0e 9c       	mov	r12,r7
80008160:	fe b0 f0 80 	rcall	80006260 <d_append_char>
80008164:	6c 2b       	ld.w	r11,r6[0x8]
80008166:	0e 9c       	mov	r12,r7
80008168:	fe b0 fb 1c 	rcall	800077a0 <d_print_comp>
8000816c:	58 85       	cp.w	r5,8
8000816e:	c6 f1       	brne	8000824c <d_print_comp+0xaac>
80008170:	0e 9c       	mov	r12,r7
80008172:	35 db       	mov	r11,93
80008174:	c1 98       	rjmp	800081a6 <d_print_comp+0xa06>
80008176:	4a 8b       	lddpc	r11,80008214 <d_print_comp+0xa74>
80008178:	fe b0 f0 fe 	rcall	80006374 <d_append_string>
8000817c:	6c 1b       	ld.w	r11,r6[0x4]
8000817e:	c0 58       	rjmp	80008188 <d_print_comp+0x9e8>
80008180:	76 1b       	ld.w	r11,r11[0x4]
80008182:	fe b0 fb 0f 	rcall	800077a0 <d_print_comp>
80008186:	6c 2b       	ld.w	r11,r6[0x8]
80008188:	0e 9c       	mov	r12,r7
8000818a:	fe b0 fb 0b 	rcall	800077a0 <d_print_comp>
8000818e:	c5 f8       	rjmp	8000824c <d_print_comp+0xaac>
80008190:	17 fb       	ld.ub	r11,r11[0x7]
80008192:	c0 a8       	rjmp	800081a6 <d_print_comp+0xa06>
80008194:	4a 1b       	lddpc	r11,80008218 <d_print_comp+0xa78>
80008196:	fe b0 f0 ef 	rcall	80006374 <d_append_string>
8000819a:	6c 1b       	ld.w	r11,r6[0x4]
8000819c:	0e 9c       	mov	r12,r7
8000819e:	fe b0 fb 01 	rcall	800077a0 <d_print_comp>
800081a2:	0e 9c       	mov	r12,r7
800081a4:	32 9b       	mov	r11,41
800081a6:	fe b0 f0 5d 	rcall	80006260 <d_append_char>
800081aa:	c5 18       	rjmp	8000824c <d_print_comp+0xaac>
800081ac:	76 1b       	ld.w	r11,r11[0x4]
800081ae:	fe b0 f0 8b 	rcall	800062c4 <d_find_pack>
800081b2:	c0 30       	breq	800081b8 <d_print_comp+0xa18>
800081b4:	30 05       	mov	r5,0
800081b6:	c0 e8       	rjmp	800081d2 <d_print_comp+0xa32>
800081b8:	6c 1b       	ld.w	r11,r6[0x4]
800081ba:	0e 9c       	mov	r12,r7
800081bc:	e0 a0 03 5a 	rcall	80008870 <d_print_subexpr>
800081c0:	0e 9c       	mov	r12,r7
800081c2:	49 7b       	lddpc	r11,8000821c <d_print_comp+0xa7c>
800081c4:	fe b0 f0 d8 	rcall	80006374 <d_append_string>
800081c8:	c4 28       	rjmp	8000824c <d_print_comp+0xaac>
800081ca:	2f f5       	sub	r5,-1
800081cc:	78 2c       	ld.w	r12,r12[0x8]
800081ce:	58 0c       	cp.w	r12,0
800081d0:	c0 80       	breq	800081e0 <d_print_comp+0xa40>
800081d2:	78 08       	ld.w	r8,r12[0x0]
800081d4:	e0 48 00 2a 	cp.w	r8,42
800081d8:	c0 41       	brne	800081e0 <d_print_comp+0xa40>
800081da:	78 18       	ld.w	r8,r12[0x4]
800081dc:	58 08       	cp.w	r8,0
800081de:	cf 61       	brne	800081ca <d_print_comp+0xa2a>
800081e0:	6c 13       	ld.w	r3,r6[0x4]
800081e2:	ea c4 00 01 	sub	r4,r5,1
800081e6:	30 06       	mov	r6,0
800081e8:	c0 e8       	rjmp	80008204 <d_print_comp+0xa64>
800081ea:	ef 46 01 20 	st.w	r7[288],r6
800081ee:	06 9b       	mov	r11,r3
800081f0:	0e 9c       	mov	r12,r7
800081f2:	fe b0 fa d7 	rcall	800077a0 <d_print_comp>
800081f6:	08 36       	cp.w	r6,r4
800081f8:	c0 54       	brge	80008202 <d_print_comp+0xa62>
800081fa:	48 ab       	lddpc	r11,80008220 <d_print_comp+0xa80>
800081fc:	0e 9c       	mov	r12,r7
800081fe:	fe b0 f0 bb 	rcall	80006374 <d_append_string>
80008202:	2f f6       	sub	r6,-1
80008204:	0a 36       	cp.w	r6,r5
80008206:	cf 25       	brlt	800081ea <d_print_comp+0xa4a>
80008208:	c2 28       	rjmp	8000824c <d_print_comp+0xaac>
8000820a:	00 00       	add	r0,r0
8000820c:	80 01       	ld.sh	r1,r0[0x0]
8000820e:	15 e0       	ld.ub	r0,r10[0x6]
80008210:	80 01       	ld.sh	r1,r0[0x0]
80008212:	15 e8       	ld.ub	r8,r10[0x6]
80008214:	80 01       	ld.sh	r1,r0[0x0]
80008216:	15 f0       	ld.ub	r0,r10[0x7]
80008218:	80 01       	ld.sh	r1,r0[0x0]
8000821a:	16 00       	add	r0,r11
8000821c:	80 01       	ld.sh	r1,r0[0x0]
8000821e:	16 0c       	add	r12,r11
80008220:	80 01       	ld.sh	r1,r0[0x0]
80008222:	15 b4       	ld.ub	r4,r10[0x3]
80008224:	48 bb       	lddpc	r11,80008250 <d_print_comp+0xab0>
80008226:	fe b0 f0 a7 	rcall	80006374 <d_append_string>
8000822a:	6c 18       	ld.w	r8,r6[0x4]
8000822c:	48 ab       	lddpc	r11,80008254 <d_print_comp+0xab4>
8000822e:	1a d8       	st.w	--sp,r8
80008230:	fa c6 ff fc 	sub	r6,sp,-4
80008234:	0c 9c       	mov	r12,r6
80008236:	f0 1f 00 09 	mcall	80008258 <d_print_comp+0xab8>
8000823a:	0c 9b       	mov	r11,r6
8000823c:	0e 9c       	mov	r12,r7
8000823e:	fe b0 f0 9b 	rcall	80006374 <d_append_string>
80008242:	2f fd       	sub	sp,-4
80008244:	c0 48       	rjmp	8000824c <d_print_comp+0xaac>
80008246:	30 18       	mov	r8,1
80008248:	ef 48 01 1c 	st.w	r7[284],r8
8000824c:	2e ed       	sub	sp,-72
8000824e:	d8 32       	popm	r0-r7,pc
80008250:	80 01       	ld.sh	r1,r0[0x0]
80008252:	16 10       	sub	r0,r11
80008254:	80 01       	ld.sh	r1,r0[0x0]
80008256:	16 18       	sub	r8,r11
80008258:	80 00       	ld.sh	r0,r0[0x0]
8000825a:	c1 a4       	brge	8000828e <d_demangle_callback+0x32>

8000825c <d_demangle_callback>:
8000825c:	d4 31       	pushm	r0-r7,lr
8000825e:	1a 97       	mov	r7,sp
80008260:	fa cd 01 5c 	sub	sp,sp,348
80008264:	35 f8       	mov	r8,95
80008266:	12 92       	mov	r2,r9
80008268:	18 90       	mov	r0,r12
8000826a:	16 96       	mov	r6,r11
8000826c:	14 95       	mov	r5,r10
8000826e:	1a 94       	mov	r4,sp
80008270:	19 89       	ld.ub	r9,r12[0x0]
80008272:	f0 09 18 00 	cp.b	r9,r8
80008276:	c0 81       	brne	80008286 <d_demangle_callback+0x2a>
80008278:	19 99       	ld.ub	r9,r12[0x1]
8000827a:	35 a8       	mov	r8,90
8000827c:	f0 09 18 00 	cp.b	r9,r8
80008280:	c0 31       	brne	80008286 <d_demangle_callback+0x2a>
80008282:	30 01       	mov	r1,0
80008284:	c4 98       	rjmp	80008316 <d_demangle_callback+0xba>
80008286:	30 8a       	mov	r10,8
80008288:	4c 9b       	lddpc	r11,800083ac <d_demangle_callback+0x150>
8000828a:	00 9c       	mov	r12,r0
8000828c:	f0 1f 00 49 	mcall	800083b0 <d_demangle_callback+0x154>
80008290:	c3 d1       	brne	8000830a <d_demangle_callback+0xae>
80008292:	35 f9       	mov	r9,95
80008294:	e1 38 00 08 	ld.ub	r8,r0[8]
80008298:	f2 08 18 00 	cp.b	r8,r9
8000829c:	5f 0a       	sreq	r10
8000829e:	32 e9       	mov	r9,46
800082a0:	f2 08 18 00 	cp.b	r8,r9
800082a4:	5f 09       	sreq	r9
800082a6:	f5 e9 10 09 	or	r9,r10,r9
800082aa:	f8 09 18 00 	cp.b	r9,r12
800082ae:	c0 51       	brne	800082b8 <d_demangle_callback+0x5c>
800082b0:	32 49       	mov	r9,36
800082b2:	f2 08 18 00 	cp.b	r8,r9
800082b6:	c2 a1       	brne	8000830a <d_demangle_callback+0xae>
800082b8:	e1 39 00 09 	ld.ub	r9,r0[9]
800082bc:	34 98       	mov	r8,73
800082be:	34 4a       	mov	r10,68
800082c0:	f0 09 18 00 	cp.b	r9,r8
800082c4:	5f 08       	sreq	r8
800082c6:	f4 09 18 00 	cp.b	r9,r10
800082ca:	5f 09       	sreq	r9
800082cc:	f1 e9 10 09 	or	r9,r8,r9
800082d0:	c1 d0       	breq	8000830a <d_demangle_callback+0xae>
800082d2:	e1 3a 00 0a 	ld.ub	r10,r0[10]
800082d6:	35 f9       	mov	r9,95
800082d8:	f2 0a 18 00 	cp.b	r10,r9
800082dc:	c1 71       	brne	8000830a <d_demangle_callback+0xae>
800082de:	4b 69       	lddpc	r9,800083b4 <d_demangle_callback+0x158>
800082e0:	4b 66       	lddpc	r6,800083b8 <d_demangle_callback+0x15c>
800082e2:	58 08       	cp.w	r8,0
800082e4:	f2 06 17 00 	moveq	r6,r9
800082e8:	0c 9c       	mov	r12,r6
800082ea:	f0 1f 00 35 	mcall	800083bc <d_demangle_callback+0x160>
800082ee:	04 9a       	mov	r10,r2
800082f0:	18 9b       	mov	r11,r12
800082f2:	0c 9c       	mov	r12,r6
800082f4:	5d 15       	icall	r5
800082f6:	2f 50       	sub	r0,-11
800082f8:	00 9c       	mov	r12,r0
800082fa:	f0 1f 00 31 	mcall	800083bc <d_demangle_callback+0x160>
800082fe:	04 9a       	mov	r10,r2
80008300:	18 9b       	mov	r11,r12
80008302:	00 9c       	mov	r12,r0
80008304:	5d 15       	icall	r5
80008306:	30 1c       	mov	r12,1
80008308:	c9 d8       	rjmp	80008442 <d_demangle_callback+0x1e6>
8000830a:	0c 9c       	mov	r12,r6
8000830c:	e2 1c 00 10 	andl	r12,0x10,COH
80008310:	e0 80 00 99 	breq	80008442 <d_demangle_callback+0x1e6>
80008314:	30 11       	mov	r1,1
80008316:	00 9c       	mov	r12,r0
80008318:	f0 1f 00 29 	mcall	800083bc <d_demangle_callback+0x160>
8000831c:	30 08       	mov	r8,0
8000831e:	ef 48 ff fc 	st.w	r7[-4],r8
80008322:	ef 48 ff e0 	st.w	r7[-32],r8
80008326:	ef 48 ff ec 	st.w	r7[-20],r8
8000832a:	ef 48 ff f4 	st.w	r7[-12],r8
8000832e:	ef 48 ff f8 	st.w	r7[-8],r8
80008332:	f8 08 15 01 	lsl	r8,r12,0x1
80008336:	f8 09 15 02 	lsl	r9,r12,0x2
8000833a:	1a 93       	mov	r3,sp
8000833c:	f2 ca ff fc 	sub	r10,r9,-4
80008340:	ef 4c ff f0 	st.w	r7[-16],r12
80008344:	10 09       	add	r9,r8
80008346:	ef 48 ff e4 	st.w	r7[-28],r8
8000834a:	a3 69       	lsl	r9,0x2
8000834c:	e0 0c 00 0c 	add	r12,r0,r12
80008350:	2f c9       	sub	r9,-4
80008352:	ef 40 ff cc 	st.w	r7[-52],r0
80008356:	12 1d       	sub	sp,r9
80008358:	ef 46 ff d4 	st.w	r7[-44],r6
8000835c:	1a 98       	mov	r8,sp
8000835e:	ef 40 ff d8 	st.w	r7[-40],r0
80008362:	14 1d       	sub	sp,r10
80008364:	ef 4c ff d0 	st.w	r7[-48],r12
80008368:	ef 48 ff dc 	st.w	r7[-36],r8
8000836c:	ef 4d ff e8 	st.w	r7[-24],sp
80008370:	58 01       	cp.w	r1,0
80008372:	c0 60       	breq	8000837e <d_demangle_callback+0x122>
80008374:	ee cc 00 34 	sub	r12,r7,52
80008378:	fe b0 f1 78 	rcall	80006668 <d_type>
8000837c:	c2 38       	rjmp	800083c2 <d_demangle_callback+0x166>
8000837e:	01 89       	ld.ub	r9,r0[0x0]
80008380:	35 f8       	mov	r8,95
80008382:	f0 09 18 00 	cp.b	r9,r8
80008386:	c1 d1       	brne	800083c0 <d_demangle_callback+0x164>
80008388:	2f f0       	sub	r0,-1
8000838a:	ef 40 ff d8 	st.w	r7[-40],r0
8000838e:	35 a8       	mov	r8,90
80008390:	01 89       	ld.ub	r9,r0[0x0]
80008392:	f0 09 18 00 	cp.b	r9,r8
80008396:	c1 51       	brne	800083c0 <d_demangle_callback+0x164>
80008398:	2f f0       	sub	r0,-1
8000839a:	30 1b       	mov	r11,1
8000839c:	ef 40 ff d8 	st.w	r7[-40],r0
800083a0:	ee cc 00 34 	sub	r12,r7,52
800083a4:	fe b0 f7 ec 	rcall	8000737c <d_encoding>
800083a8:	c0 d8       	rjmp	800083c2 <d_demangle_callback+0x166>
800083aa:	00 00       	add	r0,r0
800083ac:	80 01       	ld.sh	r1,r0[0x0]
800083ae:	14 50       	eor	r0,r10
800083b0:	80 00       	ld.sh	r0,r0[0x0]
800083b2:	c2 b4       	brge	80008408 <d_demangle_callback+0x1ac>
800083b4:	80 01       	ld.sh	r1,r0[0x0]
800083b6:	16 1c       	sub	r12,r11
800083b8:	80 01       	ld.sh	r1,r0[0x0]
800083ba:	16 3c       	cp.w	r12,r11
800083bc:	80 00       	ld.sh	r0,r0[0x0]
800083be:	c2 9e       	rcall	80008010 <d_print_comp+0x870>
800083c0:	30 0c       	mov	r12,0
800083c2:	ed b6 00 00 	bld	r6,0x0
800083c6:	c0 81       	brne	800083d6 <d_demangle_callback+0x17a>
800083c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800083cc:	11 89       	ld.ub	r9,r8[0x0]
800083ce:	30 08       	mov	r8,0
800083d0:	f0 09 18 00 	cp.b	r9,r8
800083d4:	c3 51       	brne	8000843e <d_demangle_callback+0x1e2>
800083d6:	58 0c       	cp.w	r12,0
800083d8:	c3 30       	breq	8000843e <d_demangle_callback+0x1e2>
800083da:	18 9b       	mov	r11,r12
800083dc:	ef 46 fe a4 	st.w	r7[-348],r6
800083e0:	ee cc 01 5c 	sub	r12,r7,348
800083e4:	30 06       	mov	r6,0
800083e6:	ef 45 ff b0 	st.w	r7[-80],r5
800083ea:	ef 42 ff b4 	st.w	r7[-76],r2
800083ee:	ef 46 ff a8 	st.w	r7[-88],r6
800083f2:	ef 66 ff ac 	st.b	r7[-84],r6
800083f6:	ef 46 ff b8 	st.w	r7[-72],r6
800083fa:	ef 46 ff bc 	st.w	r7[-68],r6
800083fe:	ef 46 ff c8 	st.w	r7[-56],r6
80008402:	ef 46 ff c0 	st.w	r7[-64],r6
80008406:	fe b0 f9 cd 	rcall	800077a0 <d_print_comp>
8000840a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000840e:	10 9b       	mov	r11,r8
80008410:	ee 08 00 08 	add	r8,r7,r8
80008414:	ee cc 01 58 	sub	r12,r7,344
80008418:	f1 66 fe a8 	st.b	r8[-344],r6
8000841c:	ee fa ff b4 	ld.w	r10,r7[-76]
80008420:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008424:	5d 18       	icall	r8
80008426:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000842a:	2f f8       	sub	r8,-1
8000842c:	ef 46 ff a8 	st.w	r7[-88],r6
80008430:	ef 48 ff c8 	st.w	r7[-56],r8
80008434:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008438:	58 08       	cp.w	r8,0
8000843a:	5f 0c       	sreq	r12
8000843c:	c0 28       	rjmp	80008440 <d_demangle_callback+0x1e4>
8000843e:	30 0c       	mov	r12,0
80008440:	06 9d       	mov	sp,r3
80008442:	08 9d       	mov	sp,r4
80008444:	2a 9d       	sub	sp,-348
80008446:	d8 32       	popm	r0-r7,pc

80008448 <__gcclibcxx_demangle_callback>:
80008448:	d4 01       	pushm	lr
8000844a:	58 0b       	cp.w	r11,0
8000844c:	5f 09       	sreq	r9
8000844e:	58 0c       	cp.w	r12,0
80008450:	5f 08       	sreq	r8
80008452:	f3 e8 10 08 	or	r8,r9,r8
80008456:	14 99       	mov	r9,r10
80008458:	c0 30       	breq	8000845e <__gcclibcxx_demangle_callback+0x16>
8000845a:	3f dc       	mov	r12,-3
8000845c:	d8 02       	popm	pc
8000845e:	16 9a       	mov	r10,r11
80008460:	31 1b       	mov	r11,17
80008462:	cf de       	rcall	8000825c <d_demangle_callback>
80008464:	f9 bc 00 fe 	moveq	r12,-2
80008468:	f9 bc 01 00 	movne	r12,0
8000846c:	d8 02       	popm	pc
	...

80008470 <d_print_mod>:
80008470:	d4 21       	pushm	r4-r7,lr
80008472:	76 08       	ld.w	r8,r11[0x0]
80008474:	16 96       	mov	r6,r11
80008476:	18 97       	mov	r7,r12
80008478:	20 38       	sub	r8,3
8000847a:	e0 48 00 24 	cp.w	r8,36
8000847e:	e0 8b 00 81 	brhi	80008580 <d_print_mod+0x110>
80008482:	4c 39       	lddpc	r9,8000858c <d_print_mod+0x11c>
80008484:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
80008488:	80 00       	ld.sh	r0,r0[0x0]
8000848a:	85 76       	st.w	r2[0x1c],r6
8000848c:	80 00       	ld.sh	r0,r0[0x0]
8000848e:	85 80       	st.w	r2[0x20],r0
80008490:	80 00       	ld.sh	r0,r0[0x0]
80008492:	85 80       	st.w	r2[0x20],r0
80008494:	80 00       	ld.sh	r0,r0[0x0]
80008496:	85 80       	st.w	r2[0x20],r0
80008498:	80 00       	ld.sh	r0,r0[0x0]
8000849a:	85 80       	st.w	r2[0x20],r0
8000849c:	80 00       	ld.sh	r0,r0[0x0]
8000849e:	85 80       	st.w	r2[0x20],r0
800084a0:	80 00       	ld.sh	r0,r0[0x0]
800084a2:	85 80       	st.w	r2[0x20],r0
800084a4:	80 00       	ld.sh	r0,r0[0x0]
800084a6:	85 80       	st.w	r2[0x20],r0
800084a8:	80 00       	ld.sh	r0,r0[0x0]
800084aa:	85 80       	st.w	r2[0x20],r0
800084ac:	80 00       	ld.sh	r0,r0[0x0]
800084ae:	85 80       	st.w	r2[0x20],r0
800084b0:	80 00       	ld.sh	r0,r0[0x0]
800084b2:	85 80       	st.w	r2[0x20],r0
800084b4:	80 00       	ld.sh	r0,r0[0x0]
800084b6:	85 80       	st.w	r2[0x20],r0
800084b8:	80 00       	ld.sh	r0,r0[0x0]
800084ba:	85 80       	st.w	r2[0x20],r0
800084bc:	80 00       	ld.sh	r0,r0[0x0]
800084be:	85 80       	st.w	r2[0x20],r0
800084c0:	80 00       	ld.sh	r0,r0[0x0]
800084c2:	85 80       	st.w	r2[0x20],r0
800084c4:	80 00       	ld.sh	r0,r0[0x0]
800084c6:	85 80       	st.w	r2[0x20],r0
800084c8:	80 00       	ld.sh	r0,r0[0x0]
800084ca:	85 80       	st.w	r2[0x20],r0
800084cc:	80 00       	ld.sh	r0,r0[0x0]
800084ce:	85 80       	st.w	r2[0x20],r0
800084d0:	80 00       	ld.sh	r0,r0[0x0]
800084d2:	85 80       	st.w	r2[0x20],r0
800084d4:	80 00       	ld.sh	r0,r0[0x0]
800084d6:	85 80       	st.w	r2[0x20],r0
800084d8:	80 00       	ld.sh	r0,r0[0x0]
800084da:	85 1c       	st.w	r2[0x4],r12
800084dc:	80 00       	ld.sh	r0,r0[0x0]
800084de:	85 20       	st.w	r2[0x8],r0
800084e0:	80 00       	ld.sh	r0,r0[0x0]
800084e2:	85 24       	st.w	r2[0x8],r4
800084e4:	80 00       	ld.sh	r0,r0[0x0]
800084e6:	85 1c       	st.w	r2[0x4],r12
800084e8:	80 00       	ld.sh	r0,r0[0x0]
800084ea:	85 20       	st.w	r2[0x8],r0
800084ec:	80 00       	ld.sh	r0,r0[0x0]
800084ee:	85 24       	st.w	r2[0x8],r4
800084f0:	80 00       	ld.sh	r0,r0[0x0]
800084f2:	85 28       	st.w	r2[0x8],r8
800084f4:	80 00       	ld.sh	r0,r0[0x0]
800084f6:	85 32       	st.w	r2[0xc],r2
800084f8:	80 00       	ld.sh	r0,r0[0x0]
800084fa:	85 3e       	st.w	r2[0xc],lr
800084fc:	80 00       	ld.sh	r0,r0[0x0]
800084fe:	85 46       	st.w	r2[0x10],r6
80008500:	80 00       	ld.sh	r0,r0[0x0]
80008502:	85 4a       	st.w	r2[0x10],r10
80008504:	80 00       	ld.sh	r0,r0[0x0]
80008506:	85 4e       	st.w	r2[0x10],lr
80008508:	80 00       	ld.sh	r0,r0[0x0]
8000850a:	85 80       	st.w	r2[0x20],r0
8000850c:	80 00       	ld.sh	r0,r0[0x0]
8000850e:	85 80       	st.w	r2[0x20],r0
80008510:	80 00       	ld.sh	r0,r0[0x0]
80008512:	85 80       	st.w	r2[0x20],r0
80008514:	80 00       	ld.sh	r0,r0[0x0]
80008516:	85 80       	st.w	r2[0x20],r0
80008518:	80 00       	ld.sh	r0,r0[0x0]
8000851a:	85 52       	st.w	r2[0x14],r2
8000851c:	49 db       	lddpc	r11,80008590 <d_print_mod+0x120>
8000851e:	c2 98       	rjmp	80008570 <d_print_mod+0x100>
80008520:	49 db       	lddpc	r11,80008594 <d_print_mod+0x124>
80008522:	c2 78       	rjmp	80008570 <d_print_mod+0x100>
80008524:	49 db       	lddpc	r11,80008598 <d_print_mod+0x128>
80008526:	c2 58       	rjmp	80008570 <d_print_mod+0x100>
80008528:	32 0b       	mov	r11,32
8000852a:	fe b0 ee 9b 	rcall	80006260 <d_append_char>
8000852e:	6c 2b       	ld.w	r11,r6[0x8]
80008530:	c2 48       	rjmp	80008578 <d_print_mod+0x108>
80008532:	78 08       	ld.w	r8,r12[0x0]
80008534:	ed b8 00 02 	bld	r8,0x2
80008538:	c2 80       	breq	80008588 <d_print_mod+0x118>
8000853a:	32 ab       	mov	r11,42
8000853c:	c0 28       	rjmp	80008540 <d_print_mod+0xd0>
8000853e:	32 6b       	mov	r11,38
80008540:	fe b0 ee 90 	rcall	80006260 <d_append_char>
80008544:	d8 22       	popm	r4-r7,pc
80008546:	49 6b       	lddpc	r11,8000859c <d_print_mod+0x12c>
80008548:	c1 48       	rjmp	80008570 <d_print_mod+0x100>
8000854a:	49 6b       	lddpc	r11,800085a0 <d_print_mod+0x130>
8000854c:	c1 28       	rjmp	80008570 <d_print_mod+0x100>
8000854e:	49 6b       	lddpc	r11,800085a4 <d_print_mod+0x134>
80008550:	c1 08       	rjmp	80008570 <d_print_mod+0x100>
80008552:	f9 39 01 08 	ld.ub	r9,r12[264]
80008556:	32 88       	mov	r8,40
80008558:	f0 09 18 00 	cp.b	r9,r8
8000855c:	c0 40       	breq	80008564 <d_print_mod+0xf4>
8000855e:	32 0b       	mov	r11,32
80008560:	fe b0 ee 80 	rcall	80006260 <d_append_char>
80008564:	6c 1b       	ld.w	r11,r6[0x4]
80008566:	0e 9c       	mov	r12,r7
80008568:	fe b0 f9 1c 	rcall	800077a0 <d_print_comp>
8000856c:	0e 9c       	mov	r12,r7
8000856e:	48 fb       	lddpc	r11,800085a8 <d_print_mod+0x138>
80008570:	fe b0 ef 02 	rcall	80006374 <d_append_string>
80008574:	d8 22       	popm	r4-r7,pc
80008576:	76 1b       	ld.w	r11,r11[0x4]
80008578:	0e 9c       	mov	r12,r7
8000857a:	fe b0 f9 13 	rcall	800077a0 <d_print_comp>
8000857e:	d8 22       	popm	r4-r7,pc
80008580:	0c 9b       	mov	r11,r6
80008582:	0e 9c       	mov	r12,r7
80008584:	fe b0 f9 0e 	rcall	800077a0 <d_print_comp>
80008588:	d8 22       	popm	r4-r7,pc
8000858a:	00 00       	add	r0,r0
8000858c:	80 00       	ld.sh	r0,r0[0x0]
8000858e:	84 88       	ld.uh	r8,r2[0x0]
80008590:	80 01       	ld.sh	r1,r0[0x0]
80008592:	16 5c       	eor	r12,r11
80008594:	80 01       	ld.sh	r1,r0[0x0]
80008596:	16 68       	and	r8,r11
80008598:	80 01       	ld.sh	r1,r0[0x0]
8000859a:	16 74       	tst	r4,r11
8000859c:	80 01       	ld.sh	r1,r0[0x0]
8000859e:	16 7c       	tst	r12,r11
800085a0:	80 01       	ld.sh	r1,r0[0x0]
800085a2:	16 80       	andn	r0,r11
800085a4:	80 01       	ld.sh	r1,r0[0x0]
800085a6:	16 8c       	andn	r12,r11
800085a8:	80 01       	ld.sh	r1,r0[0x0]
800085aa:	15 98       	ld.ub	r8,r10[0x1]

800085ac <d_print_function_type>:
800085ac:	d4 31       	pushm	r0-r7,lr
800085ae:	30 09       	mov	r9,0
800085b0:	16 94       	mov	r4,r11
800085b2:	14 95       	mov	r5,r10
800085b4:	18 97       	mov	r7,r12
800085b6:	14 98       	mov	r8,r10
800085b8:	30 1b       	mov	r11,1
800085ba:	c1 c8       	rjmp	800085f2 <d_print_function_type+0x46>
800085bc:	70 2a       	ld.w	r10,r8[0x8]
800085be:	58 0a       	cp.w	r10,0
800085c0:	c1 b1       	brne	800085f6 <d_print_function_type+0x4a>
800085c2:	70 19       	ld.w	r9,r8[0x4]
800085c4:	72 0a       	ld.w	r10,r9[0x0]
800085c6:	21 7a       	sub	r10,23
800085c8:	59 0a       	cp.w	r10,16
800085ca:	e0 8b 00 12 	brhi	800085ee <d_print_function_type+0x42>
800085ce:	f6 0a 09 4a 	lsl	r10,r11,r10
800085d2:	14 99       	mov	r9,r10
800085d4:	e4 1a 00 01 	andh	r10,0x1
800085d8:	e0 1a 0c 47 	andl	r10,0xc47
800085dc:	e2 19 03 80 	andl	r9,0x380,COH
800085e0:	58 0a       	cp.w	r10,0
800085e2:	c0 41       	brne	800085ea <d_print_function_type+0x3e>
800085e4:	58 09       	cp.w	r9,0
800085e6:	c5 21       	brne	8000868a <d_print_function_type+0xde>
800085e8:	c0 38       	rjmp	800085ee <d_print_function_type+0x42>
800085ea:	30 18       	mov	r8,1
800085ec:	c5 08       	rjmp	8000868c <d_print_function_type+0xe0>
800085ee:	70 08       	ld.w	r8,r8[0x0]
800085f0:	30 19       	mov	r9,1
800085f2:	58 08       	cp.w	r8,0
800085f4:	ce 41       	brne	800085bc <d_print_function_type+0x10>
800085f6:	30 08       	mov	r8,0
800085f8:	10 96       	mov	r6,r8
800085fa:	ec 19 00 01 	eorl	r9,0x1
800085fe:	68 1a       	ld.w	r10,r4[0x4]
80008600:	58 0a       	cp.w	r10,0
80008602:	5f 1a       	srne	r10
80008604:	14 69       	and	r9,r10
80008606:	c0 31       	brne	8000860c <d_print_function_type+0x60>
80008608:	58 06       	cp.w	r6,0
8000860a:	c1 c0       	breq	80008642 <d_print_function_type+0x96>
8000860c:	58 08       	cp.w	r8,0
8000860e:	c0 b1       	brne	80008624 <d_print_function_type+0x78>
80008610:	ef 38 01 08 	ld.ub	r8,r7[264]
80008614:	32 89       	mov	r9,40
80008616:	f2 08 18 00 	cp.b	r8,r9
8000861a:	c0 f0       	breq	80008638 <d_print_function_type+0x8c>
8000861c:	32 a9       	mov	r9,42
8000861e:	f2 08 18 00 	cp.b	r8,r9
80008622:	c0 b0       	breq	80008638 <d_print_function_type+0x8c>
80008624:	ef 39 01 08 	ld.ub	r9,r7[264]
80008628:	32 08       	mov	r8,32
8000862a:	f0 09 18 00 	cp.b	r9,r8
8000862e:	c0 50       	breq	80008638 <d_print_function_type+0x8c>
80008630:	32 0b       	mov	r11,32
80008632:	0e 9c       	mov	r12,r7
80008634:	fe b0 ee 16 	rcall	80006260 <d_append_char>
80008638:	32 8b       	mov	r11,40
8000863a:	0e 9c       	mov	r12,r7
8000863c:	30 16       	mov	r6,1
8000863e:	fe b0 ee 11 	rcall	80006260 <d_append_char>
80008642:	30 08       	mov	r8,0
80008644:	ee f3 01 18 	ld.w	r3,r7[280]
80008648:	10 9a       	mov	r10,r8
8000864a:	ef 48 01 18 	st.w	r7[280],r8
8000864e:	0a 9b       	mov	r11,r5
80008650:	0e 9c       	mov	r12,r7
80008652:	c2 1c       	rcall	80008694 <d_print_mod_list>
80008654:	58 06       	cp.w	r6,0
80008656:	c0 50       	breq	80008660 <d_print_function_type+0xb4>
80008658:	32 9b       	mov	r11,41
8000865a:	0e 9c       	mov	r12,r7
8000865c:	fe b0 ee 02 	rcall	80006260 <d_append_char>
80008660:	32 8b       	mov	r11,40
80008662:	0e 9c       	mov	r12,r7
80008664:	fe b0 ed fe 	rcall	80006260 <d_append_char>
80008668:	68 2b       	ld.w	r11,r4[0x8]
8000866a:	58 0b       	cp.w	r11,0
8000866c:	c0 40       	breq	80008674 <d_print_function_type+0xc8>
8000866e:	0e 9c       	mov	r12,r7
80008670:	fe b0 f8 98 	rcall	800077a0 <d_print_comp>
80008674:	32 9b       	mov	r11,41
80008676:	0e 9c       	mov	r12,r7
80008678:	fe b0 ed f4 	rcall	80006260 <d_append_char>
8000867c:	0a 9b       	mov	r11,r5
8000867e:	30 1a       	mov	r10,1
80008680:	0e 9c       	mov	r12,r7
80008682:	c0 9c       	rcall	80008694 <d_print_mod_list>
80008684:	ef 43 01 18 	st.w	r7[280],r3
80008688:	d8 32       	popm	r0-r7,pc
8000868a:	14 98       	mov	r8,r10
8000868c:	30 19       	mov	r9,1
8000868e:	12 96       	mov	r6,r9
80008690:	cb 5b       	rjmp	800085fa <d_print_function_type+0x4e>
	...

80008694 <d_print_mod_list>:
80008694:	d4 31       	pushm	r0-r7,lr
80008696:	30 14       	mov	r4,1
80008698:	18 97       	mov	r7,r12
8000869a:	16 96       	mov	r6,r11
8000869c:	14 93       	mov	r3,r10
8000869e:	58 06       	cp.w	r6,0
800086a0:	c5 70       	breq	8000874e <d_print_mod_list+0xba>
800086a2:	ee f8 01 1c 	ld.w	r8,r7[284]
800086a6:	58 08       	cp.w	r8,0
800086a8:	c5 31       	brne	8000874e <d_print_mod_list+0xba>
800086aa:	6c 28       	ld.w	r8,r6[0x8]
800086ac:	58 08       	cp.w	r8,0
800086ae:	c4 e1       	brne	8000874a <d_print_mod_list+0xb6>
800086b0:	58 03       	cp.w	r3,0
800086b2:	c0 71       	brne	800086c0 <d_print_mod_list+0x2c>
800086b4:	6c 18       	ld.w	r8,r6[0x4]
800086b6:	70 08       	ld.w	r8,r8[0x0]
800086b8:	21 a8       	sub	r8,26
800086ba:	58 28       	cp.w	r8,2
800086bc:	e0 88 00 47 	brls	8000874a <d_print_mod_list+0xb6>
800086c0:	6c 38       	ld.w	r8,r6[0xc]
800086c2:	ee f5 01 14 	ld.w	r5,r7[276]
800086c6:	8d 24       	st.w	r6[0x8],r4
800086c8:	ef 48 01 14 	st.w	r7[276],r8
800086cc:	6c 18       	ld.w	r8,r6[0x4]
800086ce:	10 9b       	mov	r11,r8
800086d0:	70 09       	ld.w	r9,r8[0x0]
800086d2:	e0 49 00 25 	cp.w	r9,37
800086d6:	c0 51       	brne	800086e0 <d_print_mod_list+0x4c>
800086d8:	6c 0a       	ld.w	r10,r6[0x0]
800086da:	0e 9c       	mov	r12,r7
800086dc:	c6 8f       	rcall	800085ac <d_print_function_type>
800086de:	c2 f8       	rjmp	8000873c <d_print_mod_list+0xa8>
800086e0:	e0 49 00 26 	cp.w	r9,38
800086e4:	c0 61       	brne	800086f0 <d_print_mod_list+0x5c>
800086e6:	6c 0a       	ld.w	r10,r6[0x0]
800086e8:	10 9b       	mov	r11,r8
800086ea:	0e 9c       	mov	r12,r7
800086ec:	c3 4c       	rcall	80008754 <d_print_array_type>
800086ee:	c2 78       	rjmp	8000873c <d_print_mod_list+0xa8>
800086f0:	58 29       	cp.w	r9,2
800086f2:	c2 81       	brne	80008742 <d_print_mod_list+0xae>
800086f4:	30 09       	mov	r9,0
800086f6:	ee f4 01 18 	ld.w	r4,r7[280]
800086fa:	0e 9c       	mov	r12,r7
800086fc:	ef 49 01 18 	st.w	r7[280],r9
80008700:	70 1b       	ld.w	r11,r8[0x4]
80008702:	fe b0 f8 4f 	rcall	800077a0 <d_print_comp>
80008706:	ef 44 01 18 	st.w	r7[280],r4
8000870a:	6e 08       	ld.w	r8,r7[0x0]
8000870c:	ed b8 00 02 	bld	r8,0x2
80008710:	c0 60       	breq	8000871c <d_print_mod_list+0x88>
80008712:	49 0b       	lddpc	r11,80008750 <d_print_mod_list+0xbc>
80008714:	0e 9c       	mov	r12,r7
80008716:	fe b0 ee 2f 	rcall	80006374 <d_append_string>
8000871a:	c0 58       	rjmp	80008724 <d_print_mod_list+0x90>
8000871c:	32 eb       	mov	r11,46
8000871e:	0e 9c       	mov	r12,r7
80008720:	fe b0 ed a0 	rcall	80006260 <d_append_char>
80008724:	6c 18       	ld.w	r8,r6[0x4]
80008726:	70 2b       	ld.w	r11,r8[0x8]
80008728:	c0 28       	rjmp	8000872c <d_print_mod_list+0x98>
8000872a:	76 1b       	ld.w	r11,r11[0x4]
8000872c:	76 08       	ld.w	r8,r11[0x0]
8000872e:	21 a8       	sub	r8,26
80008730:	58 28       	cp.w	r8,2
80008732:	fe 98 ff fc 	brls	8000872a <d_print_mod_list+0x96>
80008736:	0e 9c       	mov	r12,r7
80008738:	fe b0 f8 34 	rcall	800077a0 <d_print_comp>
8000873c:	ef 45 01 14 	st.w	r7[276],r5
80008740:	d8 32       	popm	r0-r7,pc
80008742:	0e 9c       	mov	r12,r7
80008744:	c9 6e       	rcall	80008470 <d_print_mod>
80008746:	ef 45 01 14 	st.w	r7[276],r5
8000874a:	6c 06       	ld.w	r6,r6[0x0]
8000874c:	ca 9b       	rjmp	8000869e <d_print_mod_list+0xa>
8000874e:	d8 32       	popm	r0-r7,pc
80008750:	80 01       	ld.sh	r1,r0[0x0]
80008752:	14 8c       	andn	r12,r10

80008754 <d_print_array_type>:
80008754:	d4 31       	pushm	r0-r7,lr
80008756:	18 97       	mov	r7,r12
80008758:	16 94       	mov	r4,r11
8000875a:	14 93       	mov	r3,r10
8000875c:	58 0a       	cp.w	r10,0
8000875e:	c1 c0       	breq	80008796 <d_print_array_type+0x42>
80008760:	14 98       	mov	r8,r10
80008762:	70 26       	ld.w	r6,r8[0x8]
80008764:	58 06       	cp.w	r6,0
80008766:	c0 71       	brne	80008774 <d_print_array_type+0x20>
80008768:	70 18       	ld.w	r8,r8[0x4]
8000876a:	70 08       	ld.w	r8,r8[0x0]
8000876c:	e0 48 00 26 	cp.w	r8,38
80008770:	c2 61       	brne	800087bc <d_print_array_type+0x68>
80008772:	c0 58       	rjmp	8000877c <d_print_array_type+0x28>
80008774:	70 08       	ld.w	r8,r8[0x0]
80008776:	58 08       	cp.w	r8,0
80008778:	cf 51       	brne	80008762 <d_print_array_type+0xe>
8000877a:	30 16       	mov	r6,1
8000877c:	30 05       	mov	r5,0
8000877e:	06 9b       	mov	r11,r3
80008780:	30 0a       	mov	r10,0
80008782:	0e 9c       	mov	r12,r7
80008784:	c8 8f       	rcall	80008694 <d_print_mod_list>
80008786:	58 05       	cp.w	r5,0
80008788:	c0 50       	breq	80008792 <d_print_array_type+0x3e>
8000878a:	32 9b       	mov	r11,41
8000878c:	0e 9c       	mov	r12,r7
8000878e:	fe b0 ed 69 	rcall	80006260 <d_append_char>
80008792:	58 06       	cp.w	r6,0
80008794:	c0 50       	breq	8000879e <d_print_array_type+0x4a>
80008796:	32 0b       	mov	r11,32
80008798:	0e 9c       	mov	r12,r7
8000879a:	fe b0 ed 63 	rcall	80006260 <d_append_char>
8000879e:	35 bb       	mov	r11,91
800087a0:	0e 9c       	mov	r12,r7
800087a2:	fe b0 ed 5f 	rcall	80006260 <d_append_char>
800087a6:	68 1b       	ld.w	r11,r4[0x4]
800087a8:	58 0b       	cp.w	r11,0
800087aa:	c0 40       	breq	800087b2 <d_print_array_type+0x5e>
800087ac:	0e 9c       	mov	r12,r7
800087ae:	fe b0 f7 f9 	rcall	800077a0 <d_print_comp>
800087b2:	0e 9c       	mov	r12,r7
800087b4:	35 db       	mov	r11,93
800087b6:	fe b0 ed 55 	rcall	80006260 <d_append_char>
800087ba:	d8 32       	popm	r0-r7,pc
800087bc:	48 4b       	lddpc	r11,800087cc <d_print_array_type+0x78>
800087be:	0e 9c       	mov	r12,r7
800087c0:	30 15       	mov	r5,1
800087c2:	fe b0 ed d9 	rcall	80006374 <d_append_string>
800087c6:	0a 96       	mov	r6,r5
800087c8:	cd bb       	rjmp	8000877e <d_print_array_type+0x2a>
800087ca:	00 00       	add	r0,r0
800087cc:	80 01       	ld.sh	r1,r0[0x0]
800087ce:	16 08       	add	r8,r11

800087d0 <d_print_cast>:
800087d0:	d4 21       	pushm	r4-r7,lr
800087d2:	20 2d       	sub	sp,8
800087d4:	16 96       	mov	r6,r11
800087d6:	18 97       	mov	r7,r12
800087d8:	76 1b       	ld.w	r11,r11[0x4]
800087da:	76 08       	ld.w	r8,r11[0x0]
800087dc:	58 48       	cp.w	r8,4
800087de:	c0 40       	breq	800087e6 <d_print_cast+0x16>
800087e0:	fe b0 f7 e0 	rcall	800077a0 <d_print_comp>
800087e4:	c3 58       	rjmp	8000884e <d_print_cast+0x7e>
800087e6:	f8 f8 01 14 	ld.w	r8,r12[276]
800087ea:	50 08       	stdsp	sp[0x0],r8
800087ec:	30 08       	mov	r8,0
800087ee:	50 1b       	stdsp	sp[0x4],r11
800087f0:	f8 f5 01 18 	ld.w	r5,r12[280]
800087f4:	ef 4d 01 14 	st.w	r7[276],sp
800087f8:	f9 48 01 18 	st.w	r12[280],r8
800087fc:	76 1b       	ld.w	r11,r11[0x4]
800087fe:	fe b0 f7 d1 	rcall	800077a0 <d_print_comp>
80008802:	40 08       	lddsp	r8,sp[0x0]
80008804:	ef 48 01 14 	st.w	r7[276],r8
80008808:	ef 39 01 08 	ld.ub	r9,r7[264]
8000880c:	33 c8       	mov	r8,60
8000880e:	f0 09 18 00 	cp.b	r9,r8
80008812:	c0 51       	brne	8000881c <d_print_cast+0x4c>
80008814:	32 0b       	mov	r11,32
80008816:	0e 9c       	mov	r12,r7
80008818:	fe b0 ed 24 	rcall	80006260 <d_append_char>
8000881c:	33 cb       	mov	r11,60
8000881e:	0e 9c       	mov	r12,r7
80008820:	fe b0 ed 20 	rcall	80006260 <d_append_char>
80008824:	6c 18       	ld.w	r8,r6[0x4]
80008826:	0e 9c       	mov	r12,r7
80008828:	70 2b       	ld.w	r11,r8[0x8]
8000882a:	fe b0 f7 bb 	rcall	800077a0 <d_print_comp>
8000882e:	ef 39 01 08 	ld.ub	r9,r7[264]
80008832:	33 e8       	mov	r8,62
80008834:	f0 09 18 00 	cp.b	r9,r8
80008838:	c0 51       	brne	80008842 <d_print_cast+0x72>
8000883a:	32 0b       	mov	r11,32
8000883c:	0e 9c       	mov	r12,r7
8000883e:	fe b0 ed 11 	rcall	80006260 <d_append_char>
80008842:	33 eb       	mov	r11,62
80008844:	0e 9c       	mov	r12,r7
80008846:	fe b0 ed 0d 	rcall	80006260 <d_append_char>
8000884a:	ef 45 01 18 	st.w	r7[280],r5
8000884e:	2f ed       	sub	sp,-8
80008850:	d8 22       	popm	r4-r7,pc
	...

80008854 <d_print_expr_op>:
80008854:	d4 01       	pushm	lr
80008856:	76 09       	ld.w	r9,r11[0x0]
80008858:	e0 49 00 2b 	cp.w	r9,43
8000885c:	c0 71       	brne	8000886a <d_print_expr_op+0x16>
8000885e:	76 18       	ld.w	r8,r11[0x4]
80008860:	70 1b       	ld.w	r11,r8[0x4]
80008862:	70 2a       	ld.w	r10,r8[0x8]
80008864:	fe b0 ed 22 	rcall	800062a8 <d_append_buffer>
80008868:	d8 02       	popm	pc
8000886a:	fe b0 f7 9b 	rcall	800077a0 <d_print_comp>
8000886e:	d8 02       	popm	pc

80008870 <d_print_subexpr>:
80008870:	d4 21       	pushm	r4-r7,lr
80008872:	76 08       	ld.w	r8,r11[0x0]
80008874:	16 95       	mov	r5,r11
80008876:	58 08       	cp.w	r8,0
80008878:	5f 09       	sreq	r9
8000887a:	58 68       	cp.w	r8,6
8000887c:	5f 08       	sreq	r8
8000887e:	18 97       	mov	r7,r12
80008880:	12 48       	or	r8,r9
80008882:	c0 30       	breq	80008888 <d_print_subexpr+0x18>
80008884:	30 16       	mov	r6,1
80008886:	c0 58       	rjmp	80008890 <d_print_subexpr+0x20>
80008888:	32 8b       	mov	r11,40
8000888a:	30 06       	mov	r6,0
8000888c:	fe b0 ec ea 	rcall	80006260 <d_append_char>
80008890:	0a 9b       	mov	r11,r5
80008892:	0e 9c       	mov	r12,r7
80008894:	fe b0 f7 86 	rcall	800077a0 <d_print_comp>
80008898:	58 06       	cp.w	r6,0
8000889a:	c0 51       	brne	800088a4 <d_print_subexpr+0x34>
8000889c:	0e 9c       	mov	r12,r7
8000889e:	32 9b       	mov	r11,41
800088a0:	fe b0 ec e0 	rcall	80006260 <d_append_char>
800088a4:	d8 22       	popm	r4-r7,pc
	...

800088a8 <__cxa_demangle>:
800088a8:	d4 31       	pushm	r0-r7,lr
800088aa:	20 4d       	sub	sp,16
800088ac:	16 95       	mov	r5,r11
800088ae:	14 96       	mov	r6,r10
800088b0:	12 97       	mov	r7,r9
800088b2:	18 94       	mov	r4,r12
800088b4:	58 0c       	cp.w	r12,0
800088b6:	c0 51       	brne	800088c0 <__cxa_demangle+0x18>
800088b8:	58 09       	cp.w	r9,0
800088ba:	c4 c0       	breq	80008952 <__cxa_demangle+0xaa>
800088bc:	3f d8       	mov	r8,-3
800088be:	c4 88       	rjmp	8000894e <__cxa_demangle+0xa6>
800088c0:	58 0a       	cp.w	r10,0
800088c2:	5f 09       	sreq	r9
800088c4:	58 0b       	cp.w	r11,0
800088c6:	5f 18       	srne	r8
800088c8:	f3 e8 00 08 	and	r8,r9,r8
800088cc:	c0 50       	breq	800088d6 <__cxa_demangle+0x2e>
800088ce:	58 07       	cp.w	r7,0
800088d0:	c4 10       	breq	80008952 <__cxa_demangle+0xaa>
800088d2:	3f d8       	mov	r8,-3
800088d4:	c2 18       	rjmp	80008916 <__cxa_demangle+0x6e>
800088d6:	30 08       	mov	r8,0
800088d8:	1a 99       	mov	r9,sp
800088da:	50 38       	stdsp	sp[0xc],r8
800088dc:	50 08       	stdsp	sp[0x0],r8
800088de:	50 18       	stdsp	sp[0x4],r8
800088e0:	50 28       	stdsp	sp[0x8],r8
800088e2:	49 fa       	lddpc	r10,8000895c <__cxa_demangle+0xb4>
800088e4:	31 1b       	mov	r11,17
800088e6:	fe b0 fc bb 	rcall	8000825c <d_demangle_callback>
800088ea:	18 93       	mov	r3,r12
800088ec:	40 0c       	lddsp	r12,sp[0x0]
800088ee:	58 03       	cp.w	r3,0
800088f0:	c0 51       	brne	800088fa <__cxa_demangle+0x52>
800088f2:	f0 1f 00 1c 	mcall	80008960 <__cxa_demangle+0xb8>
800088f6:	06 98       	mov	r8,r3
800088f8:	c0 88       	rjmp	80008908 <__cxa_demangle+0x60>
800088fa:	40 38       	lddsp	r8,sp[0xc]
800088fc:	18 94       	mov	r4,r12
800088fe:	58 08       	cp.w	r8,0
80008900:	5f 13       	srne	r3
80008902:	06 98       	mov	r8,r3
80008904:	58 0c       	cp.w	r12,0
80008906:	c0 a1       	brne	8000891a <__cxa_demangle+0x72>
80008908:	58 07       	cp.w	r7,0
8000890a:	c2 40       	breq	80008952 <__cxa_demangle+0xaa>
8000890c:	58 18       	cp.w	r8,1
8000890e:	f9 b8 00 ff 	moveq	r8,-1
80008912:	f9 b8 01 fe 	movne	r8,-2
80008916:	8f 08       	st.w	r7[0x0],r8
80008918:	c1 d8       	rjmp	80008952 <__cxa_demangle+0xaa>
8000891a:	58 05       	cp.w	r5,0
8000891c:	c0 41       	brne	80008924 <__cxa_demangle+0x7c>
8000891e:	58 06       	cp.w	r6,0
80008920:	c1 31       	brne	80008946 <__cxa_demangle+0x9e>
80008922:	c1 38       	rjmp	80008948 <__cxa_demangle+0xa0>
80008924:	f0 1f 00 10 	mcall	80008964 <__cxa_demangle+0xbc>
80008928:	6c 08       	ld.w	r8,r6[0x0]
8000892a:	10 3c       	cp.w	r12,r8
8000892c:	c0 a2       	brcc	80008940 <__cxa_demangle+0x98>
8000892e:	08 9b       	mov	r11,r4
80008930:	0a 9c       	mov	r12,r5
80008932:	f0 1f 00 0e 	mcall	80008968 <__cxa_demangle+0xc0>
80008936:	08 9c       	mov	r12,r4
80008938:	0a 94       	mov	r4,r5
8000893a:	f0 1f 00 0a 	mcall	80008960 <__cxa_demangle+0xb8>
8000893e:	c0 58       	rjmp	80008948 <__cxa_demangle+0xa0>
80008940:	0a 9c       	mov	r12,r5
80008942:	f0 1f 00 08 	mcall	80008960 <__cxa_demangle+0xb8>
80008946:	8d 03       	st.w	r6[0x0],r3
80008948:	58 07       	cp.w	r7,0
8000894a:	c0 50       	breq	80008954 <__cxa_demangle+0xac>
8000894c:	30 08       	mov	r8,0
8000894e:	8f 08       	st.w	r7[0x0],r8
80008950:	c0 28       	rjmp	80008954 <__cxa_demangle+0xac>
80008952:	30 04       	mov	r4,0
80008954:	08 9c       	mov	r12,r4
80008956:	2f cd       	sub	sp,-16
80008958:	d8 32       	popm	r0-r7,pc
8000895a:	00 00       	add	r0,r0
8000895c:	80 00       	ld.sh	r0,r0[0x0]
8000895e:	89 6c       	st.w	r4[0x18],r12
80008960:	80 00       	ld.sh	r0,r0[0x0]
80008962:	b6 fc       	st.b	r11[0x7],r12
80008964:	80 00       	ld.sh	r0,r0[0x0]
80008966:	c2 9e       	rcall	800085b8 <d_print_function_type+0xc>
80008968:	80 00       	ld.sh	r0,r0[0x0]
8000896a:	c2 8c       	rcall	800089ba <d_growable_string_callback_adapter+0x4e>

8000896c <d_growable_string_callback_adapter>:
8000896c:	d4 31       	pushm	r0-r7,lr
8000896e:	74 18       	ld.w	r8,r10[0x4]
80008970:	14 97       	mov	r7,r10
80008972:	2f f8       	sub	r8,-1
80008974:	16 96       	mov	r6,r11
80008976:	18 94       	mov	r4,r12
80008978:	16 08       	add	r8,r11
8000897a:	74 25       	ld.w	r5,r10[0x8]
8000897c:	0a 38       	cp.w	r8,r5
8000897e:	e0 88 00 1d 	brls	800089b8 <d_growable_string_callback_adapter+0x4c>
80008982:	74 39       	ld.w	r9,r10[0xc]
80008984:	58 09       	cp.w	r9,0
80008986:	c1 91       	brne	800089b8 <d_growable_string_callback_adapter+0x4c>
80008988:	58 05       	cp.w	r5,0
8000898a:	f9 b5 00 02 	moveq	r5,2
8000898e:	c0 28       	rjmp	80008992 <d_growable_string_callback_adapter+0x26>
80008990:	a1 75       	lsl	r5,0x1
80008992:	10 35       	cp.w	r5,r8
80008994:	cf e3       	brcs	80008990 <d_growable_string_callback_adapter+0x24>
80008996:	0a 9b       	mov	r11,r5
80008998:	6e 0c       	ld.w	r12,r7[0x0]
8000899a:	f0 1f 00 12 	mcall	800089e0 <d_growable_string_callback_adapter+0x74>
8000899e:	18 93       	mov	r3,r12
800089a0:	c0 a1       	brne	800089b4 <d_growable_string_callback_adapter+0x48>
800089a2:	6e 0c       	ld.w	r12,r7[0x0]
800089a4:	f0 1f 00 10 	mcall	800089e4 <d_growable_string_callback_adapter+0x78>
800089a8:	30 18       	mov	r8,1
800089aa:	8f 23       	st.w	r7[0x8],r3
800089ac:	8f 03       	st.w	r7[0x0],r3
800089ae:	8f 13       	st.w	r7[0x4],r3
800089b0:	8f 38       	st.w	r7[0xc],r8
800089b2:	c0 38       	rjmp	800089b8 <d_growable_string_callback_adapter+0x4c>
800089b4:	8f 0c       	st.w	r7[0x0],r12
800089b6:	8f 25       	st.w	r7[0x8],r5
800089b8:	6e 35       	ld.w	r5,r7[0xc]
800089ba:	58 05       	cp.w	r5,0
800089bc:	c1 11       	brne	800089de <d_growable_string_callback_adapter+0x72>
800089be:	6e 18       	ld.w	r8,r7[0x4]
800089c0:	6e 0c       	ld.w	r12,r7[0x0]
800089c2:	0c 9a       	mov	r10,r6
800089c4:	10 0c       	add	r12,r8
800089c6:	08 9b       	mov	r11,r4
800089c8:	f0 1f 00 08 	mcall	800089e8 <d_growable_string_callback_adapter+0x7c>
800089cc:	6e 18       	ld.w	r8,r7[0x4]
800089ce:	6e 09       	ld.w	r9,r7[0x0]
800089d0:	0c 09       	add	r9,r6
800089d2:	f2 08 0b 05 	st.b	r9[r8],r5
800089d6:	6e 18       	ld.w	r8,r7[0x4]
800089d8:	f0 06 00 06 	add	r6,r8,r6
800089dc:	8f 16       	st.w	r7[0x4],r6
800089de:	d8 32       	popm	r0-r7,pc
800089e0:	80 00       	ld.sh	r0,r0[0x0]
800089e2:	bd dc       	cbr	r12,0x1d
800089e4:	80 00       	ld.sh	r0,r0[0x0]
800089e6:	b6 fc       	st.b	r11[0x7],r12
800089e8:	80 00       	ld.sh	r0,r0[0x0]
800089ea:	bb b8       	sbr	r8,0x1b

800089ec <standard_subs>:
800089ec:	74 00 00 00 80 01 14 88 00 00 00 03 80 01 14 88     t...............
800089fc:	00 00 00 03 00 00 00 00 00 00 00 00 61 00 00 00     ............a...
80008a0c:	80 01 17 e0 00 00 00 0e 80 01 17 e0 00 00 00 0e     ................
80008a1c:	80 01 17 f0 00 00 00 09 62 00 00 00 80 01 17 fc     ........b.......
80008a2c:	00 00 00 11 80 01 17 fc 00 00 00 11 80 01 18 10     ................
80008a3c:	00 00 00 0c 73 00 00 00 80 01 18 20 00 00 00 0b     ....s...... ....
80008a4c:	80 01 18 2c 00 00 00 46 80 01 18 10 00 00 00 0c     ...,...F........
80008a5c:	69 00 00 00 80 01 18 74 00 00 00 0c 80 01 18 84     i......t........
80008a6c:	00 00 00 31 80 01 18 b8 00 00 00 0d 6f 00 00 00     ...1........o...
80008a7c:	80 01 18 c8 00 00 00 0c 80 01 18 d8 00 00 00 31     ...............1
80008a8c:	80 01 19 0c 00 00 00 0d 64 00 00 00 80 01 19 1c     ........d.......
80008a9c:	00 00 00 0d 80 01 19 2c 00 00 00 32 80 01 19 60     .......,...2...`
80008aac:	00 00 00 0e                                         ....

80008ab0 <cplus_demangle_builtin_types>:
80008ab0:	80 01 16 98 00 00 00 0b 80 01 16 98 00 00 00 0b     ................
80008ac0:	00 00 00 00 80 01 16 a4 00 00 00 04 80 01 16 ac     ................
80008ad0:	00 00 00 07 00 00 00 07 80 01 16 b4 00 00 00 04     ................
80008ae0:	80 01 16 bc 00 00 00 04 00 00 00 00 80 01 16 c4     ................
80008af0:	00 00 00 06 80 01 16 c4 00 00 00 06 00 00 00 08     ................
80008b00:	80 01 16 cc 00 00 00 0b 80 01 16 cc 00 00 00 0b     ................
80008b10:	00 00 00 08 80 01 16 d8 00 00 00 05 80 01 16 d8     ................
80008b20:	00 00 00 05 00 00 00 08 80 01 16 e0 00 00 00 0a     ................
80008b30:	80 01 16 e0 00 00 00 0a 00 00 00 08 80 01 16 ec     ................
80008b40:	00 00 00 0d 80 01 16 ec 00 00 00 0d 00 00 00 00     ................
80008b50:	80 01 16 fc 00 00 00 03 80 01 16 fc 00 00 00 03     ................
80008b60:	00 00 00 01 80 01 17 00 00 00 00 0c 80 01 17 10     ................
80008b70:	00 00 00 08 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
80008b8c:	80 01 17 1c 00 00 00 04 80 01 17 1c 00 00 00 04     ................
80008b9c:	00 00 00 03 80 01 17 24 00 00 00 0d 80 01 17 24     .......$.......$
80008bac:	00 00 00 0d 00 00 00 04 80 01 17 34 00 00 00 08     ...........4....
80008bbc:	80 01 17 34 00 00 00 08 00 00 00 00 80 01 17 40     ...4...........@
80008bcc:	00 00 00 11 80 01 17 40 00 00 00 11 00 00 00 00     .......@........
	...
80008c18:	80 01 17 54 00 00 00 05 80 01 17 54 00 00 00 05     ...T.......T....
80008c28:	00 00 00 00 80 01 17 5c 00 00 00 0e 80 01 17 5c     .......\.......\
80008c38:	00 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
80008c54:	80 01 17 6c 00 00 00 04 80 01 17 6c 00 00 00 04     ...l.......l....
80008c64:	00 00 00 09 80 01 17 74 00 00 00 07 80 01 16 b4     .......t........
80008c74:	00 00 00 04 00 00 00 00 80 01 17 7c 00 00 00 09     ...........|....
80008c84:	80 01 17 1c 00 00 00 04 00 00 00 05 80 01 17 88     ................
80008c94:	00 00 00 12 80 01 17 88 00 00 00 12 00 00 00 06     ................
80008ca4:	80 01 16 0c 00 00 00 03 80 01 16 0c 00 00 00 03     ................
80008cb4:	00 00 00 00 80 01 17 9c 00 00 00 09 80 01 17 9c     ................
80008cc4:	00 00 00 09 00 00 00 00 80 01 17 a8 00 00 00 09     ................
80008cd4:	80 01 17 a8 00 00 00 09 00 00 00 00 80 01 17 b4     ................
80008ce4:	00 00 00 0a 80 01 17 b4 00 00 00 0a 00 00 00 00     ................
80008cf4:	80 01 17 c0 00 00 00 04 80 01 17 c0 00 00 00 04     ................
80008d04:	00 00 00 08 80 01 17 c8 00 00 00 08 80 01 17 c8     ................
80008d14:	00 00 00 08 00 00 00 00 80 01 17 d4 00 00 00 08     ................
80008d24:	80 01 17 d4 00 00 00 08 00 00 00 00                 ............

80008d30 <cplus_demangle_operators>:
80008d30:	80 01 19 70 80 01 19 74 00 00 00 02 00 00 00 02     ...p...t........
80008d40:	80 01 19 78 80 01 19 7c 00 00 00 01 00 00 00 02     ...x...|........
80008d50:	80 01 19 80 80 01 16 7c 00 00 00 02 00 00 00 02     .......|........
80008d60:	80 01 19 84 80 01 19 88 00 00 00 01 00 00 00 01     ................
80008d70:	80 01 19 8c 80 01 19 88 00 00 00 01 00 00 00 02     ................
80008d80:	80 01 14 74 80 01 19 90 00 00 00 02 00 00 00 02     ...t............
80008d90:	80 01 19 94 80 01 19 98 00 00 00 01 00 00 00 02     ................
80008da0:	80 01 19 9c 80 01 19 a0 00 00 00 01 00 00 00 01     ................
80008db0:	80 01 19 a4 80 01 19 a8 00 00 00 02 00 00 00 02     ................
80008dc0:	80 01 19 ac 80 01 19 b0 00 00 00 08 00 00 00 01     ................
80008dd0:	80 01 19 bc 80 01 19 c0 00 00 00 01 00 00 00 01     ................
80008de0:	80 01 19 c4 80 01 19 c8 00 00 00 06 00 00 00 01     ................
80008df0:	80 01 19 d0 80 01 0e 80 00 00 00 01 00 00 00 02     ................
80008e00:	80 01 19 d4 80 01 19 d8 00 00 00 01 00 00 00 02     ................
80008e10:	80 01 19 dc 80 01 19 e0 00 00 00 02 00 00 00 02     ................
80008e20:	80 01 19 e4 80 01 19 e8 00 00 00 01 00 00 00 02     ................
80008e30:	80 01 19 ec 80 01 19 f0 00 00 00 02 00 00 00 02     ................
80008e40:	80 01 19 f4 80 01 19 f8 00 00 00 02 00 00 00 02     ................
80008e50:	80 01 19 fc 80 01 18 b4 00 00 00 01 00 00 00 02     ................
80008e60:	80 01 1a 00 80 01 14 98 00 00 00 02 00 00 00 02     ................
80008e70:	80 01 1a 04 80 01 1a 08 00 00 00 03 00 00 00 02     ................
80008e80:	80 01 16 c8 80 01 1a 0c 00 00 00 02 00 00 00 02     ................
80008e90:	80 01 1a 10 80 01 1a 14 00 00 00 02 00 00 00 02     ................
80008ea0:	80 01 1a 18 80 01 1a 1c 00 00 00 01 00 00 00 02     ................
80008eb0:	80 01 1a 20 80 01 1a 24 00 00 00 02 00 00 00 02     ... ...$........
80008ec0:	80 01 1a 28 80 01 1a 2c 00 00 00 02 00 00 00 02     ...(...,........
80008ed0:	80 01 1a 30 80 01 1a 34 00 00 00 01 00 00 00 02     ...0...4........
80008ee0:	80 01 1a 38 80 01 19 c0 00 00 00 01 00 00 00 02     ...8............
80008ef0:	80 01 1a 3c 80 01 1a 40 00 00 00 02 00 00 00 01     ...<...@........
80008f00:	80 01 1a 44 80 01 1a 48 00 00 00 05 00 00 00 01     ...D...H........
80008f10:	80 01 1a 50 80 01 1a 54 00 00 00 02 00 00 00 02     ...P...T........
80008f20:	80 01 17 98 80 01 1a 34 00 00 00 01 00 00 00 01     .......4........
80008f30:	80 01 1a 58 80 01 1a 5c 00 00 00 01 00 00 00 01     ...X...\........
80008f40:	80 01 1a 60 80 01 1a 64 00 00 00 03 00 00 00 01     ...`...d........
80008f50:	80 01 1a 68 80 01 1a 6c 00 00 00 02 00 00 00 02     ...h...l........
80008f60:	80 01 1a 70 80 01 1a 74 00 00 00 02 00 00 00 02     ...p...t........
80008f70:	80 01 17 ec 80 01 1a 78 00 00 00 01 00 00 00 02     .......x........
80008f80:	80 01 1a 7c 80 01 1a 80 00 00 00 02 00 00 00 02     ...|............
80008f90:	80 01 1a 84 80 01 1a 88 00 00 00 01 00 00 00 02     ................
80008fa0:	80 01 1a 8c 80 01 1a 90 00 00 00 03 00 00 00 02     ................
80008fb0:	80 01 1a 94 80 01 1a 98 00 00 00 02 00 00 00 01     ................
80008fc0:	80 01 1a 9c 80 01 1a 88 00 00 00 01 00 00 00 01     ................
80008fd0:	80 01 1a a0 80 01 1a a4 00 00 00 02 00 00 00 02     ................
80008fe0:	80 01 1a a8 80 01 1a ac 00 00 00 01 00 00 00 03     ................
80008ff0:	80 01 1a b0 80 01 1a b4 00 00 00 02 00 00 00 02     ................
80009000:	80 01 1a b8 80 01 1a bc 00 00 00 03 00 00 00 02     ................
80009010:	80 01 1a c0 80 01 1a c4 00 00 00 01 00 00 00 02     ................
80009020:	80 01 1a c8 80 01 1a cc 00 00 00 02 00 00 00 02     ................
80009030:	80 01 16 78 80 01 1a d0 00 00 00 07 00 00 00 01     ...x............
80009040:	80 01 1a d8 80 01 1a d0 00 00 00 07 00 00 00 01     ................
80009050:	80 01 1a dc 80 01 1a e0 00 00 00 08 00 00 00 01     ................
80009060:	80 01 1a ec 80 01 1a e0 00 00 00 08 00 00 00 01     ................
	...

80009080 <asin>:
80009080:	d4 31       	pushm	r0-r7,lr
80009082:	20 9d       	sub	sp,36
80009084:	4a 17       	lddpc	r7,80009108 <asin+0x88>
80009086:	14 94       	mov	r4,r10
80009088:	16 95       	mov	r5,r11
8000908a:	f0 1f 00 21 	mcall	8000910c <asin+0x8c>
8000908e:	6e 08       	ld.w	r8,r7[0x0]
80009090:	14 92       	mov	r2,r10
80009092:	16 93       	mov	r3,r11
80009094:	5b f8       	cp.w	r8,-1
80009096:	c3 50       	breq	80009100 <asin+0x80>
80009098:	08 9a       	mov	r10,r4
8000909a:	0a 9b       	mov	r11,r5
8000909c:	f0 1f 00 1d 	mcall	80009110 <asin+0x90>
800090a0:	18 96       	mov	r6,r12
800090a2:	c2 f1       	brne	80009100 <asin+0x80>
800090a4:	08 9a       	mov	r10,r4
800090a6:	0a 9b       	mov	r11,r5
800090a8:	f0 1f 00 1b 	mcall	80009114 <asin+0x94>
800090ac:	14 98       	mov	r8,r10
800090ae:	16 99       	mov	r9,r11
800090b0:	30 0a       	mov	r10,0
800090b2:	fc 1b 3f f0 	movh	r11,0x3ff0
800090b6:	f0 1f 00 19 	mcall	80009118 <asin+0x98>
800090ba:	c2 30       	breq	80009100 <asin+0x80>
800090bc:	30 18       	mov	r8,1
800090be:	50 08       	stdsp	sp[0x0],r8
800090c0:	49 78       	lddpc	r8,8000911c <asin+0x9c>
800090c2:	50 86       	stdsp	sp[0x20],r6
800090c4:	50 18       	stdsp	sp[0x4],r8
800090c6:	fa e5 00 08 	st.d	sp[8],r4
800090ca:	fa e5 00 10 	st.d	sp[16],r4
800090ce:	49 5c       	lddpc	r12,80009120 <asin+0xa0>
800090d0:	f0 1f 00 15 	mcall	80009124 <asin+0xa4>
800090d4:	fa eb 00 18 	st.d	sp[24],r10
800090d8:	6e 08       	ld.w	r8,r7[0x0]
800090da:	58 28       	cp.w	r8,2
800090dc:	c0 50       	breq	800090e6 <asin+0x66>
800090de:	1a 9c       	mov	r12,sp
800090e0:	f0 1f 00 12 	mcall	80009128 <asin+0xa8>
800090e4:	c0 51       	brne	800090ee <asin+0x6e>
800090e6:	f0 1f 00 12 	mcall	8000912c <asin+0xac>
800090ea:	32 18       	mov	r8,33
800090ec:	99 08       	st.w	r12[0x0],r8
800090ee:	40 88       	lddsp	r8,sp[0x20]
800090f0:	58 08       	cp.w	r8,0
800090f2:	c0 50       	breq	800090fc <asin+0x7c>
800090f4:	f0 1f 00 0e 	mcall	8000912c <asin+0xac>
800090f8:	40 88       	lddsp	r8,sp[0x20]
800090fa:	99 08       	st.w	r12[0x0],r8
800090fc:	fa e2 00 18 	ld.d	r2,sp[24]
80009100:	04 9a       	mov	r10,r2
80009102:	06 9b       	mov	r11,r3
80009104:	2f 7d       	sub	sp,-36
80009106:	d8 32       	popm	r0-r7,pc
80009108:	00 00       	add	r0,r0
8000910a:	00 e8       	st.h	--r0,r8
8000910c:	80 00       	ld.sh	r0,r0[0x0]
8000910e:	91 f0       	st.w	r8[0x3c],r0
80009110:	80 00       	ld.sh	r0,r0[0x0]
80009112:	9e 48       	ld.sh	r8,pc[0x8]
80009114:	80 00       	ld.sh	r0,r0[0x0]
80009116:	9e 40       	ld.sh	r0,pc[0x8]
80009118:	80 00       	ld.sh	r0,r0[0x0]
8000911a:	a4 94       	st.b	r2[0x1],r4
8000911c:	80 01       	ld.sh	r1,r0[0x0]
8000911e:	1a f0       	st.b	--sp,r0
80009120:	80 01       	ld.sh	r1,r0[0x0]
80009122:	0f 90       	ld.ub	r0,r7[0x1]
80009124:	80 00       	ld.sh	r0,r0[0x0]
80009126:	9e 66       	ld.sh	r6,pc[0xc]
80009128:	80 00       	ld.sh	r0,r0[0x0]
8000912a:	9e 64       	ld.sh	r4,pc[0xc]
8000912c:	80 00       	ld.sh	r0,r0[0x0]
8000912e:	b2 78       	st.h	r9[0xe],r8

80009130 <atan2>:
80009130:	d4 01       	pushm	lr
80009132:	f0 1f 00 02 	mcall	80009138 <atan2+0x8>
80009136:	d8 02       	popm	pc
80009138:	80 00       	ld.sh	r0,r0[0x0]
8000913a:	96 fc       	ld.uh	r12,r11[0xe]

8000913c <sqrt>:
8000913c:	d4 31       	pushm	r0-r7,lr
8000913e:	20 9d       	sub	sp,36
80009140:	4a 47       	lddpc	r7,800091d0 <sqrt+0x94>
80009142:	14 94       	mov	r4,r10
80009144:	16 95       	mov	r5,r11
80009146:	f0 1f 00 24 	mcall	800091d4 <sqrt+0x98>
8000914a:	6e 08       	ld.w	r8,r7[0x0]
8000914c:	14 92       	mov	r2,r10
8000914e:	16 93       	mov	r3,r11
80009150:	5b f8       	cp.w	r8,-1
80009152:	c3 a0       	breq	800091c6 <sqrt+0x8a>
80009154:	08 9a       	mov	r10,r4
80009156:	0a 9b       	mov	r11,r5
80009158:	f0 1f 00 20 	mcall	800091d8 <sqrt+0x9c>
8000915c:	18 96       	mov	r6,r12
8000915e:	c3 41       	brne	800091c6 <sqrt+0x8a>
80009160:	30 08       	mov	r8,0
80009162:	30 09       	mov	r9,0
80009164:	08 9a       	mov	r10,r4
80009166:	0a 9b       	mov	r11,r5
80009168:	f0 1f 00 1d 	mcall	800091dc <sqrt+0xa0>
8000916c:	c2 d0       	breq	800091c6 <sqrt+0x8a>
8000916e:	30 18       	mov	r8,1
80009170:	50 86       	stdsp	sp[0x20],r6
80009172:	50 08       	stdsp	sp[0x0],r8
80009174:	fa e5 00 08 	st.d	sp[8],r4
80009178:	49 a8       	lddpc	r8,800091e0 <sqrt+0xa4>
8000917a:	fa e5 00 10 	st.d	sp[16],r4
8000917e:	50 18       	stdsp	sp[0x4],r8
80009180:	6e 07       	ld.w	r7,r7[0x0]
80009182:	58 07       	cp.w	r7,0
80009184:	c0 61       	brne	80009190 <sqrt+0x54>
80009186:	30 08       	mov	r8,0
80009188:	30 09       	mov	r9,0
8000918a:	fa e9 00 18 	st.d	sp[24],r8
8000918e:	c0 b8       	rjmp	800091a4 <sqrt+0x68>
80009190:	30 08       	mov	r8,0
80009192:	30 09       	mov	r9,0
80009194:	10 9a       	mov	r10,r8
80009196:	12 9b       	mov	r11,r9
80009198:	f0 1f 00 13 	mcall	800091e4 <sqrt+0xa8>
8000919c:	fa eb 00 18 	st.d	sp[24],r10
800091a0:	58 27       	cp.w	r7,2
800091a2:	c0 50       	breq	800091ac <sqrt+0x70>
800091a4:	1a 9c       	mov	r12,sp
800091a6:	f0 1f 00 11 	mcall	800091e8 <sqrt+0xac>
800091aa:	c0 51       	brne	800091b4 <sqrt+0x78>
800091ac:	f0 1f 00 10 	mcall	800091ec <sqrt+0xb0>
800091b0:	32 18       	mov	r8,33
800091b2:	99 08       	st.w	r12[0x0],r8
800091b4:	40 88       	lddsp	r8,sp[0x20]
800091b6:	58 08       	cp.w	r8,0
800091b8:	c0 50       	breq	800091c2 <sqrt+0x86>
800091ba:	f0 1f 00 0d 	mcall	800091ec <sqrt+0xb0>
800091be:	40 88       	lddsp	r8,sp[0x20]
800091c0:	99 08       	st.w	r12[0x0],r8
800091c2:	fa e2 00 18 	ld.d	r2,sp[24]
800091c6:	04 9a       	mov	r10,r2
800091c8:	06 9b       	mov	r11,r3
800091ca:	2f 7d       	sub	sp,-36
800091cc:	d8 32       	popm	r0-r7,pc
800091ce:	00 00       	add	r0,r0
800091d0:	00 00       	add	r0,r0
800091d2:	00 e8       	st.h	--r0,r8
800091d4:	80 00       	ld.sh	r0,r0[0x0]
800091d6:	99 3c       	st.w	r12[0xc],r12
800091d8:	80 00       	ld.sh	r0,r0[0x0]
800091da:	9e 48       	ld.sh	r8,pc[0x8]
800091dc:	80 00       	ld.sh	r0,r0[0x0]
800091de:	a4 94       	st.b	r2[0x1],r4
800091e0:	80 01       	ld.sh	r1,r0[0x0]
800091e2:	1a f8       	st.b	--sp,r8
800091e4:	80 00       	ld.sh	r0,r0[0x0]
800091e6:	a4 fc       	st.b	r2[0x7],r12
800091e8:	80 00       	ld.sh	r0,r0[0x0]
800091ea:	9e 64       	ld.sh	r4,pc[0xc]
800091ec:	80 00       	ld.sh	r0,r0[0x0]
800091ee:	b2 78       	st.h	r9[0xe],r8

800091f0 <__ieee754_asin>:
800091f0:	d4 31       	pushm	r0-r7,lr
800091f2:	20 5d       	sub	sp,20
800091f4:	50 0b       	stdsp	sp[0x0],r11
800091f6:	16 96       	mov	r6,r11
800091f8:	14 97       	mov	r7,r10
800091fa:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
800091fe:	e0 68 ff ff 	mov	r8,65535
80009202:	ea 18 3f ef 	orh	r8,0x3fef
80009206:	10 35       	cp.w	r5,r8
80009208:	e0 8a 00 32 	brle	8000926c <__ieee754_asin+0x7c>
8000920c:	fc 1a c0 10 	movh	r10,0xc010
80009210:	14 05       	add	r5,r10
80009212:	0e 45       	or	r5,r7
80009214:	c1 f1       	brne	80009252 <__ieee754_asin+0x62>
80009216:	e0 68 2d 18 	mov	r8,11544
8000921a:	ea 18 54 44 	orh	r8,0x5444
8000921e:	e0 69 21 fb 	mov	r9,8699
80009222:	ea 19 3f f9 	orh	r9,0x3ff9
80009226:	0e 9a       	mov	r10,r7
80009228:	f0 1f 01 2e 	mcall	800096e0 <__ieee754_asin+0x4f0>
8000922c:	e0 68 5c 07 	mov	r8,23559
80009230:	ea 18 33 14 	orh	r8,0x3314
80009234:	14 94       	mov	r4,r10
80009236:	16 95       	mov	r5,r11
80009238:	e0 69 a6 26 	mov	r9,42534
8000923c:	ea 19 3c 91 	orh	r9,0x3c91
80009240:	0c 9b       	mov	r11,r6
80009242:	0e 9a       	mov	r10,r7
80009244:	f0 1f 01 27 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009248:	14 98       	mov	r8,r10
8000924a:	16 99       	mov	r9,r11
8000924c:	08 9a       	mov	r10,r4
8000924e:	0a 9b       	mov	r11,r5
80009250:	ce 48       	rjmp	80009418 <__ieee754_asin+0x228>
80009252:	0c 99       	mov	r9,r6
80009254:	0e 98       	mov	r8,r7
80009256:	0e 9a       	mov	r10,r7
80009258:	f0 1f 01 23 	mcall	800096e4 <__ieee754_asin+0x4f4>
8000925c:	14 98       	mov	r8,r10
8000925e:	16 99       	mov	r9,r11
80009260:	f0 1f 01 22 	mcall	800096e8 <__ieee754_asin+0x4f8>
80009264:	16 96       	mov	r6,r11
80009266:	14 97       	mov	r7,r10
80009268:	e0 8f 02 37 	bral	800096d6 <__ieee754_asin+0x4e6>
8000926c:	e0 68 ff ff 	mov	r8,65535
80009270:	ea 18 3f df 	orh	r8,0x3fdf
80009274:	10 35       	cp.w	r5,r8
80009276:	e0 89 00 d4 	brgt	8000941e <__ieee754_asin+0x22e>
8000927a:	e0 68 ff ff 	mov	r8,65535
8000927e:	ea 18 3e 3f 	orh	r8,0x3e3f
80009282:	10 35       	cp.w	r5,r8
80009284:	e0 89 00 17 	brgt	800092b2 <__ieee754_asin+0xc2>
80009288:	e0 68 75 9c 	mov	r8,30108
8000928c:	ea 18 88 00 	orh	r8,0x8800
80009290:	e0 69 e4 3c 	mov	r9,58428
80009294:	ea 19 7e 37 	orh	r9,0x7e37
80009298:	f0 1f 01 15 	mcall	800096ec <__ieee754_asin+0x4fc>
8000929c:	14 98       	mov	r8,r10
8000929e:	16 99       	mov	r9,r11
800092a0:	30 0a       	mov	r10,0
800092a2:	fc 1b 3f f0 	movh	r11,0x3ff0
800092a6:	f0 1f 01 13 	mcall	800096f0 <__ieee754_asin+0x500>
800092aa:	e0 80 00 ba 	breq	8000941e <__ieee754_asin+0x22e>
800092ae:	e0 8f 02 14 	bral	800096d6 <__ieee754_asin+0x4e6>
800092b2:	16 99       	mov	r9,r11
800092b4:	14 98       	mov	r8,r10
800092b6:	f0 1f 01 0b 	mcall	800096e0 <__ieee754_asin+0x4f0>
800092ba:	e0 68 f7 09 	mov	r8,63241
800092be:	ea 18 0d fd 	orh	r8,0xdfd
800092c2:	14 94       	mov	r4,r10
800092c4:	16 95       	mov	r5,r11
800092c6:	e0 69 3d e1 	mov	r9,15841
800092ca:	ea 19 3f 02 	orh	r9,0x3f02
800092ce:	f0 1f 01 05 	mcall	800096e0 <__ieee754_asin+0x4f0>
800092d2:	e0 68 b2 88 	mov	r8,45704
800092d6:	ea 18 75 01 	orh	r8,0x7501
800092da:	e0 69 ef e0 	mov	r9,61408
800092de:	ea 19 3f 49 	orh	r9,0x3f49
800092e2:	f0 1f 01 03 	mcall	800096ec <__ieee754_asin+0x4fc>
800092e6:	14 98       	mov	r8,r10
800092e8:	16 99       	mov	r9,r11
800092ea:	08 9a       	mov	r10,r4
800092ec:	0a 9b       	mov	r11,r5
800092ee:	f0 1f 00 fd 	mcall	800096e0 <__ieee754_asin+0x4f0>
800092f2:	e0 68 8f 3b 	mov	r8,36667
800092f6:	ea 18 b5 68 	orh	r8,0xb568
800092fa:	e0 69 82 28 	mov	r9,33320
800092fe:	ea 19 3f a4 	orh	r9,0x3fa4
80009302:	f0 1f 00 f9 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009306:	14 98       	mov	r8,r10
80009308:	16 99       	mov	r9,r11
8000930a:	08 9a       	mov	r10,r4
8000930c:	0a 9b       	mov	r11,r5
8000930e:	f0 1f 00 f5 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009312:	e0 68 44 55 	mov	r8,17493
80009316:	ea 18 0e 88 	orh	r8,0xe88
8000931a:	e0 69 c1 55 	mov	r9,49493
8000931e:	ea 19 3f c9 	orh	r9,0x3fc9
80009322:	f0 1f 00 f3 	mcall	800096ec <__ieee754_asin+0x4fc>
80009326:	14 98       	mov	r8,r10
80009328:	16 99       	mov	r9,r11
8000932a:	08 9a       	mov	r10,r4
8000932c:	0a 9b       	mov	r11,r5
8000932e:	f0 1f 00 ed 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009332:	e0 68 6f 7d 	mov	r8,28541
80009336:	ea 18 03 eb 	orh	r8,0x3eb
8000933a:	e0 69 d6 12 	mov	r9,54802
8000933e:	ea 19 3f d4 	orh	r9,0x3fd4
80009342:	f0 1f 00 e9 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009346:	14 98       	mov	r8,r10
80009348:	16 99       	mov	r9,r11
8000934a:	08 9a       	mov	r10,r4
8000934c:	0a 9b       	mov	r11,r5
8000934e:	f0 1f 00 e5 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009352:	e0 68 55 55 	mov	r8,21845
80009356:	ea 18 55 55 	orh	r8,0x5555
8000935a:	e0 69 55 55 	mov	r9,21845
8000935e:	ea 19 3f c5 	orh	r9,0x3fc5
80009362:	f0 1f 00 e3 	mcall	800096ec <__ieee754_asin+0x4fc>
80009366:	14 98       	mov	r8,r10
80009368:	16 99       	mov	r9,r11
8000936a:	08 9a       	mov	r10,r4
8000936c:	0a 9b       	mov	r11,r5
8000936e:	f0 1f 00 dd 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009372:	e0 68 92 82 	mov	r8,37506
80009376:	ea 18 b1 2e 	orh	r8,0xb12e
8000937a:	14 92       	mov	r2,r10
8000937c:	16 93       	mov	r3,r11
8000937e:	e0 69 b8 c5 	mov	r9,47301
80009382:	ea 19 3f b3 	orh	r9,0x3fb3
80009386:	08 9a       	mov	r10,r4
80009388:	0a 9b       	mov	r11,r5
8000938a:	f0 1f 00 d6 	mcall	800096e0 <__ieee754_asin+0x4f0>
8000938e:	e0 68 01 59 	mov	r8,345
80009392:	ea 18 1b 8d 	orh	r8,0x1b8d
80009396:	e0 69 06 6c 	mov	r9,1644
8000939a:	ea 19 3f e6 	orh	r9,0x3fe6
8000939e:	f0 1f 00 d2 	mcall	800096e4 <__ieee754_asin+0x4f4>
800093a2:	14 98       	mov	r8,r10
800093a4:	16 99       	mov	r9,r11
800093a6:	08 9a       	mov	r10,r4
800093a8:	0a 9b       	mov	r11,r5
800093aa:	f0 1f 00 ce 	mcall	800096e0 <__ieee754_asin+0x4f0>
800093ae:	e0 68 8a c8 	mov	r8,35528
800093b2:	ea 18 9c 59 	orh	r8,0x9c59
800093b6:	e0 69 2a e5 	mov	r9,10981
800093ba:	ea 19 40 00 	orh	r9,0x4000
800093be:	f0 1f 00 cc 	mcall	800096ec <__ieee754_asin+0x4fc>
800093c2:	14 98       	mov	r8,r10
800093c4:	16 99       	mov	r9,r11
800093c6:	08 9a       	mov	r10,r4
800093c8:	0a 9b       	mov	r11,r5
800093ca:	f0 1f 00 c6 	mcall	800096e0 <__ieee754_asin+0x4f0>
800093ce:	e0 68 2d 4b 	mov	r8,11595
800093d2:	ea 18 1c 8a 	orh	r8,0x1c8a
800093d6:	e0 69 3a 27 	mov	r9,14887
800093da:	ea 19 40 03 	orh	r9,0x4003
800093de:	f0 1f 00 c2 	mcall	800096e4 <__ieee754_asin+0x4f4>
800093e2:	14 98       	mov	r8,r10
800093e4:	16 99       	mov	r9,r11
800093e6:	08 9a       	mov	r10,r4
800093e8:	0a 9b       	mov	r11,r5
800093ea:	f0 1f 00 be 	mcall	800096e0 <__ieee754_asin+0x4f0>
800093ee:	30 08       	mov	r8,0
800093f0:	fc 19 3f f0 	movh	r9,0x3ff0
800093f4:	f0 1f 00 be 	mcall	800096ec <__ieee754_asin+0x4fc>
800093f8:	14 98       	mov	r8,r10
800093fa:	16 99       	mov	r9,r11
800093fc:	04 9a       	mov	r10,r2
800093fe:	06 9b       	mov	r11,r3
80009400:	f0 1f 00 ba 	mcall	800096e8 <__ieee754_asin+0x4f8>
80009404:	14 98       	mov	r8,r10
80009406:	16 99       	mov	r9,r11
80009408:	0e 9a       	mov	r10,r7
8000940a:	0c 9b       	mov	r11,r6
8000940c:	f0 1f 00 b5 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009410:	14 98       	mov	r8,r10
80009412:	16 99       	mov	r9,r11
80009414:	0e 9a       	mov	r10,r7
80009416:	0c 9b       	mov	r11,r6
80009418:	f0 1f 00 b5 	mcall	800096ec <__ieee754_asin+0x4fc>
8000941c:	c2 4b       	rjmp	80009264 <__ieee754_asin+0x74>
8000941e:	0c 9b       	mov	r11,r6
80009420:	0e 9a       	mov	r10,r7
80009422:	f0 1f 00 b5 	mcall	800096f4 <__ieee754_asin+0x504>
80009426:	14 98       	mov	r8,r10
80009428:	16 99       	mov	r9,r11
8000942a:	30 0a       	mov	r10,0
8000942c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009430:	f0 1f 00 ad 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009434:	30 08       	mov	r8,0
80009436:	fc 19 3f e0 	movh	r9,0x3fe0
8000943a:	f0 1f 00 aa 	mcall	800096e0 <__ieee754_asin+0x4f0>
8000943e:	e0 68 f7 09 	mov	r8,63241
80009442:	ea 18 0d fd 	orh	r8,0xdfd
80009446:	16 97       	mov	r7,r11
80009448:	14 96       	mov	r6,r10
8000944a:	e0 69 3d e1 	mov	r9,15841
8000944e:	ea 19 3f 02 	orh	r9,0x3f02
80009452:	f0 1f 00 a4 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009456:	e0 68 b2 88 	mov	r8,45704
8000945a:	ea 18 75 01 	orh	r8,0x7501
8000945e:	e0 69 ef e0 	mov	r9,61408
80009462:	ea 19 3f 49 	orh	r9,0x3f49
80009466:	f0 1f 00 a2 	mcall	800096ec <__ieee754_asin+0x4fc>
8000946a:	14 98       	mov	r8,r10
8000946c:	16 99       	mov	r9,r11
8000946e:	0c 9a       	mov	r10,r6
80009470:	0e 9b       	mov	r11,r7
80009472:	f0 1f 00 9c 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009476:	e0 68 8f 3b 	mov	r8,36667
8000947a:	ea 18 b5 68 	orh	r8,0xb568
8000947e:	e0 69 82 28 	mov	r9,33320
80009482:	ea 19 3f a4 	orh	r9,0x3fa4
80009486:	f0 1f 00 98 	mcall	800096e4 <__ieee754_asin+0x4f4>
8000948a:	14 98       	mov	r8,r10
8000948c:	16 99       	mov	r9,r11
8000948e:	0c 9a       	mov	r10,r6
80009490:	0e 9b       	mov	r11,r7
80009492:	f0 1f 00 94 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009496:	e0 68 44 55 	mov	r8,17493
8000949a:	ea 18 0e 88 	orh	r8,0xe88
8000949e:	e0 69 c1 55 	mov	r9,49493
800094a2:	ea 19 3f c9 	orh	r9,0x3fc9
800094a6:	f0 1f 00 92 	mcall	800096ec <__ieee754_asin+0x4fc>
800094aa:	14 98       	mov	r8,r10
800094ac:	16 99       	mov	r9,r11
800094ae:	0c 9a       	mov	r10,r6
800094b0:	0e 9b       	mov	r11,r7
800094b2:	f0 1f 00 8c 	mcall	800096e0 <__ieee754_asin+0x4f0>
800094b6:	e0 68 6f 7d 	mov	r8,28541
800094ba:	ea 18 03 eb 	orh	r8,0x3eb
800094be:	e0 69 d6 12 	mov	r9,54802
800094c2:	ea 19 3f d4 	orh	r9,0x3fd4
800094c6:	f0 1f 00 88 	mcall	800096e4 <__ieee754_asin+0x4f4>
800094ca:	14 98       	mov	r8,r10
800094cc:	16 99       	mov	r9,r11
800094ce:	0c 9a       	mov	r10,r6
800094d0:	0e 9b       	mov	r11,r7
800094d2:	f0 1f 00 84 	mcall	800096e0 <__ieee754_asin+0x4f0>
800094d6:	e0 68 55 55 	mov	r8,21845
800094da:	ea 18 55 55 	orh	r8,0x5555
800094de:	e0 69 55 55 	mov	r9,21845
800094e2:	ea 19 3f c5 	orh	r9,0x3fc5
800094e6:	f0 1f 00 82 	mcall	800096ec <__ieee754_asin+0x4fc>
800094ea:	14 98       	mov	r8,r10
800094ec:	16 99       	mov	r9,r11
800094ee:	0c 9a       	mov	r10,r6
800094f0:	0e 9b       	mov	r11,r7
800094f2:	f0 1f 00 7c 	mcall	800096e0 <__ieee754_asin+0x4f0>
800094f6:	e0 68 92 82 	mov	r8,37506
800094fa:	ea 18 b1 2e 	orh	r8,0xb12e
800094fe:	e0 69 b8 c5 	mov	r9,47301
80009502:	ea 19 3f b3 	orh	r9,0x3fb3
80009506:	14 90       	mov	r0,r10
80009508:	16 91       	mov	r1,r11
8000950a:	0c 9a       	mov	r10,r6
8000950c:	0e 9b       	mov	r11,r7
8000950e:	f0 1f 00 75 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009512:	e0 68 01 59 	mov	r8,345
80009516:	ea 18 1b 8d 	orh	r8,0x1b8d
8000951a:	e0 69 06 6c 	mov	r9,1644
8000951e:	ea 19 3f e6 	orh	r9,0x3fe6
80009522:	f0 1f 00 71 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009526:	14 98       	mov	r8,r10
80009528:	16 99       	mov	r9,r11
8000952a:	0c 9a       	mov	r10,r6
8000952c:	0e 9b       	mov	r11,r7
8000952e:	f0 1f 00 6d 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009532:	e0 68 8a c8 	mov	r8,35528
80009536:	ea 18 9c 59 	orh	r8,0x9c59
8000953a:	e0 69 2a e5 	mov	r9,10981
8000953e:	ea 19 40 00 	orh	r9,0x4000
80009542:	f0 1f 00 6b 	mcall	800096ec <__ieee754_asin+0x4fc>
80009546:	14 98       	mov	r8,r10
80009548:	16 99       	mov	r9,r11
8000954a:	0c 9a       	mov	r10,r6
8000954c:	0e 9b       	mov	r11,r7
8000954e:	f0 1f 00 65 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009552:	e0 68 2d 4b 	mov	r8,11595
80009556:	ea 18 1c 8a 	orh	r8,0x1c8a
8000955a:	e0 69 3a 27 	mov	r9,14887
8000955e:	ea 19 40 03 	orh	r9,0x4003
80009562:	f0 1f 00 61 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009566:	14 98       	mov	r8,r10
80009568:	16 99       	mov	r9,r11
8000956a:	0c 9a       	mov	r10,r6
8000956c:	0e 9b       	mov	r11,r7
8000956e:	f0 1f 00 5d 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009572:	30 08       	mov	r8,0
80009574:	fc 19 3f f0 	movh	r9,0x3ff0
80009578:	f0 1f 00 5d 	mcall	800096ec <__ieee754_asin+0x4fc>
8000957c:	fa eb 00 04 	st.d	sp[4],r10
80009580:	0c 9a       	mov	r10,r6
80009582:	0e 9b       	mov	r11,r7
80009584:	f0 1f 00 5d 	mcall	800096f8 <__ieee754_asin+0x508>
80009588:	e0 68 33 32 	mov	r8,13106
8000958c:	ea 18 3f ef 	orh	r8,0x3fef
80009590:	14 92       	mov	r2,r10
80009592:	16 93       	mov	r3,r11
80009594:	10 35       	cp.w	r5,r8
80009596:	e0 8a 00 2d 	brle	800095f0 <__ieee754_asin+0x400>
8000959a:	fa e8 00 04 	ld.d	r8,sp[4]
8000959e:	00 9a       	mov	r10,r0
800095a0:	02 9b       	mov	r11,r1
800095a2:	f0 1f 00 52 	mcall	800096e8 <__ieee754_asin+0x4f8>
800095a6:	14 98       	mov	r8,r10
800095a8:	16 99       	mov	r9,r11
800095aa:	04 9a       	mov	r10,r2
800095ac:	06 9b       	mov	r11,r3
800095ae:	f0 1f 00 4d 	mcall	800096e0 <__ieee754_asin+0x4f0>
800095b2:	14 98       	mov	r8,r10
800095b4:	16 99       	mov	r9,r11
800095b6:	04 9a       	mov	r10,r2
800095b8:	06 9b       	mov	r11,r3
800095ba:	f0 1f 00 4d 	mcall	800096ec <__ieee754_asin+0x4fc>
800095be:	14 98       	mov	r8,r10
800095c0:	16 99       	mov	r9,r11
800095c2:	f0 1f 00 4b 	mcall	800096ec <__ieee754_asin+0x4fc>
800095c6:	e0 68 5c 07 	mov	r8,23559
800095ca:	ea 18 33 14 	orh	r8,0x3314
800095ce:	e0 69 a6 26 	mov	r9,42534
800095d2:	ea 19 3c 91 	orh	r9,0x3c91
800095d6:	f0 1f 00 44 	mcall	800096e4 <__ieee754_asin+0x4f4>
800095da:	14 98       	mov	r8,r10
800095dc:	16 99       	mov	r9,r11
800095de:	e0 6a 2d 18 	mov	r10,11544
800095e2:	ea 1a 54 44 	orh	r10,0x5444
800095e6:	e0 6b 21 fb 	mov	r11,8699
800095ea:	ea 1b 3f f9 	orh	r11,0x3ff9
800095ee:	c6 98       	rjmp	800096c0 <__ieee754_asin+0x4d0>
800095f0:	14 98       	mov	r8,r10
800095f2:	06 99       	mov	r9,r3
800095f4:	f0 1f 00 3e 	mcall	800096ec <__ieee754_asin+0x4fc>
800095f8:	fa e8 00 04 	ld.d	r8,sp[4]
800095fc:	fa eb 00 0c 	st.d	sp[12],r10
80009600:	00 9a       	mov	r10,r0
80009602:	02 9b       	mov	r11,r1
80009604:	f0 1f 00 39 	mcall	800096e8 <__ieee754_asin+0x4f8>
80009608:	14 98       	mov	r8,r10
8000960a:	16 99       	mov	r9,r11
8000960c:	fa ea 00 0c 	ld.d	r10,sp[12]
80009610:	f0 1f 00 34 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009614:	30 04       	mov	r4,0
80009616:	14 90       	mov	r0,r10
80009618:	16 91       	mov	r1,r11
8000961a:	08 98       	mov	r8,r4
8000961c:	06 99       	mov	r9,r3
8000961e:	08 9a       	mov	r10,r4
80009620:	06 9b       	mov	r11,r3
80009622:	f0 1f 00 30 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009626:	14 98       	mov	r8,r10
80009628:	16 99       	mov	r9,r11
8000962a:	0c 9a       	mov	r10,r6
8000962c:	0e 9b       	mov	r11,r7
8000962e:	f0 1f 00 2e 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009632:	08 98       	mov	r8,r4
80009634:	16 97       	mov	r7,r11
80009636:	14 96       	mov	r6,r10
80009638:	06 99       	mov	r9,r3
8000963a:	04 9a       	mov	r10,r2
8000963c:	06 9b       	mov	r11,r3
8000963e:	f0 1f 00 2c 	mcall	800096ec <__ieee754_asin+0x4fc>
80009642:	14 98       	mov	r8,r10
80009644:	16 99       	mov	r9,r11
80009646:	0c 9a       	mov	r10,r6
80009648:	0e 9b       	mov	r11,r7
8000964a:	f0 1f 00 28 	mcall	800096e8 <__ieee754_asin+0x4f8>
8000964e:	30 08       	mov	r8,0
80009650:	fc 19 c0 00 	movh	r9,0xc000
80009654:	f0 1f 00 23 	mcall	800096e0 <__ieee754_asin+0x4f0>
80009658:	e0 68 5c 07 	mov	r8,23559
8000965c:	ea 18 33 14 	orh	r8,0x3314
80009660:	e0 69 a6 26 	mov	r9,42534
80009664:	ea 19 3c 91 	orh	r9,0x3c91
80009668:	f0 1f 00 21 	mcall	800096ec <__ieee754_asin+0x4fc>
8000966c:	14 98       	mov	r8,r10
8000966e:	16 99       	mov	r9,r11
80009670:	00 9a       	mov	r10,r0
80009672:	02 9b       	mov	r11,r1
80009674:	f0 1f 00 1c 	mcall	800096e4 <__ieee754_asin+0x4f4>
80009678:	30 08       	mov	r8,0
8000967a:	16 97       	mov	r7,r11
8000967c:	14 96       	mov	r6,r10
8000967e:	fc 19 c0 00 	movh	r9,0xc000
80009682:	08 9a       	mov	r10,r4
80009684:	06 9b       	mov	r11,r3
80009686:	f0 1f 00 17 	mcall	800096e0 <__ieee754_asin+0x4f0>
8000968a:	e0 68 2d 18 	mov	r8,11544
8000968e:	ea 18 54 44 	orh	r8,0x5444
80009692:	e0 69 21 fb 	mov	r9,8699
80009696:	ea 19 3f e9 	orh	r9,0x3fe9
8000969a:	f0 1f 00 15 	mcall	800096ec <__ieee754_asin+0x4fc>
8000969e:	14 98       	mov	r8,r10
800096a0:	16 99       	mov	r9,r11
800096a2:	0c 9a       	mov	r10,r6
800096a4:	0e 9b       	mov	r11,r7
800096a6:	f0 1f 00 10 	mcall	800096e4 <__ieee754_asin+0x4f4>
800096aa:	06 95       	mov	r5,r3
800096ac:	14 98       	mov	r8,r10
800096ae:	16 99       	mov	r9,r11
800096b0:	e0 6a 2d 18 	mov	r10,11544
800096b4:	ea 1a 54 44 	orh	r10,0x5444
800096b8:	e0 6b 21 fb 	mov	r11,8699
800096bc:	ea 1b 3f e9 	orh	r11,0x3fe9
800096c0:	f0 1f 00 09 	mcall	800096e4 <__ieee754_asin+0x4f4>
800096c4:	40 08       	lddsp	r8,sp[0x0]
800096c6:	16 96       	mov	r6,r11
800096c8:	14 97       	mov	r7,r10
800096ca:	ee 16 80 00 	eorh	r6,0x8000
800096ce:	58 08       	cp.w	r8,0
800096d0:	e0 8a 00 03 	brle	800096d6 <__ieee754_asin+0x4e6>
800096d4:	16 96       	mov	r6,r11
800096d6:	0c 9b       	mov	r11,r6
800096d8:	0e 9a       	mov	r10,r7
800096da:	2f bd       	sub	sp,-20
800096dc:	d8 32       	popm	r0-r7,pc
800096de:	00 00       	add	r0,r0
800096e0:	80 00       	ld.sh	r0,r0[0x0]
800096e2:	9e 70       	ld.sh	r0,pc[0xe]
800096e4:	80 00       	ld.sh	r0,r0[0x0]
800096e6:	a0 48       	st.h	r0[0x8],r8
800096e8:	80 00       	ld.sh	r0,r0[0x0]
800096ea:	a4 fc       	st.b	r2[0x7],r12
800096ec:	80 00       	ld.sh	r0,r0[0x0]
800096ee:	a1 e4       	*unknown*
800096f0:	80 00       	ld.sh	r0,r0[0x0]
800096f2:	a4 94       	st.b	r2[0x1],r4
800096f4:	80 00       	ld.sh	r0,r0[0x0]
800096f6:	9e 40       	ld.sh	r0,pc[0x8]
800096f8:	80 00       	ld.sh	r0,r0[0x0]
800096fa:	99 3c       	st.w	r12[0xc],r12

800096fc <__ieee754_atan2>:
800096fc:	d4 31       	pushm	r0-r7,lr
800096fe:	20 2d       	sub	sp,8
80009700:	50 0b       	stdsp	sp[0x0],r11
80009702:	10 96       	mov	r6,r8
80009704:	10 92       	mov	r2,r8
80009706:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8000970a:	5c 38       	neg	r8
8000970c:	14 94       	mov	r4,r10
8000970e:	0c 48       	or	r8,r6
80009710:	16 95       	mov	r5,r11
80009712:	12 93       	mov	r3,r9
80009714:	14 90       	mov	r0,r10
80009716:	16 91       	mov	r1,r11
80009718:	12 9c       	mov	r12,r9
8000971a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8000971e:	fc 17 7f f0 	movh	r7,0x7ff0
80009722:	0e 38       	cp.w	r8,r7
80009724:	e0 8b 00 0e 	brhi	80009740 <__ieee754_atan2+0x44>
80009728:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8000972c:	f4 07 11 00 	rsub	r7,r10,0
80009730:	fc 10 7f f0 	movh	r0,0x7ff0
80009734:	14 47       	or	r7,r10
80009736:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8000973a:	00 37       	cp.w	r7,r0
8000973c:	e0 88 00 09 	brls	8000974e <__ieee754_atan2+0x52>
80009740:	04 98       	mov	r8,r2
80009742:	06 99       	mov	r9,r3
80009744:	08 9a       	mov	r10,r4
80009746:	0a 9b       	mov	r11,r5
80009748:	f0 1f 00 78 	mcall	80009928 <__ieee754_atan2+0x22c>
8000974c:	ce 88       	rjmp	8000991c <__ieee754_atan2+0x220>
8000974e:	fc 17 c0 10 	movh	r7,0xc010
80009752:	f8 07 00 07 	add	r7,r12,r7
80009756:	0c 47       	or	r7,r6
80009758:	c0 41       	brne	80009760 <__ieee754_atan2+0x64>
8000975a:	f0 1f 00 75 	mcall	8000992c <__ieee754_atan2+0x230>
8000975e:	cd f8       	rjmp	8000991c <__ieee754_atan2+0x220>
80009760:	f8 07 14 1e 	asr	r7,r12,0x1e
80009764:	f1 ea 10 09 	or	r9,r8,r10
80009768:	e2 17 00 02 	andl	r7,0x2,COH
8000976c:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
80009770:	58 09       	cp.w	r9,0
80009772:	c0 71       	brne	80009780 <__ieee754_atan2+0x84>
80009774:	58 27       	cp.w	r7,2
80009776:	c5 10       	breq	80009818 <__ieee754_atan2+0x11c>
80009778:	e0 8a 00 d4 	brle	80009920 <__ieee754_atan2+0x224>
8000977c:	58 37       	cp.w	r7,3
8000977e:	c5 60       	breq	8000982a <__ieee754_atan2+0x12e>
80009780:	fd e6 10 06 	or	r6,lr,r6
80009784:	c6 00       	breq	80009844 <__ieee754_atan2+0x148>
80009786:	fc 19 7f f0 	movh	r9,0x7ff0
8000978a:	12 3e       	cp.w	lr,r9
8000978c:	c5 81       	brne	8000983c <__ieee754_atan2+0x140>
8000978e:	12 38       	cp.w	r8,r9
80009790:	c3 11       	brne	800097f2 <__ieee754_atan2+0xf6>
80009792:	58 17       	cp.w	r7,1
80009794:	c0 b0       	breq	800097aa <__ieee754_atan2+0xae>
80009796:	e0 89 00 05 	brgt	800097a0 <__ieee754_atan2+0xa4>
8000979a:	58 07       	cp.w	r7,0
8000979c:	c1 00       	breq	800097bc <__ieee754_atan2+0xc0>
8000979e:	c5 38       	rjmp	80009844 <__ieee754_atan2+0x148>
800097a0:	58 27       	cp.w	r7,2
800097a2:	c1 60       	breq	800097ce <__ieee754_atan2+0xd2>
800097a4:	58 37       	cp.w	r7,3
800097a6:	c4 f1       	brne	80009844 <__ieee754_atan2+0x148>
800097a8:	c1 c8       	rjmp	800097e0 <__ieee754_atan2+0xe4>
800097aa:	e0 64 2d 18 	mov	r4,11544
800097ae:	ea 14 54 44 	orh	r4,0x5444
800097b2:	e0 65 21 fb 	mov	r5,8699
800097b6:	ea 15 bf e9 	orh	r5,0xbfe9
800097ba:	cb 38       	rjmp	80009920 <__ieee754_atan2+0x224>
800097bc:	e0 64 2d 18 	mov	r4,11544
800097c0:	ea 14 54 44 	orh	r4,0x5444
800097c4:	e0 65 21 fb 	mov	r5,8699
800097c8:	ea 15 3f e9 	orh	r5,0x3fe9
800097cc:	ca a8       	rjmp	80009920 <__ieee754_atan2+0x224>
800097ce:	e0 64 21 d2 	mov	r4,8658
800097d2:	ea 14 7f 33 	orh	r4,0x7f33
800097d6:	e0 65 d9 7c 	mov	r5,55676
800097da:	ea 15 40 02 	orh	r5,0x4002
800097de:	ca 18       	rjmp	80009920 <__ieee754_atan2+0x224>
800097e0:	e0 64 21 d2 	mov	r4,8658
800097e4:	ea 14 7f 33 	orh	r4,0x7f33
800097e8:	e0 65 d9 7c 	mov	r5,55676
800097ec:	ea 15 c0 02 	orh	r5,0xc002
800097f0:	c9 88       	rjmp	80009920 <__ieee754_atan2+0x224>
800097f2:	58 17       	cp.w	r7,1
800097f4:	c0 b0       	breq	8000980a <__ieee754_atan2+0x10e>
800097f6:	e0 89 00 05 	brgt	80009800 <__ieee754_atan2+0x104>
800097fa:	58 07       	cp.w	r7,0
800097fc:	c0 b0       	breq	80009812 <__ieee754_atan2+0x116>
800097fe:	c1 f8       	rjmp	8000983c <__ieee754_atan2+0x140>
80009800:	58 27       	cp.w	r7,2
80009802:	c0 b0       	breq	80009818 <__ieee754_atan2+0x11c>
80009804:	58 37       	cp.w	r7,3
80009806:	c1 b1       	brne	8000983c <__ieee754_atan2+0x140>
80009808:	c1 18       	rjmp	8000982a <__ieee754_atan2+0x12e>
8000980a:	30 04       	mov	r4,0
8000980c:	fc 15 80 00 	movh	r5,0x8000
80009810:	c8 88       	rjmp	80009920 <__ieee754_atan2+0x224>
80009812:	30 04       	mov	r4,0
80009814:	30 05       	mov	r5,0
80009816:	c8 58       	rjmp	80009920 <__ieee754_atan2+0x224>
80009818:	e0 64 2d 18 	mov	r4,11544
8000981c:	ea 14 54 44 	orh	r4,0x5444
80009820:	e0 65 21 fb 	mov	r5,8699
80009824:	ea 15 40 09 	orh	r5,0x4009
80009828:	c7 c8       	rjmp	80009920 <__ieee754_atan2+0x224>
8000982a:	e0 64 2d 18 	mov	r4,11544
8000982e:	ea 14 54 44 	orh	r4,0x5444
80009832:	e0 65 21 fb 	mov	r5,8699
80009836:	ea 15 c0 09 	orh	r5,0xc009
8000983a:	c7 38       	rjmp	80009920 <__ieee754_atan2+0x224>
8000983c:	fc 10 7f f0 	movh	r0,0x7ff0
80009840:	00 38       	cp.w	r8,r0
80009842:	c1 51       	brne	8000986c <__ieee754_atan2+0x170>
80009844:	58 01       	cp.w	r1,0
80009846:	c0 a5       	brlt	8000985a <__ieee754_atan2+0x15e>
80009848:	e0 64 2d 18 	mov	r4,11544
8000984c:	ea 14 54 44 	orh	r4,0x5444
80009850:	e0 65 21 fb 	mov	r5,8699
80009854:	ea 15 3f f9 	orh	r5,0x3ff9
80009858:	c6 48       	rjmp	80009920 <__ieee754_atan2+0x224>
8000985a:	e0 64 2d 18 	mov	r4,11544
8000985e:	ea 14 54 44 	orh	r4,0x5444
80009862:	e0 65 21 fb 	mov	r5,8699
80009866:	ea 15 bf f9 	orh	r5,0xbff9
8000986a:	c5 b8       	rjmp	80009920 <__ieee754_atan2+0x224>
8000986c:	1c 18       	sub	r8,lr
8000986e:	b5 48       	asr	r8,0x14
80009870:	e0 48 00 3c 	cp.w	r8,60
80009874:	e0 8a 00 0b 	brle	8000988a <__ieee754_atan2+0x18e>
80009878:	e0 6a 2d 18 	mov	r10,11544
8000987c:	ea 1a 54 44 	orh	r10,0x5444
80009880:	e0 6b 21 fb 	mov	r11,8699
80009884:	ea 1b 3f f9 	orh	r11,0x3ff9
80009888:	c1 48       	rjmp	800098b0 <__ieee754_atan2+0x1b4>
8000988a:	fe 58 ff c4 	cp.w	r8,-60
8000988e:	5f 58       	srlt	r8
80009890:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
80009894:	c0 40       	breq	8000989c <__ieee754_atan2+0x1a0>
80009896:	30 0a       	mov	r10,0
80009898:	30 0b       	mov	r11,0
8000989a:	c0 b8       	rjmp	800098b0 <__ieee754_atan2+0x1b4>
8000989c:	04 98       	mov	r8,r2
8000989e:	06 99       	mov	r9,r3
800098a0:	08 9a       	mov	r10,r4
800098a2:	0a 9b       	mov	r11,r5
800098a4:	f0 1f 00 23 	mcall	80009930 <__ieee754_atan2+0x234>
800098a8:	f0 1f 00 23 	mcall	80009934 <__ieee754_atan2+0x238>
800098ac:	f0 1f 00 20 	mcall	8000992c <__ieee754_atan2+0x230>
800098b0:	58 17       	cp.w	r7,1
800098b2:	c0 60       	breq	800098be <__ieee754_atan2+0x1c2>
800098b4:	58 27       	cp.w	r7,2
800098b6:	c0 a0       	breq	800098ca <__ieee754_atan2+0x1ce>
800098b8:	58 07       	cp.w	r7,0
800098ba:	c1 d1       	brne	800098f4 <__ieee754_atan2+0x1f8>
800098bc:	c3 08       	rjmp	8000991c <__ieee754_atan2+0x220>
800098be:	fc 18 80 00 	movh	r8,0x8000
800098c2:	14 94       	mov	r4,r10
800098c4:	f6 08 00 05 	add	r5,r11,r8
800098c8:	c2 c8       	rjmp	80009920 <__ieee754_atan2+0x224>
800098ca:	e0 68 5c 07 	mov	r8,23559
800098ce:	ea 18 33 14 	orh	r8,0x3314
800098d2:	e0 69 a6 26 	mov	r9,42534
800098d6:	ea 19 3c a1 	orh	r9,0x3ca1
800098da:	f0 1f 00 18 	mcall	80009938 <__ieee754_atan2+0x23c>
800098de:	14 98       	mov	r8,r10
800098e0:	16 99       	mov	r9,r11
800098e2:	e0 6a 2d 18 	mov	r10,11544
800098e6:	ea 1a 54 44 	orh	r10,0x5444
800098ea:	e0 6b 21 fb 	mov	r11,8699
800098ee:	ea 1b 40 09 	orh	r11,0x4009
800098f2:	c1 38       	rjmp	80009918 <__ieee754_atan2+0x21c>
800098f4:	e0 68 5c 07 	mov	r8,23559
800098f8:	ea 18 33 14 	orh	r8,0x3314
800098fc:	e0 69 a6 26 	mov	r9,42534
80009900:	ea 19 3c a1 	orh	r9,0x3ca1
80009904:	f0 1f 00 0d 	mcall	80009938 <__ieee754_atan2+0x23c>
80009908:	e0 68 2d 18 	mov	r8,11544
8000990c:	ea 18 54 44 	orh	r8,0x5444
80009910:	e0 69 21 fb 	mov	r9,8699
80009914:	ea 19 40 09 	orh	r9,0x4009
80009918:	f0 1f 00 08 	mcall	80009938 <__ieee754_atan2+0x23c>
8000991c:	14 94       	mov	r4,r10
8000991e:	16 95       	mov	r5,r11
80009920:	08 9a       	mov	r10,r4
80009922:	0a 9b       	mov	r11,r5
80009924:	2f ed       	sub	sp,-8
80009926:	d8 32       	popm	r0-r7,pc
80009928:	80 00       	ld.sh	r0,r0[0x0]
8000992a:	a1 e4       	*unknown*
8000992c:	80 00       	ld.sh	r0,r0[0x0]
8000992e:	9a d8       	ld.uh	r8,sp[0xa]
80009930:	80 00       	ld.sh	r0,r0[0x0]
80009932:	a4 fc       	st.b	r2[0x7],r12
80009934:	80 00       	ld.sh	r0,r0[0x0]
80009936:	9e 40       	ld.sh	r0,pc[0x8]
80009938:	80 00       	ld.sh	r0,r0[0x0]
8000993a:	a0 48       	st.h	r0[0x8],r8

8000993c <__ieee754_sqrt>:
8000993c:	d4 31       	pushm	r0-r7,lr
8000993e:	fc 1e 7f f0 	movh	lr,0x7ff0
80009942:	16 9c       	mov	r12,r11
80009944:	14 96       	mov	r6,r10
80009946:	16 97       	mov	r7,r11
80009948:	14 94       	mov	r4,r10
8000994a:	16 95       	mov	r5,r11
8000994c:	16 99       	mov	r9,r11
8000994e:	14 98       	mov	r8,r10
80009950:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
80009954:	1c 3c       	cp.w	r12,lr
80009956:	c0 c1       	brne	8000996e <__ieee754_sqrt+0x32>
80009958:	14 98       	mov	r8,r10
8000995a:	16 99       	mov	r9,r11
8000995c:	f0 1f 00 5b 	mcall	80009ac8 <__ieee754_sqrt+0x18c>
80009960:	14 98       	mov	r8,r10
80009962:	16 99       	mov	r9,r11
80009964:	0c 9a       	mov	r10,r6
80009966:	0e 9b       	mov	r11,r7
80009968:	f0 1f 00 59 	mcall	80009acc <__ieee754_sqrt+0x190>
8000996c:	c1 38       	rjmp	80009992 <__ieee754_sqrt+0x56>
8000996e:	58 0b       	cp.w	r11,0
80009970:	e0 89 00 14 	brgt	80009998 <__ieee754_sqrt+0x5c>
80009974:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80009978:	14 4c       	or	r12,r10
8000997a:	e0 80 00 a3 	breq	80009ac0 <__ieee754_sqrt+0x184>
8000997e:	58 0b       	cp.w	r11,0
80009980:	c0 c0       	breq	80009998 <__ieee754_sqrt+0x5c>
80009982:	14 98       	mov	r8,r10
80009984:	16 99       	mov	r9,r11
80009986:	f0 1f 00 53 	mcall	80009ad0 <__ieee754_sqrt+0x194>
8000998a:	14 98       	mov	r8,r10
8000998c:	16 99       	mov	r9,r11
8000998e:	f0 1f 00 52 	mcall	80009ad4 <__ieee754_sqrt+0x198>
80009992:	14 96       	mov	r6,r10
80009994:	16 97       	mov	r7,r11
80009996:	c9 58       	rjmp	80009ac0 <__ieee754_sqrt+0x184>
80009998:	f2 0a 14 14 	asr	r10,r9,0x14
8000999c:	c0 60       	breq	800099a8 <__ieee754_sqrt+0x6c>
8000999e:	c1 88       	rjmp	800099ce <__ieee754_sqrt+0x92>
800099a0:	f0 09 16 0b 	lsr	r9,r8,0xb
800099a4:	21 5a       	sub	r10,21
800099a6:	b5 78       	lsl	r8,0x15
800099a8:	58 09       	cp.w	r9,0
800099aa:	cf b0       	breq	800099a0 <__ieee754_sqrt+0x64>
800099ac:	30 0b       	mov	r11,0
800099ae:	c0 38       	rjmp	800099b4 <__ieee754_sqrt+0x78>
800099b0:	a1 79       	lsl	r9,0x1
800099b2:	2f fb       	sub	r11,-1
800099b4:	ed b9 00 14 	bld	r9,0x14
800099b8:	cf c1       	brne	800099b0 <__ieee754_sqrt+0x74>
800099ba:	2f fa       	sub	r10,-1
800099bc:	f6 0c 11 20 	rsub	r12,r11,32
800099c0:	16 1a       	sub	r10,r11
800099c2:	f0 0c 0a 4c 	lsr	r12,r8,r12
800099c6:	f0 0b 09 48 	lsl	r8,r8,r11
800099ca:	f9 e9 10 09 	or	r9,r12,r9
800099ce:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800099d2:	f4 c6 03 ff 	sub	r6,r10,1023
800099d6:	b5 a9       	sbr	r9,0x14
800099d8:	ed b6 00 00 	bld	r6,0x0
800099dc:	c0 61       	brne	800099e8 <__ieee754_sqrt+0xac>
800099de:	f0 0a 16 1f 	lsr	r10,r8,0x1f
800099e2:	a1 78       	lsl	r8,0x1
800099e4:	f4 09 00 19 	add	r9,r10,r9<<0x1
800099e8:	30 07       	mov	r7,0
800099ea:	f0 0a 15 01 	lsl	r10,r8,0x1
800099ee:	0e 9c       	mov	r12,r7
800099f0:	bf 98       	lsr	r8,0x1f
800099f2:	fc 1b 00 20 	movh	r11,0x20
800099f6:	f0 09 00 18 	add	r8,r8,r9<<0x1
800099fa:	0e 99       	mov	r9,r7
800099fc:	f2 0b 00 0e 	add	lr,r9,r11
80009a00:	2f f7       	sub	r7,-1
80009a02:	10 3e       	cp.w	lr,r8
80009a04:	f1 de ea 18 	suble	r8,r8,lr
80009a08:	f9 db ea 0c 	addle	r12,r12,r11
80009a0c:	fd db ea 09 	addle	r9,lr,r11
80009a10:	f4 0e 16 1f 	lsr	lr,r10,0x1f
80009a14:	a1 9b       	lsr	r11,0x1
80009a16:	fc 08 00 18 	add	r8,lr,r8<<0x1
80009a1a:	a1 7a       	lsl	r10,0x1
80009a1c:	59 67       	cp.w	r7,22
80009a1e:	ce f1       	brne	800099fc <__ieee754_sqrt+0xc0>
80009a20:	30 07       	mov	r7,0
80009a22:	fc 15 80 00 	movh	r5,0x8000
80009a26:	0e 9b       	mov	r11,r7
80009a28:	0e 94       	mov	r4,r7
80009a2a:	0e 92       	mov	r2,r7
80009a2c:	ea 04 00 0e 	add	lr,r5,r4
80009a30:	10 39       	cp.w	r9,r8
80009a32:	c0 95       	brlt	80009a44 <__ieee754_sqrt+0x108>
80009a34:	5f 03       	sreq	r3
80009a36:	14 3e       	cp.w	lr,r10
80009a38:	5f 81       	srls	r1
80009a3a:	e3 e3 00 03 	and	r3,r1,r3
80009a3e:	e4 03 18 00 	cp.b	r3,r2
80009a42:	c1 70       	breq	80009a70 <__ieee754_sqrt+0x134>
80009a44:	1c 93       	mov	r3,lr
80009a46:	fc 05 00 04 	add	r4,lr,r5
80009a4a:	e6 13 80 00 	andh	r3,0x8000,COH
80009a4e:	fc 11 80 00 	movh	r1,0x8000
80009a52:	02 33       	cp.w	r3,r1
80009a54:	c0 61       	brne	80009a60 <__ieee754_sqrt+0x124>
80009a56:	58 04       	cp.w	r4,0
80009a58:	c0 45       	brlt	80009a60 <__ieee754_sqrt+0x124>
80009a5a:	f2 c3 ff ff 	sub	r3,r9,-1
80009a5e:	c0 28       	rjmp	80009a62 <__ieee754_sqrt+0x126>
80009a60:	12 93       	mov	r3,r9
80009a62:	12 18       	sub	r8,r9
80009a64:	0a 0b       	add	r11,r5
80009a66:	1c 3a       	cp.w	r10,lr
80009a68:	f7 b8 03 01 	sublo	r8,1
80009a6c:	06 99       	mov	r9,r3
80009a6e:	1c 1a       	sub	r10,lr
80009a70:	f4 0e 16 1f 	lsr	lr,r10,0x1f
80009a74:	a1 95       	lsr	r5,0x1
80009a76:	2f f7       	sub	r7,-1
80009a78:	fc 08 00 18 	add	r8,lr,r8<<0x1
80009a7c:	a1 7a       	lsl	r10,0x1
80009a7e:	e0 47 00 20 	cp.w	r7,32
80009a82:	cd 51       	brne	80009a2c <__ieee754_sqrt+0xf0>
80009a84:	14 48       	or	r8,r10
80009a86:	c0 a0       	breq	80009a9a <__ieee754_sqrt+0x15e>
80009a88:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
80009a8c:	5b fb       	cp.w	r11,-1
80009a8e:	f7 bc 00 ff 	subeq	r12,-1
80009a92:	f9 bb 00 00 	moveq	r11,0
80009a96:	f1 db e1 0b 	addne	r11,r8,r11
80009a9a:	a1 9b       	lsr	r11,0x1
80009a9c:	16 99       	mov	r9,r11
80009a9e:	bf b9       	sbr	r9,0x1f
80009aa0:	ec 0a 14 01 	asr	r10,r6,0x1
80009aa4:	f8 08 14 01 	asr	r8,r12,0x1
80009aa8:	b5 6a       	lsl	r10,0x14
80009aaa:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80009aae:	f2 0b 17 10 	movne	r11,r9
80009ab2:	fc 19 3f e0 	movh	r9,0x3fe0
80009ab6:	16 96       	mov	r6,r11
80009ab8:	12 0a       	add	r10,r9
80009aba:	f4 08 00 08 	add	r8,r10,r8
80009abe:	10 97       	mov	r7,r8
80009ac0:	0c 9a       	mov	r10,r6
80009ac2:	0e 9b       	mov	r11,r7
80009ac4:	d8 32       	popm	r0-r7,pc
80009ac6:	00 00       	add	r0,r0
80009ac8:	80 00       	ld.sh	r0,r0[0x0]
80009aca:	9e 70       	ld.sh	r0,pc[0xe]
80009acc:	80 00       	ld.sh	r0,r0[0x0]
80009ace:	a1 e4       	*unknown*
80009ad0:	80 00       	ld.sh	r0,r0[0x0]
80009ad2:	a0 48       	st.h	r0[0x8],r8
80009ad4:	80 00       	ld.sh	r0,r0[0x0]
80009ad6:	a4 fc       	st.b	r2[0x7],r12

80009ad8 <atan>:
80009ad8:	d4 31       	pushm	r0-r7,lr
80009ada:	20 1d       	sub	sp,4
80009adc:	50 0b       	stdsp	sp[0x0],r11
80009ade:	16 96       	mov	r6,r11
80009ae0:	14 97       	mov	r7,r10
80009ae2:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
80009ae6:	e0 68 ff ff 	mov	r8,65535
80009aea:	ea 18 44 0f 	orh	r8,0x440f
80009aee:	10 33       	cp.w	r3,r8
80009af0:	e0 8a 00 24 	brle	80009b38 <atan+0x60>
80009af4:	fc 1c 7f f0 	movh	r12,0x7ff0
80009af8:	18 33       	cp.w	r3,r12
80009afa:	e0 89 00 08 	brgt	80009b0a <atan+0x32>
80009afe:	5f 0c       	sreq	r12
80009b00:	58 0a       	cp.w	r10,0
80009b02:	5f 18       	srne	r8
80009b04:	f9 e8 00 08 	and	r8,r12,r8
80009b08:	c0 80       	breq	80009b18 <atan+0x40>
80009b0a:	0c 9b       	mov	r11,r6
80009b0c:	0e 9a       	mov	r10,r7
80009b0e:	0c 99       	mov	r9,r6
80009b10:	0e 98       	mov	r8,r7
80009b12:	f0 1f 00 c4 	mcall	80009e20 <atan+0x348>
80009b16:	c5 c9       	rjmp	80009dce <atan+0x2f6>
80009b18:	e0 68 21 fb 	mov	r8,8699
80009b1c:	ea 18 bf f9 	orh	r8,0xbff9
80009b20:	e0 66 21 fb 	mov	r6,8699
80009b24:	ea 16 3f f9 	orh	r6,0x3ff9
80009b28:	e0 67 2d 18 	mov	r7,11544
80009b2c:	ea 17 54 44 	orh	r7,0x5444
80009b30:	58 0b       	cp.w	r11,0
80009b32:	f0 06 17 a0 	movle	r6,r8
80009b36:	c7 19       	rjmp	80009e18 <atan+0x340>
80009b38:	e0 68 ff ff 	mov	r8,65535
80009b3c:	ea 18 3f db 	orh	r8,0x3fdb
80009b40:	10 33       	cp.w	r3,r8
80009b42:	e0 89 00 1d 	brgt	80009b7c <atan+0xa4>
80009b46:	e0 6c ff ff 	mov	r12,65535
80009b4a:	ea 1c 3e 1f 	orh	r12,0x3e1f
80009b4e:	18 33       	cp.w	r3,r12
80009b50:	e0 89 00 74 	brgt	80009c38 <atan+0x160>
80009b54:	e0 68 75 9c 	mov	r8,30108
80009b58:	ea 18 88 00 	orh	r8,0x8800
80009b5c:	e0 69 e4 3c 	mov	r9,58428
80009b60:	ea 19 7e 37 	orh	r9,0x7e37
80009b64:	0c 9b       	mov	r11,r6
80009b66:	f0 1f 00 af 	mcall	80009e20 <atan+0x348>
80009b6a:	14 98       	mov	r8,r10
80009b6c:	16 99       	mov	r9,r11
80009b6e:	30 0a       	mov	r10,0
80009b70:	fc 1b 3f f0 	movh	r11,0x3ff0
80009b74:	f0 1f 00 ac 	mcall	80009e24 <atan+0x34c>
80009b78:	c6 00       	breq	80009c38 <atan+0x160>
80009b7a:	c4 f9       	rjmp	80009e18 <atan+0x340>
80009b7c:	0c 9b       	mov	r11,r6
80009b7e:	f0 1f 00 ab 	mcall	80009e28 <atan+0x350>
80009b82:	e0 68 ff ff 	mov	r8,65535
80009b86:	ea 18 3f f2 	orh	r8,0x3ff2
80009b8a:	14 94       	mov	r4,r10
80009b8c:	16 95       	mov	r5,r11
80009b8e:	10 33       	cp.w	r3,r8
80009b90:	e0 89 00 33 	brgt	80009bf6 <atan+0x11e>
80009b94:	e0 6c ff ff 	mov	r12,65535
80009b98:	ea 1c 3f e5 	orh	r12,0x3fe5
80009b9c:	18 33       	cp.w	r3,r12
80009b9e:	e0 89 00 14 	brgt	80009bc6 <atan+0xee>
80009ba2:	0a 99       	mov	r9,r5
80009ba4:	14 98       	mov	r8,r10
80009ba6:	f0 1f 00 9f 	mcall	80009e20 <atan+0x348>
80009baa:	30 08       	mov	r8,0
80009bac:	fc 19 3f f0 	movh	r9,0x3ff0
80009bb0:	f0 1f 00 9f 	mcall	80009e2c <atan+0x354>
80009bb4:	30 08       	mov	r8,0
80009bb6:	14 96       	mov	r6,r10
80009bb8:	16 97       	mov	r7,r11
80009bba:	08 9a       	mov	r10,r4
80009bbc:	0a 9b       	mov	r11,r5
80009bbe:	fc 19 40 00 	movh	r9,0x4000
80009bc2:	30 05       	mov	r5,0
80009bc4:	c0 e8       	rjmp	80009be0 <atan+0x108>
80009bc6:	30 08       	mov	r8,0
80009bc8:	fc 19 3f f0 	movh	r9,0x3ff0
80009bcc:	f0 1f 00 98 	mcall	80009e2c <atan+0x354>
80009bd0:	30 08       	mov	r8,0
80009bd2:	14 96       	mov	r6,r10
80009bd4:	16 97       	mov	r7,r11
80009bd6:	08 9a       	mov	r10,r4
80009bd8:	0a 9b       	mov	r11,r5
80009bda:	fc 19 3f f0 	movh	r9,0x3ff0
80009bde:	30 15       	mov	r5,1
80009be0:	f0 1f 00 90 	mcall	80009e20 <atan+0x348>
80009be4:	14 98       	mov	r8,r10
80009be6:	16 99       	mov	r9,r11
80009be8:	0c 9a       	mov	r10,r6
80009bea:	0e 9b       	mov	r11,r7
80009bec:	f0 1f 00 91 	mcall	80009e30 <atan+0x358>
80009bf0:	16 96       	mov	r6,r11
80009bf2:	14 97       	mov	r7,r10
80009bf4:	c2 38       	rjmp	80009c3a <atan+0x162>
80009bf6:	e0 68 7f ff 	mov	r8,32767
80009bfa:	ea 18 40 03 	orh	r8,0x4003
80009bfe:	10 33       	cp.w	r3,r8
80009c00:	e0 89 00 15 	brgt	80009c2a <atan+0x152>
80009c04:	30 08       	mov	r8,0
80009c06:	fc 19 3f f8 	movh	r9,0x3ff8
80009c0a:	f0 1f 00 89 	mcall	80009e2c <atan+0x354>
80009c0e:	30 08       	mov	r8,0
80009c10:	16 97       	mov	r7,r11
80009c12:	fc 19 3f f8 	movh	r9,0x3ff8
80009c16:	0a 9b       	mov	r11,r5
80009c18:	14 96       	mov	r6,r10
80009c1a:	08 9a       	mov	r10,r4
80009c1c:	f0 1f 00 86 	mcall	80009e34 <atan+0x35c>
80009c20:	30 08       	mov	r8,0
80009c22:	fc 19 3f f0 	movh	r9,0x3ff0
80009c26:	30 25       	mov	r5,2
80009c28:	cd cb       	rjmp	80009be0 <atan+0x108>
80009c2a:	14 98       	mov	r8,r10
80009c2c:	0a 99       	mov	r9,r5
80009c2e:	30 0a       	mov	r10,0
80009c30:	fc 1b bf f0 	movh	r11,0xbff0
80009c34:	30 35       	mov	r5,3
80009c36:	cd bb       	rjmp	80009bec <atan+0x114>
80009c38:	3f f5       	mov	r5,-1
80009c3a:	0c 99       	mov	r9,r6
80009c3c:	0e 98       	mov	r8,r7
80009c3e:	0c 9b       	mov	r11,r6
80009c40:	0e 9a       	mov	r10,r7
80009c42:	f0 1f 00 7d 	mcall	80009e34 <atan+0x35c>
80009c46:	16 91       	mov	r1,r11
80009c48:	14 90       	mov	r0,r10
80009c4a:	02 99       	mov	r9,r1
80009c4c:	14 98       	mov	r8,r10
80009c4e:	f0 1f 00 7a 	mcall	80009e34 <atan+0x35c>
80009c52:	e0 68 da 11 	mov	r8,55825
80009c56:	ea 18 e3 22 	orh	r8,0xe322
80009c5a:	14 92       	mov	r2,r10
80009c5c:	16 93       	mov	r3,r11
80009c5e:	e0 69 ad 3a 	mov	r9,44346
80009c62:	ea 19 3f 90 	orh	r9,0x3f90
80009c66:	f0 1f 00 74 	mcall	80009e34 <atan+0x35c>
80009c6a:	e0 68 0d eb 	mov	r8,3563
80009c6e:	ea 18 24 76 	orh	r8,0x2476
80009c72:	e0 69 7b 4b 	mov	r9,31563
80009c76:	ea 19 3f a9 	orh	r9,0x3fa9
80009c7a:	f0 1f 00 6a 	mcall	80009e20 <atan+0x348>
80009c7e:	14 98       	mov	r8,r10
80009c80:	16 99       	mov	r9,r11
80009c82:	04 9a       	mov	r10,r2
80009c84:	06 9b       	mov	r11,r3
80009c86:	f0 1f 00 6c 	mcall	80009e34 <atan+0x35c>
80009c8a:	e0 68 3d 51 	mov	r8,15697
80009c8e:	ea 18 a0 d0 	orh	r8,0xa0d0
80009c92:	e0 69 0d 66 	mov	r9,3430
80009c96:	ea 19 3f b1 	orh	r9,0x3fb1
80009c9a:	f0 1f 00 62 	mcall	80009e20 <atan+0x348>
80009c9e:	14 98       	mov	r8,r10
80009ca0:	16 99       	mov	r9,r11
80009ca2:	04 9a       	mov	r10,r2
80009ca4:	06 9b       	mov	r11,r3
80009ca6:	f0 1f 00 64 	mcall	80009e34 <atan+0x35c>
80009caa:	e0 68 20 6e 	mov	r8,8302
80009cae:	ea 18 c5 4c 	orh	r8,0xc54c
80009cb2:	e0 69 45 cd 	mov	r9,17869
80009cb6:	ea 19 3f b7 	orh	r9,0x3fb7
80009cba:	f0 1f 00 5a 	mcall	80009e20 <atan+0x348>
80009cbe:	14 98       	mov	r8,r10
80009cc0:	16 99       	mov	r9,r11
80009cc2:	04 9a       	mov	r10,r2
80009cc4:	06 9b       	mov	r11,r3
80009cc6:	f0 1f 00 5c 	mcall	80009e34 <atan+0x35c>
80009cca:	e0 68 83 ff 	mov	r8,33791
80009cce:	ea 18 92 00 	orh	r8,0x9200
80009cd2:	e0 69 49 24 	mov	r9,18724
80009cd6:	ea 19 3f c2 	orh	r9,0x3fc2
80009cda:	f0 1f 00 52 	mcall	80009e20 <atan+0x348>
80009cde:	14 98       	mov	r8,r10
80009ce0:	16 99       	mov	r9,r11
80009ce2:	04 9a       	mov	r10,r2
80009ce4:	06 9b       	mov	r11,r3
80009ce6:	f0 1f 00 54 	mcall	80009e34 <atan+0x35c>
80009cea:	e0 68 55 0d 	mov	r8,21773
80009cee:	ea 18 55 55 	orh	r8,0x5555
80009cf2:	e0 69 55 55 	mov	r9,21845
80009cf6:	ea 19 3f d5 	orh	r9,0x3fd5
80009cfa:	f0 1f 00 4a 	mcall	80009e20 <atan+0x348>
80009cfe:	14 98       	mov	r8,r10
80009d00:	16 99       	mov	r9,r11
80009d02:	00 9a       	mov	r10,r0
80009d04:	02 9b       	mov	r11,r1
80009d06:	f0 1f 00 4c 	mcall	80009e34 <atan+0x35c>
80009d0a:	e0 68 6c 2f 	mov	r8,27695
80009d0e:	ea 18 2c 6a 	orh	r8,0x2c6a
80009d12:	e0 69 b4 44 	mov	r9,46148
80009d16:	ea 19 bf a2 	orh	r9,0xbfa2
80009d1a:	14 90       	mov	r0,r10
80009d1c:	16 91       	mov	r1,r11
80009d1e:	04 9a       	mov	r10,r2
80009d20:	06 9b       	mov	r11,r3
80009d22:	f0 1f 00 45 	mcall	80009e34 <atan+0x35c>
80009d26:	e0 68 fd 9a 	mov	r8,64922
80009d2a:	ea 18 52 de 	orh	r8,0x52de
80009d2e:	e0 69 de 2d 	mov	r9,56877
80009d32:	ea 19 3f ad 	orh	r9,0x3fad
80009d36:	f0 1f 00 3e 	mcall	80009e2c <atan+0x354>
80009d3a:	14 98       	mov	r8,r10
80009d3c:	16 99       	mov	r9,r11
80009d3e:	04 9a       	mov	r10,r2
80009d40:	06 9b       	mov	r11,r3
80009d42:	f0 1f 00 3d 	mcall	80009e34 <atan+0x35c>
80009d46:	e0 68 9a 6d 	mov	r8,39533
80009d4a:	ea 18 af 74 	orh	r8,0xaf74
80009d4e:	e0 69 b0 f2 	mov	r9,45298
80009d52:	ea 19 3f b3 	orh	r9,0x3fb3
80009d56:	f0 1f 00 36 	mcall	80009e2c <atan+0x354>
80009d5a:	14 98       	mov	r8,r10
80009d5c:	16 99       	mov	r9,r11
80009d5e:	04 9a       	mov	r10,r2
80009d60:	06 9b       	mov	r11,r3
80009d62:	f0 1f 00 35 	mcall	80009e34 <atan+0x35c>
80009d66:	e0 68 16 71 	mov	r8,5745
80009d6a:	ea 18 fe 23 	orh	r8,0xfe23
80009d6e:	e0 69 71 c6 	mov	r9,29126
80009d72:	ea 19 3f bc 	orh	r9,0x3fbc
80009d76:	f0 1f 00 2e 	mcall	80009e2c <atan+0x354>
80009d7a:	14 98       	mov	r8,r10
80009d7c:	16 99       	mov	r9,r11
80009d7e:	04 9a       	mov	r10,r2
80009d80:	06 9b       	mov	r11,r3
80009d82:	f0 1f 00 2d 	mcall	80009e34 <atan+0x35c>
80009d86:	e0 68 eb c4 	mov	r8,60356
80009d8a:	ea 18 99 98 	orh	r8,0x9998
80009d8e:	e0 69 99 99 	mov	r9,39321
80009d92:	ea 19 3f c9 	orh	r9,0x3fc9
80009d96:	f0 1f 00 26 	mcall	80009e2c <atan+0x354>
80009d9a:	14 98       	mov	r8,r10
80009d9c:	16 99       	mov	r9,r11
80009d9e:	04 9a       	mov	r10,r2
80009da0:	06 9b       	mov	r11,r3
80009da2:	f0 1f 00 25 	mcall	80009e34 <atan+0x35c>
80009da6:	14 98       	mov	r8,r10
80009da8:	16 99       	mov	r9,r11
80009daa:	5b f5       	cp.w	r5,-1
80009dac:	c1 41       	brne	80009dd4 <atan+0x2fc>
80009dae:	00 9a       	mov	r10,r0
80009db0:	02 9b       	mov	r11,r1
80009db2:	f0 1f 00 1c 	mcall	80009e20 <atan+0x348>
80009db6:	14 98       	mov	r8,r10
80009db8:	16 99       	mov	r9,r11
80009dba:	0e 9a       	mov	r10,r7
80009dbc:	0c 9b       	mov	r11,r6
80009dbe:	f0 1f 00 1e 	mcall	80009e34 <atan+0x35c>
80009dc2:	14 98       	mov	r8,r10
80009dc4:	16 99       	mov	r9,r11
80009dc6:	0e 9a       	mov	r10,r7
80009dc8:	0c 9b       	mov	r11,r6
80009dca:	f0 1f 00 19 	mcall	80009e2c <atan+0x354>
80009dce:	16 96       	mov	r6,r11
80009dd0:	14 97       	mov	r7,r10
80009dd2:	c2 38       	rjmp	80009e18 <atan+0x340>
80009dd4:	00 9a       	mov	r10,r0
80009dd6:	02 9b       	mov	r11,r1
80009dd8:	f0 1f 00 12 	mcall	80009e20 <atan+0x348>
80009ddc:	14 98       	mov	r8,r10
80009dde:	16 99       	mov	r9,r11
80009de0:	0e 9a       	mov	r10,r7
80009de2:	0c 9b       	mov	r11,r6
80009de4:	f0 1f 00 14 	mcall	80009e34 <atan+0x35c>
80009de8:	49 48       	lddpc	r8,80009e38 <atan+0x360>
80009dea:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
80009dee:	f0 1f 00 10 	mcall	80009e2c <atan+0x354>
80009df2:	0c 99       	mov	r9,r6
80009df4:	0e 98       	mov	r8,r7
80009df6:	f0 1f 00 0e 	mcall	80009e2c <atan+0x354>
80009dfa:	14 98       	mov	r8,r10
80009dfc:	16 99       	mov	r9,r11
80009dfe:	49 0a       	lddpc	r10,80009e3c <atan+0x364>
80009e00:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
80009e04:	f0 1f 00 0a 	mcall	80009e2c <atan+0x354>
80009e08:	40 0c       	lddsp	r12,sp[0x0]
80009e0a:	16 96       	mov	r6,r11
80009e0c:	14 97       	mov	r7,r10
80009e0e:	ee 16 80 00 	eorh	r6,0x8000
80009e12:	58 0c       	cp.w	r12,0
80009e14:	c0 25       	brlt	80009e18 <atan+0x340>
80009e16:	16 96       	mov	r6,r11
80009e18:	0c 9b       	mov	r11,r6
80009e1a:	0e 9a       	mov	r10,r7
80009e1c:	2f fd       	sub	sp,-4
80009e1e:	d8 32       	popm	r0-r7,pc
80009e20:	80 00       	ld.sh	r0,r0[0x0]
80009e22:	a1 e4       	*unknown*
80009e24:	80 00       	ld.sh	r0,r0[0x0]
80009e26:	a4 94       	st.b	r2[0x1],r4
80009e28:	80 00       	ld.sh	r0,r0[0x0]
80009e2a:	9e 40       	ld.sh	r0,pc[0x8]
80009e2c:	80 00       	ld.sh	r0,r0[0x0]
80009e2e:	a0 48       	st.h	r0[0x8],r8
80009e30:	80 00       	ld.sh	r0,r0[0x0]
80009e32:	a4 fc       	st.b	r2[0x7],r12
80009e34:	80 00       	ld.sh	r0,r0[0x0]
80009e36:	9e 70       	ld.sh	r0,pc[0xe]
80009e38:	80 01       	ld.sh	r1,r0[0x0]
80009e3a:	1b 00       	ld.w	r0,sp++
80009e3c:	80 01       	ld.sh	r1,r0[0x0]
80009e3e:	1b 20       	ld.uh	r0,sp++

80009e40 <fabs>:
80009e40:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80009e44:	12 9b       	mov	r11,r9
80009e46:	5e fc       	retal	r12

80009e48 <__isnand>:
80009e48:	14 98       	mov	r8,r10
80009e4a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009e4e:	f0 0c 11 00 	rsub	r12,r8,0
80009e52:	10 4c       	or	r12,r8
80009e54:	fc 18 7f f0 	movh	r8,0x7ff0
80009e58:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80009e5c:	f0 0c 01 0c 	sub	r12,r8,r12
80009e60:	bf 9c       	lsr	r12,0x1f
80009e62:	5e fc       	retal	r12

80009e64 <matherr>:
80009e64:	5e fd       	retal	0

80009e66 <nan>:
80009e66:	30 0a       	mov	r10,0
80009e68:	fc 1b 7f f8 	movh	r11,0x7ff8
80009e6c:	5e fc       	retal	r12
80009e6e:	d7 03       	nop

80009e70 <__avr32_f64_mul>:
80009e70:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80009e74:	e0 80 00 dc 	breq	8000a02c <__avr32_f64_mul_op1_zero>
80009e78:	d4 21       	pushm	r4-r7,lr
80009e7a:	f7 e9 20 0e 	eor	lr,r11,r9
80009e7e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009e82:	30 15       	mov	r5,1
80009e84:	c4 30       	breq	80009f0a <__avr32_f64_mul_op1_subnormal>
80009e86:	ab 6b       	lsl	r11,0xa
80009e88:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009e8c:	ab 6a       	lsl	r10,0xa
80009e8e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80009e92:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009e96:	c5 c0       	breq	80009f4e <__avr32_f64_mul_op2_subnormal>
80009e98:	a1 78       	lsl	r8,0x1
80009e9a:	5c f9       	rol	r9
80009e9c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009ea0:	e0 47 07 ff 	cp.w	r7,2047
80009ea4:	c7 70       	breq	80009f92 <__avr32_f64_mul_op_nan_or_inf>
80009ea6:	e0 46 07 ff 	cp.w	r6,2047
80009eaa:	c7 40       	breq	80009f92 <__avr32_f64_mul_op_nan_or_inf>
80009eac:	ee 06 00 0c 	add	r12,r7,r6
80009eb0:	e0 2c 03 fe 	sub	r12,1022
80009eb4:	f6 08 06 44 	mulu.d	r4,r11,r8
80009eb8:	f4 09 07 44 	macu.d	r4,r10,r9
80009ebc:	f4 08 06 46 	mulu.d	r6,r10,r8
80009ec0:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009ec4:	08 07       	add	r7,r4
80009ec6:	f4 05 00 4a 	adc	r10,r10,r5
80009eca:	5c 0b       	acr	r11
80009ecc:	ed bb 00 14 	bld	r11,0x14
80009ed0:	c0 50       	breq	80009eda <__avr32_f64_mul+0x6a>
80009ed2:	a1 77       	lsl	r7,0x1
80009ed4:	5c fa       	rol	r10
80009ed6:	5c fb       	rol	r11
80009ed8:	20 1c       	sub	r12,1
80009eda:	58 0c       	cp.w	r12,0
80009edc:	e0 8a 00 6f 	brle	80009fba <__avr32_f64_mul_res_subnormal>
80009ee0:	e0 4c 07 ff 	cp.w	r12,2047
80009ee4:	e0 84 00 9c 	brge	8000a01c <__avr32_f64_mul_res_inf>
80009ee8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009eec:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80009ef0:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009ef4:	ee 17 80 00 	eorh	r7,0x8000
80009ef8:	f1 b7 04 20 	satu	r7,0x1
80009efc:	0e 0a       	add	r10,r7
80009efe:	5c 0b       	acr	r11
80009f00:	ed be 00 1f 	bld	lr,0x1f
80009f04:	ef bb 00 1f 	bst	r11,0x1f
80009f08:	d8 22       	popm	r4-r7,pc

80009f0a <__avr32_f64_mul_op1_subnormal>:
80009f0a:	e4 1b 00 0f 	andh	r11,0xf
80009f0e:	f4 0c 12 00 	clz	r12,r10
80009f12:	f6 06 12 00 	clz	r6,r11
80009f16:	f7 bc 03 e1 	sublo	r12,-31
80009f1a:	f8 06 17 30 	movlo	r6,r12
80009f1e:	f7 b6 02 01 	subhs	r6,1
80009f22:	e0 46 00 20 	cp.w	r6,32
80009f26:	c0 d4       	brge	80009f40 <__avr32_f64_mul_op1_subnormal+0x36>
80009f28:	ec 0c 11 20 	rsub	r12,r6,32
80009f2c:	f6 06 09 4b 	lsl	r11,r11,r6
80009f30:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009f34:	18 4b       	or	r11,r12
80009f36:	f4 06 09 4a 	lsl	r10,r10,r6
80009f3a:	20 b6       	sub	r6,11
80009f3c:	0c 17       	sub	r7,r6
80009f3e:	ca ab       	rjmp	80009e92 <__avr32_f64_mul+0x22>
80009f40:	f4 06 09 4b 	lsl	r11,r10,r6
80009f44:	c6 40       	breq	8000a00c <__avr32_f64_mul_res_zero>
80009f46:	30 0a       	mov	r10,0
80009f48:	20 b6       	sub	r6,11
80009f4a:	0c 17       	sub	r7,r6
80009f4c:	ca 3b       	rjmp	80009e92 <__avr32_f64_mul+0x22>

80009f4e <__avr32_f64_mul_op2_subnormal>:
80009f4e:	e4 19 00 0f 	andh	r9,0xf
80009f52:	f0 0c 12 00 	clz	r12,r8
80009f56:	f2 05 12 00 	clz	r5,r9
80009f5a:	f7 bc 03 ea 	sublo	r12,-22
80009f5e:	f8 05 17 30 	movlo	r5,r12
80009f62:	f7 b5 02 0a 	subhs	r5,10
80009f66:	e0 45 00 20 	cp.w	r5,32
80009f6a:	c0 d4       	brge	80009f84 <__avr32_f64_mul_op2_subnormal+0x36>
80009f6c:	ea 0c 11 20 	rsub	r12,r5,32
80009f70:	f2 05 09 49 	lsl	r9,r9,r5
80009f74:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009f78:	18 49       	or	r9,r12
80009f7a:	f0 05 09 48 	lsl	r8,r8,r5
80009f7e:	20 25       	sub	r5,2
80009f80:	0a 16       	sub	r6,r5
80009f82:	c8 fb       	rjmp	80009ea0 <__avr32_f64_mul+0x30>
80009f84:	f0 05 09 49 	lsl	r9,r8,r5
80009f88:	c4 20       	breq	8000a00c <__avr32_f64_mul_res_zero>
80009f8a:	30 08       	mov	r8,0
80009f8c:	20 25       	sub	r5,2
80009f8e:	0a 16       	sub	r6,r5
80009f90:	c8 8b       	rjmp	80009ea0 <__avr32_f64_mul+0x30>

80009f92 <__avr32_f64_mul_op_nan_or_inf>:
80009f92:	e4 19 00 0f 	andh	r9,0xf
80009f96:	e4 1b 00 0f 	andh	r11,0xf
80009f9a:	14 4b       	or	r11,r10
80009f9c:	10 49       	or	r9,r8
80009f9e:	e0 47 07 ff 	cp.w	r7,2047
80009fa2:	c0 91       	brne	80009fb4 <__avr32_f64_mul_op1_not_naninf>
80009fa4:	58 0b       	cp.w	r11,0
80009fa6:	c3 81       	brne	8000a016 <__avr32_f64_mul_res_nan>
80009fa8:	e0 46 07 ff 	cp.w	r6,2047
80009fac:	c3 81       	brne	8000a01c <__avr32_f64_mul_res_inf>
80009fae:	58 09       	cp.w	r9,0
80009fb0:	c3 60       	breq	8000a01c <__avr32_f64_mul_res_inf>
80009fb2:	c3 28       	rjmp	8000a016 <__avr32_f64_mul_res_nan>

80009fb4 <__avr32_f64_mul_op1_not_naninf>:
80009fb4:	58 09       	cp.w	r9,0
80009fb6:	c3 30       	breq	8000a01c <__avr32_f64_mul_res_inf>
80009fb8:	c2 f8       	rjmp	8000a016 <__avr32_f64_mul_res_nan>

80009fba <__avr32_f64_mul_res_subnormal>:
80009fba:	5c 3c       	neg	r12
80009fbc:	2f fc       	sub	r12,-1
80009fbe:	f1 bc 04 c0 	satu	r12,0x6
80009fc2:	e0 4c 00 20 	cp.w	r12,32
80009fc6:	c1 14       	brge	80009fe8 <__avr32_f64_mul_res_subnormal+0x2e>
80009fc8:	f8 08 11 20 	rsub	r8,r12,32
80009fcc:	0e 46       	or	r6,r7
80009fce:	ee 0c 0a 47 	lsr	r7,r7,r12
80009fd2:	f4 08 09 49 	lsl	r9,r10,r8
80009fd6:	12 47       	or	r7,r9
80009fd8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009fdc:	f6 08 09 49 	lsl	r9,r11,r8
80009fe0:	12 4a       	or	r10,r9
80009fe2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009fe6:	c8 3b       	rjmp	80009eec <__avr32_f64_mul+0x7c>
80009fe8:	f8 08 11 20 	rsub	r8,r12,32
80009fec:	f9 b9 00 00 	moveq	r9,0
80009ff0:	c0 30       	breq	80009ff6 <__avr32_f64_mul_res_subnormal+0x3c>
80009ff2:	f6 08 09 49 	lsl	r9,r11,r8
80009ff6:	0e 46       	or	r6,r7
80009ff8:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009ffc:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a000:	f3 ea 10 07 	or	r7,r9,r10
8000a004:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a008:	30 0b       	mov	r11,0
8000a00a:	c7 1b       	rjmp	80009eec <__avr32_f64_mul+0x7c>

8000a00c <__avr32_f64_mul_res_zero>:
8000a00c:	1c 9b       	mov	r11,lr
8000a00e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a012:	30 0a       	mov	r10,0
8000a014:	d8 22       	popm	r4-r7,pc

8000a016 <__avr32_f64_mul_res_nan>:
8000a016:	3f fb       	mov	r11,-1
8000a018:	3f fa       	mov	r10,-1
8000a01a:	d8 22       	popm	r4-r7,pc

8000a01c <__avr32_f64_mul_res_inf>:
8000a01c:	f0 6b 00 00 	mov	r11,-1048576
8000a020:	ed be 00 1f 	bld	lr,0x1f
8000a024:	ef bb 00 1f 	bst	r11,0x1f
8000a028:	30 0a       	mov	r10,0
8000a02a:	d8 22       	popm	r4-r7,pc

8000a02c <__avr32_f64_mul_op1_zero>:
8000a02c:	f7 e9 20 0b 	eor	r11,r11,r9
8000a030:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a034:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a038:	e0 4c 07 ff 	cp.w	r12,2047
8000a03c:	5e 1c       	retne	r12
8000a03e:	3f fa       	mov	r10,-1
8000a040:	3f fb       	mov	r11,-1
8000a042:	5e fc       	retal	r12

8000a044 <__avr32_f64_sub_from_add>:
8000a044:	ee 19 80 00 	eorh	r9,0x8000

8000a048 <__avr32_f64_sub>:
8000a048:	f7 e9 20 0c 	eor	r12,r11,r9
8000a04c:	e0 86 00 ca 	brmi	8000a1e0 <__avr32_f64_add_from_sub>
8000a050:	eb cd 40 e0 	pushm	r5-r7,lr
8000a054:	16 9c       	mov	r12,r11
8000a056:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a05a:	bf db       	cbr	r11,0x1f
8000a05c:	bf d9       	cbr	r9,0x1f
8000a05e:	10 3a       	cp.w	r10,r8
8000a060:	f2 0b 13 00 	cpc	r11,r9
8000a064:	c0 92       	brcc	8000a076 <__avr32_f64_sub+0x2e>
8000a066:	16 97       	mov	r7,r11
8000a068:	12 9b       	mov	r11,r9
8000a06a:	0e 99       	mov	r9,r7
8000a06c:	14 97       	mov	r7,r10
8000a06e:	10 9a       	mov	r10,r8
8000a070:	0e 98       	mov	r8,r7
8000a072:	ee 1c 80 00 	eorh	r12,0x8000
8000a076:	f6 07 16 14 	lsr	r7,r11,0x14
8000a07a:	ab 7b       	lsl	r11,0xb
8000a07c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a080:	ab 7a       	lsl	r10,0xb
8000a082:	bf bb       	sbr	r11,0x1f
8000a084:	f2 06 16 14 	lsr	r6,r9,0x14
8000a088:	c4 40       	breq	8000a110 <__avr32_f64_sub_opL_subnormal>
8000a08a:	ab 79       	lsl	r9,0xb
8000a08c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a090:	ab 78       	lsl	r8,0xb
8000a092:	bf b9       	sbr	r9,0x1f

8000a094 <__avr32_f64_sub_opL_subnormal_done>:
8000a094:	e0 47 07 ff 	cp.w	r7,2047
8000a098:	c4 f0       	breq	8000a136 <__avr32_f64_sub_opH_nan_or_inf>
8000a09a:	0e 26       	rsub	r6,r7
8000a09c:	c1 20       	breq	8000a0c0 <__avr32_f64_sub_shift_done>
8000a09e:	ec 05 11 20 	rsub	r5,r6,32
8000a0a2:	e0 46 00 20 	cp.w	r6,32
8000a0a6:	c7 c2       	brcc	8000a19e <__avr32_f64_sub_longshift>
8000a0a8:	f0 05 09 4e 	lsl	lr,r8,r5
8000a0ac:	f2 05 09 45 	lsl	r5,r9,r5
8000a0b0:	f0 06 0a 48 	lsr	r8,r8,r6
8000a0b4:	f2 06 0a 49 	lsr	r9,r9,r6
8000a0b8:	0a 48       	or	r8,r5
8000a0ba:	58 0e       	cp.w	lr,0
8000a0bc:	5f 1e       	srne	lr
8000a0be:	1c 48       	or	r8,lr

8000a0c0 <__avr32_f64_sub_shift_done>:
8000a0c0:	10 1a       	sub	r10,r8
8000a0c2:	f6 09 01 4b 	sbc	r11,r11,r9
8000a0c6:	f6 06 12 00 	clz	r6,r11
8000a0ca:	c0 e0       	breq	8000a0e6 <__avr32_f64_sub_longnormalize_done>
8000a0cc:	c7 83       	brcs	8000a1bc <__avr32_f64_sub_longnormalize>
8000a0ce:	ec 0e 11 20 	rsub	lr,r6,32
8000a0d2:	f6 06 09 4b 	lsl	r11,r11,r6
8000a0d6:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a0da:	1c 4b       	or	r11,lr
8000a0dc:	f4 06 09 4a 	lsl	r10,r10,r6
8000a0e0:	0c 17       	sub	r7,r6
8000a0e2:	e0 8a 00 39 	brle	8000a154 <__avr32_f64_sub_subnormal_result>

8000a0e6 <__avr32_f64_sub_longnormalize_done>:
8000a0e6:	f4 09 15 15 	lsl	r9,r10,0x15
8000a0ea:	ab 9a       	lsr	r10,0xb
8000a0ec:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a0f0:	ab 9b       	lsr	r11,0xb
8000a0f2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a0f6:	18 4b       	or	r11,r12

8000a0f8 <__avr32_f64_sub_round>:
8000a0f8:	fc 17 80 00 	movh	r7,0x8000
8000a0fc:	ed ba 00 00 	bld	r10,0x0
8000a100:	f7 b7 01 ff 	subne	r7,-1
8000a104:	0e 39       	cp.w	r9,r7
8000a106:	5f 29       	srhs	r9
8000a108:	12 0a       	add	r10,r9
8000a10a:	5c 0b       	acr	r11
8000a10c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a110 <__avr32_f64_sub_opL_subnormal>:
8000a110:	ab 79       	lsl	r9,0xb
8000a112:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a116:	ab 78       	lsl	r8,0xb
8000a118:	f3 e8 10 0e 	or	lr,r9,r8
8000a11c:	f9 b6 01 01 	movne	r6,1
8000a120:	ee 0e 11 00 	rsub	lr,r7,0
8000a124:	f9 b7 00 01 	moveq	r7,1
8000a128:	ef bb 00 1f 	bst	r11,0x1f
8000a12c:	f7 ea 10 0e 	or	lr,r11,r10
8000a130:	f9 b7 00 00 	moveq	r7,0
8000a134:	cb 0b       	rjmp	8000a094 <__avr32_f64_sub_opL_subnormal_done>

8000a136 <__avr32_f64_sub_opH_nan_or_inf>:
8000a136:	bf db       	cbr	r11,0x1f
8000a138:	f7 ea 10 0e 	or	lr,r11,r10
8000a13c:	c0 81       	brne	8000a14c <__avr32_f64_sub_return_nan>
8000a13e:	e0 46 07 ff 	cp.w	r6,2047
8000a142:	c0 50       	breq	8000a14c <__avr32_f64_sub_return_nan>
8000a144:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000a148:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a14c <__avr32_f64_sub_return_nan>:
8000a14c:	3f fa       	mov	r10,-1
8000a14e:	3f fb       	mov	r11,-1
8000a150:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a154 <__avr32_f64_sub_subnormal_result>:
8000a154:	5c 37       	neg	r7
8000a156:	2f f7       	sub	r7,-1
8000a158:	f1 b7 04 c0 	satu	r7,0x6
8000a15c:	e0 47 00 20 	cp.w	r7,32
8000a160:	c1 14       	brge	8000a182 <__avr32_f64_sub_subnormal_result+0x2e>
8000a162:	ee 08 11 20 	rsub	r8,r7,32
8000a166:	f4 08 09 49 	lsl	r9,r10,r8
8000a16a:	5f 16       	srne	r6
8000a16c:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a170:	0c 4a       	or	r10,r6
8000a172:	f6 08 09 49 	lsl	r9,r11,r8
8000a176:	f5 e9 10 0a 	or	r10,r10,r9
8000a17a:	f4 07 0a 4b 	lsr	r11,r10,r7
8000a17e:	30 07       	mov	r7,0
8000a180:	cb 3b       	rjmp	8000a0e6 <__avr32_f64_sub_longnormalize_done>
8000a182:	ee 08 11 40 	rsub	r8,r7,64
8000a186:	f6 08 09 49 	lsl	r9,r11,r8
8000a18a:	14 49       	or	r9,r10
8000a18c:	5f 16       	srne	r6
8000a18e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a192:	0c 4a       	or	r10,r6
8000a194:	30 0b       	mov	r11,0
8000a196:	30 07       	mov	r7,0
8000a198:	ca 7b       	rjmp	8000a0e6 <__avr32_f64_sub_longnormalize_done>
8000a19a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a19e <__avr32_f64_sub_longshift>:
8000a19e:	f1 b6 04 c0 	satu	r6,0x6
8000a1a2:	f0 0e 17 00 	moveq	lr,r8
8000a1a6:	c0 40       	breq	8000a1ae <__avr32_f64_sub_longshift+0x10>
8000a1a8:	f2 05 09 4e 	lsl	lr,r9,r5
8000a1ac:	10 4e       	or	lr,r8
8000a1ae:	f2 06 0a 48 	lsr	r8,r9,r6
8000a1b2:	30 09       	mov	r9,0
8000a1b4:	58 0e       	cp.w	lr,0
8000a1b6:	5f 1e       	srne	lr
8000a1b8:	1c 48       	or	r8,lr
8000a1ba:	c8 3b       	rjmp	8000a0c0 <__avr32_f64_sub_shift_done>

8000a1bc <__avr32_f64_sub_longnormalize>:
8000a1bc:	f4 06 12 00 	clz	r6,r10
8000a1c0:	f9 b7 03 00 	movlo	r7,0
8000a1c4:	f9 b6 03 00 	movlo	r6,0
8000a1c8:	f9 bc 03 00 	movlo	r12,0
8000a1cc:	f7 b6 02 e0 	subhs	r6,-32
8000a1d0:	f4 06 09 4b 	lsl	r11,r10,r6
8000a1d4:	30 0a       	mov	r10,0
8000a1d6:	0c 17       	sub	r7,r6
8000a1d8:	fe 9a ff be 	brle	8000a154 <__avr32_f64_sub_subnormal_result>
8000a1dc:	c8 5b       	rjmp	8000a0e6 <__avr32_f64_sub_longnormalize_done>
	...

8000a1e0 <__avr32_f64_add_from_sub>:
8000a1e0:	ee 19 80 00 	eorh	r9,0x8000

8000a1e4 <__avr32_f64_add>:
8000a1e4:	f7 e9 20 0c 	eor	r12,r11,r9
8000a1e8:	fe 96 ff 2e 	brmi	8000a044 <__avr32_f64_sub_from_add>
8000a1ec:	eb cd 40 e0 	pushm	r5-r7,lr
8000a1f0:	16 9c       	mov	r12,r11
8000a1f2:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a1f6:	bf db       	cbr	r11,0x1f
8000a1f8:	bf d9       	cbr	r9,0x1f
8000a1fa:	12 3b       	cp.w	r11,r9
8000a1fc:	c0 72       	brcc	8000a20a <__avr32_f64_add+0x26>
8000a1fe:	16 97       	mov	r7,r11
8000a200:	12 9b       	mov	r11,r9
8000a202:	0e 99       	mov	r9,r7
8000a204:	14 97       	mov	r7,r10
8000a206:	10 9a       	mov	r10,r8
8000a208:	0e 98       	mov	r8,r7
8000a20a:	30 0e       	mov	lr,0
8000a20c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a210:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000a214:	b5 ab       	sbr	r11,0x14
8000a216:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a21a:	c6 20       	breq	8000a2de <__avr32_f64_add_op2_subnormal>
8000a21c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000a220:	b5 a9       	sbr	r9,0x14
8000a222:	e0 47 07 ff 	cp.w	r7,2047
8000a226:	c2 80       	breq	8000a276 <__avr32_f64_add_opH_nan_or_inf>
8000a228:	0e 26       	rsub	r6,r7
8000a22a:	c1 20       	breq	8000a24e <__avr32_f64_add_shift_done>
8000a22c:	e0 46 00 36 	cp.w	r6,54
8000a230:	c1 52       	brcc	8000a25a <__avr32_f64_add_res_of_done>
8000a232:	ec 05 11 20 	rsub	r5,r6,32
8000a236:	e0 46 00 20 	cp.w	r6,32
8000a23a:	c3 52       	brcc	8000a2a4 <__avr32_f64_add_longshift>
8000a23c:	f0 05 09 4e 	lsl	lr,r8,r5
8000a240:	f2 05 09 45 	lsl	r5,r9,r5
8000a244:	f0 06 0a 48 	lsr	r8,r8,r6
8000a248:	f2 06 0a 49 	lsr	r9,r9,r6
8000a24c:	0a 48       	or	r8,r5

8000a24e <__avr32_f64_add_shift_done>:
8000a24e:	10 0a       	add	r10,r8
8000a250:	f6 09 00 4b 	adc	r11,r11,r9
8000a254:	ed bb 00 15 	bld	r11,0x15
8000a258:	c3 40       	breq	8000a2c0 <__avr32_f64_add_res_of>

8000a25a <__avr32_f64_add_res_of_done>:
8000a25a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a25e:	18 4b       	or	r11,r12

8000a260 <__avr32_f64_add_round>:
8000a260:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000a264:	18 4e       	or	lr,r12
8000a266:	ee 1e 80 00 	eorh	lr,0x8000
8000a26a:	f1 be 04 20 	satu	lr,0x1
8000a26e:	1c 0a       	add	r10,lr
8000a270:	5c 0b       	acr	r11
8000a272:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a276 <__avr32_f64_add_opH_nan_or_inf>:
8000a276:	b5 cb       	cbr	r11,0x14
8000a278:	f7 ea 10 0e 	or	lr,r11,r10
8000a27c:	c1 01       	brne	8000a29c <__avr32_f64_add_return_nan>
8000a27e:	e0 46 07 ff 	cp.w	r6,2047
8000a282:	c0 30       	breq	8000a288 <__avr32_f64_add_opL_nan_or_inf>
8000a284:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a288 <__avr32_f64_add_opL_nan_or_inf>:
8000a288:	b5 c9       	cbr	r9,0x14
8000a28a:	f3 e8 10 0e 	or	lr,r9,r8
8000a28e:	c0 71       	brne	8000a29c <__avr32_f64_add_return_nan>
8000a290:	30 0a       	mov	r10,0
8000a292:	fc 1b 7f f0 	movh	r11,0x7ff0
8000a296:	18 4b       	or	r11,r12
8000a298:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a29c <__avr32_f64_add_return_nan>:
8000a29c:	3f fa       	mov	r10,-1
8000a29e:	3f fb       	mov	r11,-1
8000a2a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a2a4 <__avr32_f64_add_longshift>:
8000a2a4:	f1 b6 04 c0 	satu	r6,0x6
8000a2a8:	f0 0e 17 00 	moveq	lr,r8
8000a2ac:	c0 60       	breq	8000a2b8 <__avr32_f64_add_longshift+0x14>
8000a2ae:	f2 05 09 4e 	lsl	lr,r9,r5
8000a2b2:	58 08       	cp.w	r8,0
8000a2b4:	5f 18       	srne	r8
8000a2b6:	10 4e       	or	lr,r8
8000a2b8:	f2 06 0a 48 	lsr	r8,r9,r6
8000a2bc:	30 09       	mov	r9,0
8000a2be:	cc 8b       	rjmp	8000a24e <__avr32_f64_add_shift_done>

8000a2c0 <__avr32_f64_add_res_of>:
8000a2c0:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000a2c4:	a1 9b       	lsr	r11,0x1
8000a2c6:	5d 0a       	ror	r10
8000a2c8:	5d 0e       	ror	lr
8000a2ca:	2f f7       	sub	r7,-1
8000a2cc:	e0 47 07 ff 	cp.w	r7,2047
8000a2d0:	f9 ba 00 00 	moveq	r10,0
8000a2d4:	f9 bb 00 00 	moveq	r11,0
8000a2d8:	f9 be 00 00 	moveq	lr,0
8000a2dc:	cb fb       	rjmp	8000a25a <__avr32_f64_add_res_of_done>

8000a2de <__avr32_f64_add_op2_subnormal>:
8000a2de:	30 16       	mov	r6,1
8000a2e0:	58 07       	cp.w	r7,0
8000a2e2:	ca 01       	brne	8000a222 <__avr32_f64_add+0x3e>
8000a2e4:	b5 cb       	cbr	r11,0x14
8000a2e6:	10 0a       	add	r10,r8
8000a2e8:	f6 09 00 4b 	adc	r11,r11,r9
8000a2ec:	18 4b       	or	r11,r12
8000a2ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000a2f4 <__avr32_f64_to_u32>:
8000a2f4:	58 0b       	cp.w	r11,0
8000a2f6:	5e 6d       	retmi	0

8000a2f8 <__avr32_f64_to_s32>:
8000a2f8:	f6 0c 15 01 	lsl	r12,r11,0x1
8000a2fc:	b5 9c       	lsr	r12,0x15
8000a2fe:	e0 2c 03 ff 	sub	r12,1023
8000a302:	5e 3d       	retlo	0
8000a304:	f8 0c 11 1f 	rsub	r12,r12,31
8000a308:	16 99       	mov	r9,r11
8000a30a:	ab 7b       	lsl	r11,0xb
8000a30c:	bf bb       	sbr	r11,0x1f
8000a30e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a312:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a316:	a1 79       	lsl	r9,0x1
8000a318:	5e 2b       	reths	r11
8000a31a:	5c 3b       	neg	r11
8000a31c:	5e fb       	retal	r11

8000a31e <__avr32_u32_to_f64>:
8000a31e:	f8 cb 00 00 	sub	r11,r12,0
8000a322:	30 0c       	mov	r12,0
8000a324:	c0 38       	rjmp	8000a32a <__avr32_s32_to_f64+0x4>

8000a326 <__avr32_s32_to_f64>:
8000a326:	18 9b       	mov	r11,r12
8000a328:	5c 4b       	abs	r11
8000a32a:	30 0a       	mov	r10,0
8000a32c:	5e 0b       	reteq	r11
8000a32e:	d4 01       	pushm	lr
8000a330:	e0 69 04 1e 	mov	r9,1054
8000a334:	f6 08 12 00 	clz	r8,r11
8000a338:	c1 70       	breq	8000a366 <__avr32_s32_to_f64+0x40>
8000a33a:	c0 c3       	brcs	8000a352 <__avr32_s32_to_f64+0x2c>
8000a33c:	f0 0e 11 20 	rsub	lr,r8,32
8000a340:	f6 08 09 4b 	lsl	r11,r11,r8
8000a344:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a348:	1c 4b       	or	r11,lr
8000a34a:	f4 08 09 4a 	lsl	r10,r10,r8
8000a34e:	10 19       	sub	r9,r8
8000a350:	c0 b8       	rjmp	8000a366 <__avr32_s32_to_f64+0x40>
8000a352:	f4 08 12 00 	clz	r8,r10
8000a356:	f9 b8 03 00 	movlo	r8,0
8000a35a:	f7 b8 02 e0 	subhs	r8,-32
8000a35e:	f4 08 09 4b 	lsl	r11,r10,r8
8000a362:	30 0a       	mov	r10,0
8000a364:	10 19       	sub	r9,r8
8000a366:	58 09       	cp.w	r9,0
8000a368:	e0 89 00 30 	brgt	8000a3c8 <__avr32_s32_to_f64+0xa2>
8000a36c:	5c 39       	neg	r9
8000a36e:	2f f9       	sub	r9,-1
8000a370:	e0 49 00 36 	cp.w	r9,54
8000a374:	c0 43       	brcs	8000a37c <__avr32_s32_to_f64+0x56>
8000a376:	30 0b       	mov	r11,0
8000a378:	30 0a       	mov	r10,0
8000a37a:	c2 68       	rjmp	8000a3c6 <__avr32_s32_to_f64+0xa0>
8000a37c:	2f 69       	sub	r9,-10
8000a37e:	f2 08 11 20 	rsub	r8,r9,32
8000a382:	e0 49 00 20 	cp.w	r9,32
8000a386:	c0 b2       	brcc	8000a39c <__avr32_s32_to_f64+0x76>
8000a388:	f4 08 09 4e 	lsl	lr,r10,r8
8000a38c:	f6 08 09 48 	lsl	r8,r11,r8
8000a390:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a394:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a398:	10 4b       	or	r11,r8
8000a39a:	c0 88       	rjmp	8000a3aa <__avr32_s32_to_f64+0x84>
8000a39c:	f6 08 09 4e 	lsl	lr,r11,r8
8000a3a0:	14 4e       	or	lr,r10
8000a3a2:	16 9a       	mov	r10,r11
8000a3a4:	30 0b       	mov	r11,0
8000a3a6:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a3aa:	ed ba 00 00 	bld	r10,0x0
8000a3ae:	c0 92       	brcc	8000a3c0 <__avr32_s32_to_f64+0x9a>
8000a3b0:	1c 7e       	tst	lr,lr
8000a3b2:	c0 41       	brne	8000a3ba <__avr32_s32_to_f64+0x94>
8000a3b4:	ed ba 00 01 	bld	r10,0x1
8000a3b8:	c0 42       	brcc	8000a3c0 <__avr32_s32_to_f64+0x9a>
8000a3ba:	2f fa       	sub	r10,-1
8000a3bc:	f7 bb 02 ff 	subhs	r11,-1
8000a3c0:	5c fc       	rol	r12
8000a3c2:	5d 0b       	ror	r11
8000a3c4:	5d 0a       	ror	r10
8000a3c6:	d8 02       	popm	pc
8000a3c8:	e0 68 03 ff 	mov	r8,1023
8000a3cc:	ed ba 00 0b 	bld	r10,0xb
8000a3d0:	f7 b8 00 ff 	subeq	r8,-1
8000a3d4:	10 0a       	add	r10,r8
8000a3d6:	5c 0b       	acr	r11
8000a3d8:	f7 b9 03 fe 	sublo	r9,-2
8000a3dc:	e0 49 07 ff 	cp.w	r9,2047
8000a3e0:	c0 55       	brlt	8000a3ea <__avr32_s32_to_f64+0xc4>
8000a3e2:	30 0a       	mov	r10,0
8000a3e4:	fc 1b ff e0 	movh	r11,0xffe0
8000a3e8:	c0 c8       	rjmp	8000a400 <__floatsidf_return_op1>
8000a3ea:	ed bb 00 1f 	bld	r11,0x1f
8000a3ee:	f7 b9 01 01 	subne	r9,1
8000a3f2:	ab 9a       	lsr	r10,0xb
8000a3f4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a3f8:	a1 7b       	lsl	r11,0x1
8000a3fa:	ab 9b       	lsr	r11,0xb
8000a3fc:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a400 <__floatsidf_return_op1>:
8000a400:	a1 7c       	lsl	r12,0x1
8000a402:	5d 0b       	ror	r11
8000a404:	d8 02       	popm	pc

8000a406 <__avr32_f64_cmp_eq>:
8000a406:	10 3a       	cp.w	r10,r8
8000a408:	f2 0b 13 00 	cpc	r11,r9
8000a40c:	c0 80       	breq	8000a41c <__avr32_f64_cmp_eq+0x16>
8000a40e:	a1 7b       	lsl	r11,0x1
8000a410:	a1 79       	lsl	r9,0x1
8000a412:	14 4b       	or	r11,r10
8000a414:	12 4b       	or	r11,r9
8000a416:	10 4b       	or	r11,r8
8000a418:	5e 0f       	reteq	1
8000a41a:	5e fd       	retal	0
8000a41c:	a1 7b       	lsl	r11,0x1
8000a41e:	fc 1c ff e0 	movh	r12,0xffe0
8000a422:	58 0a       	cp.w	r10,0
8000a424:	f8 0b 13 00 	cpc	r11,r12
8000a428:	5e 8f       	retls	1
8000a42a:	5e fd       	retal	0

8000a42c <__avr32_f64_cmp_ge>:
8000a42c:	1a de       	st.w	--sp,lr
8000a42e:	1a d7       	st.w	--sp,r7
8000a430:	a1 7b       	lsl	r11,0x1
8000a432:	5f 3c       	srlo	r12
8000a434:	a1 79       	lsl	r9,0x1
8000a436:	5f 37       	srlo	r7
8000a438:	5c fc       	rol	r12
8000a43a:	fc 1e ff e0 	movh	lr,0xffe0
8000a43e:	58 0a       	cp.w	r10,0
8000a440:	fc 0b 13 00 	cpc	r11,lr
8000a444:	e0 8b 00 1d 	brhi	8000a47e <__avr32_f64_cmp_ge+0x52>
8000a448:	58 08       	cp.w	r8,0
8000a44a:	fc 09 13 00 	cpc	r9,lr
8000a44e:	e0 8b 00 18 	brhi	8000a47e <__avr32_f64_cmp_ge+0x52>
8000a452:	58 0b       	cp.w	r11,0
8000a454:	f5 ba 00 00 	subfeq	r10,0
8000a458:	c1 50       	breq	8000a482 <__avr32_f64_cmp_ge+0x56>
8000a45a:	1b 07       	ld.w	r7,sp++
8000a45c:	1b 0e       	ld.w	lr,sp++
8000a45e:	58 3c       	cp.w	r12,3
8000a460:	c0 a0       	breq	8000a474 <__avr32_f64_cmp_ge+0x48>
8000a462:	58 1c       	cp.w	r12,1
8000a464:	c0 33       	brcs	8000a46a <__avr32_f64_cmp_ge+0x3e>
8000a466:	5e 0f       	reteq	1
8000a468:	5e 1d       	retne	0
8000a46a:	10 3a       	cp.w	r10,r8
8000a46c:	f2 0b 13 00 	cpc	r11,r9
8000a470:	5e 2f       	reths	1
8000a472:	5e 3d       	retlo	0
8000a474:	14 38       	cp.w	r8,r10
8000a476:	f6 09 13 00 	cpc	r9,r11
8000a47a:	5e 2f       	reths	1
8000a47c:	5e 3d       	retlo	0
8000a47e:	1b 07       	ld.w	r7,sp++
8000a480:	d8 0a       	popm	pc,r12=0
8000a482:	58 17       	cp.w	r7,1
8000a484:	5f 0c       	sreq	r12
8000a486:	58 09       	cp.w	r9,0
8000a488:	f5 b8 00 00 	subfeq	r8,0
8000a48c:	1b 07       	ld.w	r7,sp++
8000a48e:	1b 0e       	ld.w	lr,sp++
8000a490:	5e 0f       	reteq	1
8000a492:	5e fc       	retal	r12

8000a494 <__avr32_f64_cmp_lt>:
8000a494:	1a de       	st.w	--sp,lr
8000a496:	1a d7       	st.w	--sp,r7
8000a498:	a1 7b       	lsl	r11,0x1
8000a49a:	5f 3c       	srlo	r12
8000a49c:	a1 79       	lsl	r9,0x1
8000a49e:	5f 37       	srlo	r7
8000a4a0:	5c fc       	rol	r12
8000a4a2:	fc 1e ff e0 	movh	lr,0xffe0
8000a4a6:	58 0a       	cp.w	r10,0
8000a4a8:	fc 0b 13 00 	cpc	r11,lr
8000a4ac:	e0 8b 00 1d 	brhi	8000a4e6 <__avr32_f64_cmp_lt+0x52>
8000a4b0:	58 08       	cp.w	r8,0
8000a4b2:	fc 09 13 00 	cpc	r9,lr
8000a4b6:	e0 8b 00 18 	brhi	8000a4e6 <__avr32_f64_cmp_lt+0x52>
8000a4ba:	58 0b       	cp.w	r11,0
8000a4bc:	f5 ba 00 00 	subfeq	r10,0
8000a4c0:	c1 50       	breq	8000a4ea <__avr32_f64_cmp_lt+0x56>
8000a4c2:	1b 07       	ld.w	r7,sp++
8000a4c4:	1b 0e       	ld.w	lr,sp++
8000a4c6:	58 3c       	cp.w	r12,3
8000a4c8:	c0 a0       	breq	8000a4dc <__avr32_f64_cmp_lt+0x48>
8000a4ca:	58 1c       	cp.w	r12,1
8000a4cc:	c0 33       	brcs	8000a4d2 <__avr32_f64_cmp_lt+0x3e>
8000a4ce:	5e 0d       	reteq	0
8000a4d0:	5e 1f       	retne	1
8000a4d2:	10 3a       	cp.w	r10,r8
8000a4d4:	f2 0b 13 00 	cpc	r11,r9
8000a4d8:	5e 2d       	reths	0
8000a4da:	5e 3f       	retlo	1
8000a4dc:	14 38       	cp.w	r8,r10
8000a4de:	f6 09 13 00 	cpc	r9,r11
8000a4e2:	5e 2d       	reths	0
8000a4e4:	5e 3f       	retlo	1
8000a4e6:	1b 07       	ld.w	r7,sp++
8000a4e8:	d8 0a       	popm	pc,r12=0
8000a4ea:	58 17       	cp.w	r7,1
8000a4ec:	5f 1c       	srne	r12
8000a4ee:	58 09       	cp.w	r9,0
8000a4f0:	f5 b8 00 00 	subfeq	r8,0
8000a4f4:	1b 07       	ld.w	r7,sp++
8000a4f6:	1b 0e       	ld.w	lr,sp++
8000a4f8:	5e 0d       	reteq	0
8000a4fa:	5e fc       	retal	r12

8000a4fc <__avr32_f64_div>:
8000a4fc:	eb cd 40 ff 	pushm	r0-r7,lr
8000a500:	f7 e9 20 0e 	eor	lr,r11,r9
8000a504:	f6 07 16 14 	lsr	r7,r11,0x14
8000a508:	a9 7b       	lsl	r11,0x9
8000a50a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a50e:	a9 7a       	lsl	r10,0x9
8000a510:	bd bb       	sbr	r11,0x1d
8000a512:	e4 1b 3f ff 	andh	r11,0x3fff
8000a516:	ab d7       	cbr	r7,0xb
8000a518:	e0 80 00 cc 	breq	8000a6b0 <__avr32_f64_div_round_subnormal+0x54>
8000a51c:	e0 47 07 ff 	cp.w	r7,2047
8000a520:	e0 84 00 b5 	brge	8000a68a <__avr32_f64_div_round_subnormal+0x2e>
8000a524:	f2 06 16 14 	lsr	r6,r9,0x14
8000a528:	a9 79       	lsl	r9,0x9
8000a52a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a52e:	a9 78       	lsl	r8,0x9
8000a530:	bd b9       	sbr	r9,0x1d
8000a532:	e4 19 3f ff 	andh	r9,0x3fff
8000a536:	ab d6       	cbr	r6,0xb
8000a538:	e0 80 00 e2 	breq	8000a6fc <__avr32_f64_div_round_subnormal+0xa0>
8000a53c:	e0 46 07 ff 	cp.w	r6,2047
8000a540:	e0 84 00 b2 	brge	8000a6a4 <__avr32_f64_div_round_subnormal+0x48>
8000a544:	0c 17       	sub	r7,r6
8000a546:	fe 37 fc 01 	sub	r7,-1023
8000a54a:	fc 1c 80 00 	movh	r12,0x8000
8000a54e:	f8 03 16 01 	lsr	r3,r12,0x1
8000a552:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a556:	5c d4       	com	r4
8000a558:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a55c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a560:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a564:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a568:	ea 03 15 02 	lsl	r3,r5,0x2
8000a56c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a570:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a574:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a578:	ea 03 15 02 	lsl	r3,r5,0x2
8000a57c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a580:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a584:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a588:	ea 03 15 02 	lsl	r3,r5,0x2
8000a58c:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a590:	e4 09 07 40 	macu.d	r0,r2,r9
8000a594:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a598:	02 04       	add	r4,r1
8000a59a:	5c 05       	acr	r5
8000a59c:	a3 65       	lsl	r5,0x2
8000a59e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a5a2:	a3 64       	lsl	r4,0x2
8000a5a4:	5c 34       	neg	r4
8000a5a6:	f8 05 01 45 	sbc	r5,r12,r5
8000a5aa:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a5ae:	e4 05 07 40 	macu.d	r0,r2,r5
8000a5b2:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a5b6:	02 04       	add	r4,r1
8000a5b8:	5c 05       	acr	r5
8000a5ba:	ea 03 15 02 	lsl	r3,r5,0x2
8000a5be:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a5c2:	e8 02 15 02 	lsl	r2,r4,0x2
8000a5c6:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a5ca:	e4 09 07 40 	macu.d	r0,r2,r9
8000a5ce:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a5d2:	02 04       	add	r4,r1
8000a5d4:	5c 05       	acr	r5
8000a5d6:	a3 65       	lsl	r5,0x2
8000a5d8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a5dc:	a3 64       	lsl	r4,0x2
8000a5de:	5c 34       	neg	r4
8000a5e0:	f8 05 01 45 	sbc	r5,r12,r5
8000a5e4:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a5e8:	e4 05 07 40 	macu.d	r0,r2,r5
8000a5ec:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a5f0:	02 04       	add	r4,r1
8000a5f2:	5c 05       	acr	r5
8000a5f4:	ea 03 15 02 	lsl	r3,r5,0x2
8000a5f8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a5fc:	e8 02 15 02 	lsl	r2,r4,0x2
8000a600:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a604:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a608:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a60c:	02 02       	add	r2,r1
8000a60e:	5c 03       	acr	r3
8000a610:	ed b3 00 1c 	bld	r3,0x1c
8000a614:	c0 90       	breq	8000a626 <__avr32_f64_div+0x12a>
8000a616:	a1 72       	lsl	r2,0x1
8000a618:	5c f3       	rol	r3
8000a61a:	20 17       	sub	r7,1
8000a61c:	a3 9a       	lsr	r10,0x3
8000a61e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a622:	a3 9b       	lsr	r11,0x3
8000a624:	c0 58       	rjmp	8000a62e <__avr32_f64_div+0x132>
8000a626:	a5 8a       	lsr	r10,0x4
8000a628:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a62c:	a5 8b       	lsr	r11,0x4
8000a62e:	58 07       	cp.w	r7,0
8000a630:	e0 8a 00 8b 	brle	8000a746 <__avr32_f64_div_res_subnormal>
8000a634:	e0 12 ff 00 	andl	r2,0xff00
8000a638:	e8 12 00 80 	orl	r2,0x80
8000a63c:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a640:	e4 09 07 40 	macu.d	r0,r2,r9
8000a644:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a648:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a64c:	00 05       	add	r5,r0
8000a64e:	f0 01 00 48 	adc	r8,r8,r1
8000a652:	5c 09       	acr	r9
8000a654:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a658:	58 04       	cp.w	r4,0
8000a65a:	5c 25       	cpc	r5

8000a65c <__avr32_f64_div_round_subnormal>:
8000a65c:	f4 08 13 00 	cpc	r8,r10
8000a660:	f6 09 13 00 	cpc	r9,r11
8000a664:	5f 36       	srlo	r6
8000a666:	f8 06 17 00 	moveq	r6,r12
8000a66a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a66e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a672:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a676:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a67a:	ed be 00 1f 	bld	lr,0x1f
8000a67e:	ef bb 00 1f 	bst	r11,0x1f
8000a682:	0c 0a       	add	r10,r6
8000a684:	5c 0b       	acr	r11
8000a686:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a68a:	e4 1b 00 0f 	andh	r11,0xf
8000a68e:	14 4b       	or	r11,r10
8000a690:	e0 81 00 a7 	brne	8000a7de <__avr32_f64_div_res_subnormal+0x98>
8000a694:	f2 06 16 14 	lsr	r6,r9,0x14
8000a698:	ab d6       	cbr	r6,0xb
8000a69a:	e0 46 07 ff 	cp.w	r6,2047
8000a69e:	e0 81 00 a4 	brne	8000a7e6 <__avr32_f64_div_res_subnormal+0xa0>
8000a6a2:	c9 e8       	rjmp	8000a7de <__avr32_f64_div_res_subnormal+0x98>
8000a6a4:	e4 19 00 0f 	andh	r9,0xf
8000a6a8:	10 49       	or	r9,r8
8000a6aa:	e0 81 00 9a 	brne	8000a7de <__avr32_f64_div_res_subnormal+0x98>
8000a6ae:	c9 28       	rjmp	8000a7d2 <__avr32_f64_div_res_subnormal+0x8c>
8000a6b0:	a3 7b       	lsl	r11,0x3
8000a6b2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a6b6:	a3 7a       	lsl	r10,0x3
8000a6b8:	f5 eb 10 04 	or	r4,r10,r11
8000a6bc:	e0 80 00 a0 	breq	8000a7fc <__avr32_f64_div_op1_zero>
8000a6c0:	f6 04 12 00 	clz	r4,r11
8000a6c4:	c1 70       	breq	8000a6f2 <__avr32_f64_div_round_subnormal+0x96>
8000a6c6:	c0 c3       	brcs	8000a6de <__avr32_f64_div_round_subnormal+0x82>
8000a6c8:	e8 05 11 20 	rsub	r5,r4,32
8000a6cc:	f6 04 09 4b 	lsl	r11,r11,r4
8000a6d0:	f4 05 0a 45 	lsr	r5,r10,r5
8000a6d4:	0a 4b       	or	r11,r5
8000a6d6:	f4 04 09 4a 	lsl	r10,r10,r4
8000a6da:	08 17       	sub	r7,r4
8000a6dc:	c0 b8       	rjmp	8000a6f2 <__avr32_f64_div_round_subnormal+0x96>
8000a6de:	f4 04 12 00 	clz	r4,r10
8000a6e2:	f9 b4 03 00 	movlo	r4,0
8000a6e6:	f7 b4 02 e0 	subhs	r4,-32
8000a6ea:	f4 04 09 4b 	lsl	r11,r10,r4
8000a6ee:	30 0a       	mov	r10,0
8000a6f0:	08 17       	sub	r7,r4
8000a6f2:	a3 8a       	lsr	r10,0x2
8000a6f4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a6f8:	a3 8b       	lsr	r11,0x2
8000a6fa:	c1 1b       	rjmp	8000a51c <__avr32_f64_div+0x20>
8000a6fc:	a3 79       	lsl	r9,0x3
8000a6fe:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000a702:	a3 78       	lsl	r8,0x3
8000a704:	f3 e8 10 04 	or	r4,r9,r8
8000a708:	c6 f0       	breq	8000a7e6 <__avr32_f64_div_res_subnormal+0xa0>
8000a70a:	f2 04 12 00 	clz	r4,r9
8000a70e:	c1 70       	breq	8000a73c <__avr32_f64_div_round_subnormal+0xe0>
8000a710:	c0 c3       	brcs	8000a728 <__avr32_f64_div_round_subnormal+0xcc>
8000a712:	e8 05 11 20 	rsub	r5,r4,32
8000a716:	f2 04 09 49 	lsl	r9,r9,r4
8000a71a:	f0 05 0a 45 	lsr	r5,r8,r5
8000a71e:	0a 49       	or	r9,r5
8000a720:	f0 04 09 48 	lsl	r8,r8,r4
8000a724:	08 16       	sub	r6,r4
8000a726:	c0 b8       	rjmp	8000a73c <__avr32_f64_div_round_subnormal+0xe0>
8000a728:	f0 04 12 00 	clz	r4,r8
8000a72c:	f9 b4 03 00 	movlo	r4,0
8000a730:	f7 b4 02 e0 	subhs	r4,-32
8000a734:	f0 04 09 49 	lsl	r9,r8,r4
8000a738:	30 08       	mov	r8,0
8000a73a:	08 16       	sub	r6,r4
8000a73c:	a3 88       	lsr	r8,0x2
8000a73e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000a742:	a3 89       	lsr	r9,0x2
8000a744:	cf ca       	rjmp	8000a53c <__avr32_f64_div+0x40>

8000a746 <__avr32_f64_div_res_subnormal>:
8000a746:	5c 37       	neg	r7
8000a748:	2f f7       	sub	r7,-1
8000a74a:	f1 b7 04 c0 	satu	r7,0x6
8000a74e:	e0 47 00 20 	cp.w	r7,32
8000a752:	c1 54       	brge	8000a77c <__avr32_f64_div_res_subnormal+0x36>
8000a754:	ee 06 11 20 	rsub	r6,r7,32
8000a758:	e4 07 0a 42 	lsr	r2,r2,r7
8000a75c:	e6 06 09 4c 	lsl	r12,r3,r6
8000a760:	18 42       	or	r2,r12
8000a762:	e6 07 0a 43 	lsr	r3,r3,r7
8000a766:	f4 06 09 41 	lsl	r1,r10,r6
8000a76a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a76e:	f6 06 09 4c 	lsl	r12,r11,r6
8000a772:	18 4a       	or	r10,r12
8000a774:	f6 07 0a 4b 	lsr	r11,r11,r7
8000a778:	30 00       	mov	r0,0
8000a77a:	c1 58       	rjmp	8000a7a4 <__avr32_f64_div_res_subnormal+0x5e>
8000a77c:	ee 06 11 20 	rsub	r6,r7,32
8000a780:	f9 b0 00 00 	moveq	r0,0
8000a784:	f9 bc 00 00 	moveq	r12,0
8000a788:	c0 50       	breq	8000a792 <__avr32_f64_div_res_subnormal+0x4c>
8000a78a:	f4 06 09 40 	lsl	r0,r10,r6
8000a78e:	f6 06 09 4c 	lsl	r12,r11,r6
8000a792:	e6 07 0a 42 	lsr	r2,r3,r7
8000a796:	30 03       	mov	r3,0
8000a798:	f4 07 0a 41 	lsr	r1,r10,r7
8000a79c:	18 41       	or	r1,r12
8000a79e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a7a2:	30 0b       	mov	r11,0
8000a7a4:	e0 12 ff 00 	andl	r2,0xff00
8000a7a8:	e8 12 00 80 	orl	r2,0x80
8000a7ac:	e6 08 06 46 	mulu.d	r6,r3,r8
8000a7b0:	e4 09 07 46 	macu.d	r6,r2,r9
8000a7b4:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a7b8:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a7bc:	0c 05       	add	r5,r6
8000a7be:	f0 07 00 48 	adc	r8,r8,r7
8000a7c2:	5c 09       	acr	r9
8000a7c4:	30 07       	mov	r7,0
8000a7c6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a7ca:	00 34       	cp.w	r4,r0
8000a7cc:	e2 05 13 00 	cpc	r5,r1
8000a7d0:	c4 6b       	rjmp	8000a65c <__avr32_f64_div_round_subnormal>
8000a7d2:	1c 9b       	mov	r11,lr
8000a7d4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a7d8:	30 0a       	mov	r10,0
8000a7da:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a7de:	3f fb       	mov	r11,-1
8000a7e0:	30 0a       	mov	r10,0
8000a7e2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a7e6:	f5 eb 10 04 	or	r4,r10,r11
8000a7ea:	c0 90       	breq	8000a7fc <__avr32_f64_div_op1_zero>
8000a7ec:	1c 9b       	mov	r11,lr
8000a7ee:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a7f2:	ea 1b 7f f0 	orh	r11,0x7ff0
8000a7f6:	30 0a       	mov	r10,0
8000a7f8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000a7fc <__avr32_f64_div_op1_zero>:
8000a7fc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000a800:	ce f0       	breq	8000a7de <__avr32_f64_div_res_subnormal+0x98>
8000a802:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000a806:	e0 44 07 ff 	cp.w	r4,2047
8000a80a:	ce 41       	brne	8000a7d2 <__avr32_f64_div_res_subnormal+0x8c>
8000a80c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000a810:	ce 10       	breq	8000a7d2 <__avr32_f64_div_res_subnormal+0x8c>
8000a812:	ce 6b       	rjmp	8000a7de <__avr32_f64_div_res_subnormal+0x98>

8000a814 <__avr32_f32_div>:
8000a814:	f7 ec 20 08 	eor	r8,r11,r12
8000a818:	a1 7c       	lsl	r12,0x1
8000a81a:	a1 7b       	lsl	r11,0x1
8000a81c:	c7 a0       	breq	8000a910 <__divsf_return_op1+0x16>
8000a81e:	18 7c       	tst	r12,r12
8000a820:	f9 b9 00 00 	moveq	r9,0
8000a824:	c0 90       	breq	8000a836 <__avr32_f32_div+0x22>
8000a826:	f8 09 16 18 	lsr	r9,r12,0x18
8000a82a:	c7 e0       	breq	8000a926 <__divsf_return_op1+0x2c>
8000a82c:	e0 49 00 ff 	cp.w	r9,255
8000a830:	c6 82       	brcc	8000a900 <__divsf_return_op1+0x6>
8000a832:	a7 7c       	lsl	r12,0x7
8000a834:	bf bc       	sbr	r12,0x1f
8000a836:	f6 0a 16 18 	lsr	r10,r11,0x18
8000a83a:	c7 e0       	breq	8000a936 <__divsf_return_op1+0x3c>
8000a83c:	e0 4a 00 ff 	cp.w	r10,255
8000a840:	c6 62       	brcc	8000a90c <__divsf_return_op1+0x12>
8000a842:	a7 7b       	lsl	r11,0x7
8000a844:	bf bb       	sbr	r11,0x1f
8000a846:	58 09       	cp.w	r9,0
8000a848:	f5 bc 00 00 	subfeq	r12,0
8000a84c:	5e 0d       	reteq	0
8000a84e:	1a d5       	st.w	--sp,r5
8000a850:	bb 27       	st.d	--sp,r6
8000a852:	14 19       	sub	r9,r10
8000a854:	28 19       	sub	r9,-127
8000a856:	fc 1a 80 00 	movh	r10,0x8000
8000a85a:	a3 8c       	lsr	r12,0x2
8000a85c:	f6 05 16 02 	lsr	r5,r11,0x2
8000a860:	f4 0b 16 01 	lsr	r11,r10,0x1
8000a864:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000a868:	5c d6       	com	r6
8000a86a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000a86e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a872:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a876:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a87a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a87e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a882:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a886:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a88a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a88e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a892:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a896:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a89a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a89e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a8a2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a8a6:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a8aa:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a8ae:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000a8b2:	a5 8c       	lsr	r12,0x4
8000a8b4:	ed b7 00 1c 	bld	r7,0x1c
8000a8b8:	c0 40       	breq	8000a8c0 <__avr32_f32_div+0xac>
8000a8ba:	a1 77       	lsl	r7,0x1
8000a8bc:	20 19       	sub	r9,1
8000a8be:	a1 7c       	lsl	r12,0x1
8000a8c0:	58 09       	cp.w	r9,0
8000a8c2:	e0 8a 00 42 	brle	8000a946 <__avr32_f32_div_res_subnormal>
8000a8c6:	e0 17 ff e0 	andl	r7,0xffe0
8000a8ca:	e8 17 00 10 	orl	r7,0x10
8000a8ce:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a8d2:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a8d6:	58 0a       	cp.w	r10,0

8000a8d8 <__avr32_f32_div_round_subnormal>:
8000a8d8:	f8 0b 13 00 	cpc	r11,r12
8000a8dc:	5f 3b       	srlo	r11
8000a8de:	ea 0b 17 00 	moveq	r11,r5
8000a8e2:	ee 0c 16 05 	lsr	r12,r7,0x5
8000a8e6:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000a8ea:	bb 07       	ld.d	r6,sp++
8000a8ec:	1b 05       	ld.w	r5,sp++
8000a8ee:	ed b8 00 1f 	bld	r8,0x1f
8000a8f2:	ef bc 00 1f 	bst	r12,0x1f
8000a8f6:	16 0c       	add	r12,r11
8000a8f8:	5e fc       	retal	r12

8000a8fa <__divsf_return_op1>:
8000a8fa:	a1 78       	lsl	r8,0x1
8000a8fc:	5d 0c       	ror	r12
8000a8fe:	5e fc       	retal	r12
8000a900:	5e 1e       	retne	-1
8000a902:	fc 19 ff 00 	movh	r9,0xff00
8000a906:	12 3b       	cp.w	r11,r9
8000a908:	cf 93       	brcs	8000a8fa <__divsf_return_op1>
8000a90a:	5e fe       	retal	-1
8000a90c:	5e 0d       	reteq	0
8000a90e:	5e fe       	retal	-1
8000a910:	18 7c       	tst	r12,r12
8000a912:	5e 0e       	reteq	-1
8000a914:	f8 09 16 18 	lsr	r9,r12,0x18
8000a918:	c0 70       	breq	8000a926 <__divsf_return_op1+0x2c>
8000a91a:	e0 49 00 ff 	cp.w	r9,255
8000a91e:	cf 12       	brcc	8000a900 <__divsf_return_op1+0x6>
8000a920:	fc 1c ff 00 	movh	r12,0xff00
8000a924:	ce bb       	rjmp	8000a8fa <__divsf_return_op1>
8000a926:	a7 7c       	lsl	r12,0x7
8000a928:	f8 09 12 00 	clz	r9,r12
8000a92c:	f8 09 09 4c 	lsl	r12,r12,r9
8000a930:	f2 09 11 01 	rsub	r9,r9,1
8000a934:	c8 1b       	rjmp	8000a836 <__avr32_f32_div+0x22>
8000a936:	a7 7b       	lsl	r11,0x7
8000a938:	f6 0a 12 00 	clz	r10,r11
8000a93c:	f6 0a 09 4b 	lsl	r11,r11,r10
8000a940:	f4 0a 11 01 	rsub	r10,r10,1
8000a944:	c8 5b       	rjmp	8000a84e <__avr32_f32_div+0x3a>

8000a946 <__avr32_f32_div_res_subnormal>:
8000a946:	5c 39       	neg	r9
8000a948:	2f f9       	sub	r9,-1
8000a94a:	f1 b9 04 a0 	satu	r9,0x5
8000a94e:	f2 0a 11 20 	rsub	r10,r9,32
8000a952:	ee 09 0a 47 	lsr	r7,r7,r9
8000a956:	f8 0a 09 46 	lsl	r6,r12,r10
8000a95a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000a95e:	e0 17 ff e0 	andl	r7,0xffe0
8000a962:	e8 17 00 10 	orl	r7,0x10
8000a966:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a96a:	30 09       	mov	r9,0
8000a96c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a970:	0c 3a       	cp.w	r10,r6
8000a972:	cb 3b       	rjmp	8000a8d8 <__avr32_f32_div_round_subnormal>

8000a974 <__avr32_f32_to_f64>:
8000a974:	f8 0b 15 01 	lsl	r11,r12,0x1
8000a978:	f9 ba 00 00 	moveq	r10,0
8000a97c:	5e 0b       	reteq	r11
8000a97e:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
8000a982:	e0 49 00 ff 	cp.w	r9,255
8000a986:	c1 e0       	breq	8000a9c2 <__extendsfdf_return_op1+0x6>
8000a988:	a7 7b       	lsl	r11,0x7
8000a98a:	30 0a       	mov	r10,0
8000a98c:	58 09       	cp.w	r9,0
8000a98e:	f7 b9 00 ff 	subeq	r9,-1
8000a992:	5f 18       	srne	r8
8000a994:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
8000a998:	fe 39 fc 80 	sub	r9,-896
8000a99c:	f6 08 12 00 	clz	r8,r11
8000a9a0:	10 19       	sub	r9,r8
8000a9a2:	f6 08 09 4b 	lsl	r11,r11,r8
8000a9a6:	ed bb 00 1f 	bld	r11,0x1f
8000a9aa:	f7 b9 01 01 	subne	r9,1
8000a9ae:	ab 9a       	lsr	r10,0xb
8000a9b0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a9b4:	a1 7b       	lsl	r11,0x1
8000a9b6:	ab 9b       	lsr	r11,0xb
8000a9b8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a9bc <__extendsfdf_return_op1>:
8000a9bc:	a1 7c       	lsl	r12,0x1
8000a9be:	5d 0b       	ror	r11
8000a9c0:	5e fb       	retal	r11
8000a9c2:	fc 1a ff e0 	movh	r10,0xffe0
8000a9c6:	a9 6b       	lsl	r11,0x8
8000a9c8:	f9 bb 01 ff 	movne	r11,-1
8000a9cc:	f4 0b 17 00 	moveq	r11,r10
8000a9d0:	30 0a       	mov	r10,0
8000a9d2:	cf 5b       	rjmp	8000a9bc <__extendsfdf_return_op1>

8000a9d4 <__avr32_f64_to_f32>:
8000a9d4:	f6 09 15 01 	lsl	r9,r11,0x1
8000a9d8:	b5 99       	lsr	r9,0x15
8000a9da:	5e 0d       	reteq	0
8000a9dc:	f6 08 15 0a 	lsl	r8,r11,0xa
8000a9e0:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000a9e4:	ab 6a       	lsl	r10,0xa
8000a9e6:	5c 3a       	neg	r10
8000a9e8:	5c fc       	rol	r12
8000a9ea:	e0 49 07 ff 	cp.w	r9,2047
8000a9ee:	c1 a0       	breq	8000aa22 <__truncdfsf_return_op1+0x6>
8000a9f0:	e0 29 03 80 	sub	r9,896
8000a9f4:	bf bc       	sbr	r12,0x1f
8000a9f6:	58 09       	cp.w	r9,0
8000a9f8:	e0 8a 00 1a 	brle	8000aa2c <__truncdfsf_return_op1+0x10>
8000a9fc:	37 fa       	mov	r10,127
8000a9fe:	ed bc 00 08 	bld	r12,0x8
8000aa02:	f7 ba 00 ff 	subeq	r10,-1
8000aa06:	14 0c       	add	r12,r10
8000aa08:	f7 b9 03 fe 	sublo	r9,-2
8000aa0c:	ed bc 00 1f 	bld	r12,0x1f
8000aa10:	f7 b9 01 01 	subne	r9,1
8000aa14:	f8 0c 16 07 	lsr	r12,r12,0x7
8000aa18:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000aa1c <__truncdfsf_return_op1>:
8000aa1c:	a1 7b       	lsl	r11,0x1
8000aa1e:	5d 0c       	ror	r12
8000aa20:	5e fc       	retal	r12
8000aa22:	bf dc       	cbr	r12,0x1f
8000aa24:	5e 1e       	retne	-1
8000aa26:	fc 1c 7f 80 	movh	r12,0x7f80
8000aa2a:	5e fc       	retal	r12
8000aa2c:	f2 09 11 01 	rsub	r9,r9,1
8000aa30:	59 99       	cp.w	r9,25
8000aa32:	f9 bc 02 00 	movhs	r12,0
8000aa36:	c1 32       	brcc	8000aa5c <__truncdfsf_return_op1+0x40>
8000aa38:	f2 0a 11 20 	rsub	r10,r9,32
8000aa3c:	f8 0a 09 4a 	lsl	r10,r12,r10
8000aa40:	5f 1a       	srne	r10
8000aa42:	f8 09 0a 4c 	lsr	r12,r12,r9
8000aa46:	14 4c       	or	r12,r10
8000aa48:	37 fa       	mov	r10,127
8000aa4a:	ed bc 00 08 	bld	r12,0x8
8000aa4e:	f7 ba 00 ff 	subeq	r10,-1
8000aa52:	14 0c       	add	r12,r10
8000aa54:	f8 0c 16 07 	lsr	r12,r12,0x7
8000aa58:	a1 7b       	lsl	r11,0x1
8000aa5a:	5d 0c       	ror	r12
8000aa5c:	5e fc       	retal	r12

8000aa5e <__avr32_sdiv64>:
8000aa5e:	d4 31       	pushm	r0-r7,lr
8000aa60:	1a 97       	mov	r7,sp
8000aa62:	20 4d       	sub	sp,16
8000aa64:	14 92       	mov	r2,r10
8000aa66:	16 93       	mov	r3,r11
8000aa68:	10 90       	mov	r0,r8
8000aa6a:	12 91       	mov	r1,r9
8000aa6c:	58 0b       	cp.w	r11,0
8000aa6e:	c0 35       	brlt	8000aa74 <__avr32_sdiv64+0x16>
8000aa70:	30 0c       	mov	r12,0
8000aa72:	c0 88       	rjmp	8000aa82 <__avr32_sdiv64+0x24>
8000aa74:	30 0a       	mov	r10,0
8000aa76:	30 0b       	mov	r11,0
8000aa78:	3f fc       	mov	r12,-1
8000aa7a:	f4 02 01 02 	sub	r2,r10,r2
8000aa7e:	f6 03 01 43 	sbc	r3,r11,r3
8000aa82:	58 09       	cp.w	r9,0
8000aa84:	c0 74       	brge	8000aa92 <__avr32_sdiv64+0x34>
8000aa86:	30 00       	mov	r0,0
8000aa88:	30 01       	mov	r1,0
8000aa8a:	5c dc       	com	r12
8000aa8c:	10 10       	sub	r0,r8
8000aa8e:	e2 09 01 41 	sbc	r1,r1,r9
8000aa92:	04 99       	mov	r9,r2
8000aa94:	06 9a       	mov	r10,r3
8000aa96:	00 95       	mov	r5,r0
8000aa98:	04 96       	mov	r6,r2
8000aa9a:	00 98       	mov	r8,r0
8000aa9c:	02 9e       	mov	lr,r1
8000aa9e:	58 01       	cp.w	r1,0
8000aaa0:	e0 81 00 bc 	brne	8000ac18 <__avr32_sdiv64+0x1ba>
8000aaa4:	06 30       	cp.w	r0,r3
8000aaa6:	e0 88 00 40 	brls	8000ab26 <__avr32_sdiv64+0xc8>
8000aaaa:	e0 0b 12 00 	clz	r11,r0
8000aaae:	c0 d0       	breq	8000aac8 <__avr32_sdiv64+0x6a>
8000aab0:	e6 0b 09 4a 	lsl	r10,r3,r11
8000aab4:	f6 0e 11 20 	rsub	lr,r11,32
8000aab8:	e0 0b 09 48 	lsl	r8,r0,r11
8000aabc:	e4 0e 0a 4e 	lsr	lr,r2,lr
8000aac0:	e4 0b 09 49 	lsl	r9,r2,r11
8000aac4:	fd ea 10 0a 	or	r10,lr,r10
8000aac8:	f0 05 16 10 	lsr	r5,r8,0x10
8000aacc:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
8000aad0:	f4 05 0d 02 	divu	r2,r10,r5
8000aad4:	f2 0a 16 10 	lsr	r10,r9,0x10
8000aad8:	04 9b       	mov	r11,r2
8000aada:	f5 e3 11 0a 	or	r10,r10,r3<<0x10
8000aade:	e4 06 02 4e 	mul	lr,r2,r6
8000aae2:	1c 3a       	cp.w	r10,lr
8000aae4:	c0 a2       	brcc	8000aaf8 <__avr32_sdiv64+0x9a>
8000aae6:	20 1b       	sub	r11,1
8000aae8:	10 0a       	add	r10,r8
8000aaea:	10 3a       	cp.w	r10,r8
8000aaec:	c0 63       	brcs	8000aaf8 <__avr32_sdiv64+0x9a>
8000aaee:	1c 3a       	cp.w	r10,lr
8000aaf0:	f7 bb 03 01 	sublo	r11,1
8000aaf4:	f5 d8 e3 0a 	addcs	r10,r10,r8
8000aaf8:	f4 0e 01 03 	sub	r3,r10,lr
8000aafc:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000ab00:	e6 05 0d 02 	divu	r2,r3,r5
8000ab04:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000ab08:	04 9a       	mov	r10,r2
8000ab0a:	e4 06 02 4e 	mul	lr,r2,r6
8000ab0e:	1c 39       	cp.w	r9,lr
8000ab10:	c0 82       	brcc	8000ab20 <__avr32_sdiv64+0xc2>
8000ab12:	20 1a       	sub	r10,1
8000ab14:	10 09       	add	r9,r8
8000ab16:	10 39       	cp.w	r9,r8
8000ab18:	c0 43       	brcs	8000ab20 <__avr32_sdiv64+0xc2>
8000ab1a:	1c 39       	cp.w	r9,lr
8000ab1c:	f7 ba 03 01 	sublo	r10,1
8000ab20:	f5 eb 11 08 	or	r8,r10,r11<<0x10
8000ab24:	ce 48       	rjmp	8000acec <__avr32_sdiv64+0x28e>
8000ab26:	58 00       	cp.w	r0,0
8000ab28:	c0 51       	brne	8000ab32 <__avr32_sdiv64+0xd4>
8000ab2a:	30 13       	mov	r3,1
8000ab2c:	e6 00 0d 02 	divu	r2,r3,r0
8000ab30:	04 98       	mov	r8,r2
8000ab32:	f0 05 12 00 	clz	r5,r8
8000ab36:	c0 41       	brne	8000ab3e <__avr32_sdiv64+0xe0>
8000ab38:	10 1a       	sub	r10,r8
8000ab3a:	30 1b       	mov	r11,1
8000ab3c:	c4 08       	rjmp	8000abbc <__avr32_sdiv64+0x15e>
8000ab3e:	f0 05 09 48 	lsl	r8,r8,r5
8000ab42:	f4 05 09 4e 	lsl	lr,r10,r5
8000ab46:	ea 0b 11 20 	rsub	r11,r5,32
8000ab4a:	f0 02 16 10 	lsr	r2,r8,0x10
8000ab4e:	f2 0b 0a 46 	lsr	r6,r9,r11
8000ab52:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000ab56:	f6 02 0d 0a 	divu	r10,r11,r2
8000ab5a:	ed ee 10 0e 	or	lr,r6,lr
8000ab5e:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000ab62:	14 96       	mov	r6,r10
8000ab64:	fc 01 16 10 	lsr	r1,lr,0x10
8000ab68:	e3 eb 11 0a 	or	r10,r1,r11<<0x10
8000ab6c:	ec 03 02 4b 	mul	r11,r6,r3
8000ab70:	16 3a       	cp.w	r10,r11
8000ab72:	c0 a2       	brcc	8000ab86 <__avr32_sdiv64+0x128>
8000ab74:	20 16       	sub	r6,1
8000ab76:	10 0a       	add	r10,r8
8000ab78:	10 3a       	cp.w	r10,r8
8000ab7a:	c0 63       	brcs	8000ab86 <__avr32_sdiv64+0x128>
8000ab7c:	16 3a       	cp.w	r10,r11
8000ab7e:	f7 b6 03 01 	sublo	r6,1
8000ab82:	f5 d8 e3 0a 	addcs	r10,r10,r8
8000ab86:	f4 0b 01 0b 	sub	r11,r10,r11
8000ab8a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000ab8e:	f6 02 0d 0a 	divu	r10,r11,r2
8000ab92:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000ab96:	14 9b       	mov	r11,r10
8000ab98:	a7 3a       	mul	r10,r3
8000ab9a:	14 3e       	cp.w	lr,r10
8000ab9c:	c0 a2       	brcc	8000abb0 <__avr32_sdiv64+0x152>
8000ab9e:	20 1b       	sub	r11,1
8000aba0:	10 0e       	add	lr,r8
8000aba2:	10 3e       	cp.w	lr,r8
8000aba4:	c0 63       	brcs	8000abb0 <__avr32_sdiv64+0x152>
8000aba6:	14 3e       	cp.w	lr,r10
8000aba8:	f7 bb 03 01 	sublo	r11,1
8000abac:	fd d8 e3 0e 	addcs	lr,lr,r8
8000abb0:	f2 05 09 49 	lsl	r9,r9,r5
8000abb4:	fc 0a 01 0a 	sub	r10,lr,r10
8000abb8:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000abbc:	f0 03 16 10 	lsr	r3,r8,0x10
8000abc0:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000abc4:	f4 03 0d 00 	divu	r0,r10,r3
8000abc8:	f2 0a 16 10 	lsr	r10,r9,0x10
8000abcc:	00 96       	mov	r6,r0
8000abce:	f5 e1 11 0a 	or	r10,r10,r1<<0x10
8000abd2:	e0 05 02 4e 	mul	lr,r0,r5
8000abd6:	1c 3a       	cp.w	r10,lr
8000abd8:	c0 a2       	brcc	8000abec <__avr32_sdiv64+0x18e>
8000abda:	20 16       	sub	r6,1
8000abdc:	10 0a       	add	r10,r8
8000abde:	10 3a       	cp.w	r10,r8
8000abe0:	c0 63       	brcs	8000abec <__avr32_sdiv64+0x18e>
8000abe2:	1c 3a       	cp.w	r10,lr
8000abe4:	f7 b6 03 01 	sublo	r6,1
8000abe8:	f5 d8 e3 0a 	addcs	r10,r10,r8
8000abec:	1c 1a       	sub	r10,lr
8000abee:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000abf2:	f4 03 0d 02 	divu	r2,r10,r3
8000abf6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000abfa:	04 9a       	mov	r10,r2
8000abfc:	e4 05 02 4e 	mul	lr,r2,r5
8000ac00:	1c 39       	cp.w	r9,lr
8000ac02:	c0 82       	brcc	8000ac12 <__avr32_sdiv64+0x1b4>
8000ac04:	20 1a       	sub	r10,1
8000ac06:	10 09       	add	r9,r8
8000ac08:	10 39       	cp.w	r9,r8
8000ac0a:	c0 43       	brcs	8000ac12 <__avr32_sdiv64+0x1b4>
8000ac0c:	1c 39       	cp.w	r9,lr
8000ac0e:	f7 ba 03 01 	sublo	r10,1
8000ac12:	f5 e6 11 08 	or	r8,r10,r6<<0x10
8000ac16:	c6 f8       	rjmp	8000acf4 <__avr32_sdiv64+0x296>
8000ac18:	06 31       	cp.w	r1,r3
8000ac1a:	e0 8b 00 6b 	brhi	8000acf0 <__avr32_sdiv64+0x292>
8000ac1e:	e2 0b 12 00 	clz	r11,r1
8000ac22:	c0 b1       	brne	8000ac38 <__avr32_sdiv64+0x1da>
8000ac24:	00 32       	cp.w	r2,r0
8000ac26:	5f 29       	srhs	r9
8000ac28:	02 33       	cp.w	r3,r1
8000ac2a:	5f b8       	srhi	r8
8000ac2c:	10 49       	or	r9,r8
8000ac2e:	f6 09 18 00 	cp.b	r9,r11
8000ac32:	c5 f0       	breq	8000acf0 <__avr32_sdiv64+0x292>
8000ac34:	30 18       	mov	r8,1
8000ac36:	c5 f8       	rjmp	8000acf4 <__avr32_sdiv64+0x296>
8000ac38:	e0 0b 09 46 	lsl	r6,r0,r11
8000ac3c:	ef 46 ff f4 	st.w	r7[-12],r6
8000ac40:	f6 06 11 20 	rsub	r6,r11,32
8000ac44:	e0 06 0a 45 	lsr	r5,r0,r6
8000ac48:	e6 0b 09 48 	lsl	r8,r3,r11
8000ac4c:	e2 0b 09 4e 	lsl	lr,r1,r11
8000ac50:	e4 06 0a 41 	lsr	r1,r2,r6
8000ac54:	eb ee 10 0e 	or	lr,r5,lr
8000ac58:	e6 06 0a 46 	lsr	r6,r3,r6
8000ac5c:	eb de c0 10 	bfextu	r5,lr,0x0,0x10
8000ac60:	ef 45 ff f0 	st.w	r7[-16],r5
8000ac64:	10 41       	or	r1,r8
8000ac66:	fc 00 16 10 	lsr	r0,lr,0x10
8000ac6a:	ee f4 ff f0 	ld.w	r4,r7[-16]
8000ac6e:	ec 00 0d 02 	divu	r2,r6,r0
8000ac72:	e2 06 16 10 	lsr	r6,r1,0x10
8000ac76:	04 95       	mov	r5,r2
8000ac78:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000ac7c:	e4 04 02 48 	mul	r8,r2,r4
8000ac80:	10 36       	cp.w	r6,r8
8000ac82:	c0 a2       	brcc	8000ac96 <__avr32_sdiv64+0x238>
8000ac84:	20 15       	sub	r5,1
8000ac86:	1c 06       	add	r6,lr
8000ac88:	1c 36       	cp.w	r6,lr
8000ac8a:	c0 63       	brcs	8000ac96 <__avr32_sdiv64+0x238>
8000ac8c:	10 36       	cp.w	r6,r8
8000ac8e:	f7 b5 03 01 	sublo	r5,1
8000ac92:	ed de e3 06 	addcs	r6,r6,lr
8000ac96:	10 16       	sub	r6,r8
8000ac98:	ec 00 0d 02 	divu	r2,r6,r0
8000ac9c:	f5 d1 c0 10 	bfextu	r10,r1,0x0,0x10
8000aca0:	04 98       	mov	r8,r2
8000aca2:	f5 e3 11 0a 	or	r10,r10,r3<<0x10
8000aca6:	ee f2 ff f0 	ld.w	r2,r7[-16]
8000acaa:	f0 02 02 46 	mul	r6,r8,r2
8000acae:	0c 3a       	cp.w	r10,r6
8000acb0:	c0 a2       	brcc	8000acc4 <__avr32_sdiv64+0x266>
8000acb2:	20 18       	sub	r8,1
8000acb4:	1c 0a       	add	r10,lr
8000acb6:	1c 3a       	cp.w	r10,lr
8000acb8:	c0 63       	brcs	8000acc4 <__avr32_sdiv64+0x266>
8000acba:	0c 3a       	cp.w	r10,r6
8000acbc:	f5 de e3 0a 	addcs	r10,r10,lr
8000acc0:	f7 b8 03 01 	sublo	r8,1
8000acc4:	ee fe ff f4 	ld.w	lr,r7[-12]
8000acc8:	f1 e5 11 08 	or	r8,r8,r5<<0x10
8000accc:	0c 1a       	sub	r10,r6
8000acce:	f0 0e 06 42 	mulu.d	r2,r8,lr
8000acd2:	04 9e       	mov	lr,r2
8000acd4:	14 33       	cp.w	r3,r10
8000acd6:	e0 8b 00 0a 	brhi	8000acea <__avr32_sdiv64+0x28c>
8000acda:	5f 0a       	sreq	r10
8000acdc:	f2 0b 09 4b 	lsl	r11,r9,r11
8000ace0:	16 32       	cp.w	r2,r11
8000ace2:	5f b9       	srhi	r9
8000ace4:	f5 e9 00 09 	and	r9,r10,r9
8000ace8:	c0 20       	breq	8000acec <__avr32_sdiv64+0x28e>
8000acea:	20 18       	sub	r8,1
8000acec:	30 0b       	mov	r11,0
8000acee:	c0 38       	rjmp	8000acf4 <__avr32_sdiv64+0x296>
8000acf0:	30 0b       	mov	r11,0
8000acf2:	16 98       	mov	r8,r11
8000acf4:	16 93       	mov	r3,r11
8000acf6:	10 92       	mov	r2,r8
8000acf8:	16 99       	mov	r9,r11
8000acfa:	58 0c       	cp.w	r12,0
8000acfc:	c0 70       	breq	8000ad0a <__avr32_sdiv64+0x2ac>
8000acfe:	30 0a       	mov	r10,0
8000ad00:	30 0b       	mov	r11,0
8000ad02:	f4 08 01 08 	sub	r8,r10,r8
8000ad06:	f6 09 01 49 	sbc	r9,r11,r9
8000ad0a:	10 9a       	mov	r10,r8
8000ad0c:	12 9b       	mov	r11,r9
8000ad0e:	2f cd       	sub	sp,-16
8000ad10:	d8 32       	popm	r0-r7,pc

8000ad12 <__avr32_udiv64>:
8000ad12:	d4 31       	pushm	r0-r7,lr
8000ad14:	1a 97       	mov	r7,sp
8000ad16:	20 3d       	sub	sp,12
8000ad18:	10 9c       	mov	r12,r8
8000ad1a:	12 9e       	mov	lr,r9
8000ad1c:	14 93       	mov	r3,r10
8000ad1e:	58 09       	cp.w	r9,0
8000ad20:	e0 81 00 bd 	brne	8000ae9a <__avr32_udiv64+0x188>
8000ad24:	16 38       	cp.w	r8,r11
8000ad26:	e0 88 00 40 	brls	8000ada6 <__avr32_udiv64+0x94>
8000ad2a:	f0 08 12 00 	clz	r8,r8
8000ad2e:	c0 d0       	breq	8000ad48 <__avr32_udiv64+0x36>
8000ad30:	f6 08 09 4b 	lsl	r11,r11,r8
8000ad34:	f0 09 11 20 	rsub	r9,r8,32
8000ad38:	f8 08 09 4c 	lsl	r12,r12,r8
8000ad3c:	f4 09 0a 49 	lsr	r9,r10,r9
8000ad40:	f4 08 09 43 	lsl	r3,r10,r8
8000ad44:	f3 eb 10 0b 	or	r11,r9,r11
8000ad48:	f8 0e 16 10 	lsr	lr,r12,0x10
8000ad4c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000ad50:	f6 0e 0d 00 	divu	r0,r11,lr
8000ad54:	e6 0b 16 10 	lsr	r11,r3,0x10
8000ad58:	00 99       	mov	r9,r0
8000ad5a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ad5e:	e0 0a 02 48 	mul	r8,r0,r10
8000ad62:	10 3b       	cp.w	r11,r8
8000ad64:	c0 a2       	brcc	8000ad78 <__avr32_udiv64+0x66>
8000ad66:	20 19       	sub	r9,1
8000ad68:	18 0b       	add	r11,r12
8000ad6a:	18 3b       	cp.w	r11,r12
8000ad6c:	c0 63       	brcs	8000ad78 <__avr32_udiv64+0x66>
8000ad6e:	10 3b       	cp.w	r11,r8
8000ad70:	f7 b9 03 01 	sublo	r9,1
8000ad74:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ad78:	f6 08 01 01 	sub	r1,r11,r8
8000ad7c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000ad80:	e2 0e 0d 00 	divu	r0,r1,lr
8000ad84:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000ad88:	00 98       	mov	r8,r0
8000ad8a:	e0 0a 02 4a 	mul	r10,r0,r10
8000ad8e:	14 33       	cp.w	r3,r10
8000ad90:	c0 82       	brcc	8000ada0 <__avr32_udiv64+0x8e>
8000ad92:	20 18       	sub	r8,1
8000ad94:	18 03       	add	r3,r12
8000ad96:	18 33       	cp.w	r3,r12
8000ad98:	c0 43       	brcs	8000ada0 <__avr32_udiv64+0x8e>
8000ad9a:	14 33       	cp.w	r3,r10
8000ad9c:	f7 b8 03 01 	sublo	r8,1
8000ada0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000ada4:	cd f8       	rjmp	8000af62 <__avr32_udiv64+0x250>
8000ada6:	58 08       	cp.w	r8,0
8000ada8:	c0 51       	brne	8000adb2 <__avr32_udiv64+0xa0>
8000adaa:	30 19       	mov	r9,1
8000adac:	f2 08 0d 08 	divu	r8,r9,r8
8000adb0:	10 9c       	mov	r12,r8
8000adb2:	f8 06 12 00 	clz	r6,r12
8000adb6:	c0 41       	brne	8000adbe <__avr32_udiv64+0xac>
8000adb8:	18 1b       	sub	r11,r12
8000adba:	30 19       	mov	r9,1
8000adbc:	c4 08       	rjmp	8000ae3c <__avr32_udiv64+0x12a>
8000adbe:	ec 01 11 20 	rsub	r1,r6,32
8000adc2:	f4 01 0a 49 	lsr	r9,r10,r1
8000adc6:	f8 06 09 4c 	lsl	r12,r12,r6
8000adca:	f6 06 09 48 	lsl	r8,r11,r6
8000adce:	f6 01 0a 41 	lsr	r1,r11,r1
8000add2:	f3 e8 10 08 	or	r8,r9,r8
8000add6:	f8 03 16 10 	lsr	r3,r12,0x10
8000adda:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000adde:	e2 03 0d 00 	divu	r0,r1,r3
8000ade2:	f0 0b 16 10 	lsr	r11,r8,0x10
8000ade6:	00 9e       	mov	lr,r0
8000ade8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000adec:	e0 05 02 49 	mul	r9,r0,r5
8000adf0:	12 3b       	cp.w	r11,r9
8000adf2:	c0 a2       	brcc	8000ae06 <__avr32_udiv64+0xf4>
8000adf4:	20 1e       	sub	lr,1
8000adf6:	18 0b       	add	r11,r12
8000adf8:	18 3b       	cp.w	r11,r12
8000adfa:	c0 63       	brcs	8000ae06 <__avr32_udiv64+0xf4>
8000adfc:	12 3b       	cp.w	r11,r9
8000adfe:	f7 be 03 01 	sublo	lr,1
8000ae02:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ae06:	12 1b       	sub	r11,r9
8000ae08:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000ae0c:	f6 03 0d 02 	divu	r2,r11,r3
8000ae10:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000ae14:	04 99       	mov	r9,r2
8000ae16:	e4 05 02 4b 	mul	r11,r2,r5
8000ae1a:	16 38       	cp.w	r8,r11
8000ae1c:	c0 a2       	brcc	8000ae30 <__avr32_udiv64+0x11e>
8000ae1e:	20 19       	sub	r9,1
8000ae20:	18 08       	add	r8,r12
8000ae22:	18 38       	cp.w	r8,r12
8000ae24:	c0 63       	brcs	8000ae30 <__avr32_udiv64+0x11e>
8000ae26:	16 38       	cp.w	r8,r11
8000ae28:	f7 b9 03 01 	sublo	r9,1
8000ae2c:	f1 dc e3 08 	addcs	r8,r8,r12
8000ae30:	f4 06 09 43 	lsl	r3,r10,r6
8000ae34:	f0 0b 01 0b 	sub	r11,r8,r11
8000ae38:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000ae3c:	f8 06 16 10 	lsr	r6,r12,0x10
8000ae40:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000ae44:	f6 06 0d 00 	divu	r0,r11,r6
8000ae48:	e6 0b 16 10 	lsr	r11,r3,0x10
8000ae4c:	00 9a       	mov	r10,r0
8000ae4e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ae52:	e0 0e 02 48 	mul	r8,r0,lr
8000ae56:	10 3b       	cp.w	r11,r8
8000ae58:	c0 a2       	brcc	8000ae6c <__avr32_udiv64+0x15a>
8000ae5a:	20 1a       	sub	r10,1
8000ae5c:	18 0b       	add	r11,r12
8000ae5e:	18 3b       	cp.w	r11,r12
8000ae60:	c0 63       	brcs	8000ae6c <__avr32_udiv64+0x15a>
8000ae62:	10 3b       	cp.w	r11,r8
8000ae64:	f7 ba 03 01 	sublo	r10,1
8000ae68:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ae6c:	f6 08 01 01 	sub	r1,r11,r8
8000ae70:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000ae74:	e2 06 0d 00 	divu	r0,r1,r6
8000ae78:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000ae7c:	00 98       	mov	r8,r0
8000ae7e:	e0 0e 02 4b 	mul	r11,r0,lr
8000ae82:	16 33       	cp.w	r3,r11
8000ae84:	c0 82       	brcc	8000ae94 <__avr32_udiv64+0x182>
8000ae86:	20 18       	sub	r8,1
8000ae88:	18 03       	add	r3,r12
8000ae8a:	18 33       	cp.w	r3,r12
8000ae8c:	c0 43       	brcs	8000ae94 <__avr32_udiv64+0x182>
8000ae8e:	16 33       	cp.w	r3,r11
8000ae90:	f7 b8 03 01 	sublo	r8,1
8000ae94:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000ae98:	c6 98       	rjmp	8000af6a <__avr32_udiv64+0x258>
8000ae9a:	16 39       	cp.w	r9,r11
8000ae9c:	e0 8b 00 65 	brhi	8000af66 <__avr32_udiv64+0x254>
8000aea0:	f2 09 12 00 	clz	r9,r9
8000aea4:	c0 b1       	brne	8000aeba <__avr32_udiv64+0x1a8>
8000aea6:	10 3a       	cp.w	r10,r8
8000aea8:	5f 2a       	srhs	r10
8000aeaa:	1c 3b       	cp.w	r11,lr
8000aeac:	5f b8       	srhi	r8
8000aeae:	10 4a       	or	r10,r8
8000aeb0:	f2 0a 18 00 	cp.b	r10,r9
8000aeb4:	c5 90       	breq	8000af66 <__avr32_udiv64+0x254>
8000aeb6:	30 18       	mov	r8,1
8000aeb8:	c5 98       	rjmp	8000af6a <__avr32_udiv64+0x258>
8000aeba:	f0 09 09 46 	lsl	r6,r8,r9
8000aebe:	f2 03 11 20 	rsub	r3,r9,32
8000aec2:	fc 09 09 4e 	lsl	lr,lr,r9
8000aec6:	f0 03 0a 48 	lsr	r8,r8,r3
8000aeca:	f6 09 09 4c 	lsl	r12,r11,r9
8000aece:	f4 03 0a 42 	lsr	r2,r10,r3
8000aed2:	ef 46 ff f4 	st.w	r7[-12],r6
8000aed6:	f6 03 0a 43 	lsr	r3,r11,r3
8000aeda:	18 42       	or	r2,r12
8000aedc:	f1 ee 10 0c 	or	r12,r8,lr
8000aee0:	f8 01 16 10 	lsr	r1,r12,0x10
8000aee4:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000aee8:	e6 01 0d 04 	divu	r4,r3,r1
8000aeec:	e4 03 16 10 	lsr	r3,r2,0x10
8000aef0:	08 9e       	mov	lr,r4
8000aef2:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000aef6:	e8 06 02 48 	mul	r8,r4,r6
8000aefa:	10 33       	cp.w	r3,r8
8000aefc:	c0 a2       	brcc	8000af10 <__avr32_udiv64+0x1fe>
8000aefe:	20 1e       	sub	lr,1
8000af00:	18 03       	add	r3,r12
8000af02:	18 33       	cp.w	r3,r12
8000af04:	c0 63       	brcs	8000af10 <__avr32_udiv64+0x1fe>
8000af06:	10 33       	cp.w	r3,r8
8000af08:	f7 be 03 01 	sublo	lr,1
8000af0c:	e7 dc e3 03 	addcs	r3,r3,r12
8000af10:	10 13       	sub	r3,r8
8000af12:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000af16:	e6 01 0d 00 	divu	r0,r3,r1
8000af1a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000af1e:	00 98       	mov	r8,r0
8000af20:	e0 06 02 46 	mul	r6,r0,r6
8000af24:	0c 3b       	cp.w	r11,r6
8000af26:	c0 a2       	brcc	8000af3a <__avr32_udiv64+0x228>
8000af28:	20 18       	sub	r8,1
8000af2a:	18 0b       	add	r11,r12
8000af2c:	18 3b       	cp.w	r11,r12
8000af2e:	c0 63       	brcs	8000af3a <__avr32_udiv64+0x228>
8000af30:	0c 3b       	cp.w	r11,r6
8000af32:	f7 dc e3 0b 	addcs	r11,r11,r12
8000af36:	f7 b8 03 01 	sublo	r8,1
8000af3a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000af3e:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000af42:	0c 1b       	sub	r11,r6
8000af44:	f0 04 06 42 	mulu.d	r2,r8,r4
8000af48:	06 95       	mov	r5,r3
8000af4a:	16 35       	cp.w	r5,r11
8000af4c:	e0 8b 00 0a 	brhi	8000af60 <__avr32_udiv64+0x24e>
8000af50:	5f 0b       	sreq	r11
8000af52:	f4 09 09 49 	lsl	r9,r10,r9
8000af56:	12 32       	cp.w	r2,r9
8000af58:	5f b9       	srhi	r9
8000af5a:	f7 e9 00 09 	and	r9,r11,r9
8000af5e:	c0 60       	breq	8000af6a <__avr32_udiv64+0x258>
8000af60:	20 18       	sub	r8,1
8000af62:	30 09       	mov	r9,0
8000af64:	c0 38       	rjmp	8000af6a <__avr32_udiv64+0x258>
8000af66:	30 09       	mov	r9,0
8000af68:	12 98       	mov	r8,r9
8000af6a:	10 9a       	mov	r10,r8
8000af6c:	12 93       	mov	r3,r9
8000af6e:	10 92       	mov	r2,r8
8000af70:	12 9b       	mov	r11,r9
8000af72:	2f dd       	sub	sp,-12
8000af74:	d8 32       	popm	r0-r7,pc
8000af76:	d7 03       	nop

8000af78 <_Unwind_SjLj_Register>:
8000af78:	48 38       	lddpc	r8,8000af84 <_Unwind_SjLj_Register+0xc>
8000af7a:	70 09       	ld.w	r9,r8[0x0]
8000af7c:	99 09       	st.w	r12[0x0],r9
8000af7e:	91 0c       	st.w	r8[0x0],r12
8000af80:	5e fc       	retal	r12
8000af82:	00 00       	add	r0,r0
8000af84:	00 00       	add	r0,r0
8000af86:	13 4c       	ld.w	r12,--r9

8000af88 <_Unwind_SjLj_Unregister>:
8000af88:	78 09       	ld.w	r9,r12[0x0]
8000af8a:	48 28       	lddpc	r8,8000af90 <_Unwind_SjLj_Unregister+0x8>
8000af8c:	91 09       	st.w	r8[0x0],r9
8000af8e:	5e fc       	retal	r12
8000af90:	00 00       	add	r0,r0
8000af92:	13 4c       	ld.w	r12,--r9

8000af94 <_Unwind_GetGR>:
8000af94:	78 08       	ld.w	r8,r12[0x0]
8000af96:	2f eb       	sub	r11,-2
8000af98:	f0 0b 03 2c 	ld.w	r12,r8[r11<<0x2]
8000af9c:	5e fc       	retal	r12

8000af9e <_Unwind_GetCFA>:
8000af9e:	78 0c       	ld.w	r12,r12[0x0]
8000afa0:	58 0c       	cp.w	r12,0
8000afa2:	f9 fc 10 0a 	ld.wne	r12,r12[0x28]
8000afa6:	5e fc       	retal	r12

8000afa8 <_Unwind_SetGR>:
8000afa8:	78 08       	ld.w	r8,r12[0x0]
8000afaa:	2f eb       	sub	r11,-2
8000afac:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
8000afb0:	5e fc       	retal	r12

8000afb2 <_Unwind_GetIP>:
8000afb2:	78 08       	ld.w	r8,r12[0x0]
8000afb4:	70 1c       	ld.w	r12,r8[0x4]
8000afb6:	2f fc       	sub	r12,-1
8000afb8:	5e fc       	retal	r12

8000afba <_Unwind_GetIPInfo>:
8000afba:	30 08       	mov	r8,0
8000afbc:	78 0c       	ld.w	r12,r12[0x0]
8000afbe:	97 08       	st.w	r11[0x0],r8
8000afc0:	58 0c       	cp.w	r12,0
8000afc2:	f9 fc 10 01 	ld.wne	r12,r12[0x4]
8000afc6:	f7 bc 01 ff 	subne	r12,-1
8000afca:	5e fc       	retal	r12

8000afcc <_Unwind_SetIP>:
8000afcc:	78 08       	ld.w	r8,r12[0x0]
8000afce:	20 1b       	sub	r11,1
8000afd0:	91 1b       	st.w	r8[0x4],r11
8000afd2:	5e fc       	retal	r12

8000afd4 <_Unwind_GetLanguageSpecificData>:
8000afd4:	78 08       	ld.w	r8,r12[0x0]
8000afd6:	70 7c       	ld.w	r12,r8[0x1c]
8000afd8:	5e fc       	retal	r12

8000afda <_Unwind_GetRegionStart>:
8000afda:	5e fd       	retal	0

8000afdc <_Unwind_FindEnclosingFunction>:
8000afdc:	5e fd       	retal	0

8000afde <_Unwind_GetDataRelBase>:
8000afde:	5e fd       	retal	0

8000afe0 <_Unwind_GetTextRelBase>:
8000afe0:	5e fd       	retal	0

8000afe2 <_Unwind_ForcedUnwind_Phase2>:
8000afe2:	d4 31       	pushm	r0-r7,lr
8000afe4:	30 03       	mov	r3,0
8000afe6:	18 95       	mov	r5,r12
8000afe8:	16 96       	mov	r6,r11
8000afea:	78 32       	ld.w	r2,r12[0xc]
8000afec:	78 41       	ld.w	r1,r12[0x10]
8000afee:	49 e0       	lddpc	r0,8000b064 <_Unwind_ForcedUnwind_Phase2+0x82>
8000aff0:	6c 04       	ld.w	r4,r6[0x0]
8000aff2:	58 04       	cp.w	r4,0
8000aff4:	f9 b7 00 05 	moveq	r7,5
8000aff8:	e9 f4 10 06 	ld.wne	r4,r4[0x18]
8000affc:	f9 b7 01 00 	movne	r7,0
8000b000:	58 57       	cp.w	r7,5
8000b002:	5f 19       	srne	r9
8000b004:	58 07       	cp.w	r7,0
8000b006:	5f 18       	srne	r8
8000b008:	f3 e8 00 08 	and	r8,r9,r8
8000b00c:	e6 08 18 00 	cp.b	r8,r3
8000b010:	c2 61       	brne	8000b05c <_Unwind_ForcedUnwind_Phase2+0x7a>
8000b012:	1a d1       	st.w	--sp,r1
8000b014:	58 57       	cp.w	r7,5
8000b016:	f9 bb 01 0a 	movne	r11,10
8000b01a:	f9 bb 00 1a 	moveq	r11,26
8000b01e:	1a d6       	st.w	--sp,r6
8000b020:	0a 9a       	mov	r10,r5
8000b022:	ea e8 00 00 	ld.d	r8,r5[0]
8000b026:	30 1c       	mov	r12,1
8000b028:	5d 12       	icall	r2
8000b02a:	2f ed       	sub	sp,-8
8000b02c:	58 0c       	cp.w	r12,0
8000b02e:	c1 71       	brne	8000b05c <_Unwind_ForcedUnwind_Phase2+0x7a>
8000b030:	58 57       	cp.w	r7,5
8000b032:	c1 60       	breq	8000b05e <_Unwind_ForcedUnwind_Phase2+0x7c>
8000b034:	58 04       	cp.w	r4,0
8000b036:	c0 e0       	breq	8000b052 <_Unwind_ForcedUnwind_Phase2+0x70>
8000b038:	1a d6       	st.w	--sp,r6
8000b03a:	0a 9a       	mov	r10,r5
8000b03c:	ea e8 00 00 	ld.d	r8,r5[0]
8000b040:	30 ab       	mov	r11,10
8000b042:	30 1c       	mov	r12,1
8000b044:	5d 14       	icall	r4
8000b046:	2f fd       	sub	sp,-4
8000b048:	18 97       	mov	r7,r12
8000b04a:	58 7c       	cp.w	r12,7
8000b04c:	c0 90       	breq	8000b05e <_Unwind_ForcedUnwind_Phase2+0x7c>
8000b04e:	58 8c       	cp.w	r12,8
8000b050:	c0 61       	brne	8000b05c <_Unwind_ForcedUnwind_Phase2+0x7a>
8000b052:	6c 08       	ld.w	r8,r6[0x0]
8000b054:	70 08       	ld.w	r8,r8[0x0]
8000b056:	81 08       	st.w	r0[0x0],r8
8000b058:	8d 08       	st.w	r6[0x0],r8
8000b05a:	cc bb       	rjmp	8000aff0 <_Unwind_ForcedUnwind_Phase2+0xe>
8000b05c:	30 27       	mov	r7,2
8000b05e:	0e 9c       	mov	r12,r7
8000b060:	d8 32       	popm	r0-r7,pc
8000b062:	00 00       	add	r0,r0
8000b064:	00 00       	add	r0,r0
8000b066:	13 4c       	ld.w	r12,--r9

8000b068 <_Unwind_DeleteException>:
8000b068:	d4 01       	pushm	lr
8000b06a:	18 9b       	mov	r11,r12
8000b06c:	78 28       	ld.w	r8,r12[0x8]
8000b06e:	58 08       	cp.w	r8,0
8000b070:	c0 30       	breq	8000b076 <_Unwind_DeleteException+0xe>
8000b072:	30 1c       	mov	r12,1
8000b074:	5d 18       	icall	r8
8000b076:	d8 02       	popm	pc

8000b078 <_Unwind_Backtrace>:
8000b078:	d4 31       	pushm	r0-r7,lr
8000b07a:	20 1d       	sub	sp,4
8000b07c:	49 38       	lddpc	r8,8000b0c8 <_Unwind_Backtrace+0x50>
8000b07e:	fa c7 ff fc 	sub	r7,sp,-4
8000b082:	70 08       	ld.w	r8,r8[0x0]
8000b084:	18 93       	mov	r3,r12
8000b086:	16 94       	mov	r4,r11
8000b088:	0e d8       	st.w	--r7,r8
8000b08a:	30 05       	mov	r5,0
8000b08c:	40 06       	lddsp	r6,sp[0x0]
8000b08e:	58 06       	cp.w	r6,0
8000b090:	f9 b6 00 05 	moveq	r6,5
8000b094:	f9 b6 01 00 	movne	r6,0
8000b098:	58 56       	cp.w	r6,5
8000b09a:	5f 19       	srne	r9
8000b09c:	58 06       	cp.w	r6,0
8000b09e:	5f 18       	srne	r8
8000b0a0:	f3 e8 00 08 	and	r8,r9,r8
8000b0a4:	ea 08 18 00 	cp.b	r8,r5
8000b0a8:	c0 b1       	brne	8000b0be <_Unwind_Backtrace+0x46>
8000b0aa:	08 9b       	mov	r11,r4
8000b0ac:	1a 9c       	mov	r12,sp
8000b0ae:	5d 13       	icall	r3
8000b0b0:	c0 71       	brne	8000b0be <_Unwind_Backtrace+0x46>
8000b0b2:	58 56       	cp.w	r6,5
8000b0b4:	c0 60       	breq	8000b0c0 <_Unwind_Backtrace+0x48>
8000b0b6:	40 08       	lddsp	r8,sp[0x0]
8000b0b8:	70 08       	ld.w	r8,r8[0x0]
8000b0ba:	50 08       	stdsp	sp[0x0],r8
8000b0bc:	ce 8b       	rjmp	8000b08c <_Unwind_Backtrace+0x14>
8000b0be:	30 36       	mov	r6,3
8000b0c0:	0c 9c       	mov	r12,r6
8000b0c2:	2f fd       	sub	sp,-4
8000b0c4:	d8 32       	popm	r0-r7,pc
8000b0c6:	00 00       	add	r0,r0
8000b0c8:	00 00       	add	r0,r0
8000b0ca:	13 4c       	ld.w	r12,--r9

8000b0cc <_Unwind_RaiseException_Phase2>:
8000b0cc:	d4 21       	pushm	r4-r7,lr
8000b0ce:	18 96       	mov	r6,r12
8000b0d0:	16 97       	mov	r7,r11
8000b0d2:	6e 08       	ld.w	r8,r7[0x0]
8000b0d4:	6c 44       	ld.w	r4,r6[0x10]
8000b0d6:	58 08       	cp.w	r8,0
8000b0d8:	f0 05 17 00 	moveq	r5,r8
8000b0dc:	f9 b9 00 05 	moveq	r9,5
8000b0e0:	f1 f5 10 06 	ld.wne	r5,r8[0x18]
8000b0e4:	f9 b9 01 00 	movne	r9,0
8000b0e8:	08 38       	cp.w	r8,r4
8000b0ea:	f9 b4 00 04 	moveq	r4,4
8000b0ee:	f9 b4 01 00 	movne	r4,0
8000b0f2:	58 09       	cp.w	r9,0
8000b0f4:	c1 81       	brne	8000b124 <_Unwind_RaiseException_Phase2+0x58>
8000b0f6:	58 05       	cp.w	r5,0
8000b0f8:	c0 e0       	breq	8000b114 <_Unwind_RaiseException_Phase2+0x48>
8000b0fa:	1a d7       	st.w	--sp,r7
8000b0fc:	0c 9a       	mov	r10,r6
8000b0fe:	ec e8 00 00 	ld.d	r8,r6[0]
8000b102:	08 9b       	mov	r11,r4
8000b104:	30 1c       	mov	r12,1
8000b106:	a1 bb       	sbr	r11,0x1
8000b108:	5d 15       	icall	r5
8000b10a:	2f fd       	sub	sp,-4
8000b10c:	58 7c       	cp.w	r12,7
8000b10e:	c0 c0       	breq	8000b126 <_Unwind_RaiseException_Phase2+0x5a>
8000b110:	58 8c       	cp.w	r12,8
8000b112:	c0 91       	brne	8000b124 <_Unwind_RaiseException_Phase2+0x58>
8000b114:	58 04       	cp.w	r4,0
8000b116:	c0 30       	breq	8000b11c <_Unwind_RaiseException_Phase2+0x50>
8000b118:	f0 1f 00 04 	mcall	8000b128 <_Unwind_RaiseException_Phase2+0x5c>
8000b11c:	6e 08       	ld.w	r8,r7[0x0]
8000b11e:	70 08       	ld.w	r8,r8[0x0]
8000b120:	8f 08       	st.w	r7[0x0],r8
8000b122:	cd 8b       	rjmp	8000b0d2 <_Unwind_RaiseException_Phase2+0x6>
8000b124:	30 2c       	mov	r12,2
8000b126:	d8 22       	popm	r4-r7,pc
8000b128:	80 00       	ld.sh	r0,r0[0x0]
8000b12a:	b2 4c       	st.h	r9[0x8],r12

8000b12c <uw_install_context>:
8000b12c:	d4 21       	pushm	r4-r7,lr
8000b12e:	76 09       	ld.w	r9,r11[0x0]
8000b130:	1a 97       	mov	r7,sp
8000b132:	f2 c8 ff e0 	sub	r8,r9,-32
8000b136:	48 4a       	lddpc	r10,8000b144 <uw_install_context+0x18>
8000b138:	95 09       	st.w	r10[0x0],r9
8000b13a:	70 19       	ld.w	r9,r8[0x4]
8000b13c:	70 07       	ld.w	r7,r8[0x0]
8000b13e:	70 2d       	ld.w	sp,r8[0x8]
8000b140:	12 9f       	mov	pc,r9
8000b142:	00 00       	add	r0,r0
8000b144:	00 00       	add	r0,r0
8000b146:	13 4c       	ld.w	r12,--r9

8000b148 <_Unwind_SjLj_Resume>:
8000b148:	d4 01       	pushm	lr
8000b14a:	20 2d       	sub	sp,8
8000b14c:	48 a8       	lddpc	r8,8000b174 <_Unwind_SjLj_Resume+0x2c>
8000b14e:	70 08       	ld.w	r8,r8[0x0]
8000b150:	50 08       	stdsp	sp[0x0],r8
8000b152:	50 18       	stdsp	sp[0x4],r8
8000b154:	1a 9b       	mov	r11,sp
8000b156:	78 38       	ld.w	r8,r12[0xc]
8000b158:	58 08       	cp.w	r8,0
8000b15a:	c0 31       	brne	8000b160 <_Unwind_SjLj_Resume+0x18>
8000b15c:	cb 8f       	rcall	8000b0cc <_Unwind_RaiseException_Phase2>
8000b15e:	c0 38       	rjmp	8000b164 <_Unwind_SjLj_Resume+0x1c>
8000b160:	1a 9b       	mov	r11,sp
8000b162:	c4 0f       	rcall	8000afe2 <_Unwind_ForcedUnwind_Phase2>
8000b164:	58 7c       	cp.w	r12,7
8000b166:	c0 30       	breq	8000b16c <_Unwind_SjLj_Resume+0x24>
8000b168:	f0 1f 00 04 	mcall	8000b178 <_Unwind_SjLj_Resume+0x30>
8000b16c:	1a 9b       	mov	r11,sp
8000b16e:	fa cc ff fc 	sub	r12,sp,-4
8000b172:	cd df       	rcall	8000b12c <uw_install_context>
8000b174:	00 00       	add	r0,r0
8000b176:	13 4c       	ld.w	r12,--r9
8000b178:	80 00       	ld.sh	r0,r0[0x0]
8000b17a:	b2 4c       	st.h	r9[0x8],r12

8000b17c <_Unwind_SjLj_ForcedUnwind>:
8000b17c:	d4 21       	pushm	r4-r7,lr
8000b17e:	20 2d       	sub	sp,8
8000b180:	48 98       	lddpc	r8,8000b1a4 <_Unwind_SjLj_ForcedUnwind+0x28>
8000b182:	70 08       	ld.w	r8,r8[0x0]
8000b184:	99 3b       	st.w	r12[0xc],r11
8000b186:	99 4a       	st.w	r12[0x10],r10
8000b188:	50 08       	stdsp	sp[0x0],r8
8000b18a:	50 18       	stdsp	sp[0x4],r8
8000b18c:	1a 97       	mov	r7,sp
8000b18e:	1a 9b       	mov	r11,sp
8000b190:	c2 9f       	rcall	8000afe2 <_Unwind_ForcedUnwind_Phase2>
8000b192:	58 7c       	cp.w	r12,7
8000b194:	c0 30       	breq	8000b19a <_Unwind_SjLj_ForcedUnwind+0x1e>
8000b196:	2f ed       	sub	sp,-8
8000b198:	d8 22       	popm	r4-r7,pc
8000b19a:	1a 9b       	mov	r11,sp
8000b19c:	fa cc ff fc 	sub	r12,sp,-4
8000b1a0:	cc 6f       	rcall	8000b12c <uw_install_context>
8000b1a2:	00 00       	add	r0,r0
8000b1a4:	00 00       	add	r0,r0
8000b1a6:	13 4c       	ld.w	r12,--r9

8000b1a8 <_Unwind_SjLj_RaiseException>:
8000b1a8:	d4 21       	pushm	r4-r7,lr
8000b1aa:	20 2d       	sub	sp,8
8000b1ac:	49 88       	lddpc	r8,8000b20c <_Unwind_SjLj_RaiseException+0x64>
8000b1ae:	18 97       	mov	r7,r12
8000b1b0:	70 08       	ld.w	r8,r8[0x0]
8000b1b2:	1a 95       	mov	r5,sp
8000b1b4:	50 08       	stdsp	sp[0x0],r8
8000b1b6:	50 18       	stdsp	sp[0x4],r8
8000b1b8:	40 08       	lddsp	r8,sp[0x0]
8000b1ba:	58 08       	cp.w	r8,0
8000b1bc:	c2 50       	breq	8000b206 <_Unwind_SjLj_RaiseException+0x5e>
8000b1be:	70 66       	ld.w	r6,r8[0x18]
8000b1c0:	58 06       	cp.w	r6,0
8000b1c2:	c0 f0       	breq	8000b1e0 <_Unwind_SjLj_RaiseException+0x38>
8000b1c4:	1a d5       	st.w	--sp,r5
8000b1c6:	30 1b       	mov	r11,1
8000b1c8:	0e 9a       	mov	r10,r7
8000b1ca:	ee e8 00 00 	ld.d	r8,r7[0]
8000b1ce:	16 9c       	mov	r12,r11
8000b1d0:	5d 16       	icall	r6
8000b1d2:	2f fd       	sub	sp,-4
8000b1d4:	58 6c       	cp.w	r12,6
8000b1d6:	c0 90       	breq	8000b1e8 <_Unwind_SjLj_RaiseException+0x40>
8000b1d8:	58 8c       	cp.w	r12,8
8000b1da:	c0 30       	breq	8000b1e0 <_Unwind_SjLj_RaiseException+0x38>
8000b1dc:	30 3c       	mov	r12,3
8000b1de:	c1 58       	rjmp	8000b208 <_Unwind_SjLj_RaiseException+0x60>
8000b1e0:	40 08       	lddsp	r8,sp[0x0]
8000b1e2:	70 08       	ld.w	r8,r8[0x0]
8000b1e4:	50 08       	stdsp	sp[0x0],r8
8000b1e6:	ce 9b       	rjmp	8000b1b8 <_Unwind_SjLj_RaiseException+0x10>
8000b1e8:	40 08       	lddsp	r8,sp[0x0]
8000b1ea:	8f 48       	st.w	r7[0x10],r8
8000b1ec:	40 18       	lddsp	r8,sp[0x4]
8000b1ee:	50 08       	stdsp	sp[0x0],r8
8000b1f0:	30 08       	mov	r8,0
8000b1f2:	0e 9c       	mov	r12,r7
8000b1f4:	8f 38       	st.w	r7[0xc],r8
8000b1f6:	1a 9b       	mov	r11,sp
8000b1f8:	c6 af       	rcall	8000b0cc <_Unwind_RaiseException_Phase2>
8000b1fa:	58 7c       	cp.w	r12,7
8000b1fc:	c0 61       	brne	8000b208 <_Unwind_SjLj_RaiseException+0x60>
8000b1fe:	1a 9b       	mov	r11,sp
8000b200:	fa cc ff fc 	sub	r12,sp,-4
8000b204:	c9 4f       	rcall	8000b12c <uw_install_context>
8000b206:	30 5c       	mov	r12,5
8000b208:	2f ed       	sub	sp,-8
8000b20a:	d8 22       	popm	r4-r7,pc
8000b20c:	00 00       	add	r0,r0
8000b20e:	13 4c       	ld.w	r12,--r9

8000b210 <_Unwind_SjLj_Resume_or_Rethrow>:
8000b210:	d4 21       	pushm	r4-r7,lr
8000b212:	20 2d       	sub	sp,8
8000b214:	78 38       	ld.w	r8,r12[0xc]
8000b216:	58 08       	cp.w	r8,0
8000b218:	c0 51       	brne	8000b222 <_Unwind_SjLj_Resume_or_Rethrow+0x12>
8000b21a:	f0 1f 00 0a 	mcall	8000b240 <_Unwind_SjLj_Resume_or_Rethrow+0x30>
8000b21e:	2f ed       	sub	sp,-8
8000b220:	d8 22       	popm	r4-r7,pc
8000b222:	48 98       	lddpc	r8,8000b244 <_Unwind_SjLj_Resume_or_Rethrow+0x34>
8000b224:	70 08       	ld.w	r8,r8[0x0]
8000b226:	1a 9b       	mov	r11,sp
8000b228:	50 08       	stdsp	sp[0x0],r8
8000b22a:	50 18       	stdsp	sp[0x4],r8
8000b22c:	cd be       	rcall	8000afe2 <_Unwind_ForcedUnwind_Phase2>
8000b22e:	58 7c       	cp.w	r12,7
8000b230:	c0 30       	breq	8000b236 <_Unwind_SjLj_Resume_or_Rethrow+0x26>
8000b232:	f0 1f 00 06 	mcall	8000b248 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
8000b236:	1a 9b       	mov	r11,sp
8000b238:	fa cc ff fc 	sub	r12,sp,-4
8000b23c:	c7 8f       	rcall	8000b12c <uw_install_context>
8000b23e:	00 00       	add	r0,r0
8000b240:	80 00       	ld.sh	r0,r0[0x0]
8000b242:	b1 a8       	sbr	r8,0x10
8000b244:	00 00       	add	r0,r0
8000b246:	13 4c       	ld.w	r12,--r9
8000b248:	80 00       	ld.sh	r0,r0[0x0]
8000b24a:	b2 4c       	st.h	r9[0x8],r12

8000b24c <abort>:
8000b24c:	d4 01       	pushm	lr
8000b24e:	30 6c       	mov	r12,6
8000b250:	f0 1f 00 03 	mcall	8000b25c <abort+0x10>
8000b254:	30 1c       	mov	r12,1
8000b256:	f0 1f 00 03 	mcall	8000b260 <abort+0x14>
8000b25a:	00 00       	add	r0,r0
8000b25c:	80 00       	ld.sh	r0,r0[0x0]
8000b25e:	c1 54       	brge	8000b288 <exit+0x4>
8000b260:	80 00       	ld.sh	r0,r0[0x0]
8000b262:	c3 02       	brcc	8000b2c2 <_fputc_r+0x16>

8000b264 <atexit>:
8000b264:	d4 01       	pushm	lr
8000b266:	30 09       	mov	r9,0
8000b268:	18 9b       	mov	r11,r12
8000b26a:	12 9a       	mov	r10,r9
8000b26c:	12 9c       	mov	r12,r9
8000b26e:	f0 1f 00 02 	mcall	8000b274 <atexit+0x10>
8000b272:	d8 02       	popm	pc
8000b274:	80 00       	ld.sh	r0,r0[0x0]
8000b276:	e8 b4       	*unknown*

8000b278 <__errno>:
8000b278:	48 28       	lddpc	r8,8000b280 <__errno+0x8>
8000b27a:	70 0c       	ld.w	r12,r8[0x0]
8000b27c:	2f 4c       	sub	r12,-12
8000b27e:	5e fc       	retal	r12
8000b280:	00 00       	add	r0,r0
8000b282:	01 dc       	ld.ub	r12,r0[0x5]

8000b284 <exit>:
8000b284:	d4 21       	pushm	r4-r7,lr
8000b286:	30 0b       	mov	r11,0
8000b288:	18 97       	mov	r7,r12
8000b28a:	f0 1f 00 06 	mcall	8000b2a0 <exit+0x1c>
8000b28e:	48 68       	lddpc	r8,8000b2a4 <exit+0x20>
8000b290:	70 0c       	ld.w	r12,r8[0x0]
8000b292:	78 a8       	ld.w	r8,r12[0x28]
8000b294:	58 08       	cp.w	r8,0
8000b296:	c0 20       	breq	8000b29a <exit+0x16>
8000b298:	5d 18       	icall	r8
8000b29a:	0e 9c       	mov	r12,r7
8000b29c:	f0 1f 00 03 	mcall	8000b2a8 <exit+0x24>
8000b2a0:	80 00       	ld.sh	r0,r0[0x0]
8000b2a2:	e9 60 80 01 	st.b	r4[-32767],r0
8000b2a6:	1b 44       	ld.w	r4,--sp
8000b2a8:	80 00       	ld.sh	r0,r0[0x0]
8000b2aa:	c3 02       	brcc	8000b30a <fputc+0x6>

8000b2ac <_fputc_r>:
8000b2ac:	d4 21       	pushm	r4-r7,lr
8000b2ae:	20 2d       	sub	sp,8
8000b2b0:	18 97       	mov	r7,r12
8000b2b2:	58 0c       	cp.w	r12,0
8000b2b4:	c0 a0       	breq	8000b2c8 <_fputc_r+0x1c>
8000b2b6:	78 68       	ld.w	r8,r12[0x18]
8000b2b8:	58 08       	cp.w	r8,0
8000b2ba:	c0 71       	brne	8000b2c8 <_fputc_r+0x1c>
8000b2bc:	50 1b       	stdsp	sp[0x4],r11
8000b2be:	50 0a       	stdsp	sp[0x0],r10
8000b2c0:	f0 1f 00 0c 	mcall	8000b2f0 <_fputc_r+0x44>
8000b2c4:	40 0a       	lddsp	r10,sp[0x0]
8000b2c6:	40 1b       	lddsp	r11,sp[0x4]
8000b2c8:	48 b8       	lddpc	r8,8000b2f4 <_fputc_r+0x48>
8000b2ca:	10 3a       	cp.w	r10,r8
8000b2cc:	c0 31       	brne	8000b2d2 <_fputc_r+0x26>
8000b2ce:	6e 0a       	ld.w	r10,r7[0x0]
8000b2d0:	c0 a8       	rjmp	8000b2e4 <_fputc_r+0x38>
8000b2d2:	48 a8       	lddpc	r8,8000b2f8 <_fputc_r+0x4c>
8000b2d4:	10 3a       	cp.w	r10,r8
8000b2d6:	c0 31       	brne	8000b2dc <_fputc_r+0x30>
8000b2d8:	6e 1a       	ld.w	r10,r7[0x4]
8000b2da:	c0 58       	rjmp	8000b2e4 <_fputc_r+0x38>
8000b2dc:	48 88       	lddpc	r8,8000b2fc <_fputc_r+0x50>
8000b2de:	10 3a       	cp.w	r10,r8
8000b2e0:	ef fa 00 02 	ld.weq	r10,r7[0x8]
8000b2e4:	0e 9c       	mov	r12,r7
8000b2e6:	f0 1f 00 07 	mcall	8000b300 <_fputc_r+0x54>
8000b2ea:	2f ed       	sub	sp,-8
8000b2ec:	d8 22       	popm	r4-r7,pc
8000b2ee:	00 00       	add	r0,r0
8000b2f0:	80 00       	ld.sh	r0,r0[0x0]
8000b2f2:	f9 c4       	*unknown*
8000b2f4:	80 01       	ld.sh	r1,r0[0x0]
8000b2f6:	1f 24       	ld.uh	r4,pc++
8000b2f8:	80 01       	ld.sh	r1,r0[0x0]
8000b2fa:	1f 44       	ld.w	r4,--pc
8000b2fc:	80 01       	ld.sh	r1,r0[0x0]
8000b2fe:	1f 64       	ld.uh	r4,--pc
8000b300:	80 00       	ld.sh	r0,r0[0x0]
8000b302:	bd 50       	asr	r0,0x1d

8000b304 <fputc>:
8000b304:	d4 01       	pushm	lr
8000b306:	48 48       	lddpc	r8,8000b314 <fputc+0x10>
8000b308:	16 9a       	mov	r10,r11
8000b30a:	18 9b       	mov	r11,r12
8000b30c:	70 0c       	ld.w	r12,r8[0x0]
8000b30e:	f0 1f 00 03 	mcall	8000b318 <fputc+0x14>
8000b312:	d8 02       	popm	pc
8000b314:	00 00       	add	r0,r0
8000b316:	01 dc       	ld.ub	r12,r0[0x5]
8000b318:	80 00       	ld.sh	r0,r0[0x0]
8000b31a:	b2 ac       	st.b	r9[0x2],r12

8000b31c <_fputs_r>:
8000b31c:	d4 21       	pushm	r4-r7,lr
8000b31e:	20 5d       	sub	sp,20
8000b320:	18 97       	mov	r7,r12
8000b322:	14 96       	mov	r6,r10
8000b324:	50 3b       	stdsp	sp[0xc],r11
8000b326:	16 9c       	mov	r12,r11
8000b328:	f0 1f 00 13 	mcall	8000b374 <_fputs_r+0x58>
8000b32c:	fa c8 ff f4 	sub	r8,sp,-12
8000b330:	50 4c       	stdsp	sp[0x10],r12
8000b332:	50 08       	stdsp	sp[0x0],r8
8000b334:	50 2c       	stdsp	sp[0x8],r12
8000b336:	30 18       	mov	r8,1
8000b338:	50 18       	stdsp	sp[0x4],r8
8000b33a:	58 07       	cp.w	r7,0
8000b33c:	c0 70       	breq	8000b34a <_fputs_r+0x2e>
8000b33e:	6e 68       	ld.w	r8,r7[0x18]
8000b340:	58 08       	cp.w	r8,0
8000b342:	c0 41       	brne	8000b34a <_fputs_r+0x2e>
8000b344:	0e 9c       	mov	r12,r7
8000b346:	f0 1f 00 0d 	mcall	8000b378 <_fputs_r+0x5c>
8000b34a:	48 d8       	lddpc	r8,8000b37c <_fputs_r+0x60>
8000b34c:	10 36       	cp.w	r6,r8
8000b34e:	c0 31       	brne	8000b354 <_fputs_r+0x38>
8000b350:	6e 06       	ld.w	r6,r7[0x0]
8000b352:	c0 a8       	rjmp	8000b366 <_fputs_r+0x4a>
8000b354:	48 b8       	lddpc	r8,8000b380 <_fputs_r+0x64>
8000b356:	10 36       	cp.w	r6,r8
8000b358:	c0 31       	brne	8000b35e <_fputs_r+0x42>
8000b35a:	6e 16       	ld.w	r6,r7[0x4]
8000b35c:	c0 58       	rjmp	8000b366 <_fputs_r+0x4a>
8000b35e:	48 a8       	lddpc	r8,8000b384 <_fputs_r+0x68>
8000b360:	10 36       	cp.w	r6,r8
8000b362:	ef f6 00 02 	ld.weq	r6,r7[0x8]
8000b366:	0c 9b       	mov	r11,r6
8000b368:	0e 9c       	mov	r12,r7
8000b36a:	1a 9a       	mov	r10,sp
8000b36c:	f0 1f 00 07 	mcall	8000b388 <_fputs_r+0x6c>
8000b370:	2f bd       	sub	sp,-20
8000b372:	d8 22       	popm	r4-r7,pc
8000b374:	80 00       	ld.sh	r0,r0[0x0]
8000b376:	c2 9e       	rcall	8000afc8 <_Unwind_GetIPInfo+0xe>
8000b378:	80 00       	ld.sh	r0,r0[0x0]
8000b37a:	f9 c4       	*unknown*
8000b37c:	80 01       	ld.sh	r1,r0[0x0]
8000b37e:	1f 24       	ld.uh	r4,pc++
8000b380:	80 01       	ld.sh	r1,r0[0x0]
8000b382:	1f 44       	ld.w	r4,--pc
8000b384:	80 01       	ld.sh	r1,r0[0x0]
8000b386:	1f 64       	ld.uh	r4,--pc
8000b388:	80 00       	ld.sh	r0,r0[0x0]
8000b38a:	b3 a4       	sbr	r4,0x12

8000b38c <fputs>:
8000b38c:	d4 01       	pushm	lr
8000b38e:	48 48       	lddpc	r8,8000b39c <fputs+0x10>
8000b390:	16 9a       	mov	r10,r11
8000b392:	18 9b       	mov	r11,r12
8000b394:	70 0c       	ld.w	r12,r8[0x0]
8000b396:	f0 1f 00 03 	mcall	8000b3a0 <fputs+0x14>
8000b39a:	d8 02       	popm	pc
8000b39c:	00 00       	add	r0,r0
8000b39e:	01 dc       	ld.ub	r12,r0[0x5]
8000b3a0:	80 00       	ld.sh	r0,r0[0x0]
8000b3a2:	b3 1c       	ld.d	r12,--r9

8000b3a4 <__sfvwrite_r>:
8000b3a4:	d4 31       	pushm	r0-r7,lr
8000b3a6:	20 3d       	sub	sp,12
8000b3a8:	14 94       	mov	r4,r10
8000b3aa:	18 95       	mov	r5,r12
8000b3ac:	16 97       	mov	r7,r11
8000b3ae:	74 28       	ld.w	r8,r10[0x8]
8000b3b0:	58 08       	cp.w	r8,0
8000b3b2:	e0 80 01 47 	breq	8000b640 <__sfvwrite_r+0x29c>
8000b3b6:	96 68       	ld.sh	r8,r11[0xc]
8000b3b8:	ed b8 00 03 	bld	r8,0x3
8000b3bc:	c0 41       	brne	8000b3c4 <__sfvwrite_r+0x20>
8000b3be:	76 48       	ld.w	r8,r11[0x10]
8000b3c0:	58 08       	cp.w	r8,0
8000b3c2:	c0 c1       	brne	8000b3da <__sfvwrite_r+0x36>
8000b3c4:	0e 9b       	mov	r11,r7
8000b3c6:	0a 9c       	mov	r12,r5
8000b3c8:	f0 1f 00 a0 	mcall	8000b648 <__sfvwrite_r+0x2a4>
8000b3cc:	c0 70       	breq	8000b3da <__sfvwrite_r+0x36>
8000b3ce:	8e 68       	ld.sh	r8,r7[0xc]
8000b3d0:	a7 a8       	sbr	r8,0x6
8000b3d2:	ae 68       	st.h	r7[0xc],r8
8000b3d4:	30 98       	mov	r8,9
8000b3d6:	8b 38       	st.w	r5[0xc],r8
8000b3d8:	c3 29       	rjmp	8000b63c <__sfvwrite_r+0x298>
8000b3da:	8e 63       	ld.sh	r3,r7[0xc]
8000b3dc:	68 00       	ld.w	r0,r4[0x0]
8000b3de:	06 96       	mov	r6,r3
8000b3e0:	e2 16 00 02 	andl	r6,0x2,COH
8000b3e4:	c2 10       	breq	8000b426 <__sfvwrite_r+0x82>
8000b3e6:	30 03       	mov	r3,0
8000b3e8:	e0 62 04 00 	mov	r2,1024
8000b3ec:	06 96       	mov	r6,r3
8000b3ee:	c0 48       	rjmp	8000b3f6 <__sfvwrite_r+0x52>
8000b3f0:	60 03       	ld.w	r3,r0[0x0]
8000b3f2:	60 16       	ld.w	r6,r0[0x4]
8000b3f4:	2f 80       	sub	r0,-8
8000b3f6:	58 06       	cp.w	r6,0
8000b3f8:	cf c0       	breq	8000b3f0 <__sfvwrite_r+0x4c>
8000b3fa:	e0 46 04 00 	cp.w	r6,1024
8000b3fe:	ec 09 17 80 	movls	r9,r6
8000b402:	e4 09 17 b0 	movhi	r9,r2
8000b406:	06 9a       	mov	r10,r3
8000b408:	6e a8       	ld.w	r8,r7[0x28]
8000b40a:	6e 8b       	ld.w	r11,r7[0x20]
8000b40c:	0a 9c       	mov	r12,r5
8000b40e:	5d 18       	icall	r8
8000b410:	18 16       	sub	r6,r12
8000b412:	58 0c       	cp.w	r12,0
8000b414:	e0 8a 01 11 	brle	8000b636 <__sfvwrite_r+0x292>
8000b418:	68 28       	ld.w	r8,r4[0x8]
8000b41a:	18 18       	sub	r8,r12
8000b41c:	89 28       	st.w	r4[0x8],r8
8000b41e:	e0 80 01 11 	breq	8000b640 <__sfvwrite_r+0x29c>
8000b422:	18 03       	add	r3,r12
8000b424:	ce 9b       	rjmp	8000b3f6 <__sfvwrite_r+0x52>
8000b426:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000b42a:	c0 70       	breq	8000b438 <__sfvwrite_r+0x94>
8000b42c:	50 06       	stdsp	sp[0x0],r6
8000b42e:	0c 93       	mov	r3,r6
8000b430:	0c 91       	mov	r1,r6
8000b432:	50 15       	stdsp	sp[0x4],r5
8000b434:	08 92       	mov	r2,r4
8000b436:	ca 08       	rjmp	8000b576 <__sfvwrite_r+0x1d2>
8000b438:	06 96       	mov	r6,r3
8000b43a:	08 91       	mov	r1,r4
8000b43c:	c0 48       	rjmp	8000b444 <__sfvwrite_r+0xa0>
8000b43e:	60 03       	ld.w	r3,r0[0x0]
8000b440:	60 16       	ld.w	r6,r0[0x4]
8000b442:	2f 80       	sub	r0,-8
8000b444:	58 06       	cp.w	r6,0
8000b446:	cf c0       	breq	8000b43e <__sfvwrite_r+0x9a>
8000b448:	8e 68       	ld.sh	r8,r7[0xc]
8000b44a:	6e 24       	ld.w	r4,r7[0x8]
8000b44c:	10 99       	mov	r9,r8
8000b44e:	e2 19 02 00 	andl	r9,0x200,COH
8000b452:	c5 70       	breq	8000b500 <__sfvwrite_r+0x15c>
8000b454:	08 36       	cp.w	r6,r4
8000b456:	c4 53       	brcs	8000b4e0 <__sfvwrite_r+0x13c>
8000b458:	10 99       	mov	r9,r8
8000b45a:	e2 19 04 80 	andl	r9,0x480,COH
8000b45e:	c4 10       	breq	8000b4e0 <__sfvwrite_r+0x13c>
8000b460:	6e 4b       	ld.w	r11,r7[0x10]
8000b462:	6e 09       	ld.w	r9,r7[0x0]
8000b464:	16 19       	sub	r9,r11
8000b466:	50 09       	stdsp	sp[0x0],r9
8000b468:	6e 59       	ld.w	r9,r7[0x14]
8000b46a:	10 9c       	mov	r12,r8
8000b46c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000b470:	30 28       	mov	r8,2
8000b472:	f4 08 0c 08 	divs	r8,r10,r8
8000b476:	fa e9 00 04 	st.d	sp[4],r8
8000b47a:	10 94       	mov	r4,r8
8000b47c:	40 09       	lddsp	r9,sp[0x0]
8000b47e:	e2 1c 04 00 	andl	r12,0x400,COH
8000b482:	2f f9       	sub	r9,-1
8000b484:	0c 09       	add	r9,r6
8000b486:	12 38       	cp.w	r8,r9
8000b488:	f2 04 17 30 	movlo	r4,r9
8000b48c:	58 0c       	cp.w	r12,0
8000b48e:	c1 10       	breq	8000b4b0 <__sfvwrite_r+0x10c>
8000b490:	08 9b       	mov	r11,r4
8000b492:	0a 9c       	mov	r12,r5
8000b494:	f0 1f 00 6e 	mcall	8000b64c <__sfvwrite_r+0x2a8>
8000b498:	18 92       	mov	r2,r12
8000b49a:	c1 50       	breq	8000b4c4 <__sfvwrite_r+0x120>
8000b49c:	40 0a       	lddsp	r10,sp[0x0]
8000b49e:	6e 4b       	ld.w	r11,r7[0x10]
8000b4a0:	f0 1f 00 6c 	mcall	8000b650 <__sfvwrite_r+0x2ac>
8000b4a4:	8e 68       	ld.sh	r8,r7[0xc]
8000b4a6:	e0 18 fb 7f 	andl	r8,0xfb7f
8000b4aa:	a7 b8       	sbr	r8,0x7
8000b4ac:	ae 68       	st.h	r7[0xc],r8
8000b4ae:	c0 e8       	rjmp	8000b4ca <__sfvwrite_r+0x126>
8000b4b0:	08 9a       	mov	r10,r4
8000b4b2:	0a 9c       	mov	r12,r5
8000b4b4:	f0 1f 00 68 	mcall	8000b654 <__sfvwrite_r+0x2b0>
8000b4b8:	18 92       	mov	r2,r12
8000b4ba:	c0 81       	brne	8000b4ca <__sfvwrite_r+0x126>
8000b4bc:	6e 4b       	ld.w	r11,r7[0x10]
8000b4be:	0a 9c       	mov	r12,r5
8000b4c0:	f0 1f 00 66 	mcall	8000b658 <__sfvwrite_r+0x2b4>
8000b4c4:	30 c8       	mov	r8,12
8000b4c6:	8b 38       	st.w	r5[0xc],r8
8000b4c8:	cb 78       	rjmp	8000b636 <__sfvwrite_r+0x292>
8000b4ca:	40 0a       	lddsp	r10,sp[0x0]
8000b4cc:	40 09       	lddsp	r9,sp[0x0]
8000b4ce:	e8 0a 01 0a 	sub	r10,r4,r10
8000b4d2:	e4 09 00 08 	add	r8,r2,r9
8000b4d6:	8f 54       	st.w	r7[0x14],r4
8000b4d8:	8f 2a       	st.w	r7[0x8],r10
8000b4da:	8f 08       	st.w	r7[0x0],r8
8000b4dc:	8f 42       	st.w	r7[0x10],r2
8000b4de:	0c 94       	mov	r4,r6
8000b4e0:	08 36       	cp.w	r6,r4
8000b4e2:	ec 04 17 30 	movlo	r4,r6
8000b4e6:	06 9b       	mov	r11,r3
8000b4e8:	08 9a       	mov	r10,r4
8000b4ea:	6e 0c       	ld.w	r12,r7[0x0]
8000b4ec:	f0 1f 00 5c 	mcall	8000b65c <__sfvwrite_r+0x2b8>
8000b4f0:	6e 08       	ld.w	r8,r7[0x0]
8000b4f2:	08 08       	add	r8,r4
8000b4f4:	8f 08       	st.w	r7[0x0],r8
8000b4f6:	6e 28       	ld.w	r8,r7[0x8]
8000b4f8:	08 18       	sub	r8,r4
8000b4fa:	0c 94       	mov	r4,r6
8000b4fc:	8f 28       	st.w	r7[0x8],r8
8000b4fe:	c3 08       	rjmp	8000b55e <__sfvwrite_r+0x1ba>
8000b500:	08 36       	cp.w	r6,r4
8000b502:	5f ba       	srhi	r10
8000b504:	6e 0c       	ld.w	r12,r7[0x0]
8000b506:	6e 48       	ld.w	r8,r7[0x10]
8000b508:	10 3c       	cp.w	r12,r8
8000b50a:	5f b8       	srhi	r8
8000b50c:	f5 e8 00 08 	and	r8,r10,r8
8000b510:	f2 08 18 00 	cp.b	r8,r9
8000b514:	c0 e0       	breq	8000b530 <__sfvwrite_r+0x18c>
8000b516:	06 9b       	mov	r11,r3
8000b518:	08 9a       	mov	r10,r4
8000b51a:	f0 1f 00 51 	mcall	8000b65c <__sfvwrite_r+0x2b8>
8000b51e:	6e 08       	ld.w	r8,r7[0x0]
8000b520:	08 08       	add	r8,r4
8000b522:	0e 9b       	mov	r11,r7
8000b524:	8f 08       	st.w	r7[0x0],r8
8000b526:	0a 9c       	mov	r12,r5
8000b528:	f0 1f 00 4e 	mcall	8000b660 <__sfvwrite_r+0x2bc>
8000b52c:	c1 90       	breq	8000b55e <__sfvwrite_r+0x1ba>
8000b52e:	c8 48       	rjmp	8000b636 <__sfvwrite_r+0x292>
8000b530:	6e 59       	ld.w	r9,r7[0x14]
8000b532:	12 36       	cp.w	r6,r9
8000b534:	c0 a3       	brcs	8000b548 <__sfvwrite_r+0x1a4>
8000b536:	6e a8       	ld.w	r8,r7[0x28]
8000b538:	06 9a       	mov	r10,r3
8000b53a:	6e 8b       	ld.w	r11,r7[0x20]
8000b53c:	0a 9c       	mov	r12,r5
8000b53e:	5d 18       	icall	r8
8000b540:	18 94       	mov	r4,r12
8000b542:	e0 89 00 0e 	brgt	8000b55e <__sfvwrite_r+0x1ba>
8000b546:	c7 88       	rjmp	8000b636 <__sfvwrite_r+0x292>
8000b548:	0c 9a       	mov	r10,r6
8000b54a:	06 9b       	mov	r11,r3
8000b54c:	f0 1f 00 44 	mcall	8000b65c <__sfvwrite_r+0x2b8>
8000b550:	6e 08       	ld.w	r8,r7[0x0]
8000b552:	0c 08       	add	r8,r6
8000b554:	0c 94       	mov	r4,r6
8000b556:	8f 08       	st.w	r7[0x0],r8
8000b558:	6e 28       	ld.w	r8,r7[0x8]
8000b55a:	0c 18       	sub	r8,r6
8000b55c:	8f 28       	st.w	r7[0x8],r8
8000b55e:	62 28       	ld.w	r8,r1[0x8]
8000b560:	08 18       	sub	r8,r4
8000b562:	83 28       	st.w	r1[0x8],r8
8000b564:	c6 e0       	breq	8000b640 <__sfvwrite_r+0x29c>
8000b566:	08 16       	sub	r6,r4
8000b568:	08 03       	add	r3,r4
8000b56a:	c6 db       	rjmp	8000b444 <__sfvwrite_r+0xa0>
8000b56c:	60 03       	ld.w	r3,r0[0x0]
8000b56e:	60 11       	ld.w	r1,r0[0x4]
8000b570:	30 08       	mov	r8,0
8000b572:	2f 80       	sub	r0,-8
8000b574:	50 08       	stdsp	sp[0x0],r8
8000b576:	58 01       	cp.w	r1,0
8000b578:	cf a0       	breq	8000b56c <__sfvwrite_r+0x1c8>
8000b57a:	40 0a       	lddsp	r10,sp[0x0]
8000b57c:	58 0a       	cp.w	r10,0
8000b57e:	c1 51       	brne	8000b5a8 <__sfvwrite_r+0x204>
8000b580:	e2 c6 ff ff 	sub	r6,r1,-1
8000b584:	02 9a       	mov	r10,r1
8000b586:	30 ab       	mov	r11,10
8000b588:	06 9c       	mov	r12,r3
8000b58a:	f0 1f 00 37 	mcall	8000b664 <__sfvwrite_r+0x2c0>
8000b58e:	f8 c8 ff ff 	sub	r8,r12,-1
8000b592:	58 0c       	cp.w	r12,0
8000b594:	f1 d3 e1 16 	subne	r6,r8,r3
8000b598:	f9 b9 01 01 	movne	r9,1
8000b59c:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000b5a0:	f9 b8 00 01 	moveq	r8,1
8000b5a4:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000b5a8:	02 36       	cp.w	r6,r1
8000b5aa:	ec 04 17 80 	movls	r4,r6
8000b5ae:	e2 04 17 b0 	movhi	r4,r1
8000b5b2:	6e 59       	ld.w	r9,r7[0x14]
8000b5b4:	6e 25       	ld.w	r5,r7[0x8]
8000b5b6:	f2 05 00 05 	add	r5,r9,r5
8000b5ba:	0a 34       	cp.w	r4,r5
8000b5bc:	5f 9a       	srgt	r10
8000b5be:	6e 0c       	ld.w	r12,r7[0x0]
8000b5c0:	6e 48       	ld.w	r8,r7[0x10]
8000b5c2:	10 3c       	cp.w	r12,r8
8000b5c4:	5f b8       	srhi	r8
8000b5c6:	f5 e8 00 08 	and	r8,r10,r8
8000b5ca:	30 0a       	mov	r10,0
8000b5cc:	f4 08 18 00 	cp.b	r8,r10
8000b5d0:	c0 e0       	breq	8000b5ec <__sfvwrite_r+0x248>
8000b5d2:	06 9b       	mov	r11,r3
8000b5d4:	0a 9a       	mov	r10,r5
8000b5d6:	f0 1f 00 22 	mcall	8000b65c <__sfvwrite_r+0x2b8>
8000b5da:	6e 08       	ld.w	r8,r7[0x0]
8000b5dc:	0a 08       	add	r8,r5
8000b5de:	0e 9b       	mov	r11,r7
8000b5e0:	8f 08       	st.w	r7[0x0],r8
8000b5e2:	40 1c       	lddsp	r12,sp[0x4]
8000b5e4:	f0 1f 00 1f 	mcall	8000b660 <__sfvwrite_r+0x2bc>
8000b5e8:	c1 80       	breq	8000b618 <__sfvwrite_r+0x274>
8000b5ea:	c2 68       	rjmp	8000b636 <__sfvwrite_r+0x292>
8000b5ec:	12 34       	cp.w	r4,r9
8000b5ee:	c0 a5       	brlt	8000b602 <__sfvwrite_r+0x25e>
8000b5f0:	6e a8       	ld.w	r8,r7[0x28]
8000b5f2:	06 9a       	mov	r10,r3
8000b5f4:	6e 8b       	ld.w	r11,r7[0x20]
8000b5f6:	40 1c       	lddsp	r12,sp[0x4]
8000b5f8:	5d 18       	icall	r8
8000b5fa:	18 95       	mov	r5,r12
8000b5fc:	e0 89 00 0e 	brgt	8000b618 <__sfvwrite_r+0x274>
8000b600:	c1 b8       	rjmp	8000b636 <__sfvwrite_r+0x292>
8000b602:	08 9a       	mov	r10,r4
8000b604:	06 9b       	mov	r11,r3
8000b606:	f0 1f 00 16 	mcall	8000b65c <__sfvwrite_r+0x2b8>
8000b60a:	6e 08       	ld.w	r8,r7[0x0]
8000b60c:	08 08       	add	r8,r4
8000b60e:	08 95       	mov	r5,r4
8000b610:	8f 08       	st.w	r7[0x0],r8
8000b612:	6e 28       	ld.w	r8,r7[0x8]
8000b614:	08 18       	sub	r8,r4
8000b616:	8f 28       	st.w	r7[0x8],r8
8000b618:	0a 16       	sub	r6,r5
8000b61a:	c0 71       	brne	8000b628 <__sfvwrite_r+0x284>
8000b61c:	0e 9b       	mov	r11,r7
8000b61e:	40 1c       	lddsp	r12,sp[0x4]
8000b620:	f0 1f 00 10 	mcall	8000b660 <__sfvwrite_r+0x2bc>
8000b624:	c0 91       	brne	8000b636 <__sfvwrite_r+0x292>
8000b626:	50 06       	stdsp	sp[0x0],r6
8000b628:	64 28       	ld.w	r8,r2[0x8]
8000b62a:	0a 18       	sub	r8,r5
8000b62c:	85 28       	st.w	r2[0x8],r8
8000b62e:	c0 90       	breq	8000b640 <__sfvwrite_r+0x29c>
8000b630:	0a 11       	sub	r1,r5
8000b632:	0a 03       	add	r3,r5
8000b634:	ca 1b       	rjmp	8000b576 <__sfvwrite_r+0x1d2>
8000b636:	8e 68       	ld.sh	r8,r7[0xc]
8000b638:	a7 a8       	sbr	r8,0x6
8000b63a:	ae 68       	st.h	r7[0xc],r8
8000b63c:	3f fc       	mov	r12,-1
8000b63e:	c0 28       	rjmp	8000b642 <__sfvwrite_r+0x29e>
8000b640:	30 0c       	mov	r12,0
8000b642:	2f dd       	sub	sp,-12
8000b644:	d8 32       	popm	r0-r7,pc
8000b646:	00 00       	add	r0,r0
8000b648:	80 00       	ld.sh	r0,r0[0x0]
8000b64a:	e7 cc 80 00 	ldmts	r12++,pc
8000b64e:	b7 2c       	st.d	r11++,r12
8000b650:	80 00       	ld.sh	r0,r0[0x0]
8000b652:	bb b8       	sbr	r8,0x1b
8000b654:	80 00       	ld.sh	r0,r0[0x0]
8000b656:	bd f4       	*unknown*
8000b658:	80 00       	ld.sh	r0,r0[0x0]
8000b65a:	fb 1c 80 00 	ld.uh	r12,sp[-32768]
8000b65e:	bd 00       	ld.d	r0,lr
8000b660:	80 00       	ld.sh	r0,r0[0x0]
8000b662:	f7 e8 80 00 	sthh.w	r0[r0],r11:b,r8:b
8000b666:	bb 7c       	lsl	r12,0x1b

8000b668 <_fwrite_r>:
8000b668:	d4 31       	pushm	r0-r7,lr
8000b66a:	20 5d       	sub	sp,20
8000b66c:	12 96       	mov	r6,r9
8000b66e:	fa c9 ff f4 	sub	r9,sp,-12
8000b672:	ec 0a 02 45 	mul	r5,r6,r10
8000b676:	50 09       	stdsp	sp[0x0],r9
8000b678:	50 3b       	stdsp	sp[0xc],r11
8000b67a:	30 19       	mov	r9,1
8000b67c:	50 45       	stdsp	sp[0x10],r5
8000b67e:	50 25       	stdsp	sp[0x8],r5
8000b680:	50 19       	stdsp	sp[0x4],r9
8000b682:	14 97       	mov	r7,r10
8000b684:	10 93       	mov	r3,r8
8000b686:	18 94       	mov	r4,r12
8000b688:	58 0c       	cp.w	r12,0
8000b68a:	c0 60       	breq	8000b696 <_fwrite_r+0x2e>
8000b68c:	78 68       	ld.w	r8,r12[0x18]
8000b68e:	58 08       	cp.w	r8,0
8000b690:	c0 31       	brne	8000b696 <_fwrite_r+0x2e>
8000b692:	f0 1f 00 0f 	mcall	8000b6cc <_fwrite_r+0x64>
8000b696:	48 f8       	lddpc	r8,8000b6d0 <_fwrite_r+0x68>
8000b698:	10 33       	cp.w	r3,r8
8000b69a:	c0 31       	brne	8000b6a0 <_fwrite_r+0x38>
8000b69c:	68 03       	ld.w	r3,r4[0x0]
8000b69e:	c0 a8       	rjmp	8000b6b2 <_fwrite_r+0x4a>
8000b6a0:	48 d8       	lddpc	r8,8000b6d4 <_fwrite_r+0x6c>
8000b6a2:	10 33       	cp.w	r3,r8
8000b6a4:	c0 31       	brne	8000b6aa <_fwrite_r+0x42>
8000b6a6:	68 13       	ld.w	r3,r4[0x4]
8000b6a8:	c0 58       	rjmp	8000b6b2 <_fwrite_r+0x4a>
8000b6aa:	48 c8       	lddpc	r8,8000b6d8 <_fwrite_r+0x70>
8000b6ac:	10 33       	cp.w	r3,r8
8000b6ae:	e9 f3 00 02 	ld.weq	r3,r4[0x8]
8000b6b2:	06 9b       	mov	r11,r3
8000b6b4:	08 9c       	mov	r12,r4
8000b6b6:	1a 9a       	mov	r10,sp
8000b6b8:	f0 1f 00 09 	mcall	8000b6dc <_fwrite_r+0x74>
8000b6bc:	c0 50       	breq	8000b6c6 <_fwrite_r+0x5e>
8000b6be:	40 28       	lddsp	r8,sp[0x8]
8000b6c0:	10 15       	sub	r5,r8
8000b6c2:	ea 07 0d 06 	divu	r6,r5,r7
8000b6c6:	0c 9c       	mov	r12,r6
8000b6c8:	2f bd       	sub	sp,-20
8000b6ca:	d8 32       	popm	r0-r7,pc
8000b6cc:	80 00       	ld.sh	r0,r0[0x0]
8000b6ce:	f9 c4       	*unknown*
8000b6d0:	80 01       	ld.sh	r1,r0[0x0]
8000b6d2:	1f 24       	ld.uh	r4,pc++
8000b6d4:	80 01       	ld.sh	r1,r0[0x0]
8000b6d6:	1f 44       	ld.w	r4,--pc
8000b6d8:	80 01       	ld.sh	r1,r0[0x0]
8000b6da:	1f 64       	ld.uh	r4,--pc
8000b6dc:	80 00       	ld.sh	r0,r0[0x0]
8000b6de:	b3 a4       	sbr	r4,0x12

8000b6e0 <fwrite>:
8000b6e0:	d4 01       	pushm	lr
8000b6e2:	12 98       	mov	r8,r9
8000b6e4:	14 99       	mov	r9,r10
8000b6e6:	16 9a       	mov	r10,r11
8000b6e8:	18 9b       	mov	r11,r12
8000b6ea:	48 3c       	lddpc	r12,8000b6f4 <fwrite+0x14>
8000b6ec:	78 0c       	ld.w	r12,r12[0x0]
8000b6ee:	f0 1f 00 03 	mcall	8000b6f8 <fwrite+0x18>
8000b6f2:	d8 02       	popm	pc
8000b6f4:	00 00       	add	r0,r0
8000b6f6:	01 dc       	ld.ub	r12,r0[0x5]
8000b6f8:	80 00       	ld.sh	r0,r0[0x0]
8000b6fa:	b6 68       	st.h	r11[0xc],r8

8000b6fc <free>:
8000b6fc:	d4 01       	pushm	lr
8000b6fe:	48 48       	lddpc	r8,8000b70c <free+0x10>
8000b700:	18 9b       	mov	r11,r12
8000b702:	70 0c       	ld.w	r12,r8[0x0]
8000b704:	f0 1f 00 03 	mcall	8000b710 <free+0x14>
8000b708:	d8 02       	popm	pc
8000b70a:	00 00       	add	r0,r0
8000b70c:	00 00       	add	r0,r0
8000b70e:	01 dc       	ld.ub	r12,r0[0x5]
8000b710:	80 00       	ld.sh	r0,r0[0x0]
8000b712:	fb 1c d4 01 	ld.uh	r12,sp[-11263]

8000b714 <malloc>:
8000b714:	d4 01       	pushm	lr
8000b716:	48 48       	lddpc	r8,8000b724 <malloc+0x10>
8000b718:	18 9b       	mov	r11,r12
8000b71a:	70 0c       	ld.w	r12,r8[0x0]
8000b71c:	f0 1f 00 03 	mcall	8000b728 <malloc+0x14>
8000b720:	d8 02       	popm	pc
8000b722:	00 00       	add	r0,r0
8000b724:	00 00       	add	r0,r0
8000b726:	01 dc       	ld.ub	r12,r0[0x5]
8000b728:	80 00       	ld.sh	r0,r0[0x0]
8000b72a:	b7 2c       	st.d	r11++,r12

8000b72c <_malloc_r>:
8000b72c:	d4 31       	pushm	r0-r7,lr
8000b72e:	f6 c8 ff f5 	sub	r8,r11,-11
8000b732:	18 95       	mov	r5,r12
8000b734:	10 97       	mov	r7,r8
8000b736:	e0 17 ff f8 	andl	r7,0xfff8
8000b73a:	59 68       	cp.w	r8,22
8000b73c:	f9 b7 08 10 	movls	r7,16
8000b740:	16 37       	cp.w	r7,r11
8000b742:	5f 38       	srlo	r8
8000b744:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000b748:	c0 50       	breq	8000b752 <_malloc_r+0x26>
8000b74a:	30 c8       	mov	r8,12
8000b74c:	99 38       	st.w	r12[0xc],r8
8000b74e:	e0 8f 01 f3 	bral	8000bb34 <_malloc_r+0x408>
8000b752:	f0 1f 00 50 	mcall	8000b890 <_malloc_r+0x164>
8000b756:	e0 47 01 f7 	cp.w	r7,503
8000b75a:	e0 8b 00 1c 	brhi	8000b792 <_malloc_r+0x66>
8000b75e:	ee 03 16 03 	lsr	r3,r7,0x3
8000b762:	4c d8       	lddpc	r8,8000b894 <_malloc_r+0x168>
8000b764:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000b768:	70 36       	ld.w	r6,r8[0xc]
8000b76a:	10 36       	cp.w	r6,r8
8000b76c:	c0 61       	brne	8000b778 <_malloc_r+0x4c>
8000b76e:	ec c8 ff f8 	sub	r8,r6,-8
8000b772:	70 36       	ld.w	r6,r8[0xc]
8000b774:	10 36       	cp.w	r6,r8
8000b776:	c0 c0       	breq	8000b78e <_malloc_r+0x62>
8000b778:	6c 18       	ld.w	r8,r6[0x4]
8000b77a:	e0 18 ff fc 	andl	r8,0xfffc
8000b77e:	6c 3a       	ld.w	r10,r6[0xc]
8000b780:	ec 08 00 09 	add	r9,r6,r8
8000b784:	0a 9c       	mov	r12,r5
8000b786:	6c 28       	ld.w	r8,r6[0x8]
8000b788:	95 28       	st.w	r10[0x8],r8
8000b78a:	91 3a       	st.w	r8[0xc],r10
8000b78c:	c4 68       	rjmp	8000b818 <_malloc_r+0xec>
8000b78e:	2f e3       	sub	r3,-2
8000b790:	c4 c8       	rjmp	8000b828 <_malloc_r+0xfc>
8000b792:	ee 03 16 09 	lsr	r3,r7,0x9
8000b796:	c0 41       	brne	8000b79e <_malloc_r+0x72>
8000b798:	ee 03 16 03 	lsr	r3,r7,0x3
8000b79c:	c2 68       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b79e:	58 43       	cp.w	r3,4
8000b7a0:	e0 8b 00 06 	brhi	8000b7ac <_malloc_r+0x80>
8000b7a4:	ee 03 16 06 	lsr	r3,r7,0x6
8000b7a8:	2c 83       	sub	r3,-56
8000b7aa:	c1 f8       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b7ac:	59 43       	cp.w	r3,20
8000b7ae:	e0 8b 00 04 	brhi	8000b7b6 <_malloc_r+0x8a>
8000b7b2:	2a 53       	sub	r3,-91
8000b7b4:	c1 a8       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b7b6:	e0 43 00 54 	cp.w	r3,84
8000b7ba:	e0 8b 00 06 	brhi	8000b7c6 <_malloc_r+0x9a>
8000b7be:	ee 03 16 0c 	lsr	r3,r7,0xc
8000b7c2:	29 23       	sub	r3,-110
8000b7c4:	c1 28       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b7c6:	e0 43 01 54 	cp.w	r3,340
8000b7ca:	e0 8b 00 06 	brhi	8000b7d6 <_malloc_r+0xaa>
8000b7ce:	ee 03 16 0f 	lsr	r3,r7,0xf
8000b7d2:	28 93       	sub	r3,-119
8000b7d4:	c0 a8       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b7d6:	e0 43 05 54 	cp.w	r3,1364
8000b7da:	e0 88 00 04 	brls	8000b7e2 <_malloc_r+0xb6>
8000b7de:	37 e3       	mov	r3,126
8000b7e0:	c0 48       	rjmp	8000b7e8 <_malloc_r+0xbc>
8000b7e2:	ee 03 16 12 	lsr	r3,r7,0x12
8000b7e6:	28 43       	sub	r3,-124
8000b7e8:	4a ba       	lddpc	r10,8000b894 <_malloc_r+0x168>
8000b7ea:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000b7ee:	74 36       	ld.w	r6,r10[0xc]
8000b7f0:	c1 98       	rjmp	8000b822 <_malloc_r+0xf6>
8000b7f2:	6c 19       	ld.w	r9,r6[0x4]
8000b7f4:	e0 19 ff fc 	andl	r9,0xfffc
8000b7f8:	f2 07 01 0b 	sub	r11,r9,r7
8000b7fc:	58 fb       	cp.w	r11,15
8000b7fe:	e0 8a 00 04 	brle	8000b806 <_malloc_r+0xda>
8000b802:	20 13       	sub	r3,1
8000b804:	c1 18       	rjmp	8000b826 <_malloc_r+0xfa>
8000b806:	6c 38       	ld.w	r8,r6[0xc]
8000b808:	58 0b       	cp.w	r11,0
8000b80a:	c0 b5       	brlt	8000b820 <_malloc_r+0xf4>
8000b80c:	6c 2a       	ld.w	r10,r6[0x8]
8000b80e:	ec 09 00 09 	add	r9,r6,r9
8000b812:	0a 9c       	mov	r12,r5
8000b814:	91 2a       	st.w	r8[0x8],r10
8000b816:	95 38       	st.w	r10[0xc],r8
8000b818:	72 18       	ld.w	r8,r9[0x4]
8000b81a:	a1 a8       	sbr	r8,0x0
8000b81c:	93 18       	st.w	r9[0x4],r8
8000b81e:	cb c8       	rjmp	8000b996 <_malloc_r+0x26a>
8000b820:	10 96       	mov	r6,r8
8000b822:	14 36       	cp.w	r6,r10
8000b824:	ce 71       	brne	8000b7f2 <_malloc_r+0xc6>
8000b826:	2f f3       	sub	r3,-1
8000b828:	49 ba       	lddpc	r10,8000b894 <_malloc_r+0x168>
8000b82a:	f4 cc ff f8 	sub	r12,r10,-8
8000b82e:	78 26       	ld.w	r6,r12[0x8]
8000b830:	18 36       	cp.w	r6,r12
8000b832:	c6 e0       	breq	8000b90e <_malloc_r+0x1e2>
8000b834:	6c 19       	ld.w	r9,r6[0x4]
8000b836:	e0 19 ff fc 	andl	r9,0xfffc
8000b83a:	f2 07 01 08 	sub	r8,r9,r7
8000b83e:	58 f8       	cp.w	r8,15
8000b840:	e0 89 00 90 	brgt	8000b960 <_malloc_r+0x234>
8000b844:	99 3c       	st.w	r12[0xc],r12
8000b846:	99 2c       	st.w	r12[0x8],r12
8000b848:	58 08       	cp.w	r8,0
8000b84a:	c0 55       	brlt	8000b854 <_malloc_r+0x128>
8000b84c:	ec 09 00 09 	add	r9,r6,r9
8000b850:	0a 9c       	mov	r12,r5
8000b852:	ce 3b       	rjmp	8000b818 <_malloc_r+0xec>
8000b854:	e0 49 01 ff 	cp.w	r9,511
8000b858:	e0 8b 00 13 	brhi	8000b87e <_malloc_r+0x152>
8000b85c:	a3 99       	lsr	r9,0x3
8000b85e:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000b862:	70 2b       	ld.w	r11,r8[0x8]
8000b864:	8d 38       	st.w	r6[0xc],r8
8000b866:	8d 2b       	st.w	r6[0x8],r11
8000b868:	97 36       	st.w	r11[0xc],r6
8000b86a:	91 26       	st.w	r8[0x8],r6
8000b86c:	a3 49       	asr	r9,0x2
8000b86e:	74 18       	ld.w	r8,r10[0x4]
8000b870:	30 1b       	mov	r11,1
8000b872:	f6 09 09 49 	lsl	r9,r11,r9
8000b876:	f1 e9 10 09 	or	r9,r8,r9
8000b87a:	95 19       	st.w	r10[0x4],r9
8000b87c:	c4 98       	rjmp	8000b90e <_malloc_r+0x1e2>
8000b87e:	f2 0a 16 09 	lsr	r10,r9,0x9
8000b882:	58 4a       	cp.w	r10,4
8000b884:	e0 8b 00 0a 	brhi	8000b898 <_malloc_r+0x16c>
8000b888:	f2 0a 16 06 	lsr	r10,r9,0x6
8000b88c:	2c 8a       	sub	r10,-56
8000b88e:	c2 38       	rjmp	8000b8d4 <_malloc_r+0x1a8>
8000b890:	80 00       	ld.sh	r0,r0[0x0]
8000b892:	bd 4c       	asr	r12,0x1c
8000b894:	00 00       	add	r0,r0
8000b896:	01 e0       	ld.ub	r0,r0[0x6]
8000b898:	59 4a       	cp.w	r10,20
8000b89a:	e0 8b 00 04 	brhi	8000b8a2 <_malloc_r+0x176>
8000b89e:	2a 5a       	sub	r10,-91
8000b8a0:	c1 a8       	rjmp	8000b8d4 <_malloc_r+0x1a8>
8000b8a2:	e0 4a 00 54 	cp.w	r10,84
8000b8a6:	e0 8b 00 06 	brhi	8000b8b2 <_malloc_r+0x186>
8000b8aa:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000b8ae:	29 2a       	sub	r10,-110
8000b8b0:	c1 28       	rjmp	8000b8d4 <_malloc_r+0x1a8>
8000b8b2:	e0 4a 01 54 	cp.w	r10,340
8000b8b6:	e0 8b 00 06 	brhi	8000b8c2 <_malloc_r+0x196>
8000b8ba:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000b8be:	28 9a       	sub	r10,-119
8000b8c0:	c0 a8       	rjmp	8000b8d4 <_malloc_r+0x1a8>
8000b8c2:	e0 4a 05 54 	cp.w	r10,1364
8000b8c6:	e0 88 00 04 	brls	8000b8ce <_malloc_r+0x1a2>
8000b8ca:	37 ea       	mov	r10,126
8000b8cc:	c0 48       	rjmp	8000b8d4 <_malloc_r+0x1a8>
8000b8ce:	f2 0a 16 12 	lsr	r10,r9,0x12
8000b8d2:	28 4a       	sub	r10,-124
8000b8d4:	4c 8b       	lddpc	r11,8000b9f4 <_malloc_r+0x2c8>
8000b8d6:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000b8da:	68 28       	ld.w	r8,r4[0x8]
8000b8dc:	08 38       	cp.w	r8,r4
8000b8de:	c0 e1       	brne	8000b8fa <_malloc_r+0x1ce>
8000b8e0:	76 19       	ld.w	r9,r11[0x4]
8000b8e2:	a3 4a       	asr	r10,0x2
8000b8e4:	30 1e       	mov	lr,1
8000b8e6:	fc 0a 09 4a 	lsl	r10,lr,r10
8000b8ea:	f3 ea 10 0a 	or	r10,r9,r10
8000b8ee:	10 99       	mov	r9,r8
8000b8f0:	97 1a       	st.w	r11[0x4],r10
8000b8f2:	c0 a8       	rjmp	8000b906 <_malloc_r+0x1da>
8000b8f4:	70 28       	ld.w	r8,r8[0x8]
8000b8f6:	08 38       	cp.w	r8,r4
8000b8f8:	c0 60       	breq	8000b904 <_malloc_r+0x1d8>
8000b8fa:	70 1a       	ld.w	r10,r8[0x4]
8000b8fc:	e0 1a ff fc 	andl	r10,0xfffc
8000b900:	14 39       	cp.w	r9,r10
8000b902:	cf 93       	brcs	8000b8f4 <_malloc_r+0x1c8>
8000b904:	70 39       	ld.w	r9,r8[0xc]
8000b906:	8d 39       	st.w	r6[0xc],r9
8000b908:	8d 28       	st.w	r6[0x8],r8
8000b90a:	91 36       	st.w	r8[0xc],r6
8000b90c:	93 26       	st.w	r9[0x8],r6
8000b90e:	e6 08 14 02 	asr	r8,r3,0x2
8000b912:	30 1b       	mov	r11,1
8000b914:	4b 84       	lddpc	r4,8000b9f4 <_malloc_r+0x2c8>
8000b916:	f6 08 09 4b 	lsl	r11,r11,r8
8000b91a:	68 18       	ld.w	r8,r4[0x4]
8000b91c:	10 3b       	cp.w	r11,r8
8000b91e:	e0 8b 00 6f 	brhi	8000b9fc <_malloc_r+0x2d0>
8000b922:	f7 e8 00 09 	and	r9,r11,r8
8000b926:	c0 b1       	brne	8000b93c <_malloc_r+0x210>
8000b928:	e0 13 ff fc 	andl	r3,0xfffc
8000b92c:	a1 7b       	lsl	r11,0x1
8000b92e:	2f c3       	sub	r3,-4
8000b930:	c0 38       	rjmp	8000b936 <_malloc_r+0x20a>
8000b932:	2f c3       	sub	r3,-4
8000b934:	a1 7b       	lsl	r11,0x1
8000b936:	f7 e8 00 09 	and	r9,r11,r8
8000b93a:	cf c0       	breq	8000b932 <_malloc_r+0x206>
8000b93c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000b940:	06 92       	mov	r2,r3
8000b942:	1c 91       	mov	r1,lr
8000b944:	62 36       	ld.w	r6,r1[0xc]
8000b946:	c2 e8       	rjmp	8000b9a2 <_malloc_r+0x276>
8000b948:	6c 1a       	ld.w	r10,r6[0x4]
8000b94a:	e0 1a ff fc 	andl	r10,0xfffc
8000b94e:	f4 07 01 08 	sub	r8,r10,r7
8000b952:	58 f8       	cp.w	r8,15
8000b954:	e0 8a 00 15 	brle	8000b97e <_malloc_r+0x252>
8000b958:	6c 3a       	ld.w	r10,r6[0xc]
8000b95a:	6c 29       	ld.w	r9,r6[0x8]
8000b95c:	95 29       	st.w	r10[0x8],r9
8000b95e:	93 3a       	st.w	r9[0xc],r10
8000b960:	0e 99       	mov	r9,r7
8000b962:	ec 07 00 07 	add	r7,r6,r7
8000b966:	a1 a9       	sbr	r9,0x0
8000b968:	99 37       	st.w	r12[0xc],r7
8000b96a:	99 27       	st.w	r12[0x8],r7
8000b96c:	8d 19       	st.w	r6[0x4],r9
8000b96e:	ee 08 09 08 	st.w	r7[r8],r8
8000b972:	8f 2c       	st.w	r7[0x8],r12
8000b974:	8f 3c       	st.w	r7[0xc],r12
8000b976:	a1 a8       	sbr	r8,0x0
8000b978:	0a 9c       	mov	r12,r5
8000b97a:	8f 18       	st.w	r7[0x4],r8
8000b97c:	c0 d8       	rjmp	8000b996 <_malloc_r+0x26a>
8000b97e:	6c 39       	ld.w	r9,r6[0xc]
8000b980:	58 08       	cp.w	r8,0
8000b982:	c0 f5       	brlt	8000b9a0 <_malloc_r+0x274>
8000b984:	ec 0a 00 0a 	add	r10,r6,r10
8000b988:	74 18       	ld.w	r8,r10[0x4]
8000b98a:	a1 a8       	sbr	r8,0x0
8000b98c:	0a 9c       	mov	r12,r5
8000b98e:	95 18       	st.w	r10[0x4],r8
8000b990:	6c 28       	ld.w	r8,r6[0x8]
8000b992:	93 28       	st.w	r9[0x8],r8
8000b994:	91 39       	st.w	r8[0xc],r9
8000b996:	f0 1f 00 19 	mcall	8000b9f8 <_malloc_r+0x2cc>
8000b99a:	ec cc ff f8 	sub	r12,r6,-8
8000b99e:	d8 32       	popm	r0-r7,pc
8000b9a0:	12 96       	mov	r6,r9
8000b9a2:	02 36       	cp.w	r6,r1
8000b9a4:	cd 21       	brne	8000b948 <_malloc_r+0x21c>
8000b9a6:	2f f2       	sub	r2,-1
8000b9a8:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000b9ac:	c0 30       	breq	8000b9b2 <_malloc_r+0x286>
8000b9ae:	2f 81       	sub	r1,-8
8000b9b0:	cc ab       	rjmp	8000b944 <_malloc_r+0x218>
8000b9b2:	1c 98       	mov	r8,lr
8000b9b4:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000b9b8:	c0 81       	brne	8000b9c8 <_malloc_r+0x29c>
8000b9ba:	68 19       	ld.w	r9,r4[0x4]
8000b9bc:	f6 08 11 ff 	rsub	r8,r11,-1
8000b9c0:	f3 e8 00 08 	and	r8,r9,r8
8000b9c4:	89 18       	st.w	r4[0x4],r8
8000b9c6:	c0 78       	rjmp	8000b9d4 <_malloc_r+0x2a8>
8000b9c8:	f0 c9 00 08 	sub	r9,r8,8
8000b9cc:	20 13       	sub	r3,1
8000b9ce:	70 08       	ld.w	r8,r8[0x0]
8000b9d0:	12 38       	cp.w	r8,r9
8000b9d2:	cf 10       	breq	8000b9b4 <_malloc_r+0x288>
8000b9d4:	a1 7b       	lsl	r11,0x1
8000b9d6:	68 18       	ld.w	r8,r4[0x4]
8000b9d8:	10 3b       	cp.w	r11,r8
8000b9da:	e0 8b 00 11 	brhi	8000b9fc <_malloc_r+0x2d0>
8000b9de:	58 0b       	cp.w	r11,0
8000b9e0:	c0 e0       	breq	8000b9fc <_malloc_r+0x2d0>
8000b9e2:	04 93       	mov	r3,r2
8000b9e4:	c0 38       	rjmp	8000b9ea <_malloc_r+0x2be>
8000b9e6:	2f c3       	sub	r3,-4
8000b9e8:	a1 7b       	lsl	r11,0x1
8000b9ea:	f7 e8 00 09 	and	r9,r11,r8
8000b9ee:	ca 71       	brne	8000b93c <_malloc_r+0x210>
8000b9f0:	cf bb       	rjmp	8000b9e6 <_malloc_r+0x2ba>
8000b9f2:	00 00       	add	r0,r0
8000b9f4:	00 00       	add	r0,r0
8000b9f6:	01 e0       	ld.ub	r0,r0[0x6]
8000b9f8:	80 00       	ld.sh	r0,r0[0x0]
8000b9fa:	bd 4e       	asr	lr,0x1c
8000b9fc:	68 23       	ld.w	r3,r4[0x8]
8000b9fe:	66 12       	ld.w	r2,r3[0x4]
8000ba00:	e0 12 ff fc 	andl	r2,0xfffc
8000ba04:	0e 32       	cp.w	r2,r7
8000ba06:	5f 39       	srlo	r9
8000ba08:	e4 07 01 08 	sub	r8,r2,r7
8000ba0c:	58 f8       	cp.w	r8,15
8000ba0e:	5f aa       	srle	r10
8000ba10:	f5 e9 10 09 	or	r9,r10,r9
8000ba14:	e0 80 00 a2 	breq	8000bb58 <_malloc_r+0x42c>
8000ba18:	4c 88       	lddpc	r8,8000bb38 <_malloc_r+0x40c>
8000ba1a:	70 01       	ld.w	r1,r8[0x0]
8000ba1c:	4c 88       	lddpc	r8,8000bb3c <_malloc_r+0x410>
8000ba1e:	2f 01       	sub	r1,-16
8000ba20:	70 08       	ld.w	r8,r8[0x0]
8000ba22:	0e 01       	add	r1,r7
8000ba24:	5b f8       	cp.w	r8,-1
8000ba26:	c0 40       	breq	8000ba2e <_malloc_r+0x302>
8000ba28:	28 11       	sub	r1,-127
8000ba2a:	e0 11 ff 80 	andl	r1,0xff80
8000ba2e:	02 9b       	mov	r11,r1
8000ba30:	0a 9c       	mov	r12,r5
8000ba32:	f0 1f 00 44 	mcall	8000bb40 <_malloc_r+0x414>
8000ba36:	18 96       	mov	r6,r12
8000ba38:	5b fc       	cp.w	r12,-1
8000ba3a:	c6 e0       	breq	8000bb16 <_malloc_r+0x3ea>
8000ba3c:	e6 02 00 08 	add	r8,r3,r2
8000ba40:	10 3c       	cp.w	r12,r8
8000ba42:	c0 32       	brcc	8000ba48 <_malloc_r+0x31c>
8000ba44:	08 33       	cp.w	r3,r4
8000ba46:	c6 81       	brne	8000bb16 <_malloc_r+0x3ea>
8000ba48:	4b fa       	lddpc	r10,8000bb44 <_malloc_r+0x418>
8000ba4a:	74 09       	ld.w	r9,r10[0x0]
8000ba4c:	e2 09 00 09 	add	r9,r1,r9
8000ba50:	95 09       	st.w	r10[0x0],r9
8000ba52:	10 36       	cp.w	r6,r8
8000ba54:	c0 a1       	brne	8000ba68 <_malloc_r+0x33c>
8000ba56:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000ba5a:	c0 71       	brne	8000ba68 <_malloc_r+0x33c>
8000ba5c:	e2 02 00 02 	add	r2,r1,r2
8000ba60:	68 28       	ld.w	r8,r4[0x8]
8000ba62:	a1 a2       	sbr	r2,0x0
8000ba64:	91 12       	st.w	r8[0x4],r2
8000ba66:	c4 c8       	rjmp	8000bafe <_malloc_r+0x3d2>
8000ba68:	4b 5a       	lddpc	r10,8000bb3c <_malloc_r+0x410>
8000ba6a:	74 0b       	ld.w	r11,r10[0x0]
8000ba6c:	5b fb       	cp.w	r11,-1
8000ba6e:	c0 31       	brne	8000ba74 <_malloc_r+0x348>
8000ba70:	95 06       	st.w	r10[0x0],r6
8000ba72:	c0 68       	rjmp	8000ba7e <_malloc_r+0x352>
8000ba74:	ec 09 00 09 	add	r9,r6,r9
8000ba78:	4b 3a       	lddpc	r10,8000bb44 <_malloc_r+0x418>
8000ba7a:	10 19       	sub	r9,r8
8000ba7c:	95 09       	st.w	r10[0x0],r9
8000ba7e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000ba82:	f0 09 11 08 	rsub	r9,r8,8
8000ba86:	58 08       	cp.w	r8,0
8000ba88:	f2 08 17 10 	movne	r8,r9
8000ba8c:	ed d8 e1 06 	addne	r6,r6,r8
8000ba90:	28 08       	sub	r8,-128
8000ba92:	ec 01 00 01 	add	r1,r6,r1
8000ba96:	0a 9c       	mov	r12,r5
8000ba98:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000ba9c:	f0 01 01 01 	sub	r1,r8,r1
8000baa0:	02 9b       	mov	r11,r1
8000baa2:	f0 1f 00 28 	mcall	8000bb40 <_malloc_r+0x414>
8000baa6:	4a 88       	lddpc	r8,8000bb44 <_malloc_r+0x418>
8000baa8:	5b fc       	cp.w	r12,-1
8000baaa:	ec 0c 17 00 	moveq	r12,r6
8000baae:	f9 b1 00 00 	moveq	r1,0
8000bab2:	70 09       	ld.w	r9,r8[0x0]
8000bab4:	0c 1c       	sub	r12,r6
8000bab6:	89 26       	st.w	r4[0x8],r6
8000bab8:	02 0c       	add	r12,r1
8000baba:	12 01       	add	r1,r9
8000babc:	a1 ac       	sbr	r12,0x0
8000babe:	91 01       	st.w	r8[0x0],r1
8000bac0:	8d 1c       	st.w	r6[0x4],r12
8000bac2:	08 33       	cp.w	r3,r4
8000bac4:	c1 d0       	breq	8000bafe <_malloc_r+0x3d2>
8000bac6:	58 f2       	cp.w	r2,15
8000bac8:	e0 8b 00 05 	brhi	8000bad2 <_malloc_r+0x3a6>
8000bacc:	30 18       	mov	r8,1
8000bace:	8d 18       	st.w	r6[0x4],r8
8000bad0:	c2 38       	rjmp	8000bb16 <_malloc_r+0x3ea>
8000bad2:	30 59       	mov	r9,5
8000bad4:	20 c2       	sub	r2,12
8000bad6:	e0 12 ff f8 	andl	r2,0xfff8
8000bada:	e6 02 00 08 	add	r8,r3,r2
8000bade:	91 29       	st.w	r8[0x8],r9
8000bae0:	91 19       	st.w	r8[0x4],r9
8000bae2:	66 18       	ld.w	r8,r3[0x4]
8000bae4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bae8:	e5 e8 10 08 	or	r8,r2,r8
8000baec:	87 18       	st.w	r3[0x4],r8
8000baee:	58 f2       	cp.w	r2,15
8000baf0:	e0 88 00 07 	brls	8000bafe <_malloc_r+0x3d2>
8000baf4:	e6 cb ff f8 	sub	r11,r3,-8
8000baf8:	0a 9c       	mov	r12,r5
8000bafa:	f0 1f 00 14 	mcall	8000bb48 <_malloc_r+0x41c>
8000bafe:	49 49       	lddpc	r9,8000bb4c <_malloc_r+0x420>
8000bb00:	72 0a       	ld.w	r10,r9[0x0]
8000bb02:	49 18       	lddpc	r8,8000bb44 <_malloc_r+0x418>
8000bb04:	70 08       	ld.w	r8,r8[0x0]
8000bb06:	14 38       	cp.w	r8,r10
8000bb08:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000bb0c:	49 19       	lddpc	r9,8000bb50 <_malloc_r+0x424>
8000bb0e:	72 0a       	ld.w	r10,r9[0x0]
8000bb10:	14 38       	cp.w	r8,r10
8000bb12:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000bb16:	68 28       	ld.w	r8,r4[0x8]
8000bb18:	70 18       	ld.w	r8,r8[0x4]
8000bb1a:	e0 18 ff fc 	andl	r8,0xfffc
8000bb1e:	0e 38       	cp.w	r8,r7
8000bb20:	5f 39       	srlo	r9
8000bb22:	0e 18       	sub	r8,r7
8000bb24:	58 f8       	cp.w	r8,15
8000bb26:	5f aa       	srle	r10
8000bb28:	f5 e9 10 09 	or	r9,r10,r9
8000bb2c:	c1 60       	breq	8000bb58 <_malloc_r+0x42c>
8000bb2e:	0a 9c       	mov	r12,r5
8000bb30:	f0 1f 00 09 	mcall	8000bb54 <_malloc_r+0x428>
8000bb34:	d8 3a       	popm	r0-r7,pc,r12=0
8000bb36:	00 00       	add	r0,r0
8000bb38:	00 00       	add	r0,r0
8000bb3a:	13 58       	ld.sh	r8,--r9
8000bb3c:	00 00       	add	r0,r0
8000bb3e:	05 ec       	ld.ub	r12,r2[0x6]
8000bb40:	80 00       	ld.sh	r0,r0[0x0]
8000bb42:	c0 d4       	brge	8000bb5c <_malloc_r+0x430>
8000bb44:	00 00       	add	r0,r0
8000bb46:	13 5c       	ld.sh	r12,--r9
8000bb48:	80 00       	ld.sh	r0,r0[0x0]
8000bb4a:	fb 1c 00 00 	ld.uh	r12,sp[0]
8000bb4e:	13 54       	ld.sh	r4,--r9
8000bb50:	00 00       	add	r0,r0
8000bb52:	13 50       	ld.sh	r0,--r9
8000bb54:	80 00       	ld.sh	r0,r0[0x0]
8000bb56:	bd 4e       	asr	lr,0x1c
8000bb58:	68 26       	ld.w	r6,r4[0x8]
8000bb5a:	a1 a8       	sbr	r8,0x0
8000bb5c:	0e 99       	mov	r9,r7
8000bb5e:	a1 a9       	sbr	r9,0x0
8000bb60:	8d 19       	st.w	r6[0x4],r9
8000bb62:	ec 07 00 07 	add	r7,r6,r7
8000bb66:	0a 9c       	mov	r12,r5
8000bb68:	89 27       	st.w	r4[0x8],r7
8000bb6a:	8f 18       	st.w	r7[0x4],r8
8000bb6c:	f0 1f 00 03 	mcall	8000bb78 <_malloc_r+0x44c>
8000bb70:	ec cc ff f8 	sub	r12,r6,-8
8000bb74:	d8 32       	popm	r0-r7,pc
8000bb76:	00 00       	add	r0,r0
8000bb78:	80 00       	ld.sh	r0,r0[0x0]
8000bb7a:	bd 4e       	asr	lr,0x1c

8000bb7c <memchr>:
8000bb7c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000bb80:	c0 68       	rjmp	8000bb8c <memchr+0x10>
8000bb82:	20 1a       	sub	r10,1
8000bb84:	19 88       	ld.ub	r8,r12[0x0]
8000bb86:	16 38       	cp.w	r8,r11
8000bb88:	5e 0c       	reteq	r12
8000bb8a:	2f fc       	sub	r12,-1
8000bb8c:	58 0a       	cp.w	r10,0
8000bb8e:	cf a1       	brne	8000bb82 <memchr+0x6>
8000bb90:	5e fa       	retal	r10

8000bb92 <memcmp>:
8000bb92:	d4 01       	pushm	lr
8000bb94:	30 08       	mov	r8,0
8000bb96:	c0 d8       	rjmp	8000bbb0 <memcmp+0x1e>
8000bb98:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000bb9c:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000bba0:	20 1a       	sub	r10,1
8000bba2:	2f f8       	sub	r8,-1
8000bba4:	f2 0e 18 00 	cp.b	lr,r9
8000bba8:	c0 40       	breq	8000bbb0 <memcmp+0x1e>
8000bbaa:	fc 09 01 0c 	sub	r12,lr,r9
8000bbae:	d8 02       	popm	pc
8000bbb0:	58 0a       	cp.w	r10,0
8000bbb2:	cf 31       	brne	8000bb98 <memcmp+0x6>
8000bbb4:	14 9c       	mov	r12,r10
8000bbb6:	d8 02       	popm	pc

8000bbb8 <memcpy>:
8000bbb8:	58 8a       	cp.w	r10,8
8000bbba:	c2 f5       	brlt	8000bc18 <memcpy+0x60>
8000bbbc:	f9 eb 10 09 	or	r9,r12,r11
8000bbc0:	e2 19 00 03 	andl	r9,0x3,COH
8000bbc4:	e0 81 00 97 	brne	8000bcf2 <memcpy+0x13a>
8000bbc8:	e0 4a 00 20 	cp.w	r10,32
8000bbcc:	c3 b4       	brge	8000bc42 <memcpy+0x8a>
8000bbce:	f4 08 14 02 	asr	r8,r10,0x2
8000bbd2:	f0 09 11 08 	rsub	r9,r8,8
8000bbd6:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000bbda:	76 69       	ld.w	r9,r11[0x18]
8000bbdc:	99 69       	st.w	r12[0x18],r9
8000bbde:	76 59       	ld.w	r9,r11[0x14]
8000bbe0:	99 59       	st.w	r12[0x14],r9
8000bbe2:	76 49       	ld.w	r9,r11[0x10]
8000bbe4:	99 49       	st.w	r12[0x10],r9
8000bbe6:	76 39       	ld.w	r9,r11[0xc]
8000bbe8:	99 39       	st.w	r12[0xc],r9
8000bbea:	76 29       	ld.w	r9,r11[0x8]
8000bbec:	99 29       	st.w	r12[0x8],r9
8000bbee:	76 19       	ld.w	r9,r11[0x4]
8000bbf0:	99 19       	st.w	r12[0x4],r9
8000bbf2:	76 09       	ld.w	r9,r11[0x0]
8000bbf4:	99 09       	st.w	r12[0x0],r9
8000bbf6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000bbfa:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000bbfe:	e0 1a 00 03 	andl	r10,0x3
8000bc02:	f4 0a 11 04 	rsub	r10,r10,4
8000bc06:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000bc0a:	17 a9       	ld.ub	r9,r11[0x2]
8000bc0c:	b0 a9       	st.b	r8[0x2],r9
8000bc0e:	17 99       	ld.ub	r9,r11[0x1]
8000bc10:	b0 99       	st.b	r8[0x1],r9
8000bc12:	17 89       	ld.ub	r9,r11[0x0]
8000bc14:	b0 89       	st.b	r8[0x0],r9
8000bc16:	5e fc       	retal	r12
8000bc18:	f4 0a 11 09 	rsub	r10,r10,9
8000bc1c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000bc20:	17 f9       	ld.ub	r9,r11[0x7]
8000bc22:	b8 f9       	st.b	r12[0x7],r9
8000bc24:	17 e9       	ld.ub	r9,r11[0x6]
8000bc26:	b8 e9       	st.b	r12[0x6],r9
8000bc28:	17 d9       	ld.ub	r9,r11[0x5]
8000bc2a:	b8 d9       	st.b	r12[0x5],r9
8000bc2c:	17 c9       	ld.ub	r9,r11[0x4]
8000bc2e:	b8 c9       	st.b	r12[0x4],r9
8000bc30:	17 b9       	ld.ub	r9,r11[0x3]
8000bc32:	b8 b9       	st.b	r12[0x3],r9
8000bc34:	17 a9       	ld.ub	r9,r11[0x2]
8000bc36:	b8 a9       	st.b	r12[0x2],r9
8000bc38:	17 99       	ld.ub	r9,r11[0x1]
8000bc3a:	b8 99       	st.b	r12[0x1],r9
8000bc3c:	17 89       	ld.ub	r9,r11[0x0]
8000bc3e:	b8 89       	st.b	r12[0x0],r9
8000bc40:	5e fc       	retal	r12
8000bc42:	eb cd 40 c0 	pushm	r6-r7,lr
8000bc46:	18 99       	mov	r9,r12
8000bc48:	22 0a       	sub	r10,32
8000bc4a:	b7 07       	ld.d	r6,r11++
8000bc4c:	b3 26       	st.d	r9++,r6
8000bc4e:	b7 07       	ld.d	r6,r11++
8000bc50:	b3 26       	st.d	r9++,r6
8000bc52:	b7 07       	ld.d	r6,r11++
8000bc54:	b3 26       	st.d	r9++,r6
8000bc56:	b7 07       	ld.d	r6,r11++
8000bc58:	b3 26       	st.d	r9++,r6
8000bc5a:	22 0a       	sub	r10,32
8000bc5c:	cf 74       	brge	8000bc4a <memcpy+0x92>
8000bc5e:	2f 0a       	sub	r10,-16
8000bc60:	c0 65       	brlt	8000bc6c <memcpy+0xb4>
8000bc62:	b7 07       	ld.d	r6,r11++
8000bc64:	b3 26       	st.d	r9++,r6
8000bc66:	b7 07       	ld.d	r6,r11++
8000bc68:	b3 26       	st.d	r9++,r6
8000bc6a:	21 0a       	sub	r10,16
8000bc6c:	5c 3a       	neg	r10
8000bc6e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000bc72:	d7 03       	nop
8000bc74:	d7 03       	nop
8000bc76:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000bc7a:	f3 66 00 0e 	st.b	r9[14],r6
8000bc7e:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000bc82:	f3 66 00 0d 	st.b	r9[13],r6
8000bc86:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000bc8a:	f3 66 00 0c 	st.b	r9[12],r6
8000bc8e:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000bc92:	f3 66 00 0b 	st.b	r9[11],r6
8000bc96:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000bc9a:	f3 66 00 0a 	st.b	r9[10],r6
8000bc9e:	f7 36 00 09 	ld.ub	r6,r11[9]
8000bca2:	f3 66 00 09 	st.b	r9[9],r6
8000bca6:	f7 36 00 08 	ld.ub	r6,r11[8]
8000bcaa:	f3 66 00 08 	st.b	r9[8],r6
8000bcae:	f7 36 00 07 	ld.ub	r6,r11[7]
8000bcb2:	f3 66 00 07 	st.b	r9[7],r6
8000bcb6:	f7 36 00 06 	ld.ub	r6,r11[6]
8000bcba:	f3 66 00 06 	st.b	r9[6],r6
8000bcbe:	f7 36 00 05 	ld.ub	r6,r11[5]
8000bcc2:	f3 66 00 05 	st.b	r9[5],r6
8000bcc6:	f7 36 00 04 	ld.ub	r6,r11[4]
8000bcca:	f3 66 00 04 	st.b	r9[4],r6
8000bcce:	f7 36 00 03 	ld.ub	r6,r11[3]
8000bcd2:	f3 66 00 03 	st.b	r9[3],r6
8000bcd6:	f7 36 00 02 	ld.ub	r6,r11[2]
8000bcda:	f3 66 00 02 	st.b	r9[2],r6
8000bcde:	f7 36 00 01 	ld.ub	r6,r11[1]
8000bce2:	f3 66 00 01 	st.b	r9[1],r6
8000bce6:	f7 36 00 00 	ld.ub	r6,r11[0]
8000bcea:	f3 66 00 00 	st.b	r9[0],r6
8000bcee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bcf2:	20 1a       	sub	r10,1
8000bcf4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000bcf8:	f8 0a 0b 09 	st.b	r12[r10],r9
8000bcfc:	cf b1       	brne	8000bcf2 <memcpy+0x13a>
8000bcfe:	5e fc       	retal	r12

8000bd00 <memmove>:
8000bd00:	d4 01       	pushm	lr
8000bd02:	18 3b       	cp.w	r11,r12
8000bd04:	c1 92       	brcc	8000bd36 <memmove+0x36>
8000bd06:	f6 0a 00 09 	add	r9,r11,r10
8000bd0a:	12 3c       	cp.w	r12,r9
8000bd0c:	c1 52       	brcc	8000bd36 <memmove+0x36>
8000bd0e:	f8 0a 00 0b 	add	r11,r12,r10
8000bd12:	30 08       	mov	r8,0
8000bd14:	c0 68       	rjmp	8000bd20 <memmove+0x20>
8000bd16:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000bd1a:	20 1a       	sub	r10,1
8000bd1c:	f6 08 0b 0e 	st.b	r11[r8],lr
8000bd20:	20 18       	sub	r8,1
8000bd22:	58 0a       	cp.w	r10,0
8000bd24:	cf 91       	brne	8000bd16 <memmove+0x16>
8000bd26:	d8 02       	popm	pc
8000bd28:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000bd2c:	20 1a       	sub	r10,1
8000bd2e:	f8 08 0b 09 	st.b	r12[r8],r9
8000bd32:	2f f8       	sub	r8,-1
8000bd34:	c0 28       	rjmp	8000bd38 <memmove+0x38>
8000bd36:	30 08       	mov	r8,0
8000bd38:	58 0a       	cp.w	r10,0
8000bd3a:	cf 71       	brne	8000bd28 <memmove+0x28>
8000bd3c:	d8 02       	popm	pc

8000bd3e <memset>:
8000bd3e:	18 98       	mov	r8,r12
8000bd40:	c0 38       	rjmp	8000bd46 <memset+0x8>
8000bd42:	10 cb       	st.b	r8++,r11
8000bd44:	20 1a       	sub	r10,1
8000bd46:	58 0a       	cp.w	r10,0
8000bd48:	cf d1       	brne	8000bd42 <memset+0x4>
8000bd4a:	5e fc       	retal	r12

8000bd4c <__malloc_lock>:
8000bd4c:	5e fc       	retal	r12

8000bd4e <__malloc_unlock>:
8000bd4e:	5e fc       	retal	r12

8000bd50 <_putc_r>:
8000bd50:	d4 21       	pushm	r4-r7,lr
8000bd52:	20 2d       	sub	sp,8
8000bd54:	18 97       	mov	r7,r12
8000bd56:	58 0c       	cp.w	r12,0
8000bd58:	c0 a0       	breq	8000bd6c <_putc_r+0x1c>
8000bd5a:	78 68       	ld.w	r8,r12[0x18]
8000bd5c:	58 08       	cp.w	r8,0
8000bd5e:	c0 71       	brne	8000bd6c <_putc_r+0x1c>
8000bd60:	50 1b       	stdsp	sp[0x4],r11
8000bd62:	50 0a       	stdsp	sp[0x0],r10
8000bd64:	f0 1f 00 19 	mcall	8000bdc8 <_putc_r+0x78>
8000bd68:	40 0a       	lddsp	r10,sp[0x0]
8000bd6a:	40 1b       	lddsp	r11,sp[0x4]
8000bd6c:	49 88       	lddpc	r8,8000bdcc <_putc_r+0x7c>
8000bd6e:	10 3a       	cp.w	r10,r8
8000bd70:	c0 31       	brne	8000bd76 <_putc_r+0x26>
8000bd72:	6e 0a       	ld.w	r10,r7[0x0]
8000bd74:	c0 a8       	rjmp	8000bd88 <_putc_r+0x38>
8000bd76:	49 78       	lddpc	r8,8000bdd0 <_putc_r+0x80>
8000bd78:	10 3a       	cp.w	r10,r8
8000bd7a:	c0 31       	brne	8000bd80 <_putc_r+0x30>
8000bd7c:	6e 1a       	ld.w	r10,r7[0x4]
8000bd7e:	c0 58       	rjmp	8000bd88 <_putc_r+0x38>
8000bd80:	49 58       	lddpc	r8,8000bdd4 <_putc_r+0x84>
8000bd82:	10 3a       	cp.w	r10,r8
8000bd84:	ef fa 00 02 	ld.weq	r10,r7[0x8]
8000bd88:	74 28       	ld.w	r8,r10[0x8]
8000bd8a:	20 18       	sub	r8,1
8000bd8c:	95 28       	st.w	r10[0x8],r8
8000bd8e:	c1 57       	brpl	8000bdb8 <_putc_r+0x68>
8000bd90:	74 69       	ld.w	r9,r10[0x18]
8000bd92:	12 38       	cp.w	r8,r9
8000bd94:	c0 e5       	brlt	8000bdb0 <_putc_r+0x60>
8000bd96:	74 08       	ld.w	r8,r10[0x0]
8000bd98:	b0 8b       	st.b	r8[0x0],r11
8000bd9a:	30 a9       	mov	r9,10
8000bd9c:	74 08       	ld.w	r8,r10[0x0]
8000bd9e:	11 8c       	ld.ub	r12,r8[0x0]
8000bda0:	f2 0c 18 00 	cp.b	r12,r9
8000bda4:	c0 30       	breq	8000bdaa <_putc_r+0x5a>
8000bda6:	2f f8       	sub	r8,-1
8000bda8:	c0 c8       	rjmp	8000bdc0 <_putc_r+0x70>
8000bdaa:	0e 9c       	mov	r12,r7
8000bdac:	30 ab       	mov	r11,10
8000bdae:	c0 28       	rjmp	8000bdb2 <_putc_r+0x62>
8000bdb0:	0e 9c       	mov	r12,r7
8000bdb2:	f0 1f 00 0a 	mcall	8000bdd8 <_putc_r+0x88>
8000bdb6:	c0 68       	rjmp	8000bdc2 <_putc_r+0x72>
8000bdb8:	74 08       	ld.w	r8,r10[0x0]
8000bdba:	b0 8b       	st.b	r8[0x0],r11
8000bdbc:	74 08       	ld.w	r8,r10[0x0]
8000bdbe:	11 3c       	ld.ub	r12,r8++
8000bdc0:	95 08       	st.w	r10[0x0],r8
8000bdc2:	2f ed       	sub	sp,-8
8000bdc4:	d8 22       	popm	r4-r7,pc
8000bdc6:	00 00       	add	r0,r0
8000bdc8:	80 00       	ld.sh	r0,r0[0x0]
8000bdca:	f9 c4       	*unknown*
8000bdcc:	80 01       	ld.sh	r1,r0[0x0]
8000bdce:	1f 24       	ld.uh	r4,pc++
8000bdd0:	80 01       	ld.sh	r1,r0[0x0]
8000bdd2:	1f 44       	ld.w	r4,--pc
8000bdd4:	80 01       	ld.sh	r1,r0[0x0]
8000bdd6:	1f 64       	ld.uh	r4,--pc
8000bdd8:	80 00       	ld.sh	r0,r0[0x0]
8000bdda:	e7 10 d4 01 	ld.uh	r0,r3[-11263]

8000bddc <realloc>:
8000bddc:	d4 01       	pushm	lr
8000bdde:	48 48       	lddpc	r8,8000bdec <realloc+0x10>
8000bde0:	16 9a       	mov	r10,r11
8000bde2:	18 9b       	mov	r11,r12
8000bde4:	70 0c       	ld.w	r12,r8[0x0]
8000bde6:	f0 1f 00 03 	mcall	8000bdf0 <realloc+0x14>
8000bdea:	d8 02       	popm	pc
8000bdec:	00 00       	add	r0,r0
8000bdee:	01 dc       	ld.ub	r12,r0[0x5]
8000bdf0:	80 00       	ld.sh	r0,r0[0x0]
8000bdf2:	bd f4       	*unknown*

8000bdf4 <_realloc_r>:
8000bdf4:	d4 31       	pushm	r0-r7,lr
8000bdf6:	20 1d       	sub	sp,4
8000bdf8:	16 94       	mov	r4,r11
8000bdfa:	18 92       	mov	r2,r12
8000bdfc:	14 9b       	mov	r11,r10
8000bdfe:	58 04       	cp.w	r4,0
8000be00:	c0 51       	brne	8000be0a <_realloc_r+0x16>
8000be02:	f0 1f 00 5b 	mcall	8000bf6c <_realloc_r+0x178>
8000be06:	18 95       	mov	r5,r12
8000be08:	c5 b9       	rjmp	8000c0be <_realloc_r+0x2ca>
8000be0a:	50 0a       	stdsp	sp[0x0],r10
8000be0c:	f0 1f 00 59 	mcall	8000bf70 <_realloc_r+0x17c>
8000be10:	40 0b       	lddsp	r11,sp[0x0]
8000be12:	f6 c8 ff f5 	sub	r8,r11,-11
8000be16:	e8 c1 00 08 	sub	r1,r4,8
8000be1a:	10 96       	mov	r6,r8
8000be1c:	62 1c       	ld.w	r12,r1[0x4]
8000be1e:	e0 16 ff f8 	andl	r6,0xfff8
8000be22:	59 68       	cp.w	r8,22
8000be24:	f9 b6 08 10 	movls	r6,16
8000be28:	16 36       	cp.w	r6,r11
8000be2a:	5f 38       	srlo	r8
8000be2c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000be30:	c0 50       	breq	8000be3a <_realloc_r+0x46>
8000be32:	30 c8       	mov	r8,12
8000be34:	30 05       	mov	r5,0
8000be36:	85 38       	st.w	r2[0xc],r8
8000be38:	c4 39       	rjmp	8000c0be <_realloc_r+0x2ca>
8000be3a:	18 90       	mov	r0,r12
8000be3c:	e0 10 ff fc 	andl	r0,0xfffc
8000be40:	0c 30       	cp.w	r0,r6
8000be42:	e0 84 01 13 	brge	8000c068 <_realloc_r+0x274>
8000be46:	4c c8       	lddpc	r8,8000bf74 <_realloc_r+0x180>
8000be48:	e2 00 00 09 	add	r9,r1,r0
8000be4c:	70 25       	ld.w	r5,r8[0x8]
8000be4e:	0a 39       	cp.w	r9,r5
8000be50:	c0 90       	breq	8000be62 <_realloc_r+0x6e>
8000be52:	72 1a       	ld.w	r10,r9[0x4]
8000be54:	a1 ca       	cbr	r10,0x0
8000be56:	f2 0a 00 0a 	add	r10,r9,r10
8000be5a:	74 1a       	ld.w	r10,r10[0x4]
8000be5c:	ed ba 00 00 	bld	r10,0x0
8000be60:	c2 20       	breq	8000bea4 <_realloc_r+0xb0>
8000be62:	72 1a       	ld.w	r10,r9[0x4]
8000be64:	e0 1a ff fc 	andl	r10,0xfffc
8000be68:	f4 00 00 03 	add	r3,r10,r0
8000be6c:	0a 39       	cp.w	r9,r5
8000be6e:	c1 31       	brne	8000be94 <_realloc_r+0xa0>
8000be70:	ec c7 ff f0 	sub	r7,r6,-16
8000be74:	0e 33       	cp.w	r3,r7
8000be76:	c1 95       	brlt	8000bea8 <_realloc_r+0xb4>
8000be78:	e2 06 00 09 	add	r9,r1,r6
8000be7c:	0c 13       	sub	r3,r6
8000be7e:	a1 a3       	sbr	r3,0x0
8000be80:	93 13       	st.w	r9[0x4],r3
8000be82:	91 29       	st.w	r8[0x8],r9
8000be84:	04 9c       	mov	r12,r2
8000be86:	62 18       	ld.w	r8,r1[0x4]
8000be88:	08 95       	mov	r5,r4
8000be8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000be8e:	10 46       	or	r6,r8
8000be90:	83 16       	st.w	r1[0x4],r6
8000be92:	c1 49       	rjmp	8000c0ba <_realloc_r+0x2c6>
8000be94:	0c 33       	cp.w	r3,r6
8000be96:	c0 95       	brlt	8000bea8 <_realloc_r+0xb4>
8000be98:	72 28       	ld.w	r8,r9[0x8]
8000be9a:	02 97       	mov	r7,r1
8000be9c:	72 39       	ld.w	r9,r9[0xc]
8000be9e:	93 28       	st.w	r9[0x8],r8
8000bea0:	91 39       	st.w	r8[0xc],r9
8000bea2:	ce 58       	rjmp	8000c06c <_realloc_r+0x278>
8000bea4:	30 0a       	mov	r10,0
8000bea6:	14 99       	mov	r9,r10
8000bea8:	ed bc 00 00 	bld	r12,0x0
8000beac:	e0 80 00 9e 	breq	8000bfe8 <_realloc_r+0x1f4>
8000beb0:	62 07       	ld.w	r7,r1[0x0]
8000beb2:	e2 07 01 07 	sub	r7,r1,r7
8000beb6:	6e 1c       	ld.w	r12,r7[0x4]
8000beb8:	e0 1c ff fc 	andl	r12,0xfffc
8000bebc:	58 09       	cp.w	r9,0
8000bebe:	c5 f0       	breq	8000bf7c <_realloc_r+0x188>
8000bec0:	f8 00 00 03 	add	r3,r12,r0
8000bec4:	0a 39       	cp.w	r9,r5
8000bec6:	c4 81       	brne	8000bf56 <_realloc_r+0x162>
8000bec8:	14 03       	add	r3,r10
8000beca:	ec c9 ff f0 	sub	r9,r6,-16
8000bece:	12 33       	cp.w	r3,r9
8000bed0:	c5 65       	brlt	8000bf7c <_realloc_r+0x188>
8000bed2:	6e 3a       	ld.w	r10,r7[0xc]
8000bed4:	6e 29       	ld.w	r9,r7[0x8]
8000bed6:	95 29       	st.w	r10[0x8],r9
8000bed8:	93 3a       	st.w	r9[0xc],r10
8000beda:	ee c5 ff f8 	sub	r5,r7,-8
8000bede:	e0 ca 00 04 	sub	r10,r0,4
8000bee2:	e0 4a 00 24 	cp.w	r10,36
8000bee6:	e0 8b 00 25 	brhi	8000bf30 <_realloc_r+0x13c>
8000beea:	0a 99       	mov	r9,r5
8000beec:	59 3a       	cp.w	r10,19
8000beee:	e0 88 00 1a 	brls	8000bf22 <_realloc_r+0x12e>
8000bef2:	09 09       	ld.w	r9,r4++
8000bef4:	8b 09       	st.w	r5[0x0],r9
8000bef6:	09 09       	ld.w	r9,r4++
8000bef8:	8f 39       	st.w	r7[0xc],r9
8000befa:	ee c9 ff f0 	sub	r9,r7,-16
8000befe:	59 ba       	cp.w	r10,27
8000bf00:	e0 88 00 11 	brls	8000bf22 <_realloc_r+0x12e>
8000bf04:	09 0b       	ld.w	r11,r4++
8000bf06:	93 0b       	st.w	r9[0x0],r11
8000bf08:	09 09       	ld.w	r9,r4++
8000bf0a:	8f 59       	st.w	r7[0x14],r9
8000bf0c:	ee c9 ff e8 	sub	r9,r7,-24
8000bf10:	e0 4a 00 24 	cp.w	r10,36
8000bf14:	c0 71       	brne	8000bf22 <_realloc_r+0x12e>
8000bf16:	09 0a       	ld.w	r10,r4++
8000bf18:	93 0a       	st.w	r9[0x0],r10
8000bf1a:	ee c9 ff e0 	sub	r9,r7,-32
8000bf1e:	09 0a       	ld.w	r10,r4++
8000bf20:	8f 7a       	st.w	r7[0x1c],r10
8000bf22:	09 0a       	ld.w	r10,r4++
8000bf24:	12 aa       	st.w	r9++,r10
8000bf26:	68 0a       	ld.w	r10,r4[0x0]
8000bf28:	93 0a       	st.w	r9[0x0],r10
8000bf2a:	68 1a       	ld.w	r10,r4[0x4]
8000bf2c:	93 1a       	st.w	r9[0x4],r10
8000bf2e:	c0 78       	rjmp	8000bf3c <_realloc_r+0x148>
8000bf30:	50 08       	stdsp	sp[0x0],r8
8000bf32:	08 9b       	mov	r11,r4
8000bf34:	0a 9c       	mov	r12,r5
8000bf36:	f0 1f 00 11 	mcall	8000bf78 <_realloc_r+0x184>
8000bf3a:	40 08       	lddsp	r8,sp[0x0]
8000bf3c:	ee 06 00 09 	add	r9,r7,r6
8000bf40:	0c 13       	sub	r3,r6
8000bf42:	a1 a3       	sbr	r3,0x0
8000bf44:	93 13       	st.w	r9[0x4],r3
8000bf46:	91 29       	st.w	r8[0x8],r9
8000bf48:	04 9c       	mov	r12,r2
8000bf4a:	6e 18       	ld.w	r8,r7[0x4]
8000bf4c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bf50:	10 46       	or	r6,r8
8000bf52:	8f 16       	st.w	r7[0x4],r6
8000bf54:	cb 38       	rjmp	8000c0ba <_realloc_r+0x2c6>
8000bf56:	14 03       	add	r3,r10
8000bf58:	0c 33       	cp.w	r3,r6
8000bf5a:	c1 15       	brlt	8000bf7c <_realloc_r+0x188>
8000bf5c:	72 28       	ld.w	r8,r9[0x8]
8000bf5e:	72 39       	ld.w	r9,r9[0xc]
8000bf60:	93 28       	st.w	r9[0x8],r8
8000bf62:	91 39       	st.w	r8[0xc],r9
8000bf64:	6e 28       	ld.w	r8,r7[0x8]
8000bf66:	6e 39       	ld.w	r9,r7[0xc]
8000bf68:	c1 08       	rjmp	8000bf88 <_realloc_r+0x194>
8000bf6a:	00 00       	add	r0,r0
8000bf6c:	80 00       	ld.sh	r0,r0[0x0]
8000bf6e:	b7 2c       	st.d	r11++,r12
8000bf70:	80 00       	ld.sh	r0,r0[0x0]
8000bf72:	bd 4c       	asr	r12,0x1c
8000bf74:	00 00       	add	r0,r0
8000bf76:	01 e0       	ld.ub	r0,r0[0x6]
8000bf78:	80 00       	ld.sh	r0,r0[0x0]
8000bf7a:	bd 00       	ld.d	r0,lr
8000bf7c:	f8 00 00 03 	add	r3,r12,r0
8000bf80:	0c 33       	cp.w	r3,r6
8000bf82:	c3 35       	brlt	8000bfe8 <_realloc_r+0x1f4>
8000bf84:	6e 39       	ld.w	r9,r7[0xc]
8000bf86:	6e 28       	ld.w	r8,r7[0x8]
8000bf88:	93 28       	st.w	r9[0x8],r8
8000bf8a:	91 39       	st.w	r8[0xc],r9
8000bf8c:	e0 ca 00 04 	sub	r10,r0,4
8000bf90:	ee cc ff f8 	sub	r12,r7,-8
8000bf94:	e0 4a 00 24 	cp.w	r10,36
8000bf98:	e0 8b 00 24 	brhi	8000bfe0 <_realloc_r+0x1ec>
8000bf9c:	59 3a       	cp.w	r10,19
8000bf9e:	e0 88 00 1a 	brls	8000bfd2 <_realloc_r+0x1de>
8000bfa2:	09 08       	ld.w	r8,r4++
8000bfa4:	99 08       	st.w	r12[0x0],r8
8000bfa6:	09 08       	ld.w	r8,r4++
8000bfa8:	8f 38       	st.w	r7[0xc],r8
8000bfaa:	ee cc ff f0 	sub	r12,r7,-16
8000bfae:	59 ba       	cp.w	r10,27
8000bfb0:	e0 88 00 11 	brls	8000bfd2 <_realloc_r+0x1de>
8000bfb4:	09 08       	ld.w	r8,r4++
8000bfb6:	99 08       	st.w	r12[0x0],r8
8000bfb8:	09 08       	ld.w	r8,r4++
8000bfba:	8f 58       	st.w	r7[0x14],r8
8000bfbc:	ee cc ff e8 	sub	r12,r7,-24
8000bfc0:	e0 4a 00 24 	cp.w	r10,36
8000bfc4:	c0 71       	brne	8000bfd2 <_realloc_r+0x1de>
8000bfc6:	09 08       	ld.w	r8,r4++
8000bfc8:	99 08       	st.w	r12[0x0],r8
8000bfca:	ee cc ff e0 	sub	r12,r7,-32
8000bfce:	09 08       	ld.w	r8,r4++
8000bfd0:	8f 78       	st.w	r7[0x1c],r8
8000bfd2:	09 08       	ld.w	r8,r4++
8000bfd4:	18 a8       	st.w	r12++,r8
8000bfd6:	68 08       	ld.w	r8,r4[0x0]
8000bfd8:	99 08       	st.w	r12[0x0],r8
8000bfda:	68 18       	ld.w	r8,r4[0x4]
8000bfdc:	99 18       	st.w	r12[0x4],r8
8000bfde:	c4 78       	rjmp	8000c06c <_realloc_r+0x278>
8000bfe0:	08 9b       	mov	r11,r4
8000bfe2:	f0 1f 00 39 	mcall	8000c0c4 <_realloc_r+0x2d0>
8000bfe6:	c4 38       	rjmp	8000c06c <_realloc_r+0x278>
8000bfe8:	04 9c       	mov	r12,r2
8000bfea:	f0 1f 00 38 	mcall	8000c0c8 <_realloc_r+0x2d4>
8000bfee:	18 95       	mov	r5,r12
8000bff0:	c3 a0       	breq	8000c064 <_realloc_r+0x270>
8000bff2:	62 18       	ld.w	r8,r1[0x4]
8000bff4:	f8 c9 00 08 	sub	r9,r12,8
8000bff8:	a1 c8       	cbr	r8,0x0
8000bffa:	e2 08 00 08 	add	r8,r1,r8
8000bffe:	10 39       	cp.w	r9,r8
8000c000:	c0 71       	brne	8000c00e <_realloc_r+0x21a>
8000c002:	72 13       	ld.w	r3,r9[0x4]
8000c004:	02 97       	mov	r7,r1
8000c006:	e0 13 ff fc 	andl	r3,0xfffc
8000c00a:	00 03       	add	r3,r0
8000c00c:	c3 08       	rjmp	8000c06c <_realloc_r+0x278>
8000c00e:	e0 ca 00 04 	sub	r10,r0,4
8000c012:	e0 4a 00 24 	cp.w	r10,36
8000c016:	e0 8b 00 20 	brhi	8000c056 <_realloc_r+0x262>
8000c01a:	08 99       	mov	r9,r4
8000c01c:	18 98       	mov	r8,r12
8000c01e:	59 3a       	cp.w	r10,19
8000c020:	e0 88 00 14 	brls	8000c048 <_realloc_r+0x254>
8000c024:	13 0b       	ld.w	r11,r9++
8000c026:	10 ab       	st.w	r8++,r11
8000c028:	13 0b       	ld.w	r11,r9++
8000c02a:	10 ab       	st.w	r8++,r11
8000c02c:	59 ba       	cp.w	r10,27
8000c02e:	e0 88 00 0d 	brls	8000c048 <_realloc_r+0x254>
8000c032:	13 0b       	ld.w	r11,r9++
8000c034:	10 ab       	st.w	r8++,r11
8000c036:	13 0b       	ld.w	r11,r9++
8000c038:	10 ab       	st.w	r8++,r11
8000c03a:	e0 4a 00 24 	cp.w	r10,36
8000c03e:	c0 51       	brne	8000c048 <_realloc_r+0x254>
8000c040:	13 0a       	ld.w	r10,r9++
8000c042:	10 aa       	st.w	r8++,r10
8000c044:	13 0a       	ld.w	r10,r9++
8000c046:	10 aa       	st.w	r8++,r10
8000c048:	13 0a       	ld.w	r10,r9++
8000c04a:	10 aa       	st.w	r8++,r10
8000c04c:	72 0a       	ld.w	r10,r9[0x0]
8000c04e:	91 0a       	st.w	r8[0x0],r10
8000c050:	72 19       	ld.w	r9,r9[0x4]
8000c052:	91 19       	st.w	r8[0x4],r9
8000c054:	c0 48       	rjmp	8000c05c <_realloc_r+0x268>
8000c056:	08 9b       	mov	r11,r4
8000c058:	f0 1f 00 1b 	mcall	8000c0c4 <_realloc_r+0x2d0>
8000c05c:	08 9b       	mov	r11,r4
8000c05e:	04 9c       	mov	r12,r2
8000c060:	f0 1f 00 1b 	mcall	8000c0cc <_realloc_r+0x2d8>
8000c064:	04 9c       	mov	r12,r2
8000c066:	c2 a8       	rjmp	8000c0ba <_realloc_r+0x2c6>
8000c068:	00 93       	mov	r3,r0
8000c06a:	02 97       	mov	r7,r1
8000c06c:	e6 06 01 09 	sub	r9,r3,r6
8000c070:	6e 18       	ld.w	r8,r7[0x4]
8000c072:	58 f9       	cp.w	r9,15
8000c074:	e0 88 00 16 	brls	8000c0a0 <_realloc_r+0x2ac>
8000c078:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c07c:	ed e8 10 08 	or	r8,r6,r8
8000c080:	8f 18       	st.w	r7[0x4],r8
8000c082:	12 98       	mov	r8,r9
8000c084:	a1 a8       	sbr	r8,0x0
8000c086:	ee 06 00 0b 	add	r11,r7,r6
8000c08a:	f6 09 00 09 	add	r9,r11,r9
8000c08e:	97 18       	st.w	r11[0x4],r8
8000c090:	72 18       	ld.w	r8,r9[0x4]
8000c092:	a1 a8       	sbr	r8,0x0
8000c094:	2f 8b       	sub	r11,-8
8000c096:	93 18       	st.w	r9[0x4],r8
8000c098:	04 9c       	mov	r12,r2
8000c09a:	f0 1f 00 0d 	mcall	8000c0cc <_realloc_r+0x2d8>
8000c09e:	c0 b8       	rjmp	8000c0b4 <_realloc_r+0x2c0>
8000c0a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c0a4:	e7 e8 10 08 	or	r8,r3,r8
8000c0a8:	8f 18       	st.w	r7[0x4],r8
8000c0aa:	ee 03 00 03 	add	r3,r7,r3
8000c0ae:	66 18       	ld.w	r8,r3[0x4]
8000c0b0:	a1 a8       	sbr	r8,0x0
8000c0b2:	87 18       	st.w	r3[0x4],r8
8000c0b4:	04 9c       	mov	r12,r2
8000c0b6:	ee c5 ff f8 	sub	r5,r7,-8
8000c0ba:	f0 1f 00 06 	mcall	8000c0d0 <_realloc_r+0x2dc>
8000c0be:	0a 9c       	mov	r12,r5
8000c0c0:	2f fd       	sub	sp,-4
8000c0c2:	d8 32       	popm	r0-r7,pc
8000c0c4:	80 00       	ld.sh	r0,r0[0x0]
8000c0c6:	bd 00       	ld.d	r0,lr
8000c0c8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ca:	b7 2c       	st.d	r11++,r12
8000c0cc:	80 00       	ld.sh	r0,r0[0x0]
8000c0ce:	fb 1c 80 00 	ld.uh	r12,sp[-32768]
8000c0d2:	bd 4e       	asr	lr,0x1c

8000c0d4 <_sbrk_r>:
8000c0d4:	d4 21       	pushm	r4-r7,lr
8000c0d6:	30 08       	mov	r8,0
8000c0d8:	18 97       	mov	r7,r12
8000c0da:	48 76       	lddpc	r6,8000c0f4 <_sbrk_r+0x20>
8000c0dc:	16 9c       	mov	r12,r11
8000c0de:	8d 08       	st.w	r6[0x0],r8
8000c0e0:	f0 1f 00 06 	mcall	8000c0f8 <_sbrk_r+0x24>
8000c0e4:	5b fc       	cp.w	r12,-1
8000c0e6:	c0 51       	brne	8000c0f0 <_sbrk_r+0x1c>
8000c0e8:	6c 08       	ld.w	r8,r6[0x0]
8000c0ea:	58 08       	cp.w	r8,0
8000c0ec:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c0f0:	d8 22       	popm	r4-r7,pc
8000c0f2:	00 00       	add	r0,r0
8000c0f4:	00 00       	add	r0,r0
8000c0f6:	13 88       	ld.ub	r8,r9[0x0]
8000c0f8:	80 00       	ld.sh	r0,r0[0x0]
8000c0fa:	c3 f0       	breq	8000c178 <_kill_r>

8000c0fc <_raise_r>:
8000c0fc:	d4 21       	pushm	r4-r7,lr
8000c0fe:	18 97       	mov	r7,r12
8000c100:	16 96       	mov	r6,r11
8000c102:	59 fb       	cp.w	r11,31
8000c104:	e0 88 00 05 	brls	8000c10e <_raise_r+0x12>
8000c108:	31 68       	mov	r8,22
8000c10a:	99 38       	st.w	r12[0xc],r8
8000c10c:	dc 2a       	popm	r4-r7,pc,r12=-1
8000c10e:	79 19       	ld.w	r9,r12[0x44]
8000c110:	58 09       	cp.w	r9,0
8000c112:	c0 60       	breq	8000c11e <_raise_r+0x22>
8000c114:	f2 0b 00 29 	add	r9,r9,r11<<0x2
8000c118:	72 08       	ld.w	r8,r9[0x0]
8000c11a:	58 08       	cp.w	r8,0
8000c11c:	c0 a1       	brne	8000c130 <_raise_r+0x34>
8000c11e:	0e 9c       	mov	r12,r7
8000c120:	f0 1f 00 0b 	mcall	8000c14c <_raise_r+0x50>
8000c124:	0c 9a       	mov	r10,r6
8000c126:	18 9b       	mov	r11,r12
8000c128:	0e 9c       	mov	r12,r7
8000c12a:	f0 1f 00 0a 	mcall	8000c150 <_raise_r+0x54>
8000c12e:	d8 22       	popm	r4-r7,pc
8000c130:	58 18       	cp.w	r8,1
8000c132:	c0 21       	brne	8000c136 <_raise_r+0x3a>
8000c134:	d8 2a       	popm	r4-r7,pc,r12=0
8000c136:	5b f8       	cp.w	r8,-1
8000c138:	c0 41       	brne	8000c140 <_raise_r+0x44>
8000c13a:	31 68       	mov	r8,22
8000c13c:	99 38       	st.w	r12[0xc],r8
8000c13e:	da 2a       	popm	r4-r7,pc,r12=1
8000c140:	30 07       	mov	r7,0
8000c142:	16 9c       	mov	r12,r11
8000c144:	93 07       	st.w	r9[0x0],r7
8000c146:	5d 18       	icall	r8
8000c148:	0e 9c       	mov	r12,r7
8000c14a:	d8 22       	popm	r4-r7,pc
8000c14c:	80 00       	ld.sh	r0,r0[0x0]
8000c14e:	c1 6c       	rcall	8000c17a <_kill_r+0x2>
8000c150:	80 00       	ld.sh	r0,r0[0x0]
8000c152:	c1 78       	rjmp	8000c180 <_kill_r+0x8>

8000c154 <raise>:
8000c154:	d4 01       	pushm	lr
8000c156:	48 48       	lddpc	r8,8000c164 <raise+0x10>
8000c158:	18 9b       	mov	r11,r12
8000c15a:	70 0c       	ld.w	r12,r8[0x0]
8000c15c:	f0 1f 00 03 	mcall	8000c168 <raise+0x14>
8000c160:	d8 02       	popm	pc
8000c162:	00 00       	add	r0,r0
8000c164:	00 00       	add	r0,r0
8000c166:	01 dc       	ld.ub	r12,r0[0x5]
8000c168:	80 00       	ld.sh	r0,r0[0x0]
8000c16a:	c0 fc       	rcall	8000c188 <_kill_r+0x10>

8000c16c <_getpid_r>:
8000c16c:	d4 01       	pushm	lr
8000c16e:	f0 1f 00 02 	mcall	8000c174 <_getpid_r+0x8>
8000c172:	d8 02       	popm	pc
8000c174:	80 00       	ld.sh	r0,r0[0x0]
8000c176:	c3 ee       	rcall	8000bdf2 <realloc+0x16>

8000c178 <_kill_r>:
8000c178:	d4 21       	pushm	r4-r7,lr
8000c17a:	16 98       	mov	r8,r11
8000c17c:	18 97       	mov	r7,r12
8000c17e:	10 9c       	mov	r12,r8
8000c180:	30 08       	mov	r8,0
8000c182:	48 76       	lddpc	r6,8000c19c <_kill_r+0x24>
8000c184:	14 9b       	mov	r11,r10
8000c186:	8d 08       	st.w	r6[0x0],r8
8000c188:	f0 1f 00 06 	mcall	8000c1a0 <_kill_r+0x28>
8000c18c:	5b fc       	cp.w	r12,-1
8000c18e:	c0 51       	brne	8000c198 <_kill_r+0x20>
8000c190:	6c 08       	ld.w	r8,r6[0x0]
8000c192:	58 08       	cp.w	r8,0
8000c194:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c198:	d8 22       	popm	r4-r7,pc
8000c19a:	00 00       	add	r0,r0
8000c19c:	00 00       	add	r0,r0
8000c19e:	13 88       	ld.ub	r8,r9[0x0]
8000c1a0:	80 00       	ld.sh	r0,r0[0x0]
8000c1a2:	c3 ec       	rcall	8000c21e <strcmp+0x3a>

8000c1a4 <sprintf>:
8000c1a4:	d4 01       	pushm	lr
8000c1a6:	21 7d       	sub	sp,92
8000c1a8:	e0 68 ff ff 	mov	r8,65535
8000c1ac:	ea 18 7f ff 	orh	r8,0x7fff
8000c1b0:	50 58       	stdsp	sp[0x14],r8
8000c1b2:	50 28       	stdsp	sp[0x8],r8
8000c1b4:	e0 68 02 08 	mov	r8,520
8000c1b8:	ba 68       	st.h	sp[0xc],r8
8000c1ba:	3f f8       	mov	r8,-1
8000c1bc:	ba 78       	st.h	sp[0xe],r8
8000c1be:	48 88       	lddpc	r8,8000c1dc <sprintf+0x38>
8000c1c0:	50 4c       	stdsp	sp[0x10],r12
8000c1c2:	16 9a       	mov	r10,r11
8000c1c4:	50 0c       	stdsp	sp[0x0],r12
8000c1c6:	fa c9 ff a0 	sub	r9,sp,-96
8000c1ca:	70 0c       	ld.w	r12,r8[0x0]
8000c1cc:	1a 9b       	mov	r11,sp
8000c1ce:	f0 1f 00 05 	mcall	8000c1e0 <sprintf+0x3c>
8000c1d2:	30 09       	mov	r9,0
8000c1d4:	40 08       	lddsp	r8,sp[0x0]
8000c1d6:	b0 89       	st.b	r8[0x0],r9
8000c1d8:	2e 9d       	sub	sp,-92
8000c1da:	d8 02       	popm	pc
8000c1dc:	00 00       	add	r0,r0
8000c1de:	01 dc       	ld.ub	r12,r0[0x5]
8000c1e0:	80 00       	ld.sh	r0,r0[0x0]
8000c1e2:	c7 74       	brge	8000c2d0 <strncmp+0x1c>

8000c1e4 <strcmp>:
8000c1e4:	f9 eb 10 0a 	or	r10,r12,r11
8000c1e8:	e2 1a 00 03 	andl	r10,0x3,COH
8000c1ec:	c3 41       	brne	8000c254 <strcmp+0x70>
8000c1ee:	78 0a       	ld.w	r10,r12[0x0]
8000c1f0:	76 09       	ld.w	r9,r11[0x0]
8000c1f2:	5c ea       	tnbz	r10
8000c1f4:	c1 70       	breq	8000c222 <strcmp+0x3e>
8000c1f6:	12 3a       	cp.w	r10,r9
8000c1f8:	c1 51       	brne	8000c222 <strcmp+0x3e>
8000c1fa:	78 1a       	ld.w	r10,r12[0x4]
8000c1fc:	76 19       	ld.w	r9,r11[0x4]
8000c1fe:	5c ea       	tnbz	r10
8000c200:	c1 10       	breq	8000c222 <strcmp+0x3e>
8000c202:	12 3a       	cp.w	r10,r9
8000c204:	c0 f1       	brne	8000c222 <strcmp+0x3e>
8000c206:	78 2a       	ld.w	r10,r12[0x8]
8000c208:	76 29       	ld.w	r9,r11[0x8]
8000c20a:	5c ea       	tnbz	r10
8000c20c:	c0 b0       	breq	8000c222 <strcmp+0x3e>
8000c20e:	12 3a       	cp.w	r10,r9
8000c210:	c0 91       	brne	8000c222 <strcmp+0x3e>
8000c212:	78 3a       	ld.w	r10,r12[0xc]
8000c214:	76 39       	ld.w	r9,r11[0xc]
8000c216:	5c ea       	tnbz	r10
8000c218:	c0 50       	breq	8000c222 <strcmp+0x3e>
8000c21a:	2f 0c       	sub	r12,-16
8000c21c:	2f 0b       	sub	r11,-16
8000c21e:	12 3a       	cp.w	r10,r9
8000c220:	ce 70       	breq	8000c1ee <strcmp+0xa>
8000c222:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000c226:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000c22a:	5e 0c       	reteq	r12
8000c22c:	16 1c       	sub	r12,r11
8000c22e:	5e 1c       	retne	r12
8000c230:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8000c234:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000c238:	5e 0c       	reteq	r12
8000c23a:	16 1c       	sub	r12,r11
8000c23c:	5e 1c       	retne	r12
8000c23e:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000c242:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000c246:	5e 0c       	reteq	r12
8000c248:	16 1c       	sub	r12,r11
8000c24a:	5e 1c       	retne	r12
8000c24c:	5c 5a       	castu.b	r10
8000c24e:	5c 59       	castu.b	r9
8000c250:	12 1a       	sub	r10,r9
8000c252:	5e fa       	retal	r10
8000c254:	17 8a       	ld.ub	r10,r11[0x0]
8000c256:	19 89       	ld.ub	r9,r12[0x0]
8000c258:	58 0a       	cp.w	r10,0
8000c25a:	5e 09       	reteq	r9
8000c25c:	14 19       	sub	r9,r10
8000c25e:	5e 19       	retne	r9
8000c260:	17 9a       	ld.ub	r10,r11[0x1]
8000c262:	19 99       	ld.ub	r9,r12[0x1]
8000c264:	58 0a       	cp.w	r10,0
8000c266:	5e 09       	reteq	r9
8000c268:	14 19       	sub	r9,r10
8000c26a:	5e 19       	retne	r9
8000c26c:	17 aa       	ld.ub	r10,r11[0x2]
8000c26e:	19 a9       	ld.ub	r9,r12[0x2]
8000c270:	58 0a       	cp.w	r10,0
8000c272:	5e 09       	reteq	r9
8000c274:	14 19       	sub	r9,r10
8000c276:	5e 19       	retne	r9
8000c278:	17 ba       	ld.ub	r10,r11[0x3]
8000c27a:	19 b9       	ld.ub	r9,r12[0x3]
8000c27c:	58 0a       	cp.w	r10,0
8000c27e:	5e 09       	reteq	r9
8000c280:	14 19       	sub	r9,r10
8000c282:	5e 19       	retne	r9
8000c284:	2f cb       	sub	r11,-4
8000c286:	2f cc       	sub	r12,-4
8000c288:	ce 6b       	rjmp	8000c254 <strcmp+0x70>
	...

8000c28c <strcpy>:
8000c28c:	30 08       	mov	r8,0
8000c28e:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000c292:	f8 08 0b 09 	st.b	r12[r8],r9
8000c296:	2f f8       	sub	r8,-1
8000c298:	58 09       	cp.w	r9,0
8000c29a:	cf a1       	brne	8000c28e <strcpy+0x2>
8000c29c:	5e fc       	retal	r12

8000c29e <strlen>:
8000c29e:	30 09       	mov	r9,0
8000c2a0:	18 98       	mov	r8,r12
8000c2a2:	c0 28       	rjmp	8000c2a6 <strlen+0x8>
8000c2a4:	2f f8       	sub	r8,-1
8000c2a6:	11 8a       	ld.ub	r10,r8[0x0]
8000c2a8:	f2 0a 18 00 	cp.b	r10,r9
8000c2ac:	cf c1       	brne	8000c2a4 <strlen+0x6>
8000c2ae:	f0 0c 01 0c 	sub	r12,r8,r12
8000c2b2:	5e fc       	retal	r12

8000c2b4 <strncmp>:
8000c2b4:	58 0a       	cp.w	r10,0
8000c2b6:	c0 81       	brne	8000c2c6 <strncmp+0x12>
8000c2b8:	5e fa       	retal	r10
8000c2ba:	58 0a       	cp.w	r10,0
8000c2bc:	c0 b0       	breq	8000c2d2 <strncmp+0x1e>
8000c2be:	58 08       	cp.w	r8,0
8000c2c0:	c0 90       	breq	8000c2d2 <strncmp+0x1e>
8000c2c2:	2f fc       	sub	r12,-1
8000c2c4:	2f fb       	sub	r11,-1
8000c2c6:	20 1a       	sub	r10,1
8000c2c8:	19 88       	ld.ub	r8,r12[0x0]
8000c2ca:	17 89       	ld.ub	r9,r11[0x0]
8000c2cc:	f0 09 18 00 	cp.b	r9,r8
8000c2d0:	cf 50       	breq	8000c2ba <strncmp+0x6>
8000c2d2:	19 8c       	ld.ub	r12,r12[0x0]
8000c2d4:	17 88       	ld.ub	r8,r11[0x0]
8000c2d6:	10 1c       	sub	r12,r8
8000c2d8:	5e fc       	retal	r12

8000c2da <strnlen>:
8000c2da:	18 98       	mov	r8,r12
8000c2dc:	30 09       	mov	r9,0
8000c2de:	c0 28       	rjmp	8000c2e2 <strnlen+0x8>
8000c2e0:	2f f8       	sub	r8,-1
8000c2e2:	58 0b       	cp.w	r11,0
8000c2e4:	c0 60       	breq	8000c2f0 <strnlen+0x16>
8000c2e6:	20 1b       	sub	r11,1
8000c2e8:	11 8a       	ld.ub	r10,r8[0x0]
8000c2ea:	f2 0a 18 00 	cp.b	r10,r9
8000c2ee:	cf 91       	brne	8000c2e0 <strnlen+0x6>
8000c2f0:	f0 0c 01 0c 	sub	r12,r8,r12
8000c2f4:	5e fc       	retal	r12

8000c2f6 <_init_startup>:
8000c2f6:	5e fd       	retal	0

8000c2f8 <_init_argv>:
8000c2f8:	30 e8       	mov	r8,14
8000c2fa:	d6 73       	breakpoint
8000c2fc:	3f fc       	mov	r12,-1
8000c2fe:	35 8b       	mov	r11,88
8000c300:	5e fc       	retal	r12

8000c302 <_exit>:
8000c302:	30 d8       	mov	r8,13
8000c304:	d6 73       	breakpoint
8000c306:	3f fc       	mov	r12,-1
8000c308:	35 8b       	mov	r11,88
8000c30a:	c0 08       	rjmp	8000c30a <_exit+0x8>

8000c30c <_close>:
8000c30c:	30 28       	mov	r8,2
8000c30e:	d6 73       	breakpoint
8000c310:	3f fc       	mov	r12,-1
8000c312:	35 8b       	mov	r11,88
8000c314:	58 0c       	cp.w	r12,0
8000c316:	5e 4c       	retge	r12
8000c318:	48 2a       	lddpc	r10,8000c320 <_close+0x14>
8000c31a:	95 0b       	st.w	r10[0x0],r11
8000c31c:	5e fc       	retal	r12
8000c31e:	00 00       	add	r0,r0
8000c320:	00 00       	add	r0,r0
8000c322:	13 88       	ld.ub	r8,r9[0x0]

8000c324 <_lseek>:
8000c324:	30 58       	mov	r8,5
8000c326:	d6 73       	breakpoint
8000c328:	3f fc       	mov	r12,-1
8000c32a:	35 8b       	mov	r11,88
8000c32c:	58 0c       	cp.w	r12,0
8000c32e:	5e 4c       	retge	r12
8000c330:	48 2a       	lddpc	r10,8000c338 <_lseek+0x14>
8000c332:	95 0b       	st.w	r10[0x0],r11
8000c334:	5e fc       	retal	r12
8000c336:	00 00       	add	r0,r0
8000c338:	00 00       	add	r0,r0
8000c33a:	13 88       	ld.ub	r8,r9[0x0]

8000c33c <_read>:
8000c33c:	30 38       	mov	r8,3
8000c33e:	d6 73       	breakpoint
8000c340:	3f fc       	mov	r12,-1
8000c342:	35 8b       	mov	r11,88
8000c344:	58 0c       	cp.w	r12,0
8000c346:	5e 4c       	retge	r12
8000c348:	48 2a       	lddpc	r10,8000c350 <_read+0x14>
8000c34a:	95 0b       	st.w	r10[0x0],r11
8000c34c:	5e fc       	retal	r12
8000c34e:	00 00       	add	r0,r0
8000c350:	00 00       	add	r0,r0
8000c352:	13 88       	ld.ub	r8,r9[0x0]

8000c354 <_write>:
8000c354:	30 48       	mov	r8,4
8000c356:	d6 73       	breakpoint
8000c358:	3f fc       	mov	r12,-1
8000c35a:	35 8b       	mov	r11,88
8000c35c:	58 0c       	cp.w	r12,0
8000c35e:	5e 4c       	retge	r12
8000c360:	48 2a       	lddpc	r10,8000c368 <_write+0x14>
8000c362:	95 0b       	st.w	r10[0x0],r11
8000c364:	5e fc       	retal	r12
8000c366:	00 00       	add	r0,r0
8000c368:	00 00       	add	r0,r0
8000c36a:	13 88       	ld.ub	r8,r9[0x0]

8000c36c <isatty>:
8000c36c:	30 b8       	mov	r8,11
8000c36e:	d6 73       	breakpoint
8000c370:	3f fc       	mov	r12,-1
8000c372:	35 8b       	mov	r11,88
8000c374:	58 0c       	cp.w	r12,0
8000c376:	5e 4c       	retge	r12
8000c378:	48 2a       	lddpc	r10,8000c380 <isatty+0x14>
8000c37a:	95 0b       	st.w	r10[0x0],r11
8000c37c:	5e fc       	retal	r12
8000c37e:	00 00       	add	r0,r0
8000c380:	00 00       	add	r0,r0
8000c382:	13 88       	ld.ub	r8,r9[0x0]

8000c384 <_fstat_host>:
8000c384:	30 98       	mov	r8,9
8000c386:	d6 73       	breakpoint
8000c388:	3f fc       	mov	r12,-1
8000c38a:	35 8b       	mov	r11,88
8000c38c:	58 0c       	cp.w	r12,0
8000c38e:	5e 4c       	retge	r12
8000c390:	48 2a       	lddpc	r10,8000c398 <_fstat_host+0x14>
8000c392:	95 0b       	st.w	r10[0x0],r11
8000c394:	5e fc       	retal	r12
8000c396:	00 00       	add	r0,r0
8000c398:	00 00       	add	r0,r0
8000c39a:	13 88       	ld.ub	r8,r9[0x0]

8000c39c <_fstat>:
8000c39c:	d4 21       	pushm	r4-r7,lr
8000c39e:	21 0d       	sub	sp,64
8000c3a0:	16 97       	mov	r7,r11
8000c3a2:	1a 9b       	mov	r11,sp
8000c3a4:	f0 1f 00 11 	mcall	8000c3e8 <_fstat+0x4c>
8000c3a8:	c0 34       	brge	8000c3ae <_fstat+0x12>
8000c3aa:	3f fc       	mov	r12,-1
8000c3ac:	c1 c8       	rjmp	8000c3e4 <_fstat+0x48>
8000c3ae:	40 08       	lddsp	r8,sp[0x0]
8000c3b0:	ae 08       	st.h	r7[0x0],r8
8000c3b2:	40 18       	lddsp	r8,sp[0x4]
8000c3b4:	ae 18       	st.h	r7[0x2],r8
8000c3b6:	40 28       	lddsp	r8,sp[0x8]
8000c3b8:	8f 18       	st.w	r7[0x4],r8
8000c3ba:	40 38       	lddsp	r8,sp[0xc]
8000c3bc:	ae 48       	st.h	r7[0x8],r8
8000c3be:	40 48       	lddsp	r8,sp[0x10]
8000c3c0:	ae 58       	st.h	r7[0xa],r8
8000c3c2:	40 58       	lddsp	r8,sp[0x14]
8000c3c4:	ae 68       	st.h	r7[0xc],r8
8000c3c6:	40 68       	lddsp	r8,sp[0x18]
8000c3c8:	ae 78       	st.h	r7[0xe],r8
8000c3ca:	40 88       	lddsp	r8,sp[0x20]
8000c3cc:	8f 48       	st.w	r7[0x10],r8
8000c3ce:	40 a8       	lddsp	r8,sp[0x28]
8000c3d0:	8f b8       	st.w	r7[0x2c],r8
8000c3d2:	40 c8       	lddsp	r8,sp[0x30]
8000c3d4:	8f c8       	st.w	r7[0x30],r8
8000c3d6:	40 d8       	lddsp	r8,sp[0x34]
8000c3d8:	8f 58       	st.w	r7[0x14],r8
8000c3da:	40 e8       	lddsp	r8,sp[0x38]
8000c3dc:	30 0c       	mov	r12,0
8000c3de:	8f 78       	st.w	r7[0x1c],r8
8000c3e0:	40 f8       	lddsp	r8,sp[0x3c]
8000c3e2:	8f 98       	st.w	r7[0x24],r8
8000c3e4:	2f 0d       	sub	sp,-64
8000c3e6:	d8 22       	popm	r4-r7,pc
8000c3e8:	80 00       	ld.sh	r0,r0[0x0]
8000c3ea:	c3 84       	brge	8000c45a <get_arg+0x2a>

8000c3ec <_kill>:
8000c3ec:	5e fe       	retal	-1

8000c3ee <_getpid>:
8000c3ee:	5e fe       	retal	-1

8000c3f0 <_sbrk>:
8000c3f0:	d4 01       	pushm	lr
8000c3f2:	48 c8       	lddpc	r8,8000c420 <_sbrk+0x30>
8000c3f4:	70 09       	ld.w	r9,r8[0x0]
8000c3f6:	58 09       	cp.w	r9,0
8000c3f8:	c0 31       	brne	8000c3fe <_sbrk+0xe>
8000c3fa:	48 b9       	lddpc	r9,8000c424 <_sbrk+0x34>
8000c3fc:	91 09       	st.w	r8[0x0],r9
8000c3fe:	48 99       	lddpc	r9,8000c420 <_sbrk+0x30>
8000c400:	48 aa       	lddpc	r10,8000c428 <_sbrk+0x38>
8000c402:	72 08       	ld.w	r8,r9[0x0]
8000c404:	f0 0c 00 0c 	add	r12,r8,r12
8000c408:	14 3c       	cp.w	r12,r10
8000c40a:	e0 8b 00 04 	brhi	8000c412 <_sbrk+0x22>
8000c40e:	93 0c       	st.w	r9[0x0],r12
8000c410:	c0 68       	rjmp	8000c41c <_sbrk+0x2c>
8000c412:	f0 1f 00 07 	mcall	8000c42c <_sbrk+0x3c>
8000c416:	30 c8       	mov	r8,12
8000c418:	99 08       	st.w	r12[0x0],r8
8000c41a:	3f f8       	mov	r8,-1
8000c41c:	10 9c       	mov	r12,r8
8000c41e:	d8 02       	popm	pc
8000c420:	00 00       	add	r0,r0
8000c422:	13 84       	ld.ub	r4,r9[0x0]
8000c424:	00 00       	add	r0,r0
8000c426:	13 90       	ld.ub	r0,r9[0x1]
8000c428:	00 00       	add	r0,r0
8000c42a:	f0 00       	*unknown*
8000c42c:	80 00       	ld.sh	r0,r0[0x0]
8000c42e:	b2 78       	st.h	r9[0xe],r8

8000c430 <get_arg>:
8000c430:	d4 31       	pushm	r0-r7,lr
8000c432:	20 8d       	sub	sp,32
8000c434:	fa c4 ff bc 	sub	r4,sp,-68
8000c438:	50 4b       	stdsp	sp[0x10],r11
8000c43a:	68 2e       	ld.w	lr,r4[0x8]
8000c43c:	50 58       	stdsp	sp[0x14],r8
8000c43e:	12 96       	mov	r6,r9
8000c440:	7c 0b       	ld.w	r11,lr[0x0]
8000c442:	70 05       	ld.w	r5,r8[0x0]
8000c444:	50 6e       	stdsp	sp[0x18],lr
8000c446:	58 0b       	cp.w	r11,0
8000c448:	f4 0b 17 00 	moveq	r11,r10
8000c44c:	68 03       	ld.w	r3,r4[0x0]
8000c44e:	68 11       	ld.w	r1,r4[0x4]
8000c450:	40 49       	lddsp	r9,sp[0x10]
8000c452:	30 08       	mov	r8,0
8000c454:	c2 e9       	rjmp	8000c6b0 <get_arg+0x280>
8000c456:	2f fb       	sub	r11,-1
8000c458:	32 5c       	mov	r12,37
8000c45a:	17 8a       	ld.ub	r10,r11[0x0]
8000c45c:	f8 0a 18 00 	cp.b	r10,r12
8000c460:	5f 1e       	srne	lr
8000c462:	f0 0a 18 00 	cp.b	r10,r8
8000c466:	5f 1c       	srne	r12
8000c468:	fd ec 00 0c 	and	r12,lr,r12
8000c46c:	f0 0c 18 00 	cp.b	r12,r8
8000c470:	cf 31       	brne	8000c456 <get_arg+0x26>
8000c472:	58 0a       	cp.w	r10,0
8000c474:	e0 80 01 2b 	breq	8000c6ca <get_arg+0x29a>
8000c478:	30 0c       	mov	r12,0
8000c47a:	3f fa       	mov	r10,-1
8000c47c:	18 90       	mov	r0,r12
8000c47e:	50 3a       	stdsp	sp[0xc],r10
8000c480:	18 94       	mov	r4,r12
8000c482:	18 92       	mov	r2,r12
8000c484:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000c488:	16 97       	mov	r7,r11
8000c48a:	50 7c       	stdsp	sp[0x1c],r12
8000c48c:	4c ec       	lddpc	r12,8000c5c4 <get_arg+0x194>
8000c48e:	0f 3a       	ld.ub	r10,r7++
8000c490:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000c494:	40 7c       	lddsp	r12,sp[0x1c]
8000c496:	1c 0c       	add	r12,lr
8000c498:	4c ce       	lddpc	lr,8000c5c8 <get_arg+0x198>
8000c49a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000c49e:	20 1e       	sub	lr,1
8000c4a0:	50 0e       	stdsp	sp[0x0],lr
8000c4a2:	4c be       	lddpc	lr,8000c5cc <get_arg+0x19c>
8000c4a4:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000c4a8:	50 7c       	stdsp	sp[0x1c],r12
8000c4aa:	40 0c       	lddsp	r12,sp[0x0]
8000c4ac:	58 7c       	cp.w	r12,7
8000c4ae:	e0 8b 00 fa 	brhi	8000c6a2 <get_arg+0x272>
8000c4b2:	4c 8e       	lddpc	lr,8000c5d0 <get_arg+0x1a0>
8000c4b4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000c4b8:	36 8b       	mov	r11,104
8000c4ba:	f6 0a 18 00 	cp.b	r10,r11
8000c4be:	e0 80 00 f2 	breq	8000c6a2 <get_arg+0x272>
8000c4c2:	37 1b       	mov	r11,113
8000c4c4:	f6 0a 18 00 	cp.b	r10,r11
8000c4c8:	c0 70       	breq	8000c4d6 <get_arg+0xa6>
8000c4ca:	34 cb       	mov	r11,76
8000c4cc:	f6 0a 18 00 	cp.b	r10,r11
8000c4d0:	c0 51       	brne	8000c4da <get_arg+0xaa>
8000c4d2:	a3 b4       	sbr	r4,0x3
8000c4d4:	ce 78       	rjmp	8000c6a2 <get_arg+0x272>
8000c4d6:	a5 b4       	sbr	r4,0x5
8000c4d8:	ce 58       	rjmp	8000c6a2 <get_arg+0x272>
8000c4da:	08 9a       	mov	r10,r4
8000c4dc:	0e 9b       	mov	r11,r7
8000c4de:	a5 aa       	sbr	r10,0x4
8000c4e0:	17 3c       	ld.ub	r12,r11++
8000c4e2:	a5 b4       	sbr	r4,0x5
8000c4e4:	36 ce       	mov	lr,108
8000c4e6:	fc 0c 18 00 	cp.b	r12,lr
8000c4ea:	e0 80 00 dd 	breq	8000c6a4 <get_arg+0x274>
8000c4ee:	14 94       	mov	r4,r10
8000c4f0:	cd 98       	rjmp	8000c6a2 <get_arg+0x272>
8000c4f2:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000c4f6:	36 7c       	mov	r12,103
8000c4f8:	f8 0a 18 00 	cp.b	r10,r12
8000c4fc:	e0 8b 00 27 	brhi	8000c54a <get_arg+0x11a>
8000c500:	36 5b       	mov	r11,101
8000c502:	f6 0a 18 00 	cp.b	r10,r11
8000c506:	c4 82       	brcc	8000c596 <get_arg+0x166>
8000c508:	34 fb       	mov	r11,79
8000c50a:	f6 0a 18 00 	cp.b	r10,r11
8000c50e:	c4 80       	breq	8000c59e <get_arg+0x16e>
8000c510:	e0 8b 00 0c 	brhi	8000c528 <get_arg+0xf8>
8000c514:	34 5b       	mov	r11,69
8000c516:	f6 0a 18 00 	cp.b	r10,r11
8000c51a:	c3 e0       	breq	8000c596 <get_arg+0x166>
8000c51c:	34 7b       	mov	r11,71
8000c51e:	f6 0a 18 00 	cp.b	r10,r11
8000c522:	c3 a0       	breq	8000c596 <get_arg+0x166>
8000c524:	34 4b       	mov	r11,68
8000c526:	c0 88       	rjmp	8000c536 <get_arg+0x106>
8000c528:	35 8b       	mov	r11,88
8000c52a:	f6 0a 18 00 	cp.b	r10,r11
8000c52e:	c2 c0       	breq	8000c586 <get_arg+0x156>
8000c530:	e0 8b 00 07 	brhi	8000c53e <get_arg+0x10e>
8000c534:	35 5b       	mov	r11,85
8000c536:	f6 0a 18 00 	cp.b	r10,r11
8000c53a:	c3 51       	brne	8000c5a4 <get_arg+0x174>
8000c53c:	c3 18       	rjmp	8000c59e <get_arg+0x16e>
8000c53e:	36 3b       	mov	r11,99
8000c540:	f6 0a 18 00 	cp.b	r10,r11
8000c544:	c2 f0       	breq	8000c5a2 <get_arg+0x172>
8000c546:	36 4b       	mov	r11,100
8000c548:	c0 e8       	rjmp	8000c564 <get_arg+0x134>
8000c54a:	37 0b       	mov	r11,112
8000c54c:	f6 0a 18 00 	cp.b	r10,r11
8000c550:	c2 50       	breq	8000c59a <get_arg+0x16a>
8000c552:	e0 8b 00 0d 	brhi	8000c56c <get_arg+0x13c>
8000c556:	36 eb       	mov	r11,110
8000c558:	f6 0a 18 00 	cp.b	r10,r11
8000c55c:	c1 f0       	breq	8000c59a <get_arg+0x16a>
8000c55e:	e0 8b 00 14 	brhi	8000c586 <get_arg+0x156>
8000c562:	36 9b       	mov	r11,105
8000c564:	f6 0a 18 00 	cp.b	r10,r11
8000c568:	c1 e1       	brne	8000c5a4 <get_arg+0x174>
8000c56a:	c0 e8       	rjmp	8000c586 <get_arg+0x156>
8000c56c:	37 5b       	mov	r11,117
8000c56e:	f6 0a 18 00 	cp.b	r10,r11
8000c572:	c0 a0       	breq	8000c586 <get_arg+0x156>
8000c574:	37 8b       	mov	r11,120
8000c576:	f6 0a 18 00 	cp.b	r10,r11
8000c57a:	c0 60       	breq	8000c586 <get_arg+0x156>
8000c57c:	37 3b       	mov	r11,115
8000c57e:	f6 0a 18 00 	cp.b	r10,r11
8000c582:	c1 11       	brne	8000c5a4 <get_arg+0x174>
8000c584:	c0 b8       	rjmp	8000c59a <get_arg+0x16a>
8000c586:	ed b4 00 04 	bld	r4,0x4
8000c58a:	c0 a0       	breq	8000c59e <get_arg+0x16e>
8000c58c:	ed b4 00 05 	bld	r4,0x5
8000c590:	c0 91       	brne	8000c5a2 <get_arg+0x172>
8000c592:	30 20       	mov	r0,2
8000c594:	c0 88       	rjmp	8000c5a4 <get_arg+0x174>
8000c596:	30 40       	mov	r0,4
8000c598:	c0 68       	rjmp	8000c5a4 <get_arg+0x174>
8000c59a:	30 30       	mov	r0,3
8000c59c:	c0 48       	rjmp	8000c5a4 <get_arg+0x174>
8000c59e:	30 10       	mov	r0,1
8000c5a0:	c0 28       	rjmp	8000c5a4 <get_arg+0x174>
8000c5a2:	30 00       	mov	r0,0
8000c5a4:	40 3b       	lddsp	r11,sp[0xc]
8000c5a6:	5b fb       	cp.w	r11,-1
8000c5a8:	c0 40       	breq	8000c5b0 <get_arg+0x180>
8000c5aa:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000c5ae:	c7 a8       	rjmp	8000c6a2 <get_arg+0x272>
8000c5b0:	58 60       	cp.w	r0,6
8000c5b2:	e0 8b 00 78 	brhi	8000c6a2 <get_arg+0x272>
8000c5b6:	6c 0a       	ld.w	r10,r6[0x0]
8000c5b8:	ea cc ff ff 	sub	r12,r5,-1
8000c5bc:	48 6e       	lddpc	lr,8000c5d4 <get_arg+0x1a4>
8000c5be:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000c5c2:	00 00       	add	r0,r0
8000c5c4:	80 01       	ld.sh	r1,r0[0x0]
8000c5c6:	1e 14       	sub	r4,pc
8000c5c8:	80 01       	ld.sh	r1,r0[0x0]
8000c5ca:	1d 54       	ld.sh	r4,--lr
8000c5cc:	80 01       	ld.sh	r1,r0[0x0]
8000c5ce:	1c e8       	st.h	--lr,r8
8000c5d0:	80 01       	ld.sh	r1,r0[0x0]
8000c5d2:	1b 48       	ld.w	r8,--sp
8000c5d4:	80 01       	ld.sh	r1,r0[0x0]
8000c5d6:	1b 68       	ld.uh	r8,--sp
8000c5d8:	f4 cb ff f8 	sub	r11,r10,-8
8000c5dc:	8d 0b       	st.w	r6[0x0],r11
8000c5de:	f4 ea 00 00 	ld.d	r10,r10[0]
8000c5e2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000c5e6:	c0 f8       	rjmp	8000c604 <get_arg+0x1d4>
8000c5e8:	f4 cb ff fc 	sub	r11,r10,-4
8000c5ec:	8d 0b       	st.w	r6[0x0],r11
8000c5ee:	74 0a       	ld.w	r10,r10[0x0]
8000c5f0:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000c5f4:	c0 88       	rjmp	8000c604 <get_arg+0x1d4>
8000c5f6:	f4 cb ff f8 	sub	r11,r10,-8
8000c5fa:	8d 0b       	st.w	r6[0x0],r11
8000c5fc:	f4 ea 00 00 	ld.d	r10,r10[0]
8000c600:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000c604:	0e 9b       	mov	r11,r7
8000c606:	18 95       	mov	r5,r12
8000c608:	c4 e8       	rjmp	8000c6a4 <get_arg+0x274>
8000c60a:	62 0a       	ld.w	r10,r1[0x0]
8000c60c:	5b fa       	cp.w	r10,-1
8000c60e:	c0 b1       	brne	8000c624 <get_arg+0x1f4>
8000c610:	50 19       	stdsp	sp[0x4],r9
8000c612:	50 28       	stdsp	sp[0x8],r8
8000c614:	e0 6a 00 80 	mov	r10,128
8000c618:	30 0b       	mov	r11,0
8000c61a:	02 9c       	mov	r12,r1
8000c61c:	f0 1f 00 4d 	mcall	8000c750 <get_arg+0x320>
8000c620:	40 28       	lddsp	r8,sp[0x8]
8000c622:	40 19       	lddsp	r9,sp[0x4]
8000c624:	e4 cc 00 01 	sub	r12,r2,1
8000c628:	0e 9b       	mov	r11,r7
8000c62a:	50 3c       	stdsp	sp[0xc],r12
8000c62c:	f2 0c 0c 49 	max	r9,r9,r12
8000c630:	c3 a8       	rjmp	8000c6a4 <get_arg+0x274>
8000c632:	62 0a       	ld.w	r10,r1[0x0]
8000c634:	5b fa       	cp.w	r10,-1
8000c636:	c0 b1       	brne	8000c64c <get_arg+0x21c>
8000c638:	50 19       	stdsp	sp[0x4],r9
8000c63a:	50 28       	stdsp	sp[0x8],r8
8000c63c:	e0 6a 00 80 	mov	r10,128
8000c640:	30 0b       	mov	r11,0
8000c642:	02 9c       	mov	r12,r1
8000c644:	f0 1f 00 43 	mcall	8000c750 <get_arg+0x320>
8000c648:	40 28       	lddsp	r8,sp[0x8]
8000c64a:	40 19       	lddsp	r9,sp[0x4]
8000c64c:	20 12       	sub	r2,1
8000c64e:	30 0a       	mov	r10,0
8000c650:	0e 9b       	mov	r11,r7
8000c652:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000c656:	f2 02 0c 49 	max	r9,r9,r2
8000c65a:	c2 58       	rjmp	8000c6a4 <get_arg+0x274>
8000c65c:	16 97       	mov	r7,r11
8000c65e:	6c 0a       	ld.w	r10,r6[0x0]
8000c660:	f4 cb ff fc 	sub	r11,r10,-4
8000c664:	8d 0b       	st.w	r6[0x0],r11
8000c666:	74 0a       	ld.w	r10,r10[0x0]
8000c668:	0e 9b       	mov	r11,r7
8000c66a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000c66e:	2f f5       	sub	r5,-1
8000c670:	c1 a8       	rjmp	8000c6a4 <get_arg+0x274>
8000c672:	f4 c2 00 30 	sub	r2,r10,48
8000c676:	c0 68       	rjmp	8000c682 <get_arg+0x252>
8000c678:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000c67c:	2f f7       	sub	r7,-1
8000c67e:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000c682:	0f 8a       	ld.ub	r10,r7[0x0]
8000c684:	58 0a       	cp.w	r10,0
8000c686:	c0 e0       	breq	8000c6a2 <get_arg+0x272>
8000c688:	23 0a       	sub	r10,48
8000c68a:	58 9a       	cp.w	r10,9
8000c68c:	fe 98 ff f6 	brls	8000c678 <get_arg+0x248>
8000c690:	c0 98       	rjmp	8000c6a2 <get_arg+0x272>
8000c692:	2f f7       	sub	r7,-1
8000c694:	0f 8a       	ld.ub	r10,r7[0x0]
8000c696:	58 0a       	cp.w	r10,0
8000c698:	c0 50       	breq	8000c6a2 <get_arg+0x272>
8000c69a:	23 0a       	sub	r10,48
8000c69c:	58 9a       	cp.w	r10,9
8000c69e:	fe 98 ff fa 	brls	8000c692 <get_arg+0x262>
8000c6a2:	0e 9b       	mov	r11,r7
8000c6a4:	40 7c       	lddsp	r12,sp[0x1c]
8000c6a6:	30 ba       	mov	r10,11
8000c6a8:	f4 0c 18 00 	cp.b	r12,r10
8000c6ac:	fe 91 fe ec 	brne	8000c484 <get_arg+0x54>
8000c6b0:	40 42       	lddsp	r2,sp[0x10]
8000c6b2:	17 8c       	ld.ub	r12,r11[0x0]
8000c6b4:	0a 32       	cp.w	r2,r5
8000c6b6:	5f 4a       	srge	r10
8000c6b8:	f0 0c 18 00 	cp.b	r12,r8
8000c6bc:	5f 1c       	srne	r12
8000c6be:	f9 ea 00 0a 	and	r10,r12,r10
8000c6c2:	f0 0a 18 00 	cp.b	r10,r8
8000c6c6:	fe 91 fe c9 	brne	8000c458 <get_arg+0x28>
8000c6ca:	30 08       	mov	r8,0
8000c6cc:	40 4e       	lddsp	lr,sp[0x10]
8000c6ce:	17 8a       	ld.ub	r10,r11[0x0]
8000c6d0:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000c6d4:	f0 0a 18 00 	cp.b	r10,r8
8000c6d8:	fc 09 17 10 	movne	r9,lr
8000c6dc:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000c6e0:	06 9e       	mov	lr,r3
8000c6e2:	c2 a8       	rjmp	8000c736 <get_arg+0x306>
8000c6e4:	62 0a       	ld.w	r10,r1[0x0]
8000c6e6:	58 3a       	cp.w	r10,3
8000c6e8:	c1 e0       	breq	8000c724 <get_arg+0x2f4>
8000c6ea:	e0 89 00 07 	brgt	8000c6f8 <get_arg+0x2c8>
8000c6ee:	58 1a       	cp.w	r10,1
8000c6f0:	c1 a0       	breq	8000c724 <get_arg+0x2f4>
8000c6f2:	58 2a       	cp.w	r10,2
8000c6f4:	c1 81       	brne	8000c724 <get_arg+0x2f4>
8000c6f6:	c0 58       	rjmp	8000c700 <get_arg+0x2d0>
8000c6f8:	58 5a       	cp.w	r10,5
8000c6fa:	c0 c0       	breq	8000c712 <get_arg+0x2e2>
8000c6fc:	c0 b5       	brlt	8000c712 <get_arg+0x2e2>
8000c6fe:	c1 38       	rjmp	8000c724 <get_arg+0x2f4>
8000c700:	6c 0a       	ld.w	r10,r6[0x0]
8000c702:	f4 cc ff f8 	sub	r12,r10,-8
8000c706:	8d 0c       	st.w	r6[0x0],r12
8000c708:	f4 e2 00 00 	ld.d	r2,r10[0]
8000c70c:	f0 e3 00 00 	st.d	r8[0],r2
8000c710:	c1 08       	rjmp	8000c730 <get_arg+0x300>
8000c712:	6c 0a       	ld.w	r10,r6[0x0]
8000c714:	f4 cc ff f8 	sub	r12,r10,-8
8000c718:	8d 0c       	st.w	r6[0x0],r12
8000c71a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000c71e:	f0 e3 00 00 	st.d	r8[0],r2
8000c722:	c0 78       	rjmp	8000c730 <get_arg+0x300>
8000c724:	6c 0a       	ld.w	r10,r6[0x0]
8000c726:	f4 cc ff fc 	sub	r12,r10,-4
8000c72a:	8d 0c       	st.w	r6[0x0],r12
8000c72c:	74 0a       	ld.w	r10,r10[0x0]
8000c72e:	91 0a       	st.w	r8[0x0],r10
8000c730:	2f f5       	sub	r5,-1
8000c732:	2f 88       	sub	r8,-8
8000c734:	2f c1       	sub	r1,-4
8000c736:	12 35       	cp.w	r5,r9
8000c738:	fe 9a ff d6 	brle	8000c6e4 <get_arg+0x2b4>
8000c73c:	1c 93       	mov	r3,lr
8000c73e:	40 52       	lddsp	r2,sp[0x14]
8000c740:	40 6e       	lddsp	lr,sp[0x18]
8000c742:	85 05       	st.w	r2[0x0],r5
8000c744:	9d 0b       	st.w	lr[0x0],r11
8000c746:	40 4b       	lddsp	r11,sp[0x10]
8000c748:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000c74c:	2f 8d       	sub	sp,-32
8000c74e:	d8 32       	popm	r0-r7,pc
8000c750:	80 00       	ld.sh	r0,r0[0x0]
8000c752:	bd 3e       	mul	lr,lr

8000c754 <__sprint_r>:
8000c754:	d4 21       	pushm	r4-r7,lr
8000c756:	14 97       	mov	r7,r10
8000c758:	74 28       	ld.w	r8,r10[0x8]
8000c75a:	58 08       	cp.w	r8,0
8000c75c:	c0 41       	brne	8000c764 <__sprint_r+0x10>
8000c75e:	95 18       	st.w	r10[0x4],r8
8000c760:	10 9c       	mov	r12,r8
8000c762:	d8 22       	popm	r4-r7,pc
8000c764:	f0 1f 00 03 	mcall	8000c770 <__sprint_r+0x1c>
8000c768:	30 08       	mov	r8,0
8000c76a:	8f 18       	st.w	r7[0x4],r8
8000c76c:	8f 28       	st.w	r7[0x8],r8
8000c76e:	d8 22       	popm	r4-r7,pc
8000c770:	80 00       	ld.sh	r0,r0[0x0]
8000c772:	b3 a4       	sbr	r4,0x12

8000c774 <_vfprintf_r>:
8000c774:	d4 31       	pushm	r0-r7,lr
8000c776:	fa cd 06 bc 	sub	sp,sp,1724
8000c77a:	51 09       	stdsp	sp[0x40],r9
8000c77c:	16 91       	mov	r1,r11
8000c77e:	14 97       	mov	r7,r10
8000c780:	18 95       	mov	r5,r12
8000c782:	f0 1f 00 56 	mcall	8000c8d8 <_vfprintf_r+0x164>
8000c786:	78 0c       	ld.w	r12,r12[0x0]
8000c788:	50 cc       	stdsp	sp[0x30],r12
8000c78a:	58 05       	cp.w	r5,0
8000c78c:	c0 70       	breq	8000c79a <_vfprintf_r+0x26>
8000c78e:	6a 68       	ld.w	r8,r5[0x18]
8000c790:	58 08       	cp.w	r8,0
8000c792:	c0 41       	brne	8000c79a <_vfprintf_r+0x26>
8000c794:	0a 9c       	mov	r12,r5
8000c796:	f0 1f 00 52 	mcall	8000c8dc <_vfprintf_r+0x168>
8000c79a:	4d 28       	lddpc	r8,8000c8e0 <_vfprintf_r+0x16c>
8000c79c:	10 31       	cp.w	r1,r8
8000c79e:	c0 31       	brne	8000c7a4 <_vfprintf_r+0x30>
8000c7a0:	6a 01       	ld.w	r1,r5[0x0]
8000c7a2:	c0 a8       	rjmp	8000c7b6 <_vfprintf_r+0x42>
8000c7a4:	4d 08       	lddpc	r8,8000c8e4 <_vfprintf_r+0x170>
8000c7a6:	10 31       	cp.w	r1,r8
8000c7a8:	c0 31       	brne	8000c7ae <_vfprintf_r+0x3a>
8000c7aa:	6a 11       	ld.w	r1,r5[0x4]
8000c7ac:	c0 58       	rjmp	8000c7b6 <_vfprintf_r+0x42>
8000c7ae:	4c f8       	lddpc	r8,8000c8e8 <_vfprintf_r+0x174>
8000c7b0:	10 31       	cp.w	r1,r8
8000c7b2:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000c7b6:	82 68       	ld.sh	r8,r1[0xc]
8000c7b8:	ed b8 00 03 	bld	r8,0x3
8000c7bc:	c0 41       	brne	8000c7c4 <_vfprintf_r+0x50>
8000c7be:	62 48       	ld.w	r8,r1[0x10]
8000c7c0:	58 08       	cp.w	r8,0
8000c7c2:	c0 71       	brne	8000c7d0 <_vfprintf_r+0x5c>
8000c7c4:	02 9b       	mov	r11,r1
8000c7c6:	0a 9c       	mov	r12,r5
8000c7c8:	f0 1f 00 49 	mcall	8000c8ec <_vfprintf_r+0x178>
8000c7cc:	e0 81 0f 99 	brne	8000e6fe <_vfprintf_r+0x1f8a>
8000c7d0:	82 68       	ld.sh	r8,r1[0xc]
8000c7d2:	10 99       	mov	r9,r8
8000c7d4:	e2 19 00 1a 	andl	r9,0x1a,COH
8000c7d8:	58 a9       	cp.w	r9,10
8000c7da:	c3 d1       	brne	8000c854 <_vfprintf_r+0xe0>
8000c7dc:	82 79       	ld.sh	r9,r1[0xe]
8000c7de:	30 0a       	mov	r10,0
8000c7e0:	f4 09 19 00 	cp.h	r9,r10
8000c7e4:	c3 85       	brlt	8000c854 <_vfprintf_r+0xe0>
8000c7e6:	a1 d8       	cbr	r8,0x1
8000c7e8:	fb 58 05 d0 	st.h	sp[1488],r8
8000c7ec:	62 88       	ld.w	r8,r1[0x20]
8000c7ee:	fb 48 05 e4 	st.w	sp[1508],r8
8000c7f2:	62 a8       	ld.w	r8,r1[0x28]
8000c7f4:	fb 48 05 ec 	st.w	sp[1516],r8
8000c7f8:	fa c8 ff bc 	sub	r8,sp,-68
8000c7fc:	fb 48 05 d4 	st.w	sp[1492],r8
8000c800:	fb 48 05 c4 	st.w	sp[1476],r8
8000c804:	e0 68 04 00 	mov	r8,1024
8000c808:	fb 48 05 d8 	st.w	sp[1496],r8
8000c80c:	fb 48 05 cc 	st.w	sp[1484],r8
8000c810:	30 08       	mov	r8,0
8000c812:	fb 59 05 d2 	st.h	sp[1490],r9
8000c816:	0e 9a       	mov	r10,r7
8000c818:	41 09       	lddsp	r9,sp[0x40]
8000c81a:	fa c7 fa 3c 	sub	r7,sp,-1476
8000c81e:	fb 48 05 dc 	st.w	sp[1500],r8
8000c822:	0a 9c       	mov	r12,r5
8000c824:	0e 9b       	mov	r11,r7
8000c826:	f0 1f 00 33 	mcall	8000c8f0 <_vfprintf_r+0x17c>
8000c82a:	50 bc       	stdsp	sp[0x2c],r12
8000c82c:	c0 95       	brlt	8000c83e <_vfprintf_r+0xca>
8000c82e:	0e 9b       	mov	r11,r7
8000c830:	0a 9c       	mov	r12,r5
8000c832:	f0 1f 00 31 	mcall	8000c8f4 <_vfprintf_r+0x180>
8000c836:	40 be       	lddsp	lr,sp[0x2c]
8000c838:	f9 be 01 ff 	movne	lr,-1
8000c83c:	50 be       	stdsp	sp[0x2c],lr
8000c83e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000c842:	ed b8 00 06 	bld	r8,0x6
8000c846:	e0 81 0f 5e 	brne	8000e702 <_vfprintf_r+0x1f8e>
8000c84a:	82 68       	ld.sh	r8,r1[0xc]
8000c84c:	a7 a8       	sbr	r8,0x6
8000c84e:	a2 68       	st.h	r1[0xc],r8
8000c850:	e0 8f 0f 59 	bral	8000e702 <_vfprintf_r+0x1f8e>
8000c854:	30 08       	mov	r8,0
8000c856:	fb 48 06 b4 	st.w	sp[1716],r8
8000c85a:	fb 48 06 90 	st.w	sp[1680],r8
8000c85e:	fb 48 06 8c 	st.w	sp[1676],r8
8000c862:	fb 48 06 b0 	st.w	sp[1712],r8
8000c866:	30 08       	mov	r8,0
8000c868:	30 09       	mov	r9,0
8000c86a:	50 a7       	stdsp	sp[0x28],r7
8000c86c:	50 78       	stdsp	sp[0x1c],r8
8000c86e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c872:	3f f8       	mov	r8,-1
8000c874:	50 59       	stdsp	sp[0x14],r9
8000c876:	fb 43 06 88 	st.w	sp[1672],r3
8000c87a:	fb 48 05 44 	st.w	sp[1348],r8
8000c87e:	12 9c       	mov	r12,r9
8000c880:	50 69       	stdsp	sp[0x18],r9
8000c882:	50 d9       	stdsp	sp[0x34],r9
8000c884:	50 e9       	stdsp	sp[0x38],r9
8000c886:	50 b9       	stdsp	sp[0x2c],r9
8000c888:	12 97       	mov	r7,r9
8000c88a:	0a 94       	mov	r4,r5
8000c88c:	40 a2       	lddsp	r2,sp[0x28]
8000c88e:	32 5a       	mov	r10,37
8000c890:	30 08       	mov	r8,0
8000c892:	c0 28       	rjmp	8000c896 <_vfprintf_r+0x122>
8000c894:	2f f2       	sub	r2,-1
8000c896:	05 89       	ld.ub	r9,r2[0x0]
8000c898:	f0 09 18 00 	cp.b	r9,r8
8000c89c:	5f 1b       	srne	r11
8000c89e:	f4 09 18 00 	cp.b	r9,r10
8000c8a2:	5f 19       	srne	r9
8000c8a4:	f3 eb 00 0b 	and	r11,r9,r11
8000c8a8:	f0 0b 18 00 	cp.b	r11,r8
8000c8ac:	cf 41       	brne	8000c894 <_vfprintf_r+0x120>
8000c8ae:	40 ab       	lddsp	r11,sp[0x28]
8000c8b0:	e4 0b 01 06 	sub	r6,r2,r11
8000c8b4:	c2 f0       	breq	8000c912 <_vfprintf_r+0x19e>
8000c8b6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c8ba:	0c 08       	add	r8,r6
8000c8bc:	87 0b       	st.w	r3[0x0],r11
8000c8be:	fb 48 06 90 	st.w	sp[1680],r8
8000c8c2:	87 16       	st.w	r3[0x4],r6
8000c8c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c8c8:	2f f8       	sub	r8,-1
8000c8ca:	fb 48 06 8c 	st.w	sp[1676],r8
8000c8ce:	58 78       	cp.w	r8,7
8000c8d0:	e0 89 00 14 	brgt	8000c8f8 <_vfprintf_r+0x184>
8000c8d4:	2f 83       	sub	r3,-8
8000c8d6:	c1 b8       	rjmp	8000c90c <_vfprintf_r+0x198>
8000c8d8:	80 00       	ld.sh	r0,r0[0x0]
8000c8da:	fd 10 80 00 	ld.uh	r0,lr[-32768]
8000c8de:	f9 c4       	*unknown*
8000c8e0:	80 01       	ld.sh	r1,r0[0x0]
8000c8e2:	1f 24       	ld.uh	r4,pc++
8000c8e4:	80 01       	ld.sh	r1,r0[0x0]
8000c8e6:	1f 44       	ld.w	r4,--pc
8000c8e8:	80 01       	ld.sh	r1,r0[0x0]
8000c8ea:	1f 64       	ld.uh	r4,--pc
8000c8ec:	80 00       	ld.sh	r0,r0[0x0]
8000c8ee:	e7 cc 80 00 	ldmts	r12++,pc
8000c8f2:	c7 74       	brge	8000c9e0 <_vfprintf_r+0x26c>
8000c8f4:	80 00       	ld.sh	r0,r0[0x0]
8000c8f6:	f7 e8 fa ca 	sthh.w	r10[0x2b0],r11:t,r8:t
8000c8fa:	f9 78 02 9b 	stcond	r12[667],r8
8000c8fe:	08 9c       	mov	r12,r4
8000c900:	f0 1f 00 71 	mcall	8000cac4 <_vfprintf_r+0x350>
8000c904:	e0 81 0e f9 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000c908:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c90c:	40 ba       	lddsp	r10,sp[0x2c]
8000c90e:	0c 0a       	add	r10,r6
8000c910:	50 ba       	stdsp	sp[0x2c],r10
8000c912:	05 89       	ld.ub	r9,r2[0x0]
8000c914:	30 08       	mov	r8,0
8000c916:	f0 09 18 00 	cp.b	r9,r8
8000c91a:	e0 80 0e dd 	breq	8000e6d4 <_vfprintf_r+0x1f60>
8000c91e:	30 09       	mov	r9,0
8000c920:	fb 68 06 bb 	st.b	sp[1723],r8
8000c924:	0e 96       	mov	r6,r7
8000c926:	e4 c8 ff ff 	sub	r8,r2,-1
8000c92a:	3f fe       	mov	lr,-1
8000c92c:	50 93       	stdsp	sp[0x24],r3
8000c92e:	50 41       	stdsp	sp[0x10],r1
8000c930:	0e 93       	mov	r3,r7
8000c932:	04 91       	mov	r1,r2
8000c934:	50 89       	stdsp	sp[0x20],r9
8000c936:	50 a8       	stdsp	sp[0x28],r8
8000c938:	50 2e       	stdsp	sp[0x8],lr
8000c93a:	50 39       	stdsp	sp[0xc],r9
8000c93c:	12 95       	mov	r5,r9
8000c93e:	12 90       	mov	r0,r9
8000c940:	10 97       	mov	r7,r8
8000c942:	08 92       	mov	r2,r4
8000c944:	c0 78       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000c946:	3f fc       	mov	r12,-1
8000c948:	08 97       	mov	r7,r4
8000c94a:	50 2c       	stdsp	sp[0x8],r12
8000c94c:	c0 38       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000c94e:	30 0b       	mov	r11,0
8000c950:	50 3b       	stdsp	sp[0xc],r11
8000c952:	0f 38       	ld.ub	r8,r7++
8000c954:	c0 28       	rjmp	8000c958 <_vfprintf_r+0x1e4>
8000c956:	12 90       	mov	r0,r9
8000c958:	f0 c9 00 20 	sub	r9,r8,32
8000c95c:	e0 49 00 58 	cp.w	r9,88
8000c960:	e0 8b 0a 4d 	brhi	8000ddfa <_vfprintf_r+0x1686>
8000c964:	4d 9a       	lddpc	r10,8000cac8 <_vfprintf_r+0x354>
8000c966:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000c96a:	50 a7       	stdsp	sp[0x28],r7
8000c96c:	50 80       	stdsp	sp[0x20],r0
8000c96e:	0c 97       	mov	r7,r6
8000c970:	04 94       	mov	r4,r2
8000c972:	06 96       	mov	r6,r3
8000c974:	02 92       	mov	r2,r1
8000c976:	4d 69       	lddpc	r9,8000cacc <_vfprintf_r+0x358>
8000c978:	40 93       	lddsp	r3,sp[0x24]
8000c97a:	10 90       	mov	r0,r8
8000c97c:	40 41       	lddsp	r1,sp[0x10]
8000c97e:	50 d9       	stdsp	sp[0x34],r9
8000c980:	e0 8f 08 aa 	bral	8000dad4 <_vfprintf_r+0x1360>
8000c984:	30 08       	mov	r8,0
8000c986:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000c98a:	f0 09 18 00 	cp.b	r9,r8
8000c98e:	ce 21       	brne	8000c952 <_vfprintf_r+0x1de>
8000c990:	32 08       	mov	r8,32
8000c992:	c6 e8       	rjmp	8000ca6e <_vfprintf_r+0x2fa>
8000c994:	a1 a5       	sbr	r5,0x0
8000c996:	cd eb       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000c998:	0f 89       	ld.ub	r9,r7[0x0]
8000c99a:	f2 c8 00 30 	sub	r8,r9,48
8000c99e:	58 98       	cp.w	r8,9
8000c9a0:	e0 8b 00 1d 	brhi	8000c9da <_vfprintf_r+0x266>
8000c9a4:	ee c8 ff ff 	sub	r8,r7,-1
8000c9a8:	30 0b       	mov	r11,0
8000c9aa:	23 09       	sub	r9,48
8000c9ac:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000c9b0:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000c9b4:	11 39       	ld.ub	r9,r8++
8000c9b6:	f2 ca 00 30 	sub	r10,r9,48
8000c9ba:	58 9a       	cp.w	r10,9
8000c9bc:	fe 98 ff f7 	brls	8000c9aa <_vfprintf_r+0x236>
8000c9c0:	e0 49 00 24 	cp.w	r9,36
8000c9c4:	cc 51       	brne	8000c94e <_vfprintf_r+0x1da>
8000c9c6:	e0 4b 00 20 	cp.w	r11,32
8000c9ca:	e0 89 0e 95 	brgt	8000e6f4 <_vfprintf_r+0x1f80>
8000c9ce:	20 1b       	sub	r11,1
8000c9d0:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000c9d4:	12 3b       	cp.w	r11,r9
8000c9d6:	c0 95       	brlt	8000c9e8 <_vfprintf_r+0x274>
8000c9d8:	c1 08       	rjmp	8000c9f8 <_vfprintf_r+0x284>
8000c9da:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000c9de:	ec ca ff ff 	sub	r10,r6,-1
8000c9e2:	12 36       	cp.w	r6,r9
8000c9e4:	c1 f5       	brlt	8000ca22 <_vfprintf_r+0x2ae>
8000c9e6:	c2 68       	rjmp	8000ca32 <_vfprintf_r+0x2be>
8000c9e8:	fa ce f9 44 	sub	lr,sp,-1724
8000c9ec:	10 97       	mov	r7,r8
8000c9ee:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000c9f2:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000c9f6:	c3 58       	rjmp	8000ca60 <_vfprintf_r+0x2ec>
8000c9f8:	10 97       	mov	r7,r8
8000c9fa:	fa c8 f9 50 	sub	r8,sp,-1712
8000c9fe:	1a d8       	st.w	--sp,r8
8000ca00:	fa c8 fa b8 	sub	r8,sp,-1352
8000ca04:	1a d8       	st.w	--sp,r8
8000ca06:	fa c8 fb b4 	sub	r8,sp,-1100
8000ca0a:	02 9a       	mov	r10,r1
8000ca0c:	1a d8       	st.w	--sp,r8
8000ca0e:	04 9c       	mov	r12,r2
8000ca10:	fa c8 f9 40 	sub	r8,sp,-1728
8000ca14:	fa c9 ff b4 	sub	r9,sp,-76
8000ca18:	f0 1f 00 2e 	mcall	8000cad0 <_vfprintf_r+0x35c>
8000ca1c:	2f dd       	sub	sp,-12
8000ca1e:	78 00       	ld.w	r0,r12[0x0]
8000ca20:	c2 08       	rjmp	8000ca60 <_vfprintf_r+0x2ec>
8000ca22:	fa cc f9 44 	sub	r12,sp,-1724
8000ca26:	14 96       	mov	r6,r10
8000ca28:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000ca2c:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000ca30:	c1 88       	rjmp	8000ca60 <_vfprintf_r+0x2ec>
8000ca32:	41 08       	lddsp	r8,sp[0x40]
8000ca34:	59 f9       	cp.w	r9,31
8000ca36:	e0 89 00 11 	brgt	8000ca58 <_vfprintf_r+0x2e4>
8000ca3a:	f0 cb ff fc 	sub	r11,r8,-4
8000ca3e:	51 0b       	stdsp	sp[0x40],r11
8000ca40:	70 00       	ld.w	r0,r8[0x0]
8000ca42:	fa cb f9 44 	sub	r11,sp,-1724
8000ca46:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000ca4a:	f1 40 fd 88 	st.w	r8[-632],r0
8000ca4e:	2f f9       	sub	r9,-1
8000ca50:	14 96       	mov	r6,r10
8000ca52:	fb 49 06 b4 	st.w	sp[1716],r9
8000ca56:	c0 58       	rjmp	8000ca60 <_vfprintf_r+0x2ec>
8000ca58:	70 00       	ld.w	r0,r8[0x0]
8000ca5a:	14 96       	mov	r6,r10
8000ca5c:	2f c8       	sub	r8,-4
8000ca5e:	51 08       	stdsp	sp[0x40],r8
8000ca60:	58 00       	cp.w	r0,0
8000ca62:	fe 94 ff 78 	brge	8000c952 <_vfprintf_r+0x1de>
8000ca66:	5c 30       	neg	r0
8000ca68:	a3 a5       	sbr	r5,0x2
8000ca6a:	c7 4b       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000ca6c:	32 b8       	mov	r8,43
8000ca6e:	fb 68 06 bb 	st.b	sp[1723],r8
8000ca72:	c7 0b       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000ca74:	0f 38       	ld.ub	r8,r7++
8000ca76:	e0 48 00 2a 	cp.w	r8,42
8000ca7a:	c0 30       	breq	8000ca80 <_vfprintf_r+0x30c>
8000ca7c:	30 09       	mov	r9,0
8000ca7e:	c8 08       	rjmp	8000cb7e <_vfprintf_r+0x40a>
8000ca80:	0f 88       	ld.ub	r8,r7[0x0]
8000ca82:	f0 c9 00 30 	sub	r9,r8,48
8000ca86:	58 99       	cp.w	r9,9
8000ca88:	e0 8b 00 26 	brhi	8000cad4 <_vfprintf_r+0x360>
8000ca8c:	ee c4 ff ff 	sub	r4,r7,-1
8000ca90:	30 0b       	mov	r11,0
8000ca92:	23 08       	sub	r8,48
8000ca94:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000ca98:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000ca9c:	09 38       	ld.ub	r8,r4++
8000ca9e:	f0 c9 00 30 	sub	r9,r8,48
8000caa2:	58 99       	cp.w	r9,9
8000caa4:	fe 98 ff f7 	brls	8000ca92 <_vfprintf_r+0x31e>
8000caa8:	e0 48 00 24 	cp.w	r8,36
8000caac:	fe 91 ff 51 	brne	8000c94e <_vfprintf_r+0x1da>
8000cab0:	e0 4b 00 20 	cp.w	r11,32
8000cab4:	e0 89 0e 20 	brgt	8000e6f4 <_vfprintf_r+0x1f80>
8000cab8:	20 1b       	sub	r11,1
8000caba:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cabe:	10 3b       	cp.w	r11,r8
8000cac0:	c1 15       	brlt	8000cae2 <_vfprintf_r+0x36e>
8000cac2:	c1 88       	rjmp	8000caf2 <_vfprintf_r+0x37e>
8000cac4:	80 00       	ld.sh	r0,r0[0x0]
8000cac6:	c7 54       	brge	8000cbb0 <_vfprintf_r+0x43c>
8000cac8:	80 01       	ld.sh	r1,r0[0x0]
8000caca:	1b 84       	ld.ub	r4,sp[0x0]
8000cacc:	80 01       	ld.sh	r1,r0[0x0]
8000cace:	1d c0       	ld.ub	r0,lr[0x4]
8000cad0:	80 00       	ld.sh	r0,r0[0x0]
8000cad2:	c4 30       	breq	8000cb58 <_vfprintf_r+0x3e4>
8000cad4:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000cad8:	ec c9 ff ff 	sub	r9,r6,-1
8000cadc:	14 36       	cp.w	r6,r10
8000cade:	c1 f5       	brlt	8000cb1c <_vfprintf_r+0x3a8>
8000cae0:	c2 88       	rjmp	8000cb30 <_vfprintf_r+0x3bc>
8000cae2:	fa ca f9 44 	sub	r10,sp,-1724
8000cae6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000caea:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000caee:	50 2b       	stdsp	sp[0x8],r11
8000caf0:	c3 c8       	rjmp	8000cb68 <_vfprintf_r+0x3f4>
8000caf2:	fa c8 f9 50 	sub	r8,sp,-1712
8000caf6:	1a d8       	st.w	--sp,r8
8000caf8:	fa c8 fa b8 	sub	r8,sp,-1352
8000cafc:	1a d8       	st.w	--sp,r8
8000cafe:	fa c8 fb b4 	sub	r8,sp,-1100
8000cb02:	02 9a       	mov	r10,r1
8000cb04:	1a d8       	st.w	--sp,r8
8000cb06:	04 9c       	mov	r12,r2
8000cb08:	fa c8 f9 40 	sub	r8,sp,-1728
8000cb0c:	fa c9 ff b4 	sub	r9,sp,-76
8000cb10:	f0 1f 01 9e 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cb14:	2f dd       	sub	sp,-12
8000cb16:	78 0c       	ld.w	r12,r12[0x0]
8000cb18:	50 2c       	stdsp	sp[0x8],r12
8000cb1a:	c2 78       	rjmp	8000cb68 <_vfprintf_r+0x3f4>
8000cb1c:	12 96       	mov	r6,r9
8000cb1e:	0e 94       	mov	r4,r7
8000cb20:	fa c9 f9 44 	sub	r9,sp,-1724
8000cb24:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000cb28:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000cb2c:	50 28       	stdsp	sp[0x8],r8
8000cb2e:	c1 d8       	rjmp	8000cb68 <_vfprintf_r+0x3f4>
8000cb30:	41 08       	lddsp	r8,sp[0x40]
8000cb32:	59 fa       	cp.w	r10,31
8000cb34:	e0 89 00 14 	brgt	8000cb5c <_vfprintf_r+0x3e8>
8000cb38:	f0 cb ff fc 	sub	r11,r8,-4
8000cb3c:	70 08       	ld.w	r8,r8[0x0]
8000cb3e:	51 0b       	stdsp	sp[0x40],r11
8000cb40:	50 28       	stdsp	sp[0x8],r8
8000cb42:	fa c6 f9 44 	sub	r6,sp,-1724
8000cb46:	40 2e       	lddsp	lr,sp[0x8]
8000cb48:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000cb4c:	f1 4e fd 88 	st.w	r8[-632],lr
8000cb50:	2f fa       	sub	r10,-1
8000cb52:	0e 94       	mov	r4,r7
8000cb54:	fb 4a 06 b4 	st.w	sp[1716],r10
8000cb58:	12 96       	mov	r6,r9
8000cb5a:	c0 78       	rjmp	8000cb68 <_vfprintf_r+0x3f4>
8000cb5c:	70 0c       	ld.w	r12,r8[0x0]
8000cb5e:	0e 94       	mov	r4,r7
8000cb60:	2f c8       	sub	r8,-4
8000cb62:	50 2c       	stdsp	sp[0x8],r12
8000cb64:	12 96       	mov	r6,r9
8000cb66:	51 08       	stdsp	sp[0x40],r8
8000cb68:	40 2b       	lddsp	r11,sp[0x8]
8000cb6a:	58 0b       	cp.w	r11,0
8000cb6c:	fe 95 fe ed 	brlt	8000c946 <_vfprintf_r+0x1d2>
8000cb70:	08 97       	mov	r7,r4
8000cb72:	cf 0a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cb74:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000cb78:	0f 38       	ld.ub	r8,r7++
8000cb7a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000cb7e:	f0 ca 00 30 	sub	r10,r8,48
8000cb82:	58 9a       	cp.w	r10,9
8000cb84:	fe 98 ff f8 	brls	8000cb74 <_vfprintf_r+0x400>
8000cb88:	3f fa       	mov	r10,-1
8000cb8a:	f2 0a 0c 49 	max	r9,r9,r10
8000cb8e:	50 29       	stdsp	sp[0x8],r9
8000cb90:	ce 4a       	rjmp	8000c958 <_vfprintf_r+0x1e4>
8000cb92:	a7 b5       	sbr	r5,0x7
8000cb94:	cd fa       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cb96:	30 09       	mov	r9,0
8000cb98:	23 08       	sub	r8,48
8000cb9a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000cb9e:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000cba2:	0f 38       	ld.ub	r8,r7++
8000cba4:	f0 ca 00 30 	sub	r10,r8,48
8000cba8:	58 9a       	cp.w	r10,9
8000cbaa:	fe 98 ff f7 	brls	8000cb98 <_vfprintf_r+0x424>
8000cbae:	e0 48 00 24 	cp.w	r8,36
8000cbb2:	fe 91 fe d2 	brne	8000c956 <_vfprintf_r+0x1e2>
8000cbb6:	e0 49 00 20 	cp.w	r9,32
8000cbba:	e0 89 0d 9d 	brgt	8000e6f4 <_vfprintf_r+0x1f80>
8000cbbe:	f2 c3 00 01 	sub	r3,r9,1
8000cbc2:	30 19       	mov	r9,1
8000cbc4:	50 39       	stdsp	sp[0xc],r9
8000cbc6:	cc 6a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cbc8:	a3 b5       	sbr	r5,0x3
8000cbca:	cc 4a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cbcc:	a7 a5       	sbr	r5,0x6
8000cbce:	cc 2a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cbd0:	0a 98       	mov	r8,r5
8000cbd2:	a5 b5       	sbr	r5,0x5
8000cbd4:	a5 a8       	sbr	r8,0x4
8000cbd6:	0f 89       	ld.ub	r9,r7[0x0]
8000cbd8:	36 ce       	mov	lr,108
8000cbda:	fc 09 18 00 	cp.b	r9,lr
8000cbde:	f7 b7 00 ff 	subeq	r7,-1
8000cbe2:	f0 05 17 10 	movne	r5,r8
8000cbe6:	cb 6a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cbe8:	a5 b5       	sbr	r5,0x5
8000cbea:	cb 4a       	rjmp	8000c952 <_vfprintf_r+0x1de>
8000cbec:	50 a7       	stdsp	sp[0x28],r7
8000cbee:	50 80       	stdsp	sp[0x20],r0
8000cbf0:	0c 97       	mov	r7,r6
8000cbf2:	10 90       	mov	r0,r8
8000cbf4:	06 96       	mov	r6,r3
8000cbf6:	04 94       	mov	r4,r2
8000cbf8:	40 93       	lddsp	r3,sp[0x24]
8000cbfa:	02 92       	mov	r2,r1
8000cbfc:	0e 99       	mov	r9,r7
8000cbfe:	40 41       	lddsp	r1,sp[0x10]
8000cc00:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cc04:	40 3c       	lddsp	r12,sp[0xc]
8000cc06:	58 0c       	cp.w	r12,0
8000cc08:	c1 d0       	breq	8000cc42 <_vfprintf_r+0x4ce>
8000cc0a:	10 36       	cp.w	r6,r8
8000cc0c:	c0 64       	brge	8000cc18 <_vfprintf_r+0x4a4>
8000cc0e:	fa cb f9 44 	sub	r11,sp,-1724
8000cc12:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000cc16:	c1 d8       	rjmp	8000cc50 <_vfprintf_r+0x4dc>
8000cc18:	fa c8 f9 50 	sub	r8,sp,-1712
8000cc1c:	1a d8       	st.w	--sp,r8
8000cc1e:	fa c8 fa b8 	sub	r8,sp,-1352
8000cc22:	1a d8       	st.w	--sp,r8
8000cc24:	fa c8 fb b4 	sub	r8,sp,-1100
8000cc28:	1a d8       	st.w	--sp,r8
8000cc2a:	fa c8 f9 40 	sub	r8,sp,-1728
8000cc2e:	fa c9 ff b4 	sub	r9,sp,-76
8000cc32:	04 9a       	mov	r10,r2
8000cc34:	0c 9b       	mov	r11,r6
8000cc36:	08 9c       	mov	r12,r4
8000cc38:	f0 1f 01 54 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cc3c:	2f dd       	sub	sp,-12
8000cc3e:	19 b8       	ld.ub	r8,r12[0x3]
8000cc40:	c2 28       	rjmp	8000cc84 <_vfprintf_r+0x510>
8000cc42:	2f f7       	sub	r7,-1
8000cc44:	10 39       	cp.w	r9,r8
8000cc46:	c0 84       	brge	8000cc56 <_vfprintf_r+0x4e2>
8000cc48:	fa ca f9 44 	sub	r10,sp,-1724
8000cc4c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000cc50:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000cc54:	c1 88       	rjmp	8000cc84 <_vfprintf_r+0x510>
8000cc56:	41 09       	lddsp	r9,sp[0x40]
8000cc58:	59 f8       	cp.w	r8,31
8000cc5a:	e0 89 00 12 	brgt	8000cc7e <_vfprintf_r+0x50a>
8000cc5e:	f2 ca ff fc 	sub	r10,r9,-4
8000cc62:	51 0a       	stdsp	sp[0x40],r10
8000cc64:	72 09       	ld.w	r9,r9[0x0]
8000cc66:	fa c6 f9 44 	sub	r6,sp,-1724
8000cc6a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000cc6e:	2f f8       	sub	r8,-1
8000cc70:	f5 49 fd 88 	st.w	r10[-632],r9
8000cc74:	fb 48 06 b4 	st.w	sp[1716],r8
8000cc78:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000cc7c:	c0 48       	rjmp	8000cc84 <_vfprintf_r+0x510>
8000cc7e:	13 b8       	ld.ub	r8,r9[0x3]
8000cc80:	2f c9       	sub	r9,-4
8000cc82:	51 09       	stdsp	sp[0x40],r9
8000cc84:	fb 68 06 60 	st.b	sp[1632],r8
8000cc88:	30 0e       	mov	lr,0
8000cc8a:	30 08       	mov	r8,0
8000cc8c:	30 12       	mov	r2,1
8000cc8e:	fb 68 06 bb 	st.b	sp[1723],r8
8000cc92:	50 2e       	stdsp	sp[0x8],lr
8000cc94:	e0 8f 08 c5 	bral	8000de1e <_vfprintf_r+0x16aa>
8000cc98:	50 a7       	stdsp	sp[0x28],r7
8000cc9a:	50 80       	stdsp	sp[0x20],r0
8000cc9c:	0c 97       	mov	r7,r6
8000cc9e:	04 94       	mov	r4,r2
8000cca0:	06 96       	mov	r6,r3
8000cca2:	02 92       	mov	r2,r1
8000cca4:	40 93       	lddsp	r3,sp[0x24]
8000cca6:	10 90       	mov	r0,r8
8000cca8:	40 41       	lddsp	r1,sp[0x10]
8000ccaa:	a5 a5       	sbr	r5,0x4
8000ccac:	c0 a8       	rjmp	8000ccc0 <_vfprintf_r+0x54c>
8000ccae:	50 a7       	stdsp	sp[0x28],r7
8000ccb0:	50 80       	stdsp	sp[0x20],r0
8000ccb2:	0c 97       	mov	r7,r6
8000ccb4:	04 94       	mov	r4,r2
8000ccb6:	06 96       	mov	r6,r3
8000ccb8:	02 92       	mov	r2,r1
8000ccba:	40 93       	lddsp	r3,sp[0x24]
8000ccbc:	10 90       	mov	r0,r8
8000ccbe:	40 41       	lddsp	r1,sp[0x10]
8000ccc0:	ed b5 00 05 	bld	r5,0x5
8000ccc4:	c5 11       	brne	8000cd66 <_vfprintf_r+0x5f2>
8000ccc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ccca:	40 3c       	lddsp	r12,sp[0xc]
8000cccc:	58 0c       	cp.w	r12,0
8000ccce:	c1 e0       	breq	8000cd0a <_vfprintf_r+0x596>
8000ccd0:	10 36       	cp.w	r6,r8
8000ccd2:	c0 64       	brge	8000ccde <_vfprintf_r+0x56a>
8000ccd4:	fa cb f9 44 	sub	r11,sp,-1724
8000ccd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ccdc:	c2 08       	rjmp	8000cd1c <_vfprintf_r+0x5a8>
8000ccde:	fa c8 f9 50 	sub	r8,sp,-1712
8000cce2:	1a d8       	st.w	--sp,r8
8000cce4:	fa c8 fa b8 	sub	r8,sp,-1352
8000cce8:	0c 9b       	mov	r11,r6
8000ccea:	1a d8       	st.w	--sp,r8
8000ccec:	fa c8 fb b4 	sub	r8,sp,-1100
8000ccf0:	1a d8       	st.w	--sp,r8
8000ccf2:	fa c9 ff b4 	sub	r9,sp,-76
8000ccf6:	fa c8 f9 40 	sub	r8,sp,-1728
8000ccfa:	04 9a       	mov	r10,r2
8000ccfc:	08 9c       	mov	r12,r4
8000ccfe:	f0 1f 01 23 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cd02:	2f dd       	sub	sp,-12
8000cd04:	78 1b       	ld.w	r11,r12[0x4]
8000cd06:	78 09       	ld.w	r9,r12[0x0]
8000cd08:	c2 b8       	rjmp	8000cd5e <_vfprintf_r+0x5ea>
8000cd0a:	ee ca ff ff 	sub	r10,r7,-1
8000cd0e:	10 37       	cp.w	r7,r8
8000cd10:	c0 b4       	brge	8000cd26 <_vfprintf_r+0x5b2>
8000cd12:	fa c9 f9 44 	sub	r9,sp,-1724
8000cd16:	14 97       	mov	r7,r10
8000cd18:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000cd1c:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000cd20:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000cd24:	c1 d8       	rjmp	8000cd5e <_vfprintf_r+0x5ea>
8000cd26:	41 09       	lddsp	r9,sp[0x40]
8000cd28:	59 f8       	cp.w	r8,31
8000cd2a:	e0 89 00 14 	brgt	8000cd52 <_vfprintf_r+0x5de>
8000cd2e:	f2 cb ff f8 	sub	r11,r9,-8
8000cd32:	51 0b       	stdsp	sp[0x40],r11
8000cd34:	fa c6 f9 44 	sub	r6,sp,-1724
8000cd38:	72 1b       	ld.w	r11,r9[0x4]
8000cd3a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000cd3e:	72 09       	ld.w	r9,r9[0x0]
8000cd40:	f9 4b fd 8c 	st.w	r12[-628],r11
8000cd44:	f9 49 fd 88 	st.w	r12[-632],r9
8000cd48:	2f f8       	sub	r8,-1
8000cd4a:	14 97       	mov	r7,r10
8000cd4c:	fb 48 06 b4 	st.w	sp[1716],r8
8000cd50:	c0 78       	rjmp	8000cd5e <_vfprintf_r+0x5ea>
8000cd52:	f2 c8 ff f8 	sub	r8,r9,-8
8000cd56:	72 1b       	ld.w	r11,r9[0x4]
8000cd58:	14 97       	mov	r7,r10
8000cd5a:	51 08       	stdsp	sp[0x40],r8
8000cd5c:	72 09       	ld.w	r9,r9[0x0]
8000cd5e:	16 98       	mov	r8,r11
8000cd60:	fa e9 00 00 	st.d	sp[0],r8
8000cd64:	ca e8       	rjmp	8000cec0 <_vfprintf_r+0x74c>
8000cd66:	ed b5 00 04 	bld	r5,0x4
8000cd6a:	c1 71       	brne	8000cd98 <_vfprintf_r+0x624>
8000cd6c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cd70:	40 3e       	lddsp	lr,sp[0xc]
8000cd72:	58 0e       	cp.w	lr,0
8000cd74:	c0 80       	breq	8000cd84 <_vfprintf_r+0x610>
8000cd76:	10 36       	cp.w	r6,r8
8000cd78:	c6 94       	brge	8000ce4a <_vfprintf_r+0x6d6>
8000cd7a:	fa cc f9 44 	sub	r12,sp,-1724
8000cd7e:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000cd82:	c8 28       	rjmp	8000ce86 <_vfprintf_r+0x712>
8000cd84:	ee ca ff ff 	sub	r10,r7,-1
8000cd88:	10 37       	cp.w	r7,r8
8000cd8a:	e0 84 00 81 	brge	8000ce8c <_vfprintf_r+0x718>
8000cd8e:	fa cb f9 44 	sub	r11,sp,-1724
8000cd92:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000cd96:	c7 78       	rjmp	8000ce84 <_vfprintf_r+0x710>
8000cd98:	ed b5 00 06 	bld	r5,0x6
8000cd9c:	c4 b1       	brne	8000ce32 <_vfprintf_r+0x6be>
8000cd9e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cda2:	40 3c       	lddsp	r12,sp[0xc]
8000cda4:	58 0c       	cp.w	r12,0
8000cda6:	c1 d0       	breq	8000cde0 <_vfprintf_r+0x66c>
8000cda8:	10 36       	cp.w	r6,r8
8000cdaa:	c0 64       	brge	8000cdb6 <_vfprintf_r+0x642>
8000cdac:	fa cb f9 44 	sub	r11,sp,-1724
8000cdb0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000cdb4:	c1 f8       	rjmp	8000cdf2 <_vfprintf_r+0x67e>
8000cdb6:	fa c8 f9 50 	sub	r8,sp,-1712
8000cdba:	1a d8       	st.w	--sp,r8
8000cdbc:	fa c8 fa b8 	sub	r8,sp,-1352
8000cdc0:	1a d8       	st.w	--sp,r8
8000cdc2:	fa c8 fb b4 	sub	r8,sp,-1100
8000cdc6:	1a d8       	st.w	--sp,r8
8000cdc8:	fa c8 f9 40 	sub	r8,sp,-1728
8000cdcc:	fa c9 ff b4 	sub	r9,sp,-76
8000cdd0:	04 9a       	mov	r10,r2
8000cdd2:	0c 9b       	mov	r11,r6
8000cdd4:	08 9c       	mov	r12,r4
8000cdd6:	f0 1f 00 ed 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cdda:	2f dd       	sub	sp,-12
8000cddc:	98 18       	ld.sh	r8,r12[0x2]
8000cdde:	c2 68       	rjmp	8000ce2a <_vfprintf_r+0x6b6>
8000cde0:	ee ca ff ff 	sub	r10,r7,-1
8000cde4:	10 37       	cp.w	r7,r8
8000cde6:	c0 94       	brge	8000cdf8 <_vfprintf_r+0x684>
8000cde8:	fa c9 f9 44 	sub	r9,sp,-1724
8000cdec:	14 97       	mov	r7,r10
8000cdee:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000cdf2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000cdf6:	c1 a8       	rjmp	8000ce2a <_vfprintf_r+0x6b6>
8000cdf8:	41 09       	lddsp	r9,sp[0x40]
8000cdfa:	59 f8       	cp.w	r8,31
8000cdfc:	e0 89 00 13 	brgt	8000ce22 <_vfprintf_r+0x6ae>
8000ce00:	f2 cb ff fc 	sub	r11,r9,-4
8000ce04:	51 0b       	stdsp	sp[0x40],r11
8000ce06:	72 09       	ld.w	r9,r9[0x0]
8000ce08:	fa c6 f9 44 	sub	r6,sp,-1724
8000ce0c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000ce10:	2f f8       	sub	r8,-1
8000ce12:	f7 49 fd 88 	st.w	r11[-632],r9
8000ce16:	fb 48 06 b4 	st.w	sp[1716],r8
8000ce1a:	14 97       	mov	r7,r10
8000ce1c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000ce20:	c0 58       	rjmp	8000ce2a <_vfprintf_r+0x6b6>
8000ce22:	92 18       	ld.sh	r8,r9[0x2]
8000ce24:	14 97       	mov	r7,r10
8000ce26:	2f c9       	sub	r9,-4
8000ce28:	51 09       	stdsp	sp[0x40],r9
8000ce2a:	50 18       	stdsp	sp[0x4],r8
8000ce2c:	bf 58       	asr	r8,0x1f
8000ce2e:	50 08       	stdsp	sp[0x0],r8
8000ce30:	c4 88       	rjmp	8000cec0 <_vfprintf_r+0x74c>
8000ce32:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ce36:	40 3c       	lddsp	r12,sp[0xc]
8000ce38:	58 0c       	cp.w	r12,0
8000ce3a:	c1 d0       	breq	8000ce74 <_vfprintf_r+0x700>
8000ce3c:	10 36       	cp.w	r6,r8
8000ce3e:	c0 64       	brge	8000ce4a <_vfprintf_r+0x6d6>
8000ce40:	fa cb f9 44 	sub	r11,sp,-1724
8000ce44:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ce48:	c1 f8       	rjmp	8000ce86 <_vfprintf_r+0x712>
8000ce4a:	fa c8 f9 50 	sub	r8,sp,-1712
8000ce4e:	1a d8       	st.w	--sp,r8
8000ce50:	fa c8 fa b8 	sub	r8,sp,-1352
8000ce54:	0c 9b       	mov	r11,r6
8000ce56:	1a d8       	st.w	--sp,r8
8000ce58:	fa c8 fb b4 	sub	r8,sp,-1100
8000ce5c:	04 9a       	mov	r10,r2
8000ce5e:	1a d8       	st.w	--sp,r8
8000ce60:	08 9c       	mov	r12,r4
8000ce62:	fa c8 f9 40 	sub	r8,sp,-1728
8000ce66:	fa c9 ff b4 	sub	r9,sp,-76
8000ce6a:	f0 1f 00 c8 	mcall	8000d188 <_vfprintf_r+0xa14>
8000ce6e:	2f dd       	sub	sp,-12
8000ce70:	78 0b       	ld.w	r11,r12[0x0]
8000ce72:	c2 48       	rjmp	8000ceba <_vfprintf_r+0x746>
8000ce74:	ee ca ff ff 	sub	r10,r7,-1
8000ce78:	10 37       	cp.w	r7,r8
8000ce7a:	c0 94       	brge	8000ce8c <_vfprintf_r+0x718>
8000ce7c:	fa c9 f9 44 	sub	r9,sp,-1724
8000ce80:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ce84:	14 97       	mov	r7,r10
8000ce86:	ec fb fd 88 	ld.w	r11,r6[-632]
8000ce8a:	c1 88       	rjmp	8000ceba <_vfprintf_r+0x746>
8000ce8c:	41 09       	lddsp	r9,sp[0x40]
8000ce8e:	59 f8       	cp.w	r8,31
8000ce90:	e0 89 00 11 	brgt	8000ceb2 <_vfprintf_r+0x73e>
8000ce94:	f2 cb ff fc 	sub	r11,r9,-4
8000ce98:	51 0b       	stdsp	sp[0x40],r11
8000ce9a:	fa c6 f9 44 	sub	r6,sp,-1724
8000ce9e:	72 0b       	ld.w	r11,r9[0x0]
8000cea0:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000cea4:	f3 4b fd 88 	st.w	r9[-632],r11
8000cea8:	2f f8       	sub	r8,-1
8000ceaa:	14 97       	mov	r7,r10
8000ceac:	fb 48 06 b4 	st.w	sp[1716],r8
8000ceb0:	c0 58       	rjmp	8000ceba <_vfprintf_r+0x746>
8000ceb2:	72 0b       	ld.w	r11,r9[0x0]
8000ceb4:	14 97       	mov	r7,r10
8000ceb6:	2f c9       	sub	r9,-4
8000ceb8:	51 09       	stdsp	sp[0x40],r9
8000ceba:	50 1b       	stdsp	sp[0x4],r11
8000cebc:	bf 5b       	asr	r11,0x1f
8000cebe:	50 0b       	stdsp	sp[0x0],r11
8000cec0:	fa ea 00 00 	ld.d	r10,sp[0]
8000cec4:	58 0a       	cp.w	r10,0
8000cec6:	5c 2b       	cpc	r11
8000cec8:	c0 e4       	brge	8000cee4 <_vfprintf_r+0x770>
8000ceca:	30 08       	mov	r8,0
8000cecc:	fa ea 00 00 	ld.d	r10,sp[0]
8000ced0:	30 09       	mov	r9,0
8000ced2:	f0 0a 01 0a 	sub	r10,r8,r10
8000ced6:	f2 0b 01 4b 	sbc	r11,r9,r11
8000ceda:	32 d8       	mov	r8,45
8000cedc:	fa eb 00 00 	st.d	sp[0],r10
8000cee0:	fb 68 06 bb 	st.b	sp[1723],r8
8000cee4:	30 18       	mov	r8,1
8000cee6:	e0 8f 07 12 	bral	8000dd0a <_vfprintf_r+0x1596>
8000ceea:	50 a7       	stdsp	sp[0x28],r7
8000ceec:	50 80       	stdsp	sp[0x20],r0
8000ceee:	0c 97       	mov	r7,r6
8000cef0:	04 94       	mov	r4,r2
8000cef2:	06 96       	mov	r6,r3
8000cef4:	02 92       	mov	r2,r1
8000cef6:	40 93       	lddsp	r3,sp[0x24]
8000cef8:	10 90       	mov	r0,r8
8000cefa:	40 41       	lddsp	r1,sp[0x10]
8000cefc:	0e 99       	mov	r9,r7
8000cefe:	ed b5 00 03 	bld	r5,0x3
8000cf02:	c4 11       	brne	8000cf84 <_vfprintf_r+0x810>
8000cf04:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cf08:	40 3a       	lddsp	r10,sp[0xc]
8000cf0a:	58 0a       	cp.w	r10,0
8000cf0c:	c1 90       	breq	8000cf3e <_vfprintf_r+0x7ca>
8000cf0e:	10 36       	cp.w	r6,r8
8000cf10:	c6 45       	brlt	8000cfd8 <_vfprintf_r+0x864>
8000cf12:	fa c8 f9 50 	sub	r8,sp,-1712
8000cf16:	1a d8       	st.w	--sp,r8
8000cf18:	fa c8 fa b8 	sub	r8,sp,-1352
8000cf1c:	1a d8       	st.w	--sp,r8
8000cf1e:	fa c8 fb b4 	sub	r8,sp,-1100
8000cf22:	0c 9b       	mov	r11,r6
8000cf24:	1a d8       	st.w	--sp,r8
8000cf26:	04 9a       	mov	r10,r2
8000cf28:	fa c8 f9 40 	sub	r8,sp,-1728
8000cf2c:	fa c9 ff b4 	sub	r9,sp,-76
8000cf30:	08 9c       	mov	r12,r4
8000cf32:	f0 1f 00 96 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cf36:	2f dd       	sub	sp,-12
8000cf38:	78 16       	ld.w	r6,r12[0x4]
8000cf3a:	50 76       	stdsp	sp[0x1c],r6
8000cf3c:	c4 88       	rjmp	8000cfcc <_vfprintf_r+0x858>
8000cf3e:	2f f7       	sub	r7,-1
8000cf40:	10 39       	cp.w	r9,r8
8000cf42:	c0 c4       	brge	8000cf5a <_vfprintf_r+0x7e6>
8000cf44:	fa ce f9 44 	sub	lr,sp,-1724
8000cf48:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000cf4c:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000cf50:	50 7c       	stdsp	sp[0x1c],r12
8000cf52:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000cf56:	50 56       	stdsp	sp[0x14],r6
8000cf58:	c6 68       	rjmp	8000d024 <_vfprintf_r+0x8b0>
8000cf5a:	41 09       	lddsp	r9,sp[0x40]
8000cf5c:	59 f8       	cp.w	r8,31
8000cf5e:	e0 89 00 10 	brgt	8000cf7e <_vfprintf_r+0x80a>
8000cf62:	f2 ca ff f8 	sub	r10,r9,-8
8000cf66:	72 1b       	ld.w	r11,r9[0x4]
8000cf68:	51 0a       	stdsp	sp[0x40],r10
8000cf6a:	72 09       	ld.w	r9,r9[0x0]
8000cf6c:	fa ca f9 44 	sub	r10,sp,-1724
8000cf70:	50 7b       	stdsp	sp[0x1c],r11
8000cf72:	50 59       	stdsp	sp[0x14],r9
8000cf74:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000cf78:	40 5b       	lddsp	r11,sp[0x14]
8000cf7a:	40 7a       	lddsp	r10,sp[0x1c]
8000cf7c:	c4 78       	rjmp	8000d00a <_vfprintf_r+0x896>
8000cf7e:	72 18       	ld.w	r8,r9[0x4]
8000cf80:	50 78       	stdsp	sp[0x1c],r8
8000cf82:	c4 c8       	rjmp	8000d01a <_vfprintf_r+0x8a6>
8000cf84:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cf88:	40 3e       	lddsp	lr,sp[0xc]
8000cf8a:	58 0e       	cp.w	lr,0
8000cf8c:	c2 30       	breq	8000cfd2 <_vfprintf_r+0x85e>
8000cf8e:	10 36       	cp.w	r6,r8
8000cf90:	c0 94       	brge	8000cfa2 <_vfprintf_r+0x82e>
8000cf92:	fa cc f9 44 	sub	r12,sp,-1724
8000cf96:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000cf9a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000cf9e:	50 7b       	stdsp	sp[0x1c],r11
8000cfa0:	cd 9b       	rjmp	8000cf52 <_vfprintf_r+0x7de>
8000cfa2:	fa c8 f9 50 	sub	r8,sp,-1712
8000cfa6:	1a d8       	st.w	--sp,r8
8000cfa8:	fa c8 fa b8 	sub	r8,sp,-1352
8000cfac:	04 9a       	mov	r10,r2
8000cfae:	1a d8       	st.w	--sp,r8
8000cfb0:	fa c8 fb b4 	sub	r8,sp,-1100
8000cfb4:	0c 9b       	mov	r11,r6
8000cfb6:	1a d8       	st.w	--sp,r8
8000cfb8:	08 9c       	mov	r12,r4
8000cfba:	fa c8 f9 40 	sub	r8,sp,-1728
8000cfbe:	fa c9 ff b4 	sub	r9,sp,-76
8000cfc2:	f0 1f 00 72 	mcall	8000d188 <_vfprintf_r+0xa14>
8000cfc6:	2f dd       	sub	sp,-12
8000cfc8:	78 1a       	ld.w	r10,r12[0x4]
8000cfca:	50 7a       	stdsp	sp[0x1c],r10
8000cfcc:	78 0c       	ld.w	r12,r12[0x0]
8000cfce:	50 5c       	stdsp	sp[0x14],r12
8000cfd0:	c2 a8       	rjmp	8000d024 <_vfprintf_r+0x8b0>
8000cfd2:	2f f7       	sub	r7,-1
8000cfd4:	10 39       	cp.w	r9,r8
8000cfd6:	c0 94       	brge	8000cfe8 <_vfprintf_r+0x874>
8000cfd8:	fa c9 f9 44 	sub	r9,sp,-1724
8000cfdc:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000cfe0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000cfe4:	50 78       	stdsp	sp[0x1c],r8
8000cfe6:	cb 6b       	rjmp	8000cf52 <_vfprintf_r+0x7de>
8000cfe8:	41 09       	lddsp	r9,sp[0x40]
8000cfea:	59 f8       	cp.w	r8,31
8000cfec:	e0 89 00 15 	brgt	8000d016 <_vfprintf_r+0x8a2>
8000cff0:	f2 ca ff f8 	sub	r10,r9,-8
8000cff4:	72 16       	ld.w	r6,r9[0x4]
8000cff6:	72 09       	ld.w	r9,r9[0x0]
8000cff8:	51 0a       	stdsp	sp[0x40],r10
8000cffa:	50 59       	stdsp	sp[0x14],r9
8000cffc:	fa ce f9 44 	sub	lr,sp,-1724
8000d000:	50 76       	stdsp	sp[0x1c],r6
8000d002:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000d006:	40 5b       	lddsp	r11,sp[0x14]
8000d008:	0c 9a       	mov	r10,r6
8000d00a:	f2 eb fd 88 	st.d	r9[-632],r10
8000d00e:	2f f8       	sub	r8,-1
8000d010:	fb 48 06 b4 	st.w	sp[1716],r8
8000d014:	c0 88       	rjmp	8000d024 <_vfprintf_r+0x8b0>
8000d016:	72 1c       	ld.w	r12,r9[0x4]
8000d018:	50 7c       	stdsp	sp[0x1c],r12
8000d01a:	f2 c8 ff f8 	sub	r8,r9,-8
8000d01e:	51 08       	stdsp	sp[0x40],r8
8000d020:	72 09       	ld.w	r9,r9[0x0]
8000d022:	50 59       	stdsp	sp[0x14],r9
8000d024:	40 5b       	lddsp	r11,sp[0x14]
8000d026:	40 7a       	lddsp	r10,sp[0x1c]
8000d028:	f0 1f 00 59 	mcall	8000d18c <_vfprintf_r+0xa18>
8000d02c:	18 96       	mov	r6,r12
8000d02e:	c1 50       	breq	8000d058 <_vfprintf_r+0x8e4>
8000d030:	30 08       	mov	r8,0
8000d032:	30 09       	mov	r9,0
8000d034:	40 5b       	lddsp	r11,sp[0x14]
8000d036:	40 7a       	lddsp	r10,sp[0x1c]
8000d038:	f0 1f 00 56 	mcall	8000d190 <_vfprintf_r+0xa1c>
8000d03c:	c0 40       	breq	8000d044 <_vfprintf_r+0x8d0>
8000d03e:	32 d8       	mov	r8,45
8000d040:	fb 68 06 bb 	st.b	sp[1723],r8
8000d044:	4d 48       	lddpc	r8,8000d194 <_vfprintf_r+0xa20>
8000d046:	4d 56       	lddpc	r6,8000d198 <_vfprintf_r+0xa24>
8000d048:	a7 d5       	cbr	r5,0x7
8000d04a:	e0 40 00 47 	cp.w	r0,71
8000d04e:	f0 06 17 a0 	movle	r6,r8
8000d052:	30 32       	mov	r2,3
8000d054:	e0 8f 06 e8 	bral	8000de24 <_vfprintf_r+0x16b0>
8000d058:	40 5b       	lddsp	r11,sp[0x14]
8000d05a:	40 7a       	lddsp	r10,sp[0x1c]
8000d05c:	f0 1f 00 50 	mcall	8000d19c <_vfprintf_r+0xa28>
8000d060:	c0 c0       	breq	8000d078 <_vfprintf_r+0x904>
8000d062:	50 26       	stdsp	sp[0x8],r6
8000d064:	4c f8       	lddpc	r8,8000d1a0 <_vfprintf_r+0xa2c>
8000d066:	4d 06       	lddpc	r6,8000d1a4 <_vfprintf_r+0xa30>
8000d068:	a7 d5       	cbr	r5,0x7
8000d06a:	e0 40 00 47 	cp.w	r0,71
8000d06e:	f0 06 17 a0 	movle	r6,r8
8000d072:	30 32       	mov	r2,3
8000d074:	e0 8f 06 de 	bral	8000de30 <_vfprintf_r+0x16bc>
8000d078:	40 2a       	lddsp	r10,sp[0x8]
8000d07a:	5b fa       	cp.w	r10,-1
8000d07c:	c0 41       	brne	8000d084 <_vfprintf_r+0x910>
8000d07e:	30 69       	mov	r9,6
8000d080:	50 29       	stdsp	sp[0x8],r9
8000d082:	c1 18       	rjmp	8000d0a4 <_vfprintf_r+0x930>
8000d084:	e0 40 00 47 	cp.w	r0,71
8000d088:	5f 09       	sreq	r9
8000d08a:	e0 40 00 67 	cp.w	r0,103
8000d08e:	5f 08       	sreq	r8
8000d090:	f3 e8 10 08 	or	r8,r9,r8
8000d094:	f8 08 18 00 	cp.b	r8,r12
8000d098:	c0 60       	breq	8000d0a4 <_vfprintf_r+0x930>
8000d09a:	40 28       	lddsp	r8,sp[0x8]
8000d09c:	58 08       	cp.w	r8,0
8000d09e:	f9 b8 00 01 	moveq	r8,1
8000d0a2:	50 28       	stdsp	sp[0x8],r8
8000d0a4:	40 78       	lddsp	r8,sp[0x1c]
8000d0a6:	40 59       	lddsp	r9,sp[0x14]
8000d0a8:	fa e9 06 94 	st.d	sp[1684],r8
8000d0ac:	a9 a5       	sbr	r5,0x8
8000d0ae:	fa f8 06 94 	ld.w	r8,sp[1684]
8000d0b2:	58 08       	cp.w	r8,0
8000d0b4:	c0 65       	brlt	8000d0c0 <_vfprintf_r+0x94c>
8000d0b6:	40 5e       	lddsp	lr,sp[0x14]
8000d0b8:	30 0c       	mov	r12,0
8000d0ba:	50 6e       	stdsp	sp[0x18],lr
8000d0bc:	50 9c       	stdsp	sp[0x24],r12
8000d0be:	c0 78       	rjmp	8000d0cc <_vfprintf_r+0x958>
8000d0c0:	40 5b       	lddsp	r11,sp[0x14]
8000d0c2:	32 da       	mov	r10,45
8000d0c4:	ee 1b 80 00 	eorh	r11,0x8000
8000d0c8:	50 9a       	stdsp	sp[0x24],r10
8000d0ca:	50 6b       	stdsp	sp[0x18],r11
8000d0cc:	e0 40 00 46 	cp.w	r0,70
8000d0d0:	5f 09       	sreq	r9
8000d0d2:	e0 40 00 66 	cp.w	r0,102
8000d0d6:	5f 08       	sreq	r8
8000d0d8:	f3 e8 10 08 	or	r8,r9,r8
8000d0dc:	50 48       	stdsp	sp[0x10],r8
8000d0de:	c0 40       	breq	8000d0e6 <_vfprintf_r+0x972>
8000d0e0:	40 22       	lddsp	r2,sp[0x8]
8000d0e2:	30 39       	mov	r9,3
8000d0e4:	c1 08       	rjmp	8000d104 <_vfprintf_r+0x990>
8000d0e6:	e0 40 00 45 	cp.w	r0,69
8000d0ea:	5f 09       	sreq	r9
8000d0ec:	e0 40 00 65 	cp.w	r0,101
8000d0f0:	5f 08       	sreq	r8
8000d0f2:	40 22       	lddsp	r2,sp[0x8]
8000d0f4:	10 49       	or	r9,r8
8000d0f6:	2f f2       	sub	r2,-1
8000d0f8:	40 46       	lddsp	r6,sp[0x10]
8000d0fa:	ec 09 18 00 	cp.b	r9,r6
8000d0fe:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000d102:	30 29       	mov	r9,2
8000d104:	fa c8 f9 5c 	sub	r8,sp,-1700
8000d108:	1a d8       	st.w	--sp,r8
8000d10a:	fa c8 f9 54 	sub	r8,sp,-1708
8000d10e:	1a d8       	st.w	--sp,r8
8000d110:	fa c8 f9 4c 	sub	r8,sp,-1716
8000d114:	08 9c       	mov	r12,r4
8000d116:	1a d8       	st.w	--sp,r8
8000d118:	04 98       	mov	r8,r2
8000d11a:	40 9b       	lddsp	r11,sp[0x24]
8000d11c:	40 aa       	lddsp	r10,sp[0x28]
8000d11e:	f0 1f 00 23 	mcall	8000d1a8 <_vfprintf_r+0xa34>
8000d122:	e0 40 00 47 	cp.w	r0,71
8000d126:	5f 19       	srne	r9
8000d128:	e0 40 00 67 	cp.w	r0,103
8000d12c:	5f 18       	srne	r8
8000d12e:	18 96       	mov	r6,r12
8000d130:	2f dd       	sub	sp,-12
8000d132:	f3 e8 00 08 	and	r8,r9,r8
8000d136:	c0 41       	brne	8000d13e <_vfprintf_r+0x9ca>
8000d138:	ed b5 00 00 	bld	r5,0x0
8000d13c:	c4 41       	brne	8000d1c4 <_vfprintf_r+0xa50>
8000d13e:	ec 02 00 0e 	add	lr,r6,r2
8000d142:	50 3e       	stdsp	sp[0xc],lr
8000d144:	40 4c       	lddsp	r12,sp[0x10]
8000d146:	58 0c       	cp.w	r12,0
8000d148:	c1 50       	breq	8000d172 <_vfprintf_r+0x9fe>
8000d14a:	0d 89       	ld.ub	r9,r6[0x0]
8000d14c:	33 08       	mov	r8,48
8000d14e:	f0 09 18 00 	cp.b	r9,r8
8000d152:	c0 b1       	brne	8000d168 <_vfprintf_r+0x9f4>
8000d154:	30 08       	mov	r8,0
8000d156:	30 09       	mov	r9,0
8000d158:	40 6b       	lddsp	r11,sp[0x18]
8000d15a:	40 7a       	lddsp	r10,sp[0x1c]
8000d15c:	f0 1f 00 14 	mcall	8000d1ac <_vfprintf_r+0xa38>
8000d160:	fb b2 00 01 	rsubeq	r2,1
8000d164:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000d168:	40 3b       	lddsp	r11,sp[0xc]
8000d16a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d16e:	10 0b       	add	r11,r8
8000d170:	50 3b       	stdsp	sp[0xc],r11
8000d172:	40 6b       	lddsp	r11,sp[0x18]
8000d174:	30 08       	mov	r8,0
8000d176:	30 09       	mov	r9,0
8000d178:	40 7a       	lddsp	r10,sp[0x1c]
8000d17a:	f0 1f 00 0d 	mcall	8000d1ac <_vfprintf_r+0xa38>
8000d17e:	c1 d0       	breq	8000d1b8 <_vfprintf_r+0xa44>
8000d180:	40 3a       	lddsp	r10,sp[0xc]
8000d182:	fb 4a 06 a4 	st.w	sp[1700],r10
8000d186:	c1 98       	rjmp	8000d1b8 <_vfprintf_r+0xa44>
8000d188:	80 00       	ld.sh	r0,r0[0x0]
8000d18a:	c4 30       	breq	8000d210 <_vfprintf_r+0xa9c>
8000d18c:	80 01       	ld.sh	r1,r0[0x0]
8000d18e:	04 28       	rsub	r8,r2
8000d190:	80 00       	ld.sh	r0,r0[0x0]
8000d192:	a4 94       	st.b	r2[0x1],r4
8000d194:	80 01       	ld.sh	r1,r0[0x0]
8000d196:	1d d4       	ld.ub	r4,lr[0x5]
8000d198:	80 01       	ld.sh	r1,r0[0x0]
8000d19a:	0e 88       	andn	r8,r7
8000d19c:	80 00       	ld.sh	r0,r0[0x0]
8000d19e:	9e 48       	ld.sh	r8,pc[0x8]
8000d1a0:	80 01       	ld.sh	r1,r0[0x0]
8000d1a2:	1d d8       	ld.ub	r8,lr[0x5]
8000d1a4:	80 01       	ld.sh	r1,r0[0x0]
8000d1a6:	0e 84       	andn	r4,r7
8000d1a8:	80 00       	ld.sh	r0,r0[0x0]
8000d1aa:	eb 58 80 00 	st.h	r5[-32768],r8
8000d1ae:	a4 06       	st.h	r2[0x0],r6
8000d1b0:	10 c9       	st.b	r8++,r9
8000d1b2:	fb 48 06 a4 	st.w	sp[1700],r8
8000d1b6:	c0 28       	rjmp	8000d1ba <_vfprintf_r+0xa46>
8000d1b8:	33 09       	mov	r9,48
8000d1ba:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000d1be:	40 3e       	lddsp	lr,sp[0xc]
8000d1c0:	1c 38       	cp.w	r8,lr
8000d1c2:	cf 73       	brcs	8000d1b0 <_vfprintf_r+0xa3c>
8000d1c4:	e0 40 00 47 	cp.w	r0,71
8000d1c8:	5f 09       	sreq	r9
8000d1ca:	e0 40 00 67 	cp.w	r0,103
8000d1ce:	5f 08       	sreq	r8
8000d1d0:	f3 e8 10 08 	or	r8,r9,r8
8000d1d4:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000d1d8:	0c 19       	sub	r9,r6
8000d1da:	50 69       	stdsp	sp[0x18],r9
8000d1dc:	58 08       	cp.w	r8,0
8000d1de:	c0 b0       	breq	8000d1f4 <_vfprintf_r+0xa80>
8000d1e0:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d1e4:	5b d8       	cp.w	r8,-3
8000d1e6:	c0 55       	brlt	8000d1f0 <_vfprintf_r+0xa7c>
8000d1e8:	40 2c       	lddsp	r12,sp[0x8]
8000d1ea:	18 38       	cp.w	r8,r12
8000d1ec:	e0 8a 00 6a 	brle	8000d2c0 <_vfprintf_r+0xb4c>
8000d1f0:	20 20       	sub	r0,2
8000d1f2:	c0 58       	rjmp	8000d1fc <_vfprintf_r+0xa88>
8000d1f4:	e0 40 00 65 	cp.w	r0,101
8000d1f8:	e0 89 00 46 	brgt	8000d284 <_vfprintf_r+0xb10>
8000d1fc:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000d200:	fb 60 06 9c 	st.b	sp[1692],r0
8000d204:	20 1b       	sub	r11,1
8000d206:	fb 4b 06 ac 	st.w	sp[1708],r11
8000d20a:	c0 47       	brpl	8000d212 <_vfprintf_r+0xa9e>
8000d20c:	5c 3b       	neg	r11
8000d20e:	32 d8       	mov	r8,45
8000d210:	c0 28       	rjmp	8000d214 <_vfprintf_r+0xaa0>
8000d212:	32 b8       	mov	r8,43
8000d214:	fb 68 06 9d 	st.b	sp[1693],r8
8000d218:	58 9b       	cp.w	r11,9
8000d21a:	e0 8a 00 1d 	brle	8000d254 <_vfprintf_r+0xae0>
8000d21e:	fa c9 fa 35 	sub	r9,sp,-1483
8000d222:	30 aa       	mov	r10,10
8000d224:	12 98       	mov	r8,r9
8000d226:	0e 9c       	mov	r12,r7
8000d228:	0c 92       	mov	r2,r6
8000d22a:	f6 0a 0c 06 	divs	r6,r11,r10
8000d22e:	0e 9b       	mov	r11,r7
8000d230:	2d 0b       	sub	r11,-48
8000d232:	10 fb       	st.b	--r8,r11
8000d234:	0c 9b       	mov	r11,r6
8000d236:	58 96       	cp.w	r6,9
8000d238:	fe 99 ff f9 	brgt	8000d22a <_vfprintf_r+0xab6>
8000d23c:	2d 0b       	sub	r11,-48
8000d23e:	18 97       	mov	r7,r12
8000d240:	04 96       	mov	r6,r2
8000d242:	10 fb       	st.b	--r8,r11
8000d244:	fa ca f9 62 	sub	r10,sp,-1694
8000d248:	c0 38       	rjmp	8000d24e <_vfprintf_r+0xada>
8000d24a:	11 3b       	ld.ub	r11,r8++
8000d24c:	14 cb       	st.b	r10++,r11
8000d24e:	12 38       	cp.w	r8,r9
8000d250:	cf d3       	brcs	8000d24a <_vfprintf_r+0xad6>
8000d252:	c0 98       	rjmp	8000d264 <_vfprintf_r+0xaf0>
8000d254:	2d 0b       	sub	r11,-48
8000d256:	33 08       	mov	r8,48
8000d258:	fb 6b 06 9f 	st.b	sp[1695],r11
8000d25c:	fb 68 06 9e 	st.b	sp[1694],r8
8000d260:	fa ca f9 60 	sub	r10,sp,-1696
8000d264:	fa c8 f9 64 	sub	r8,sp,-1692
8000d268:	f4 08 01 08 	sub	r8,r10,r8
8000d26c:	50 e8       	stdsp	sp[0x38],r8
8000d26e:	10 92       	mov	r2,r8
8000d270:	40 6b       	lddsp	r11,sp[0x18]
8000d272:	16 02       	add	r2,r11
8000d274:	58 1b       	cp.w	r11,1
8000d276:	e0 89 00 05 	brgt	8000d280 <_vfprintf_r+0xb0c>
8000d27a:	ed b5 00 00 	bld	r5,0x0
8000d27e:	c3 51       	brne	8000d2e8 <_vfprintf_r+0xb74>
8000d280:	2f f2       	sub	r2,-1
8000d282:	c3 38       	rjmp	8000d2e8 <_vfprintf_r+0xb74>
8000d284:	e0 40 00 66 	cp.w	r0,102
8000d288:	c1 c1       	brne	8000d2c0 <_vfprintf_r+0xb4c>
8000d28a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d28e:	58 02       	cp.w	r2,0
8000d290:	e0 8a 00 0c 	brle	8000d2a8 <_vfprintf_r+0xb34>
8000d294:	40 2a       	lddsp	r10,sp[0x8]
8000d296:	58 0a       	cp.w	r10,0
8000d298:	c0 41       	brne	8000d2a0 <_vfprintf_r+0xb2c>
8000d29a:	ed b5 00 00 	bld	r5,0x0
8000d29e:	c2 51       	brne	8000d2e8 <_vfprintf_r+0xb74>
8000d2a0:	2f f2       	sub	r2,-1
8000d2a2:	40 29       	lddsp	r9,sp[0x8]
8000d2a4:	12 02       	add	r2,r9
8000d2a6:	c0 b8       	rjmp	8000d2bc <_vfprintf_r+0xb48>
8000d2a8:	40 28       	lddsp	r8,sp[0x8]
8000d2aa:	58 08       	cp.w	r8,0
8000d2ac:	c0 61       	brne	8000d2b8 <_vfprintf_r+0xb44>
8000d2ae:	ed b5 00 00 	bld	r5,0x0
8000d2b2:	c0 30       	breq	8000d2b8 <_vfprintf_r+0xb44>
8000d2b4:	30 12       	mov	r2,1
8000d2b6:	c1 98       	rjmp	8000d2e8 <_vfprintf_r+0xb74>
8000d2b8:	40 22       	lddsp	r2,sp[0x8]
8000d2ba:	2f e2       	sub	r2,-2
8000d2bc:	36 60       	mov	r0,102
8000d2be:	c1 58       	rjmp	8000d2e8 <_vfprintf_r+0xb74>
8000d2c0:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d2c4:	40 6e       	lddsp	lr,sp[0x18]
8000d2c6:	1c 32       	cp.w	r2,lr
8000d2c8:	c0 65       	brlt	8000d2d4 <_vfprintf_r+0xb60>
8000d2ca:	ed b5 00 00 	bld	r5,0x0
8000d2ce:	f7 b2 00 ff 	subeq	r2,-1
8000d2d2:	c0 a8       	rjmp	8000d2e6 <_vfprintf_r+0xb72>
8000d2d4:	e4 08 11 02 	rsub	r8,r2,2
8000d2d8:	40 6c       	lddsp	r12,sp[0x18]
8000d2da:	58 02       	cp.w	r2,0
8000d2dc:	f0 02 17 a0 	movle	r2,r8
8000d2e0:	f9 b2 09 01 	movgt	r2,1
8000d2e4:	18 02       	add	r2,r12
8000d2e6:	36 70       	mov	r0,103
8000d2e8:	40 9b       	lddsp	r11,sp[0x24]
8000d2ea:	58 0b       	cp.w	r11,0
8000d2ec:	e0 80 05 9c 	breq	8000de24 <_vfprintf_r+0x16b0>
8000d2f0:	32 d8       	mov	r8,45
8000d2f2:	fb 68 06 bb 	st.b	sp[1723],r8
8000d2f6:	e0 8f 05 9b 	bral	8000de2c <_vfprintf_r+0x16b8>
8000d2fa:	50 a7       	stdsp	sp[0x28],r7
8000d2fc:	04 94       	mov	r4,r2
8000d2fe:	0c 97       	mov	r7,r6
8000d300:	02 92       	mov	r2,r1
8000d302:	06 96       	mov	r6,r3
8000d304:	40 41       	lddsp	r1,sp[0x10]
8000d306:	40 93       	lddsp	r3,sp[0x24]
8000d308:	0e 99       	mov	r9,r7
8000d30a:	ed b5 00 05 	bld	r5,0x5
8000d30e:	c4 81       	brne	8000d39e <_vfprintf_r+0xc2a>
8000d310:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d314:	40 3e       	lddsp	lr,sp[0xc]
8000d316:	58 0e       	cp.w	lr,0
8000d318:	c1 d0       	breq	8000d352 <_vfprintf_r+0xbde>
8000d31a:	10 36       	cp.w	r6,r8
8000d31c:	c0 64       	brge	8000d328 <_vfprintf_r+0xbb4>
8000d31e:	fa cc f9 44 	sub	r12,sp,-1724
8000d322:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d326:	c1 d8       	rjmp	8000d360 <_vfprintf_r+0xbec>
8000d328:	fa c8 f9 50 	sub	r8,sp,-1712
8000d32c:	1a d8       	st.w	--sp,r8
8000d32e:	fa c8 fa b8 	sub	r8,sp,-1352
8000d332:	04 9a       	mov	r10,r2
8000d334:	1a d8       	st.w	--sp,r8
8000d336:	fa c8 fb b4 	sub	r8,sp,-1100
8000d33a:	0c 9b       	mov	r11,r6
8000d33c:	1a d8       	st.w	--sp,r8
8000d33e:	08 9c       	mov	r12,r4
8000d340:	fa c8 f9 40 	sub	r8,sp,-1728
8000d344:	fa c9 ff b4 	sub	r9,sp,-76
8000d348:	f0 1f 01 5f 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d34c:	2f dd       	sub	sp,-12
8000d34e:	78 0a       	ld.w	r10,r12[0x0]
8000d350:	c2 08       	rjmp	8000d390 <_vfprintf_r+0xc1c>
8000d352:	2f f7       	sub	r7,-1
8000d354:	10 39       	cp.w	r9,r8
8000d356:	c0 84       	brge	8000d366 <_vfprintf_r+0xbf2>
8000d358:	fa cb f9 44 	sub	r11,sp,-1724
8000d35c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d360:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d364:	c1 68       	rjmp	8000d390 <_vfprintf_r+0xc1c>
8000d366:	41 09       	lddsp	r9,sp[0x40]
8000d368:	59 f8       	cp.w	r8,31
8000d36a:	e0 89 00 10 	brgt	8000d38a <_vfprintf_r+0xc16>
8000d36e:	f2 ca ff fc 	sub	r10,r9,-4
8000d372:	51 0a       	stdsp	sp[0x40],r10
8000d374:	fa c6 f9 44 	sub	r6,sp,-1724
8000d378:	72 0a       	ld.w	r10,r9[0x0]
8000d37a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d37e:	f3 4a fd 88 	st.w	r9[-632],r10
8000d382:	2f f8       	sub	r8,-1
8000d384:	fb 48 06 b4 	st.w	sp[1716],r8
8000d388:	c0 48       	rjmp	8000d390 <_vfprintf_r+0xc1c>
8000d38a:	72 0a       	ld.w	r10,r9[0x0]
8000d38c:	2f c9       	sub	r9,-4
8000d38e:	51 09       	stdsp	sp[0x40],r9
8000d390:	40 be       	lddsp	lr,sp[0x2c]
8000d392:	1c 98       	mov	r8,lr
8000d394:	95 1e       	st.w	r10[0x4],lr
8000d396:	bf 58       	asr	r8,0x1f
8000d398:	95 08       	st.w	r10[0x0],r8
8000d39a:	fe 9f fa 79 	bral	8000c88c <_vfprintf_r+0x118>
8000d39e:	ed b5 00 04 	bld	r5,0x4
8000d3a2:	c4 80       	breq	8000d432 <_vfprintf_r+0xcbe>
8000d3a4:	e2 15 00 40 	andl	r5,0x40,COH
8000d3a8:	c4 50       	breq	8000d432 <_vfprintf_r+0xcbe>
8000d3aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d3ae:	40 3c       	lddsp	r12,sp[0xc]
8000d3b0:	58 0c       	cp.w	r12,0
8000d3b2:	c1 d0       	breq	8000d3ec <_vfprintf_r+0xc78>
8000d3b4:	10 36       	cp.w	r6,r8
8000d3b6:	c0 64       	brge	8000d3c2 <_vfprintf_r+0xc4e>
8000d3b8:	fa cb f9 44 	sub	r11,sp,-1724
8000d3bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d3c0:	c1 d8       	rjmp	8000d3fa <_vfprintf_r+0xc86>
8000d3c2:	fa c8 f9 50 	sub	r8,sp,-1712
8000d3c6:	1a d8       	st.w	--sp,r8
8000d3c8:	fa c8 fa b8 	sub	r8,sp,-1352
8000d3cc:	04 9a       	mov	r10,r2
8000d3ce:	1a d8       	st.w	--sp,r8
8000d3d0:	fa c8 fb b4 	sub	r8,sp,-1100
8000d3d4:	0c 9b       	mov	r11,r6
8000d3d6:	1a d8       	st.w	--sp,r8
8000d3d8:	08 9c       	mov	r12,r4
8000d3da:	fa c8 f9 40 	sub	r8,sp,-1728
8000d3de:	fa c9 ff b4 	sub	r9,sp,-76
8000d3e2:	f0 1f 01 39 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d3e6:	2f dd       	sub	sp,-12
8000d3e8:	78 0a       	ld.w	r10,r12[0x0]
8000d3ea:	c2 08       	rjmp	8000d42a <_vfprintf_r+0xcb6>
8000d3ec:	2f f7       	sub	r7,-1
8000d3ee:	10 39       	cp.w	r9,r8
8000d3f0:	c0 84       	brge	8000d400 <_vfprintf_r+0xc8c>
8000d3f2:	fa ca f9 44 	sub	r10,sp,-1724
8000d3f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d3fa:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d3fe:	c1 68       	rjmp	8000d42a <_vfprintf_r+0xcb6>
8000d400:	41 09       	lddsp	r9,sp[0x40]
8000d402:	59 f8       	cp.w	r8,31
8000d404:	e0 89 00 10 	brgt	8000d424 <_vfprintf_r+0xcb0>
8000d408:	f2 ca ff fc 	sub	r10,r9,-4
8000d40c:	51 0a       	stdsp	sp[0x40],r10
8000d40e:	fa c6 f9 44 	sub	r6,sp,-1724
8000d412:	72 0a       	ld.w	r10,r9[0x0]
8000d414:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d418:	f3 4a fd 88 	st.w	r9[-632],r10
8000d41c:	2f f8       	sub	r8,-1
8000d41e:	fb 48 06 b4 	st.w	sp[1716],r8
8000d422:	c0 48       	rjmp	8000d42a <_vfprintf_r+0xcb6>
8000d424:	72 0a       	ld.w	r10,r9[0x0]
8000d426:	2f c9       	sub	r9,-4
8000d428:	51 09       	stdsp	sp[0x40],r9
8000d42a:	40 be       	lddsp	lr,sp[0x2c]
8000d42c:	b4 0e       	st.h	r10[0x0],lr
8000d42e:	fe 9f fa 2f 	bral	8000c88c <_vfprintf_r+0x118>
8000d432:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d436:	40 3c       	lddsp	r12,sp[0xc]
8000d438:	58 0c       	cp.w	r12,0
8000d43a:	c1 d0       	breq	8000d474 <_vfprintf_r+0xd00>
8000d43c:	10 36       	cp.w	r6,r8
8000d43e:	c0 64       	brge	8000d44a <_vfprintf_r+0xcd6>
8000d440:	fa cb f9 44 	sub	r11,sp,-1724
8000d444:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d448:	c1 d8       	rjmp	8000d482 <_vfprintf_r+0xd0e>
8000d44a:	fa c8 f9 50 	sub	r8,sp,-1712
8000d44e:	1a d8       	st.w	--sp,r8
8000d450:	fa c8 fa b8 	sub	r8,sp,-1352
8000d454:	04 9a       	mov	r10,r2
8000d456:	1a d8       	st.w	--sp,r8
8000d458:	fa c8 fb b4 	sub	r8,sp,-1100
8000d45c:	0c 9b       	mov	r11,r6
8000d45e:	1a d8       	st.w	--sp,r8
8000d460:	08 9c       	mov	r12,r4
8000d462:	fa c8 f9 40 	sub	r8,sp,-1728
8000d466:	fa c9 ff b4 	sub	r9,sp,-76
8000d46a:	f0 1f 01 17 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d46e:	2f dd       	sub	sp,-12
8000d470:	78 0a       	ld.w	r10,r12[0x0]
8000d472:	c2 08       	rjmp	8000d4b2 <_vfprintf_r+0xd3e>
8000d474:	2f f7       	sub	r7,-1
8000d476:	10 39       	cp.w	r9,r8
8000d478:	c0 84       	brge	8000d488 <_vfprintf_r+0xd14>
8000d47a:	fa ca f9 44 	sub	r10,sp,-1724
8000d47e:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d482:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d486:	c1 68       	rjmp	8000d4b2 <_vfprintf_r+0xd3e>
8000d488:	41 09       	lddsp	r9,sp[0x40]
8000d48a:	59 f8       	cp.w	r8,31
8000d48c:	e0 89 00 10 	brgt	8000d4ac <_vfprintf_r+0xd38>
8000d490:	f2 ca ff fc 	sub	r10,r9,-4
8000d494:	51 0a       	stdsp	sp[0x40],r10
8000d496:	fa c6 f9 44 	sub	r6,sp,-1724
8000d49a:	72 0a       	ld.w	r10,r9[0x0]
8000d49c:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d4a0:	f3 4a fd 88 	st.w	r9[-632],r10
8000d4a4:	2f f8       	sub	r8,-1
8000d4a6:	fb 48 06 b4 	st.w	sp[1716],r8
8000d4aa:	c0 48       	rjmp	8000d4b2 <_vfprintf_r+0xd3e>
8000d4ac:	72 0a       	ld.w	r10,r9[0x0]
8000d4ae:	2f c9       	sub	r9,-4
8000d4b0:	51 09       	stdsp	sp[0x40],r9
8000d4b2:	40 be       	lddsp	lr,sp[0x2c]
8000d4b4:	95 0e       	st.w	r10[0x0],lr
8000d4b6:	fe 9f f9 eb 	bral	8000c88c <_vfprintf_r+0x118>
8000d4ba:	50 a7       	stdsp	sp[0x28],r7
8000d4bc:	50 80       	stdsp	sp[0x20],r0
8000d4be:	0c 97       	mov	r7,r6
8000d4c0:	04 94       	mov	r4,r2
8000d4c2:	06 96       	mov	r6,r3
8000d4c4:	02 92       	mov	r2,r1
8000d4c6:	40 93       	lddsp	r3,sp[0x24]
8000d4c8:	10 90       	mov	r0,r8
8000d4ca:	40 41       	lddsp	r1,sp[0x10]
8000d4cc:	a5 a5       	sbr	r5,0x4
8000d4ce:	c0 a8       	rjmp	8000d4e2 <_vfprintf_r+0xd6e>
8000d4d0:	50 a7       	stdsp	sp[0x28],r7
8000d4d2:	50 80       	stdsp	sp[0x20],r0
8000d4d4:	0c 97       	mov	r7,r6
8000d4d6:	04 94       	mov	r4,r2
8000d4d8:	06 96       	mov	r6,r3
8000d4da:	02 92       	mov	r2,r1
8000d4dc:	40 93       	lddsp	r3,sp[0x24]
8000d4de:	10 90       	mov	r0,r8
8000d4e0:	40 41       	lddsp	r1,sp[0x10]
8000d4e2:	ed b5 00 05 	bld	r5,0x5
8000d4e6:	c5 d1       	brne	8000d5a0 <_vfprintf_r+0xe2c>
8000d4e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d4ec:	40 3c       	lddsp	r12,sp[0xc]
8000d4ee:	58 0c       	cp.w	r12,0
8000d4f0:	c2 60       	breq	8000d53c <_vfprintf_r+0xdc8>
8000d4f2:	10 36       	cp.w	r6,r8
8000d4f4:	c0 a4       	brge	8000d508 <_vfprintf_r+0xd94>
8000d4f6:	fa cb f9 44 	sub	r11,sp,-1724
8000d4fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d4fe:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000d502:	fa e9 00 00 	st.d	sp[0],r8
8000d506:	c1 88       	rjmp	8000d536 <_vfprintf_r+0xdc2>
8000d508:	fa c8 f9 50 	sub	r8,sp,-1712
8000d50c:	1a d8       	st.w	--sp,r8
8000d50e:	fa c8 fa b8 	sub	r8,sp,-1352
8000d512:	04 9a       	mov	r10,r2
8000d514:	1a d8       	st.w	--sp,r8
8000d516:	0c 9b       	mov	r11,r6
8000d518:	fa c8 fb b4 	sub	r8,sp,-1100
8000d51c:	08 9c       	mov	r12,r4
8000d51e:	1a d8       	st.w	--sp,r8
8000d520:	fa c8 f9 40 	sub	r8,sp,-1728
8000d524:	fa c9 ff b4 	sub	r9,sp,-76
8000d528:	f0 1f 00 e7 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d52c:	2f dd       	sub	sp,-12
8000d52e:	f8 ea 00 00 	ld.d	r10,r12[0]
8000d532:	fa eb 00 00 	st.d	sp[0],r10
8000d536:	30 08       	mov	r8,0
8000d538:	e0 8f 03 e6 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d53c:	ee ca ff ff 	sub	r10,r7,-1
8000d540:	10 37       	cp.w	r7,r8
8000d542:	c0 b4       	brge	8000d558 <_vfprintf_r+0xde4>
8000d544:	fa c9 f9 44 	sub	r9,sp,-1724
8000d548:	14 97       	mov	r7,r10
8000d54a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d54e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000d552:	fa eb 00 00 	st.d	sp[0],r10
8000d556:	c1 88       	rjmp	8000d586 <_vfprintf_r+0xe12>
8000d558:	41 09       	lddsp	r9,sp[0x40]
8000d55a:	59 f8       	cp.w	r8,31
8000d55c:	e0 89 00 18 	brgt	8000d58c <_vfprintf_r+0xe18>
8000d560:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d564:	f2 cb ff f8 	sub	r11,r9,-8
8000d568:	fa e7 00 00 	st.d	sp[0],r6
8000d56c:	51 0b       	stdsp	sp[0x40],r11
8000d56e:	fa c6 f9 44 	sub	r6,sp,-1724
8000d572:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d576:	fa e6 00 00 	ld.d	r6,sp[0]
8000d57a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000d57e:	2f f8       	sub	r8,-1
8000d580:	14 97       	mov	r7,r10
8000d582:	fb 48 06 b4 	st.w	sp[1716],r8
8000d586:	40 38       	lddsp	r8,sp[0xc]
8000d588:	e0 8f 03 be 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d58c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d590:	40 38       	lddsp	r8,sp[0xc]
8000d592:	fa e7 00 00 	st.d	sp[0],r6
8000d596:	2f 89       	sub	r9,-8
8000d598:	14 97       	mov	r7,r10
8000d59a:	51 09       	stdsp	sp[0x40],r9
8000d59c:	e0 8f 03 b4 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d5a0:	ed b5 00 04 	bld	r5,0x4
8000d5a4:	c1 61       	brne	8000d5d0 <_vfprintf_r+0xe5c>
8000d5a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d5aa:	40 3e       	lddsp	lr,sp[0xc]
8000d5ac:	58 0e       	cp.w	lr,0
8000d5ae:	c0 80       	breq	8000d5be <_vfprintf_r+0xe4a>
8000d5b0:	10 36       	cp.w	r6,r8
8000d5b2:	c6 74       	brge	8000d680 <_vfprintf_r+0xf0c>
8000d5b4:	fa cc f9 44 	sub	r12,sp,-1724
8000d5b8:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d5bc:	c8 08       	rjmp	8000d6bc <_vfprintf_r+0xf48>
8000d5be:	ee ca ff ff 	sub	r10,r7,-1
8000d5c2:	10 37       	cp.w	r7,r8
8000d5c4:	c7 f4       	brge	8000d6c2 <_vfprintf_r+0xf4e>
8000d5c6:	fa cb f9 44 	sub	r11,sp,-1724
8000d5ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d5ce:	c7 68       	rjmp	8000d6ba <_vfprintf_r+0xf46>
8000d5d0:	ed b5 00 06 	bld	r5,0x6
8000d5d4:	c4 a1       	brne	8000d668 <_vfprintf_r+0xef4>
8000d5d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d5da:	40 3c       	lddsp	r12,sp[0xc]
8000d5dc:	58 0c       	cp.w	r12,0
8000d5de:	c1 d0       	breq	8000d618 <_vfprintf_r+0xea4>
8000d5e0:	10 36       	cp.w	r6,r8
8000d5e2:	c0 64       	brge	8000d5ee <_vfprintf_r+0xe7a>
8000d5e4:	fa cb f9 44 	sub	r11,sp,-1724
8000d5e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d5ec:	c1 f8       	rjmp	8000d62a <_vfprintf_r+0xeb6>
8000d5ee:	fa c8 f9 50 	sub	r8,sp,-1712
8000d5f2:	1a d8       	st.w	--sp,r8
8000d5f4:	fa c8 fa b8 	sub	r8,sp,-1352
8000d5f8:	1a d8       	st.w	--sp,r8
8000d5fa:	fa c8 fb b4 	sub	r8,sp,-1100
8000d5fe:	1a d8       	st.w	--sp,r8
8000d600:	fa c8 f9 40 	sub	r8,sp,-1728
8000d604:	fa c9 ff b4 	sub	r9,sp,-76
8000d608:	04 9a       	mov	r10,r2
8000d60a:	0c 9b       	mov	r11,r6
8000d60c:	08 9c       	mov	r12,r4
8000d60e:	f0 1f 00 ae 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d612:	2f dd       	sub	sp,-12
8000d614:	98 18       	ld.sh	r8,r12[0x2]
8000d616:	c2 68       	rjmp	8000d662 <_vfprintf_r+0xeee>
8000d618:	ee ca ff ff 	sub	r10,r7,-1
8000d61c:	10 37       	cp.w	r7,r8
8000d61e:	c0 94       	brge	8000d630 <_vfprintf_r+0xebc>
8000d620:	fa c9 f9 44 	sub	r9,sp,-1724
8000d624:	14 97       	mov	r7,r10
8000d626:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d62a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000d62e:	c1 a8       	rjmp	8000d662 <_vfprintf_r+0xeee>
8000d630:	41 09       	lddsp	r9,sp[0x40]
8000d632:	59 f8       	cp.w	r8,31
8000d634:	e0 89 00 13 	brgt	8000d65a <_vfprintf_r+0xee6>
8000d638:	f2 cb ff fc 	sub	r11,r9,-4
8000d63c:	51 0b       	stdsp	sp[0x40],r11
8000d63e:	72 09       	ld.w	r9,r9[0x0]
8000d640:	fa c6 f9 44 	sub	r6,sp,-1724
8000d644:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000d648:	2f f8       	sub	r8,-1
8000d64a:	f7 49 fd 88 	st.w	r11[-632],r9
8000d64e:	fb 48 06 b4 	st.w	sp[1716],r8
8000d652:	14 97       	mov	r7,r10
8000d654:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000d658:	c0 58       	rjmp	8000d662 <_vfprintf_r+0xeee>
8000d65a:	92 18       	ld.sh	r8,r9[0x2]
8000d65c:	14 97       	mov	r7,r10
8000d65e:	2f c9       	sub	r9,-4
8000d660:	51 09       	stdsp	sp[0x40],r9
8000d662:	5c 78       	castu.h	r8
8000d664:	50 18       	stdsp	sp[0x4],r8
8000d666:	c4 68       	rjmp	8000d6f2 <_vfprintf_r+0xf7e>
8000d668:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d66c:	40 3c       	lddsp	r12,sp[0xc]
8000d66e:	58 0c       	cp.w	r12,0
8000d670:	c1 d0       	breq	8000d6aa <_vfprintf_r+0xf36>
8000d672:	10 36       	cp.w	r6,r8
8000d674:	c0 64       	brge	8000d680 <_vfprintf_r+0xf0c>
8000d676:	fa cb f9 44 	sub	r11,sp,-1724
8000d67a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d67e:	c1 f8       	rjmp	8000d6bc <_vfprintf_r+0xf48>
8000d680:	fa c8 f9 50 	sub	r8,sp,-1712
8000d684:	1a d8       	st.w	--sp,r8
8000d686:	fa c8 fa b8 	sub	r8,sp,-1352
8000d68a:	0c 9b       	mov	r11,r6
8000d68c:	1a d8       	st.w	--sp,r8
8000d68e:	fa c8 fb b4 	sub	r8,sp,-1100
8000d692:	04 9a       	mov	r10,r2
8000d694:	1a d8       	st.w	--sp,r8
8000d696:	08 9c       	mov	r12,r4
8000d698:	fa c8 f9 40 	sub	r8,sp,-1728
8000d69c:	fa c9 ff b4 	sub	r9,sp,-76
8000d6a0:	f0 1f 00 89 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d6a4:	2f dd       	sub	sp,-12
8000d6a6:	78 0b       	ld.w	r11,r12[0x0]
8000d6a8:	c2 48       	rjmp	8000d6f0 <_vfprintf_r+0xf7c>
8000d6aa:	ee ca ff ff 	sub	r10,r7,-1
8000d6ae:	10 37       	cp.w	r7,r8
8000d6b0:	c0 94       	brge	8000d6c2 <_vfprintf_r+0xf4e>
8000d6b2:	fa c9 f9 44 	sub	r9,sp,-1724
8000d6b6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d6ba:	14 97       	mov	r7,r10
8000d6bc:	ec fb fd 88 	ld.w	r11,r6[-632]
8000d6c0:	c1 88       	rjmp	8000d6f0 <_vfprintf_r+0xf7c>
8000d6c2:	41 09       	lddsp	r9,sp[0x40]
8000d6c4:	59 f8       	cp.w	r8,31
8000d6c6:	e0 89 00 11 	brgt	8000d6e8 <_vfprintf_r+0xf74>
8000d6ca:	f2 cb ff fc 	sub	r11,r9,-4
8000d6ce:	51 0b       	stdsp	sp[0x40],r11
8000d6d0:	fa c6 f9 44 	sub	r6,sp,-1724
8000d6d4:	72 0b       	ld.w	r11,r9[0x0]
8000d6d6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d6da:	f3 4b fd 88 	st.w	r9[-632],r11
8000d6de:	2f f8       	sub	r8,-1
8000d6e0:	14 97       	mov	r7,r10
8000d6e2:	fb 48 06 b4 	st.w	sp[1716],r8
8000d6e6:	c0 58       	rjmp	8000d6f0 <_vfprintf_r+0xf7c>
8000d6e8:	72 0b       	ld.w	r11,r9[0x0]
8000d6ea:	14 97       	mov	r7,r10
8000d6ec:	2f c9       	sub	r9,-4
8000d6ee:	51 09       	stdsp	sp[0x40],r9
8000d6f0:	50 1b       	stdsp	sp[0x4],r11
8000d6f2:	30 0e       	mov	lr,0
8000d6f4:	50 0e       	stdsp	sp[0x0],lr
8000d6f6:	1c 98       	mov	r8,lr
8000d6f8:	e0 8f 03 06 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d6fc:	50 a7       	stdsp	sp[0x28],r7
8000d6fe:	50 80       	stdsp	sp[0x20],r0
8000d700:	0c 97       	mov	r7,r6
8000d702:	04 94       	mov	r4,r2
8000d704:	06 96       	mov	r6,r3
8000d706:	02 92       	mov	r2,r1
8000d708:	40 93       	lddsp	r3,sp[0x24]
8000d70a:	40 41       	lddsp	r1,sp[0x10]
8000d70c:	0e 99       	mov	r9,r7
8000d70e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d712:	40 3c       	lddsp	r12,sp[0xc]
8000d714:	58 0c       	cp.w	r12,0
8000d716:	c1 d0       	breq	8000d750 <_vfprintf_r+0xfdc>
8000d718:	10 36       	cp.w	r6,r8
8000d71a:	c0 64       	brge	8000d726 <_vfprintf_r+0xfb2>
8000d71c:	fa cb f9 44 	sub	r11,sp,-1724
8000d720:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d724:	c1 d8       	rjmp	8000d75e <_vfprintf_r+0xfea>
8000d726:	fa c8 f9 50 	sub	r8,sp,-1712
8000d72a:	1a d8       	st.w	--sp,r8
8000d72c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d730:	1a d8       	st.w	--sp,r8
8000d732:	fa c8 fb b4 	sub	r8,sp,-1100
8000d736:	1a d8       	st.w	--sp,r8
8000d738:	fa c9 ff b4 	sub	r9,sp,-76
8000d73c:	fa c8 f9 40 	sub	r8,sp,-1728
8000d740:	04 9a       	mov	r10,r2
8000d742:	0c 9b       	mov	r11,r6
8000d744:	08 9c       	mov	r12,r4
8000d746:	f0 1f 00 60 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d74a:	2f dd       	sub	sp,-12
8000d74c:	78 09       	ld.w	r9,r12[0x0]
8000d74e:	c2 18       	rjmp	8000d790 <_vfprintf_r+0x101c>
8000d750:	2f f7       	sub	r7,-1
8000d752:	10 39       	cp.w	r9,r8
8000d754:	c0 84       	brge	8000d764 <_vfprintf_r+0xff0>
8000d756:	fa ca f9 44 	sub	r10,sp,-1724
8000d75a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d75e:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000d762:	c1 78       	rjmp	8000d790 <_vfprintf_r+0x101c>
8000d764:	41 09       	lddsp	r9,sp[0x40]
8000d766:	59 f8       	cp.w	r8,31
8000d768:	e0 89 00 10 	brgt	8000d788 <_vfprintf_r+0x1014>
8000d76c:	f2 ca ff fc 	sub	r10,r9,-4
8000d770:	51 0a       	stdsp	sp[0x40],r10
8000d772:	fa c6 f9 44 	sub	r6,sp,-1724
8000d776:	72 09       	ld.w	r9,r9[0x0]
8000d778:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000d77c:	f5 49 fd 88 	st.w	r10[-632],r9
8000d780:	2f f8       	sub	r8,-1
8000d782:	fb 48 06 b4 	st.w	sp[1716],r8
8000d786:	c0 58       	rjmp	8000d790 <_vfprintf_r+0x101c>
8000d788:	f2 c8 ff fc 	sub	r8,r9,-4
8000d78c:	51 08       	stdsp	sp[0x40],r8
8000d78e:	72 09       	ld.w	r9,r9[0x0]
8000d790:	33 08       	mov	r8,48
8000d792:	fb 68 06 b8 	st.b	sp[1720],r8
8000d796:	37 88       	mov	r8,120
8000d798:	30 0e       	mov	lr,0
8000d79a:	fb 68 06 b9 	st.b	sp[1721],r8
8000d79e:	4c bc       	lddpc	r12,8000d8c8 <_vfprintf_r+0x1154>
8000d7a0:	50 19       	stdsp	sp[0x4],r9
8000d7a2:	a1 b5       	sbr	r5,0x1
8000d7a4:	50 0e       	stdsp	sp[0x0],lr
8000d7a6:	50 dc       	stdsp	sp[0x34],r12
8000d7a8:	30 28       	mov	r8,2
8000d7aa:	37 80       	mov	r0,120
8000d7ac:	e0 8f 02 ac 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d7b0:	50 a7       	stdsp	sp[0x28],r7
8000d7b2:	50 80       	stdsp	sp[0x20],r0
8000d7b4:	10 90       	mov	r0,r8
8000d7b6:	30 08       	mov	r8,0
8000d7b8:	fb 68 06 bb 	st.b	sp[1723],r8
8000d7bc:	0c 97       	mov	r7,r6
8000d7be:	04 94       	mov	r4,r2
8000d7c0:	06 96       	mov	r6,r3
8000d7c2:	02 92       	mov	r2,r1
8000d7c4:	40 93       	lddsp	r3,sp[0x24]
8000d7c6:	40 41       	lddsp	r1,sp[0x10]
8000d7c8:	0e 99       	mov	r9,r7
8000d7ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d7ce:	40 3b       	lddsp	r11,sp[0xc]
8000d7d0:	58 0b       	cp.w	r11,0
8000d7d2:	c1 d0       	breq	8000d80c <_vfprintf_r+0x1098>
8000d7d4:	10 36       	cp.w	r6,r8
8000d7d6:	c0 64       	brge	8000d7e2 <_vfprintf_r+0x106e>
8000d7d8:	fa ca f9 44 	sub	r10,sp,-1724
8000d7dc:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d7e0:	c1 d8       	rjmp	8000d81a <_vfprintf_r+0x10a6>
8000d7e2:	fa c8 f9 50 	sub	r8,sp,-1712
8000d7e6:	1a d8       	st.w	--sp,r8
8000d7e8:	fa c8 fa b8 	sub	r8,sp,-1352
8000d7ec:	1a d8       	st.w	--sp,r8
8000d7ee:	fa c8 fb b4 	sub	r8,sp,-1100
8000d7f2:	0c 9b       	mov	r11,r6
8000d7f4:	1a d8       	st.w	--sp,r8
8000d7f6:	04 9a       	mov	r10,r2
8000d7f8:	fa c8 f9 40 	sub	r8,sp,-1728
8000d7fc:	fa c9 ff b4 	sub	r9,sp,-76
8000d800:	08 9c       	mov	r12,r4
8000d802:	f0 1f 00 31 	mcall	8000d8c4 <_vfprintf_r+0x1150>
8000d806:	2f dd       	sub	sp,-12
8000d808:	78 06       	ld.w	r6,r12[0x0]
8000d80a:	c2 08       	rjmp	8000d84a <_vfprintf_r+0x10d6>
8000d80c:	2f f7       	sub	r7,-1
8000d80e:	10 39       	cp.w	r9,r8
8000d810:	c0 84       	brge	8000d820 <_vfprintf_r+0x10ac>
8000d812:	fa c9 f9 44 	sub	r9,sp,-1724
8000d816:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d81a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000d81e:	c1 68       	rjmp	8000d84a <_vfprintf_r+0x10d6>
8000d820:	41 09       	lddsp	r9,sp[0x40]
8000d822:	59 f8       	cp.w	r8,31
8000d824:	e0 89 00 10 	brgt	8000d844 <_vfprintf_r+0x10d0>
8000d828:	f2 ca ff fc 	sub	r10,r9,-4
8000d82c:	51 0a       	stdsp	sp[0x40],r10
8000d82e:	72 06       	ld.w	r6,r9[0x0]
8000d830:	fa ce f9 44 	sub	lr,sp,-1724
8000d834:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000d838:	f3 46 fd 88 	st.w	r9[-632],r6
8000d83c:	2f f8       	sub	r8,-1
8000d83e:	fb 48 06 b4 	st.w	sp[1716],r8
8000d842:	c0 48       	rjmp	8000d84a <_vfprintf_r+0x10d6>
8000d844:	72 06       	ld.w	r6,r9[0x0]
8000d846:	2f c9       	sub	r9,-4
8000d848:	51 09       	stdsp	sp[0x40],r9
8000d84a:	40 2c       	lddsp	r12,sp[0x8]
8000d84c:	58 0c       	cp.w	r12,0
8000d84e:	c1 05       	brlt	8000d86e <_vfprintf_r+0x10fa>
8000d850:	18 9a       	mov	r10,r12
8000d852:	30 0b       	mov	r11,0
8000d854:	0c 9c       	mov	r12,r6
8000d856:	f0 1f 00 1e 	mcall	8000d8cc <_vfprintf_r+0x1158>
8000d85a:	e0 80 02 e8 	breq	8000de2a <_vfprintf_r+0x16b6>
8000d85e:	f8 06 01 02 	sub	r2,r12,r6
8000d862:	40 2b       	lddsp	r11,sp[0x8]
8000d864:	16 32       	cp.w	r2,r11
8000d866:	e0 89 02 e2 	brgt	8000de2a <_vfprintf_r+0x16b6>
8000d86a:	e0 8f 02 dd 	bral	8000de24 <_vfprintf_r+0x16b0>
8000d86e:	30 0a       	mov	r10,0
8000d870:	0c 9c       	mov	r12,r6
8000d872:	50 2a       	stdsp	sp[0x8],r10
8000d874:	f0 1f 00 17 	mcall	8000d8d0 <_vfprintf_r+0x115c>
8000d878:	18 92       	mov	r2,r12
8000d87a:	e0 8f 02 db 	bral	8000de30 <_vfprintf_r+0x16bc>
8000d87e:	50 a7       	stdsp	sp[0x28],r7
8000d880:	50 80       	stdsp	sp[0x20],r0
8000d882:	0c 97       	mov	r7,r6
8000d884:	04 94       	mov	r4,r2
8000d886:	06 96       	mov	r6,r3
8000d888:	02 92       	mov	r2,r1
8000d88a:	40 93       	lddsp	r3,sp[0x24]
8000d88c:	10 90       	mov	r0,r8
8000d88e:	40 41       	lddsp	r1,sp[0x10]
8000d890:	a5 a5       	sbr	r5,0x4
8000d892:	c0 a8       	rjmp	8000d8a6 <_vfprintf_r+0x1132>
8000d894:	50 a7       	stdsp	sp[0x28],r7
8000d896:	50 80       	stdsp	sp[0x20],r0
8000d898:	0c 97       	mov	r7,r6
8000d89a:	04 94       	mov	r4,r2
8000d89c:	06 96       	mov	r6,r3
8000d89e:	02 92       	mov	r2,r1
8000d8a0:	40 93       	lddsp	r3,sp[0x24]
8000d8a2:	10 90       	mov	r0,r8
8000d8a4:	40 41       	lddsp	r1,sp[0x10]
8000d8a6:	ed b5 00 05 	bld	r5,0x5
8000d8aa:	c5 d1       	brne	8000d964 <_vfprintf_r+0x11f0>
8000d8ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d8b0:	40 39       	lddsp	r9,sp[0xc]
8000d8b2:	58 09       	cp.w	r9,0
8000d8b4:	c2 80       	breq	8000d904 <_vfprintf_r+0x1190>
8000d8b6:	10 36       	cp.w	r6,r8
8000d8b8:	c0 e4       	brge	8000d8d4 <_vfprintf_r+0x1160>
8000d8ba:	fa c8 f9 44 	sub	r8,sp,-1724
8000d8be:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000d8c2:	c2 a8       	rjmp	8000d916 <_vfprintf_r+0x11a2>
8000d8c4:	80 00       	ld.sh	r0,r0[0x0]
8000d8c6:	c4 30       	breq	8000d94c <_vfprintf_r+0x11d8>
8000d8c8:	80 01       	ld.sh	r1,r0[0x0]
8000d8ca:	1d dc       	ld.ub	r12,lr[0x5]
8000d8cc:	80 00       	ld.sh	r0,r0[0x0]
8000d8ce:	bb 7c       	lsl	r12,0x1b
8000d8d0:	80 00       	ld.sh	r0,r0[0x0]
8000d8d2:	c2 9e       	rcall	8000d524 <_vfprintf_r+0xdb0>
8000d8d4:	fa c8 f9 50 	sub	r8,sp,-1712
8000d8d8:	1a d8       	st.w	--sp,r8
8000d8da:	fa c8 fa b8 	sub	r8,sp,-1352
8000d8de:	1a d8       	st.w	--sp,r8
8000d8e0:	fa c8 fb b4 	sub	r8,sp,-1100
8000d8e4:	1a d8       	st.w	--sp,r8
8000d8e6:	fa c8 f9 40 	sub	r8,sp,-1728
8000d8ea:	fa c9 ff b4 	sub	r9,sp,-76
8000d8ee:	04 9a       	mov	r10,r2
8000d8f0:	0c 9b       	mov	r11,r6
8000d8f2:	08 9c       	mov	r12,r4
8000d8f4:	f0 1f 00 c8 	mcall	8000dc14 <_vfprintf_r+0x14a0>
8000d8f8:	2f dd       	sub	sp,-12
8000d8fa:	f8 e8 00 00 	ld.d	r8,r12[0]
8000d8fe:	fa e9 00 00 	st.d	sp[0],r8
8000d902:	c2 e8       	rjmp	8000d95e <_vfprintf_r+0x11ea>
8000d904:	ee ca ff ff 	sub	r10,r7,-1
8000d908:	10 37       	cp.w	r7,r8
8000d90a:	c0 b4       	brge	8000d920 <_vfprintf_r+0x11ac>
8000d90c:	fa c8 f9 44 	sub	r8,sp,-1724
8000d910:	14 97       	mov	r7,r10
8000d912:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000d916:	ec ea fd 88 	ld.d	r10,r6[-632]
8000d91a:	fa eb 00 00 	st.d	sp[0],r10
8000d91e:	c2 08       	rjmp	8000d95e <_vfprintf_r+0x11ea>
8000d920:	41 09       	lddsp	r9,sp[0x40]
8000d922:	59 f8       	cp.w	r8,31
8000d924:	e0 89 00 16 	brgt	8000d950 <_vfprintf_r+0x11dc>
8000d928:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d92c:	f2 cb ff f8 	sub	r11,r9,-8
8000d930:	fa e7 00 00 	st.d	sp[0],r6
8000d934:	51 0b       	stdsp	sp[0x40],r11
8000d936:	fa c6 f9 44 	sub	r6,sp,-1724
8000d93a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d93e:	fa e6 00 00 	ld.d	r6,sp[0]
8000d942:	f2 e7 fd 88 	st.d	r9[-632],r6
8000d946:	2f f8       	sub	r8,-1
8000d948:	14 97       	mov	r7,r10
8000d94a:	fb 48 06 b4 	st.w	sp[1716],r8
8000d94e:	c0 88       	rjmp	8000d95e <_vfprintf_r+0x11ea>
8000d950:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d954:	2f 89       	sub	r9,-8
8000d956:	fa e7 00 00 	st.d	sp[0],r6
8000d95a:	51 09       	stdsp	sp[0x40],r9
8000d95c:	14 97       	mov	r7,r10
8000d95e:	30 18       	mov	r8,1
8000d960:	e0 8f 01 d2 	bral	8000dd04 <_vfprintf_r+0x1590>
8000d964:	ed b5 00 04 	bld	r5,0x4
8000d968:	c1 61       	brne	8000d994 <_vfprintf_r+0x1220>
8000d96a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d96e:	40 3e       	lddsp	lr,sp[0xc]
8000d970:	58 0e       	cp.w	lr,0
8000d972:	c0 80       	breq	8000d982 <_vfprintf_r+0x120e>
8000d974:	10 36       	cp.w	r6,r8
8000d976:	c6 74       	brge	8000da44 <_vfprintf_r+0x12d0>
8000d978:	fa cc f9 44 	sub	r12,sp,-1724
8000d97c:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d980:	c8 08       	rjmp	8000da80 <_vfprintf_r+0x130c>
8000d982:	ee ca ff ff 	sub	r10,r7,-1
8000d986:	10 37       	cp.w	r7,r8
8000d988:	c7 f4       	brge	8000da86 <_vfprintf_r+0x1312>
8000d98a:	fa cb f9 44 	sub	r11,sp,-1724
8000d98e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d992:	c7 68       	rjmp	8000da7e <_vfprintf_r+0x130a>
8000d994:	ed b5 00 06 	bld	r5,0x6
8000d998:	c4 a1       	brne	8000da2c <_vfprintf_r+0x12b8>
8000d99a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d99e:	40 3c       	lddsp	r12,sp[0xc]
8000d9a0:	58 0c       	cp.w	r12,0
8000d9a2:	c1 d0       	breq	8000d9dc <_vfprintf_r+0x1268>
8000d9a4:	10 36       	cp.w	r6,r8
8000d9a6:	c0 64       	brge	8000d9b2 <_vfprintf_r+0x123e>
8000d9a8:	fa cb f9 44 	sub	r11,sp,-1724
8000d9ac:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d9b0:	c1 f8       	rjmp	8000d9ee <_vfprintf_r+0x127a>
8000d9b2:	fa c8 f9 50 	sub	r8,sp,-1712
8000d9b6:	1a d8       	st.w	--sp,r8
8000d9b8:	fa c8 fa b8 	sub	r8,sp,-1352
8000d9bc:	1a d8       	st.w	--sp,r8
8000d9be:	fa c8 fb b4 	sub	r8,sp,-1100
8000d9c2:	1a d8       	st.w	--sp,r8
8000d9c4:	fa c8 f9 40 	sub	r8,sp,-1728
8000d9c8:	fa c9 ff b4 	sub	r9,sp,-76
8000d9cc:	04 9a       	mov	r10,r2
8000d9ce:	0c 9b       	mov	r11,r6
8000d9d0:	08 9c       	mov	r12,r4
8000d9d2:	f0 1f 00 91 	mcall	8000dc14 <_vfprintf_r+0x14a0>
8000d9d6:	2f dd       	sub	sp,-12
8000d9d8:	98 18       	ld.sh	r8,r12[0x2]
8000d9da:	c2 68       	rjmp	8000da26 <_vfprintf_r+0x12b2>
8000d9dc:	ee ca ff ff 	sub	r10,r7,-1
8000d9e0:	10 37       	cp.w	r7,r8
8000d9e2:	c0 94       	brge	8000d9f4 <_vfprintf_r+0x1280>
8000d9e4:	fa c9 f9 44 	sub	r9,sp,-1724
8000d9e8:	14 97       	mov	r7,r10
8000d9ea:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d9ee:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000d9f2:	c1 a8       	rjmp	8000da26 <_vfprintf_r+0x12b2>
8000d9f4:	41 09       	lddsp	r9,sp[0x40]
8000d9f6:	59 f8       	cp.w	r8,31
8000d9f8:	e0 89 00 13 	brgt	8000da1e <_vfprintf_r+0x12aa>
8000d9fc:	f2 cb ff fc 	sub	r11,r9,-4
8000da00:	51 0b       	stdsp	sp[0x40],r11
8000da02:	72 09       	ld.w	r9,r9[0x0]
8000da04:	fa c6 f9 44 	sub	r6,sp,-1724
8000da08:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000da0c:	2f f8       	sub	r8,-1
8000da0e:	f7 49 fd 88 	st.w	r11[-632],r9
8000da12:	fb 48 06 b4 	st.w	sp[1716],r8
8000da16:	14 97       	mov	r7,r10
8000da18:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000da1c:	c0 58       	rjmp	8000da26 <_vfprintf_r+0x12b2>
8000da1e:	92 18       	ld.sh	r8,r9[0x2]
8000da20:	14 97       	mov	r7,r10
8000da22:	2f c9       	sub	r9,-4
8000da24:	51 09       	stdsp	sp[0x40],r9
8000da26:	5c 78       	castu.h	r8
8000da28:	50 18       	stdsp	sp[0x4],r8
8000da2a:	c4 68       	rjmp	8000dab6 <_vfprintf_r+0x1342>
8000da2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000da30:	40 3c       	lddsp	r12,sp[0xc]
8000da32:	58 0c       	cp.w	r12,0
8000da34:	c1 d0       	breq	8000da6e <_vfprintf_r+0x12fa>
8000da36:	10 36       	cp.w	r6,r8
8000da38:	c0 64       	brge	8000da44 <_vfprintf_r+0x12d0>
8000da3a:	fa cb f9 44 	sub	r11,sp,-1724
8000da3e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000da42:	c1 f8       	rjmp	8000da80 <_vfprintf_r+0x130c>
8000da44:	fa c8 f9 50 	sub	r8,sp,-1712
8000da48:	1a d8       	st.w	--sp,r8
8000da4a:	fa c8 fa b8 	sub	r8,sp,-1352
8000da4e:	0c 9b       	mov	r11,r6
8000da50:	1a d8       	st.w	--sp,r8
8000da52:	fa c8 fb b4 	sub	r8,sp,-1100
8000da56:	04 9a       	mov	r10,r2
8000da58:	1a d8       	st.w	--sp,r8
8000da5a:	08 9c       	mov	r12,r4
8000da5c:	fa c8 f9 40 	sub	r8,sp,-1728
8000da60:	fa c9 ff b4 	sub	r9,sp,-76
8000da64:	f0 1f 00 6c 	mcall	8000dc14 <_vfprintf_r+0x14a0>
8000da68:	2f dd       	sub	sp,-12
8000da6a:	78 0b       	ld.w	r11,r12[0x0]
8000da6c:	c2 48       	rjmp	8000dab4 <_vfprintf_r+0x1340>
8000da6e:	ee ca ff ff 	sub	r10,r7,-1
8000da72:	10 37       	cp.w	r7,r8
8000da74:	c0 94       	brge	8000da86 <_vfprintf_r+0x1312>
8000da76:	fa c9 f9 44 	sub	r9,sp,-1724
8000da7a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000da7e:	14 97       	mov	r7,r10
8000da80:	ec fb fd 88 	ld.w	r11,r6[-632]
8000da84:	c1 88       	rjmp	8000dab4 <_vfprintf_r+0x1340>
8000da86:	41 09       	lddsp	r9,sp[0x40]
8000da88:	59 f8       	cp.w	r8,31
8000da8a:	e0 89 00 11 	brgt	8000daac <_vfprintf_r+0x1338>
8000da8e:	f2 cb ff fc 	sub	r11,r9,-4
8000da92:	51 0b       	stdsp	sp[0x40],r11
8000da94:	fa c6 f9 44 	sub	r6,sp,-1724
8000da98:	72 0b       	ld.w	r11,r9[0x0]
8000da9a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000da9e:	f3 4b fd 88 	st.w	r9[-632],r11
8000daa2:	2f f8       	sub	r8,-1
8000daa4:	14 97       	mov	r7,r10
8000daa6:	fb 48 06 b4 	st.w	sp[1716],r8
8000daaa:	c0 58       	rjmp	8000dab4 <_vfprintf_r+0x1340>
8000daac:	72 0b       	ld.w	r11,r9[0x0]
8000daae:	14 97       	mov	r7,r10
8000dab0:	2f c9       	sub	r9,-4
8000dab2:	51 09       	stdsp	sp[0x40],r9
8000dab4:	50 1b       	stdsp	sp[0x4],r11
8000dab6:	30 0e       	mov	lr,0
8000dab8:	30 18       	mov	r8,1
8000daba:	50 0e       	stdsp	sp[0x0],lr
8000dabc:	c2 49       	rjmp	8000dd04 <_vfprintf_r+0x1590>
8000dabe:	50 a7       	stdsp	sp[0x28],r7
8000dac0:	50 80       	stdsp	sp[0x20],r0
8000dac2:	0c 97       	mov	r7,r6
8000dac4:	04 94       	mov	r4,r2
8000dac6:	06 96       	mov	r6,r3
8000dac8:	02 92       	mov	r2,r1
8000daca:	4d 4c       	lddpc	r12,8000dc18 <_vfprintf_r+0x14a4>
8000dacc:	40 93       	lddsp	r3,sp[0x24]
8000dace:	10 90       	mov	r0,r8
8000dad0:	40 41       	lddsp	r1,sp[0x10]
8000dad2:	50 dc       	stdsp	sp[0x34],r12
8000dad4:	ed b5 00 05 	bld	r5,0x5
8000dad8:	c5 51       	brne	8000db82 <_vfprintf_r+0x140e>
8000dada:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dade:	40 3b       	lddsp	r11,sp[0xc]
8000dae0:	58 0b       	cp.w	r11,0
8000dae2:	c2 20       	breq	8000db26 <_vfprintf_r+0x13b2>
8000dae4:	10 36       	cp.w	r6,r8
8000dae6:	c0 a4       	brge	8000dafa <_vfprintf_r+0x1386>
8000dae8:	fa ca f9 44 	sub	r10,sp,-1724
8000daec:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000daf0:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000daf4:	fa e9 00 00 	st.d	sp[0],r8
8000daf8:	cf 58       	rjmp	8000dce2 <_vfprintf_r+0x156e>
8000dafa:	fa c8 f9 50 	sub	r8,sp,-1712
8000dafe:	1a d8       	st.w	--sp,r8
8000db00:	fa c8 fa b8 	sub	r8,sp,-1352
8000db04:	04 9a       	mov	r10,r2
8000db06:	1a d8       	st.w	--sp,r8
8000db08:	0c 9b       	mov	r11,r6
8000db0a:	fa c8 fb b4 	sub	r8,sp,-1100
8000db0e:	08 9c       	mov	r12,r4
8000db10:	1a d8       	st.w	--sp,r8
8000db12:	fa c8 f9 40 	sub	r8,sp,-1728
8000db16:	fa c9 ff b4 	sub	r9,sp,-76
8000db1a:	f0 1f 00 3f 	mcall	8000dc14 <_vfprintf_r+0x14a0>
8000db1e:	2f dd       	sub	sp,-12
8000db20:	f8 ea 00 00 	ld.d	r10,r12[0]
8000db24:	c0 c8       	rjmp	8000db3c <_vfprintf_r+0x13c8>
8000db26:	ee ca ff ff 	sub	r10,r7,-1
8000db2a:	10 37       	cp.w	r7,r8
8000db2c:	c0 b4       	brge	8000db42 <_vfprintf_r+0x13ce>
8000db2e:	fa c9 f9 44 	sub	r9,sp,-1724
8000db32:	14 97       	mov	r7,r10
8000db34:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000db38:	ec ea fd 88 	ld.d	r10,r6[-632]
8000db3c:	fa eb 00 00 	st.d	sp[0],r10
8000db40:	cd 18       	rjmp	8000dce2 <_vfprintf_r+0x156e>
8000db42:	41 09       	lddsp	r9,sp[0x40]
8000db44:	59 f8       	cp.w	r8,31
8000db46:	e0 89 00 16 	brgt	8000db72 <_vfprintf_r+0x13fe>
8000db4a:	f2 e6 00 00 	ld.d	r6,r9[0]
8000db4e:	f2 cb ff f8 	sub	r11,r9,-8
8000db52:	fa e7 00 00 	st.d	sp[0],r6
8000db56:	51 0b       	stdsp	sp[0x40],r11
8000db58:	fa c6 f9 44 	sub	r6,sp,-1724
8000db5c:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000db60:	fa e6 00 00 	ld.d	r6,sp[0]
8000db64:	f2 e7 fd 88 	st.d	r9[-632],r6
8000db68:	2f f8       	sub	r8,-1
8000db6a:	14 97       	mov	r7,r10
8000db6c:	fb 48 06 b4 	st.w	sp[1716],r8
8000db70:	cb 98       	rjmp	8000dce2 <_vfprintf_r+0x156e>
8000db72:	f2 e6 00 00 	ld.d	r6,r9[0]
8000db76:	2f 89       	sub	r9,-8
8000db78:	fa e7 00 00 	st.d	sp[0],r6
8000db7c:	51 09       	stdsp	sp[0x40],r9
8000db7e:	14 97       	mov	r7,r10
8000db80:	cb 18       	rjmp	8000dce2 <_vfprintf_r+0x156e>
8000db82:	ed b5 00 04 	bld	r5,0x4
8000db86:	c1 71       	brne	8000dbb4 <_vfprintf_r+0x1440>
8000db88:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000db8c:	40 3e       	lddsp	lr,sp[0xc]
8000db8e:	58 0e       	cp.w	lr,0
8000db90:	c0 80       	breq	8000dba0 <_vfprintf_r+0x142c>
8000db92:	10 36       	cp.w	r6,r8
8000db94:	c6 c4       	brge	8000dc6c <_vfprintf_r+0x14f8>
8000db96:	fa cc f9 44 	sub	r12,sp,-1724
8000db9a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000db9e:	c8 58       	rjmp	8000dca8 <_vfprintf_r+0x1534>
8000dba0:	ee ca ff ff 	sub	r10,r7,-1
8000dba4:	10 37       	cp.w	r7,r8
8000dba6:	e0 84 00 84 	brge	8000dcae <_vfprintf_r+0x153a>
8000dbaa:	fa cb f9 44 	sub	r11,sp,-1724
8000dbae:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dbb2:	c7 a8       	rjmp	8000dca6 <_vfprintf_r+0x1532>
8000dbb4:	ed b5 00 06 	bld	r5,0x6
8000dbb8:	c4 e1       	brne	8000dc54 <_vfprintf_r+0x14e0>
8000dbba:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dbbe:	40 3c       	lddsp	r12,sp[0xc]
8000dbc0:	58 0c       	cp.w	r12,0
8000dbc2:	c1 d0       	breq	8000dbfc <_vfprintf_r+0x1488>
8000dbc4:	10 36       	cp.w	r6,r8
8000dbc6:	c0 64       	brge	8000dbd2 <_vfprintf_r+0x145e>
8000dbc8:	fa cb f9 44 	sub	r11,sp,-1724
8000dbcc:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dbd0:	c1 f8       	rjmp	8000dc0e <_vfprintf_r+0x149a>
8000dbd2:	fa c8 f9 50 	sub	r8,sp,-1712
8000dbd6:	1a d8       	st.w	--sp,r8
8000dbd8:	fa c8 fa b8 	sub	r8,sp,-1352
8000dbdc:	1a d8       	st.w	--sp,r8
8000dbde:	fa c8 fb b4 	sub	r8,sp,-1100
8000dbe2:	1a d8       	st.w	--sp,r8
8000dbe4:	fa c8 f9 40 	sub	r8,sp,-1728
8000dbe8:	fa c9 ff b4 	sub	r9,sp,-76
8000dbec:	04 9a       	mov	r10,r2
8000dbee:	0c 9b       	mov	r11,r6
8000dbf0:	08 9c       	mov	r12,r4
8000dbf2:	f0 1f 00 09 	mcall	8000dc14 <_vfprintf_r+0x14a0>
8000dbf6:	2f dd       	sub	sp,-12
8000dbf8:	98 18       	ld.sh	r8,r12[0x2]
8000dbfa:	c2 a8       	rjmp	8000dc4e <_vfprintf_r+0x14da>
8000dbfc:	ee ca ff ff 	sub	r10,r7,-1
8000dc00:	10 37       	cp.w	r7,r8
8000dc02:	c0 d4       	brge	8000dc1c <_vfprintf_r+0x14a8>
8000dc04:	fa c9 f9 44 	sub	r9,sp,-1724
8000dc08:	14 97       	mov	r7,r10
8000dc0a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dc0e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000dc12:	c1 e8       	rjmp	8000dc4e <_vfprintf_r+0x14da>
8000dc14:	80 00       	ld.sh	r0,r0[0x0]
8000dc16:	c4 30       	breq	8000dc9c <_vfprintf_r+0x1528>
8000dc18:	80 01       	ld.sh	r1,r0[0x0]
8000dc1a:	1d dc       	ld.ub	r12,lr[0x5]
8000dc1c:	41 09       	lddsp	r9,sp[0x40]
8000dc1e:	59 f8       	cp.w	r8,31
8000dc20:	e0 89 00 13 	brgt	8000dc46 <_vfprintf_r+0x14d2>
8000dc24:	f2 cb ff fc 	sub	r11,r9,-4
8000dc28:	51 0b       	stdsp	sp[0x40],r11
8000dc2a:	72 09       	ld.w	r9,r9[0x0]
8000dc2c:	fa c6 f9 44 	sub	r6,sp,-1724
8000dc30:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000dc34:	2f f8       	sub	r8,-1
8000dc36:	f7 49 fd 88 	st.w	r11[-632],r9
8000dc3a:	fb 48 06 b4 	st.w	sp[1716],r8
8000dc3e:	14 97       	mov	r7,r10
8000dc40:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000dc44:	c0 58       	rjmp	8000dc4e <_vfprintf_r+0x14da>
8000dc46:	92 18       	ld.sh	r8,r9[0x2]
8000dc48:	14 97       	mov	r7,r10
8000dc4a:	2f c9       	sub	r9,-4
8000dc4c:	51 09       	stdsp	sp[0x40],r9
8000dc4e:	5c 78       	castu.h	r8
8000dc50:	50 18       	stdsp	sp[0x4],r8
8000dc52:	c4 68       	rjmp	8000dcde <_vfprintf_r+0x156a>
8000dc54:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dc58:	40 3c       	lddsp	r12,sp[0xc]
8000dc5a:	58 0c       	cp.w	r12,0
8000dc5c:	c1 d0       	breq	8000dc96 <_vfprintf_r+0x1522>
8000dc5e:	10 36       	cp.w	r6,r8
8000dc60:	c0 64       	brge	8000dc6c <_vfprintf_r+0x14f8>
8000dc62:	fa cb f9 44 	sub	r11,sp,-1724
8000dc66:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dc6a:	c1 f8       	rjmp	8000dca8 <_vfprintf_r+0x1534>
8000dc6c:	fa c8 f9 50 	sub	r8,sp,-1712
8000dc70:	1a d8       	st.w	--sp,r8
8000dc72:	fa c8 fa b8 	sub	r8,sp,-1352
8000dc76:	0c 9b       	mov	r11,r6
8000dc78:	1a d8       	st.w	--sp,r8
8000dc7a:	fa c8 fb b4 	sub	r8,sp,-1100
8000dc7e:	04 9a       	mov	r10,r2
8000dc80:	1a d8       	st.w	--sp,r8
8000dc82:	08 9c       	mov	r12,r4
8000dc84:	fa c8 f9 40 	sub	r8,sp,-1728
8000dc88:	fa c9 ff b4 	sub	r9,sp,-76
8000dc8c:	f0 1f 00 cb 	mcall	8000dfb8 <_vfprintf_r+0x1844>
8000dc90:	2f dd       	sub	sp,-12
8000dc92:	78 0b       	ld.w	r11,r12[0x0]
8000dc94:	c2 48       	rjmp	8000dcdc <_vfprintf_r+0x1568>
8000dc96:	ee ca ff ff 	sub	r10,r7,-1
8000dc9a:	10 37       	cp.w	r7,r8
8000dc9c:	c0 94       	brge	8000dcae <_vfprintf_r+0x153a>
8000dc9e:	fa c9 f9 44 	sub	r9,sp,-1724
8000dca2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dca6:	14 97       	mov	r7,r10
8000dca8:	ec fb fd 88 	ld.w	r11,r6[-632]
8000dcac:	c1 88       	rjmp	8000dcdc <_vfprintf_r+0x1568>
8000dcae:	41 09       	lddsp	r9,sp[0x40]
8000dcb0:	59 f8       	cp.w	r8,31
8000dcb2:	e0 89 00 11 	brgt	8000dcd4 <_vfprintf_r+0x1560>
8000dcb6:	f2 cb ff fc 	sub	r11,r9,-4
8000dcba:	51 0b       	stdsp	sp[0x40],r11
8000dcbc:	fa c6 f9 44 	sub	r6,sp,-1724
8000dcc0:	72 0b       	ld.w	r11,r9[0x0]
8000dcc2:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dcc6:	f3 4b fd 88 	st.w	r9[-632],r11
8000dcca:	2f f8       	sub	r8,-1
8000dccc:	14 97       	mov	r7,r10
8000dcce:	fb 48 06 b4 	st.w	sp[1716],r8
8000dcd2:	c0 58       	rjmp	8000dcdc <_vfprintf_r+0x1568>
8000dcd4:	72 0b       	ld.w	r11,r9[0x0]
8000dcd6:	14 97       	mov	r7,r10
8000dcd8:	2f c9       	sub	r9,-4
8000dcda:	51 09       	stdsp	sp[0x40],r9
8000dcdc:	50 1b       	stdsp	sp[0x4],r11
8000dcde:	30 0e       	mov	lr,0
8000dce0:	50 0e       	stdsp	sp[0x0],lr
8000dce2:	40 08       	lddsp	r8,sp[0x0]
8000dce4:	40 1c       	lddsp	r12,sp[0x4]
8000dce6:	18 48       	or	r8,r12
8000dce8:	5f 19       	srne	r9
8000dcea:	0a 98       	mov	r8,r5
8000dcec:	eb e9 00 09 	and	r9,r5,r9
8000dcf0:	a1 b8       	sbr	r8,0x1
8000dcf2:	58 09       	cp.w	r9,0
8000dcf4:	c0 70       	breq	8000dd02 <_vfprintf_r+0x158e>
8000dcf6:	10 95       	mov	r5,r8
8000dcf8:	fb 60 06 b9 	st.b	sp[1721],r0
8000dcfc:	33 08       	mov	r8,48
8000dcfe:	fb 68 06 b8 	st.b	sp[1720],r8
8000dd02:	30 28       	mov	r8,2
8000dd04:	30 09       	mov	r9,0
8000dd06:	fb 69 06 bb 	st.b	sp[1723],r9
8000dd0a:	0a 99       	mov	r9,r5
8000dd0c:	a7 d9       	cbr	r9,0x7
8000dd0e:	40 2b       	lddsp	r11,sp[0x8]
8000dd10:	40 16       	lddsp	r6,sp[0x4]
8000dd12:	58 0b       	cp.w	r11,0
8000dd14:	5f 1a       	srne	r10
8000dd16:	f2 05 17 40 	movge	r5,r9
8000dd1a:	fa c2 f9 78 	sub	r2,sp,-1672
8000dd1e:	40 09       	lddsp	r9,sp[0x0]
8000dd20:	0c 49       	or	r9,r6
8000dd22:	5f 19       	srne	r9
8000dd24:	f5 e9 10 09 	or	r9,r10,r9
8000dd28:	c5 c0       	breq	8000dde0 <_vfprintf_r+0x166c>
8000dd2a:	30 19       	mov	r9,1
8000dd2c:	f2 08 18 00 	cp.b	r8,r9
8000dd30:	c0 60       	breq	8000dd3c <_vfprintf_r+0x15c8>
8000dd32:	30 29       	mov	r9,2
8000dd34:	f2 08 18 00 	cp.b	r8,r9
8000dd38:	c0 41       	brne	8000dd40 <_vfprintf_r+0x15cc>
8000dd3a:	c3 c8       	rjmp	8000ddb2 <_vfprintf_r+0x163e>
8000dd3c:	04 96       	mov	r6,r2
8000dd3e:	c3 08       	rjmp	8000dd9e <_vfprintf_r+0x162a>
8000dd40:	04 96       	mov	r6,r2
8000dd42:	fa e8 00 00 	ld.d	r8,sp[0]
8000dd46:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000dd4a:	2d 0a       	sub	r10,-48
8000dd4c:	0c fa       	st.b	--r6,r10
8000dd4e:	f0 0b 16 03 	lsr	r11,r8,0x3
8000dd52:	f2 0c 16 03 	lsr	r12,r9,0x3
8000dd56:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000dd5a:	18 99       	mov	r9,r12
8000dd5c:	16 98       	mov	r8,r11
8000dd5e:	58 08       	cp.w	r8,0
8000dd60:	5c 29       	cpc	r9
8000dd62:	cf 21       	brne	8000dd46 <_vfprintf_r+0x15d2>
8000dd64:	fa e9 00 00 	st.d	sp[0],r8
8000dd68:	ed b5 00 00 	bld	r5,0x0
8000dd6c:	c4 51       	brne	8000ddf6 <_vfprintf_r+0x1682>
8000dd6e:	33 09       	mov	r9,48
8000dd70:	f2 0a 18 00 	cp.b	r10,r9
8000dd74:	c4 10       	breq	8000ddf6 <_vfprintf_r+0x1682>
8000dd76:	0c f9       	st.b	--r6,r9
8000dd78:	c3 f8       	rjmp	8000ddf6 <_vfprintf_r+0x1682>
8000dd7a:	fa ea 00 00 	ld.d	r10,sp[0]
8000dd7e:	30 a8       	mov	r8,10
8000dd80:	30 09       	mov	r9,0
8000dd82:	f0 1f 00 8f 	mcall	8000dfbc <_vfprintf_r+0x1848>
8000dd86:	30 a8       	mov	r8,10
8000dd88:	2d 0a       	sub	r10,-48
8000dd8a:	30 09       	mov	r9,0
8000dd8c:	ac 8a       	st.b	r6[0x0],r10
8000dd8e:	fa ea 00 00 	ld.d	r10,sp[0]
8000dd92:	f0 1f 00 8c 	mcall	8000dfc0 <_vfprintf_r+0x184c>
8000dd96:	16 99       	mov	r9,r11
8000dd98:	14 98       	mov	r8,r10
8000dd9a:	fa e9 00 00 	st.d	sp[0],r8
8000dd9e:	20 16       	sub	r6,1
8000dda0:	fa ea 00 00 	ld.d	r10,sp[0]
8000dda4:	58 9a       	cp.w	r10,9
8000dda6:	5c 2b       	cpc	r11
8000dda8:	fe 9b ff e9 	brhi	8000dd7a <_vfprintf_r+0x1606>
8000ddac:	1b f8       	ld.ub	r8,sp[0x7]
8000ddae:	2d 08       	sub	r8,-48
8000ddb0:	c2 08       	rjmp	8000ddf0 <_vfprintf_r+0x167c>
8000ddb2:	04 96       	mov	r6,r2
8000ddb4:	fa e8 00 00 	ld.d	r8,sp[0]
8000ddb8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000ddbc:	40 de       	lddsp	lr,sp[0x34]
8000ddbe:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000ddc2:	0c fa       	st.b	--r6,r10
8000ddc4:	f2 0b 16 04 	lsr	r11,r9,0x4
8000ddc8:	f0 0a 16 04 	lsr	r10,r8,0x4
8000ddcc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000ddd0:	16 99       	mov	r9,r11
8000ddd2:	14 98       	mov	r8,r10
8000ddd4:	58 08       	cp.w	r8,0
8000ddd6:	5c 29       	cpc	r9
8000ddd8:	cf 01       	brne	8000ddb8 <_vfprintf_r+0x1644>
8000ddda:	fa e9 00 00 	st.d	sp[0],r8
8000ddde:	c0 c8       	rjmp	8000ddf6 <_vfprintf_r+0x1682>
8000dde0:	58 08       	cp.w	r8,0
8000dde2:	c0 91       	brne	8000ddf4 <_vfprintf_r+0x1680>
8000dde4:	ed b5 00 00 	bld	r5,0x0
8000dde8:	c0 61       	brne	8000ddf4 <_vfprintf_r+0x1680>
8000ddea:	fa c6 f9 79 	sub	r6,sp,-1671
8000ddee:	33 08       	mov	r8,48
8000ddf0:	ac 88       	st.b	r6[0x0],r8
8000ddf2:	c0 28       	rjmp	8000ddf6 <_vfprintf_r+0x1682>
8000ddf4:	04 96       	mov	r6,r2
8000ddf6:	0c 12       	sub	r2,r6
8000ddf8:	c1 c8       	rjmp	8000de30 <_vfprintf_r+0x16bc>
8000ddfa:	50 a7       	stdsp	sp[0x28],r7
8000ddfc:	50 80       	stdsp	sp[0x20],r0
8000ddfe:	40 93       	lddsp	r3,sp[0x24]
8000de00:	0c 97       	mov	r7,r6
8000de02:	10 90       	mov	r0,r8
8000de04:	04 94       	mov	r4,r2
8000de06:	40 41       	lddsp	r1,sp[0x10]
8000de08:	58 08       	cp.w	r8,0
8000de0a:	e0 80 04 65 	breq	8000e6d4 <_vfprintf_r+0x1f60>
8000de0e:	fb 68 06 60 	st.b	sp[1632],r8
8000de12:	30 0c       	mov	r12,0
8000de14:	30 08       	mov	r8,0
8000de16:	30 12       	mov	r2,1
8000de18:	fb 68 06 bb 	st.b	sp[1723],r8
8000de1c:	50 2c       	stdsp	sp[0x8],r12
8000de1e:	fa c6 f9 a0 	sub	r6,sp,-1632
8000de22:	c0 78       	rjmp	8000de30 <_vfprintf_r+0x16bc>
8000de24:	30 0b       	mov	r11,0
8000de26:	50 2b       	stdsp	sp[0x8],r11
8000de28:	c0 48       	rjmp	8000de30 <_vfprintf_r+0x16bc>
8000de2a:	40 22       	lddsp	r2,sp[0x8]
8000de2c:	30 0a       	mov	r10,0
8000de2e:	50 2a       	stdsp	sp[0x8],r10
8000de30:	40 29       	lddsp	r9,sp[0x8]
8000de32:	e4 09 0c 49 	max	r9,r2,r9
8000de36:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000de3a:	50 39       	stdsp	sp[0xc],r9
8000de3c:	0a 9e       	mov	lr,r5
8000de3e:	30 09       	mov	r9,0
8000de40:	e2 1e 00 02 	andl	lr,0x2,COH
8000de44:	f2 08 18 00 	cp.b	r8,r9
8000de48:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000de4c:	f7 b8 01 ff 	subne	r8,-1
8000de50:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000de54:	0a 9b       	mov	r11,r5
8000de56:	58 0e       	cp.w	lr,0
8000de58:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000de5c:	f7 bc 01 fe 	subne	r12,-2
8000de60:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000de64:	e2 1b 00 84 	andl	r11,0x84,COH
8000de68:	50 fe       	stdsp	sp[0x3c],lr
8000de6a:	50 9b       	stdsp	sp[0x24],r11
8000de6c:	c4 51       	brne	8000def6 <_vfprintf_r+0x1782>
8000de6e:	40 8a       	lddsp	r10,sp[0x20]
8000de70:	40 39       	lddsp	r9,sp[0xc]
8000de72:	12 1a       	sub	r10,r9
8000de74:	50 4a       	stdsp	sp[0x10],r10
8000de76:	58 0a       	cp.w	r10,0
8000de78:	e0 89 00 1f 	brgt	8000deb6 <_vfprintf_r+0x1742>
8000de7c:	c3 d8       	rjmp	8000def6 <_vfprintf_r+0x1782>
8000de7e:	2f 09       	sub	r9,-16
8000de80:	2f f8       	sub	r8,-1
8000de82:	4d 1e       	lddpc	lr,8000dfc4 <_vfprintf_r+0x1850>
8000de84:	31 0c       	mov	r12,16
8000de86:	fb 49 06 90 	st.w	sp[1680],r9
8000de8a:	87 0e       	st.w	r3[0x0],lr
8000de8c:	87 1c       	st.w	r3[0x4],r12
8000de8e:	fb 48 06 8c 	st.w	sp[1676],r8
8000de92:	58 78       	cp.w	r8,7
8000de94:	e0 89 00 04 	brgt	8000de9c <_vfprintf_r+0x1728>
8000de98:	2f 83       	sub	r3,-8
8000de9a:	c0 b8       	rjmp	8000deb0 <_vfprintf_r+0x173c>
8000de9c:	fa ca f9 78 	sub	r10,sp,-1672
8000dea0:	02 9b       	mov	r11,r1
8000dea2:	08 9c       	mov	r12,r4
8000dea4:	f0 1f 00 49 	mcall	8000dfc8 <_vfprintf_r+0x1854>
8000dea8:	e0 81 04 27 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000deac:	fa c3 f9 e0 	sub	r3,sp,-1568
8000deb0:	40 4b       	lddsp	r11,sp[0x10]
8000deb2:	21 0b       	sub	r11,16
8000deb4:	50 4b       	stdsp	sp[0x10],r11
8000deb6:	fa f9 06 90 	ld.w	r9,sp[1680]
8000deba:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000debe:	4c 2a       	lddpc	r10,8000dfc4 <_vfprintf_r+0x1850>
8000dec0:	40 4e       	lddsp	lr,sp[0x10]
8000dec2:	59 0e       	cp.w	lr,16
8000dec4:	fe 99 ff dd 	brgt	8000de7e <_vfprintf_r+0x170a>
8000dec8:	1c 09       	add	r9,lr
8000deca:	2f f8       	sub	r8,-1
8000decc:	87 0a       	st.w	r3[0x0],r10
8000dece:	fb 49 06 90 	st.w	sp[1680],r9
8000ded2:	87 1e       	st.w	r3[0x4],lr
8000ded4:	fb 48 06 8c 	st.w	sp[1676],r8
8000ded8:	58 78       	cp.w	r8,7
8000deda:	e0 89 00 04 	brgt	8000dee2 <_vfprintf_r+0x176e>
8000dede:	2f 83       	sub	r3,-8
8000dee0:	c0 b8       	rjmp	8000def6 <_vfprintf_r+0x1782>
8000dee2:	fa ca f9 78 	sub	r10,sp,-1672
8000dee6:	02 9b       	mov	r11,r1
8000dee8:	08 9c       	mov	r12,r4
8000deea:	f0 1f 00 38 	mcall	8000dfc8 <_vfprintf_r+0x1854>
8000deee:	e0 81 04 04 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000def2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000def6:	30 09       	mov	r9,0
8000def8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000defc:	f2 08 18 00 	cp.b	r8,r9
8000df00:	c1 f0       	breq	8000df3e <_vfprintf_r+0x17ca>
8000df02:	fa f8 06 90 	ld.w	r8,sp[1680]
8000df06:	fa c9 f9 45 	sub	r9,sp,-1723
8000df0a:	2f f8       	sub	r8,-1
8000df0c:	87 09       	st.w	r3[0x0],r9
8000df0e:	fb 48 06 90 	st.w	sp[1680],r8
8000df12:	30 19       	mov	r9,1
8000df14:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000df18:	87 19       	st.w	r3[0x4],r9
8000df1a:	2f f8       	sub	r8,-1
8000df1c:	fb 48 06 8c 	st.w	sp[1676],r8
8000df20:	58 78       	cp.w	r8,7
8000df22:	e0 89 00 04 	brgt	8000df2a <_vfprintf_r+0x17b6>
8000df26:	2f 83       	sub	r3,-8
8000df28:	c0 b8       	rjmp	8000df3e <_vfprintf_r+0x17ca>
8000df2a:	fa ca f9 78 	sub	r10,sp,-1672
8000df2e:	02 9b       	mov	r11,r1
8000df30:	08 9c       	mov	r12,r4
8000df32:	f0 1f 00 26 	mcall	8000dfc8 <_vfprintf_r+0x1854>
8000df36:	e0 81 03 e0 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000df3a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000df3e:	40 fc       	lddsp	r12,sp[0x3c]
8000df40:	58 0c       	cp.w	r12,0
8000df42:	c1 f0       	breq	8000df80 <_vfprintf_r+0x180c>
8000df44:	fa f8 06 90 	ld.w	r8,sp[1680]
8000df48:	fa c9 f9 48 	sub	r9,sp,-1720
8000df4c:	2f e8       	sub	r8,-2
8000df4e:	87 09       	st.w	r3[0x0],r9
8000df50:	fb 48 06 90 	st.w	sp[1680],r8
8000df54:	30 29       	mov	r9,2
8000df56:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000df5a:	87 19       	st.w	r3[0x4],r9
8000df5c:	2f f8       	sub	r8,-1
8000df5e:	fb 48 06 8c 	st.w	sp[1676],r8
8000df62:	58 78       	cp.w	r8,7
8000df64:	e0 89 00 04 	brgt	8000df6c <_vfprintf_r+0x17f8>
8000df68:	2f 83       	sub	r3,-8
8000df6a:	c0 b8       	rjmp	8000df80 <_vfprintf_r+0x180c>
8000df6c:	fa ca f9 78 	sub	r10,sp,-1672
8000df70:	02 9b       	mov	r11,r1
8000df72:	08 9c       	mov	r12,r4
8000df74:	f0 1f 00 15 	mcall	8000dfc8 <_vfprintf_r+0x1854>
8000df78:	e0 81 03 bf 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000df7c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000df80:	40 9b       	lddsp	r11,sp[0x24]
8000df82:	e0 4b 00 80 	cp.w	r11,128
8000df86:	c5 21       	brne	8000e02a <_vfprintf_r+0x18b6>
8000df88:	40 8a       	lddsp	r10,sp[0x20]
8000df8a:	40 39       	lddsp	r9,sp[0xc]
8000df8c:	12 1a       	sub	r10,r9
8000df8e:	50 4a       	stdsp	sp[0x10],r10
8000df90:	58 0a       	cp.w	r10,0
8000df92:	e0 89 00 2c 	brgt	8000dfea <_vfprintf_r+0x1876>
8000df96:	c4 a8       	rjmp	8000e02a <_vfprintf_r+0x18b6>
8000df98:	2f 09       	sub	r9,-16
8000df9a:	2f f8       	sub	r8,-1
8000df9c:	48 ce       	lddpc	lr,8000dfcc <_vfprintf_r+0x1858>
8000df9e:	31 0c       	mov	r12,16
8000dfa0:	fb 49 06 90 	st.w	sp[1680],r9
8000dfa4:	87 0e       	st.w	r3[0x0],lr
8000dfa6:	87 1c       	st.w	r3[0x4],r12
8000dfa8:	fb 48 06 8c 	st.w	sp[1676],r8
8000dfac:	58 78       	cp.w	r8,7
8000dfae:	e0 89 00 11 	brgt	8000dfd0 <_vfprintf_r+0x185c>
8000dfb2:	2f 83       	sub	r3,-8
8000dfb4:	c1 88       	rjmp	8000dfe4 <_vfprintf_r+0x1870>
8000dfb6:	00 00       	add	r0,r0
8000dfb8:	80 00       	ld.sh	r0,r0[0x0]
8000dfba:	c4 30       	breq	8000e040 <_vfprintf_r+0x18cc>
8000dfbc:	80 01       	ld.sh	r1,r0[0x0]
8000dfbe:	07 08       	ld.w	r8,r3++
8000dfc0:	80 00       	ld.sh	r0,r0[0x0]
8000dfc2:	ad 12       	ld.d	r2,--r6
8000dfc4:	80 01       	ld.sh	r1,r0[0x0]
8000dfc6:	1d f4       	ld.ub	r4,lr[0x7]
8000dfc8:	80 00       	ld.sh	r0,r0[0x0]
8000dfca:	c7 54       	brge	8000e0b4 <_vfprintf_r+0x1940>
8000dfcc:	80 01       	ld.sh	r1,r0[0x0]
8000dfce:	1e 04       	add	r4,pc
8000dfd0:	fa ca f9 78 	sub	r10,sp,-1672
8000dfd4:	02 9b       	mov	r11,r1
8000dfd6:	08 9c       	mov	r12,r4
8000dfd8:	f0 1f 00 4c 	mcall	8000e108 <_vfprintf_r+0x1994>
8000dfdc:	e0 81 03 8d 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000dfe0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000dfe4:	40 4b       	lddsp	r11,sp[0x10]
8000dfe6:	21 0b       	sub	r11,16
8000dfe8:	50 4b       	stdsp	sp[0x10],r11
8000dfea:	fa f9 06 90 	ld.w	r9,sp[1680]
8000dfee:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000dff2:	4c 7a       	lddpc	r10,8000e10c <_vfprintf_r+0x1998>
8000dff4:	40 4e       	lddsp	lr,sp[0x10]
8000dff6:	59 0e       	cp.w	lr,16
8000dff8:	fe 99 ff d0 	brgt	8000df98 <_vfprintf_r+0x1824>
8000dffc:	1c 09       	add	r9,lr
8000dffe:	2f f8       	sub	r8,-1
8000e000:	87 0a       	st.w	r3[0x0],r10
8000e002:	fb 49 06 90 	st.w	sp[1680],r9
8000e006:	87 1e       	st.w	r3[0x4],lr
8000e008:	fb 48 06 8c 	st.w	sp[1676],r8
8000e00c:	58 78       	cp.w	r8,7
8000e00e:	e0 89 00 04 	brgt	8000e016 <_vfprintf_r+0x18a2>
8000e012:	2f 83       	sub	r3,-8
8000e014:	c0 b8       	rjmp	8000e02a <_vfprintf_r+0x18b6>
8000e016:	fa ca f9 78 	sub	r10,sp,-1672
8000e01a:	02 9b       	mov	r11,r1
8000e01c:	08 9c       	mov	r12,r4
8000e01e:	f0 1f 00 3b 	mcall	8000e108 <_vfprintf_r+0x1994>
8000e022:	e0 81 03 6a 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e026:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e02a:	40 2c       	lddsp	r12,sp[0x8]
8000e02c:	04 1c       	sub	r12,r2
8000e02e:	50 2c       	stdsp	sp[0x8],r12
8000e030:	58 0c       	cp.w	r12,0
8000e032:	e0 89 00 1f 	brgt	8000e070 <_vfprintf_r+0x18fc>
8000e036:	c3 d8       	rjmp	8000e0b0 <_vfprintf_r+0x193c>
8000e038:	2f 09       	sub	r9,-16
8000e03a:	2f f8       	sub	r8,-1
8000e03c:	4b 4b       	lddpc	r11,8000e10c <_vfprintf_r+0x1998>
8000e03e:	31 0a       	mov	r10,16
8000e040:	fb 49 06 90 	st.w	sp[1680],r9
8000e044:	87 0b       	st.w	r3[0x0],r11
8000e046:	87 1a       	st.w	r3[0x4],r10
8000e048:	fb 48 06 8c 	st.w	sp[1676],r8
8000e04c:	58 78       	cp.w	r8,7
8000e04e:	e0 89 00 04 	brgt	8000e056 <_vfprintf_r+0x18e2>
8000e052:	2f 83       	sub	r3,-8
8000e054:	c0 b8       	rjmp	8000e06a <_vfprintf_r+0x18f6>
8000e056:	fa ca f9 78 	sub	r10,sp,-1672
8000e05a:	02 9b       	mov	r11,r1
8000e05c:	08 9c       	mov	r12,r4
8000e05e:	f0 1f 00 2b 	mcall	8000e108 <_vfprintf_r+0x1994>
8000e062:	e0 81 03 4a 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e066:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e06a:	40 29       	lddsp	r9,sp[0x8]
8000e06c:	21 09       	sub	r9,16
8000e06e:	50 29       	stdsp	sp[0x8],r9
8000e070:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e074:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e078:	4a 5a       	lddpc	r10,8000e10c <_vfprintf_r+0x1998>
8000e07a:	40 2e       	lddsp	lr,sp[0x8]
8000e07c:	59 0e       	cp.w	lr,16
8000e07e:	fe 99 ff dd 	brgt	8000e038 <_vfprintf_r+0x18c4>
8000e082:	1c 09       	add	r9,lr
8000e084:	2f f8       	sub	r8,-1
8000e086:	87 0a       	st.w	r3[0x0],r10
8000e088:	fb 49 06 90 	st.w	sp[1680],r9
8000e08c:	87 1e       	st.w	r3[0x4],lr
8000e08e:	fb 48 06 8c 	st.w	sp[1676],r8
8000e092:	58 78       	cp.w	r8,7
8000e094:	e0 89 00 04 	brgt	8000e09c <_vfprintf_r+0x1928>
8000e098:	2f 83       	sub	r3,-8
8000e09a:	c0 b8       	rjmp	8000e0b0 <_vfprintf_r+0x193c>
8000e09c:	fa ca f9 78 	sub	r10,sp,-1672
8000e0a0:	02 9b       	mov	r11,r1
8000e0a2:	08 9c       	mov	r12,r4
8000e0a4:	f0 1f 00 19 	mcall	8000e108 <_vfprintf_r+0x1994>
8000e0a8:	e0 81 03 27 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e0ac:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e0b0:	ed b5 00 08 	bld	r5,0x8
8000e0b4:	c0 b0       	breq	8000e0ca <_vfprintf_r+0x1956>
8000e0b6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e0ba:	87 12       	st.w	r3[0x4],r2
8000e0bc:	87 06       	st.w	r3[0x0],r6
8000e0be:	f0 02 00 02 	add	r2,r8,r2
8000e0c2:	fb 42 06 90 	st.w	sp[1680],r2
8000e0c6:	e0 8f 01 db 	bral	8000e47c <_vfprintf_r+0x1d08>
8000e0ca:	e0 40 00 65 	cp.w	r0,101
8000e0ce:	e0 8a 01 dd 	brle	8000e488 <_vfprintf_r+0x1d14>
8000e0d2:	30 08       	mov	r8,0
8000e0d4:	30 09       	mov	r9,0
8000e0d6:	40 5b       	lddsp	r11,sp[0x14]
8000e0d8:	40 7a       	lddsp	r10,sp[0x1c]
8000e0da:	f0 1f 00 0e 	mcall	8000e110 <_vfprintf_r+0x199c>
8000e0de:	c7 e0       	breq	8000e1da <_vfprintf_r+0x1a66>
8000e0e0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e0e4:	48 c9       	lddpc	r9,8000e114 <_vfprintf_r+0x19a0>
8000e0e6:	2f f8       	sub	r8,-1
8000e0e8:	87 09       	st.w	r3[0x0],r9
8000e0ea:	fb 48 06 90 	st.w	sp[1680],r8
8000e0ee:	30 19       	mov	r9,1
8000e0f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e0f4:	87 19       	st.w	r3[0x4],r9
8000e0f6:	2f f8       	sub	r8,-1
8000e0f8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e0fc:	58 78       	cp.w	r8,7
8000e0fe:	e0 89 00 0d 	brgt	8000e118 <_vfprintf_r+0x19a4>
8000e102:	2f 83       	sub	r3,-8
8000e104:	c1 48       	rjmp	8000e12c <_vfprintf_r+0x19b8>
8000e106:	00 00       	add	r0,r0
8000e108:	80 00       	ld.sh	r0,r0[0x0]
8000e10a:	c7 54       	brge	8000e1f4 <_vfprintf_r+0x1a80>
8000e10c:	80 01       	ld.sh	r1,r0[0x0]
8000e10e:	1e 04       	add	r4,pc
8000e110:	80 00       	ld.sh	r0,r0[0x0]
8000e112:	a4 06       	st.h	r2[0x0],r6
8000e114:	80 01       	ld.sh	r1,r0[0x0]
8000e116:	1d f0       	ld.ub	r0,lr[0x7]
8000e118:	fa ca f9 78 	sub	r10,sp,-1672
8000e11c:	02 9b       	mov	r11,r1
8000e11e:	08 9c       	mov	r12,r4
8000e120:	f0 1f 00 78 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e124:	e0 81 02 e9 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e128:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e12c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e130:	40 6c       	lddsp	r12,sp[0x18]
8000e132:	18 38       	cp.w	r8,r12
8000e134:	c0 55       	brlt	8000e13e <_vfprintf_r+0x19ca>
8000e136:	ed b5 00 00 	bld	r5,0x0
8000e13a:	e0 81 02 6d 	brne	8000e614 <_vfprintf_r+0x1ea0>
8000e13e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e142:	2f f8       	sub	r8,-1
8000e144:	40 cb       	lddsp	r11,sp[0x30]
8000e146:	fb 48 06 90 	st.w	sp[1680],r8
8000e14a:	30 19       	mov	r9,1
8000e14c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e150:	87 0b       	st.w	r3[0x0],r11
8000e152:	2f f8       	sub	r8,-1
8000e154:	87 19       	st.w	r3[0x4],r9
8000e156:	fb 48 06 8c 	st.w	sp[1676],r8
8000e15a:	58 78       	cp.w	r8,7
8000e15c:	e0 89 00 04 	brgt	8000e164 <_vfprintf_r+0x19f0>
8000e160:	2f 83       	sub	r3,-8
8000e162:	c0 b8       	rjmp	8000e178 <_vfprintf_r+0x1a04>
8000e164:	fa ca f9 78 	sub	r10,sp,-1672
8000e168:	02 9b       	mov	r11,r1
8000e16a:	08 9c       	mov	r12,r4
8000e16c:	f0 1f 00 65 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e170:	e0 81 02 c3 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e174:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e178:	40 66       	lddsp	r6,sp[0x18]
8000e17a:	20 16       	sub	r6,1
8000e17c:	58 06       	cp.w	r6,0
8000e17e:	e0 89 00 1d 	brgt	8000e1b8 <_vfprintf_r+0x1a44>
8000e182:	e0 8f 02 49 	bral	8000e614 <_vfprintf_r+0x1ea0>
8000e186:	2f 09       	sub	r9,-16
8000e188:	2f f8       	sub	r8,-1
8000e18a:	fb 49 06 90 	st.w	sp[1680],r9
8000e18e:	87 02       	st.w	r3[0x0],r2
8000e190:	87 10       	st.w	r3[0x4],r0
8000e192:	fb 48 06 8c 	st.w	sp[1676],r8
8000e196:	58 78       	cp.w	r8,7
8000e198:	e0 89 00 04 	brgt	8000e1a0 <_vfprintf_r+0x1a2c>
8000e19c:	2f 83       	sub	r3,-8
8000e19e:	c0 b8       	rjmp	8000e1b4 <_vfprintf_r+0x1a40>
8000e1a0:	fa ca f9 78 	sub	r10,sp,-1672
8000e1a4:	02 9b       	mov	r11,r1
8000e1a6:	08 9c       	mov	r12,r4
8000e1a8:	f0 1f 00 56 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e1ac:	e0 81 02 a5 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e1b0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e1b4:	21 06       	sub	r6,16
8000e1b6:	c0 38       	rjmp	8000e1bc <_vfprintf_r+0x1a48>
8000e1b8:	4d 32       	lddpc	r2,8000e304 <_vfprintf_r+0x1b90>
8000e1ba:	31 00       	mov	r0,16
8000e1bc:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e1c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e1c4:	4d 0a       	lddpc	r10,8000e304 <_vfprintf_r+0x1b90>
8000e1c6:	59 06       	cp.w	r6,16
8000e1c8:	fe 99 ff df 	brgt	8000e186 <_vfprintf_r+0x1a12>
8000e1cc:	0c 09       	add	r9,r6
8000e1ce:	87 0a       	st.w	r3[0x0],r10
8000e1d0:	fb 49 06 90 	st.w	sp[1680],r9
8000e1d4:	2f f8       	sub	r8,-1
8000e1d6:	87 16       	st.w	r3[0x4],r6
8000e1d8:	c5 59       	rjmp	8000e482 <_vfprintf_r+0x1d0e>
8000e1da:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000e1de:	58 0a       	cp.w	r10,0
8000e1e0:	e0 89 00 96 	brgt	8000e30c <_vfprintf_r+0x1b98>
8000e1e4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e1e8:	4c 89       	lddpc	r9,8000e308 <_vfprintf_r+0x1b94>
8000e1ea:	2f f8       	sub	r8,-1
8000e1ec:	87 09       	st.w	r3[0x0],r9
8000e1ee:	fb 48 06 90 	st.w	sp[1680],r8
8000e1f2:	30 19       	mov	r9,1
8000e1f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e1f8:	87 19       	st.w	r3[0x4],r9
8000e1fa:	2f f8       	sub	r8,-1
8000e1fc:	fb 48 06 8c 	st.w	sp[1676],r8
8000e200:	58 78       	cp.w	r8,7
8000e202:	e0 89 00 04 	brgt	8000e20a <_vfprintf_r+0x1a96>
8000e206:	2f 83       	sub	r3,-8
8000e208:	c0 b8       	rjmp	8000e21e <_vfprintf_r+0x1aaa>
8000e20a:	fa ca f9 78 	sub	r10,sp,-1672
8000e20e:	02 9b       	mov	r11,r1
8000e210:	08 9c       	mov	r12,r4
8000e212:	f0 1f 00 3c 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e216:	e0 81 02 70 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e21a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e21e:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e222:	58 08       	cp.w	r8,0
8000e224:	c0 81       	brne	8000e234 <_vfprintf_r+0x1ac0>
8000e226:	40 6a       	lddsp	r10,sp[0x18]
8000e228:	58 0a       	cp.w	r10,0
8000e22a:	c0 51       	brne	8000e234 <_vfprintf_r+0x1ac0>
8000e22c:	ed b5 00 00 	bld	r5,0x0
8000e230:	e0 81 01 f2 	brne	8000e614 <_vfprintf_r+0x1ea0>
8000e234:	40 c9       	lddsp	r9,sp[0x30]
8000e236:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e23a:	2f f8       	sub	r8,-1
8000e23c:	87 09       	st.w	r3[0x0],r9
8000e23e:	fb 48 06 90 	st.w	sp[1680],r8
8000e242:	30 19       	mov	r9,1
8000e244:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e248:	87 19       	st.w	r3[0x4],r9
8000e24a:	2f f8       	sub	r8,-1
8000e24c:	fb 48 06 8c 	st.w	sp[1676],r8
8000e250:	58 78       	cp.w	r8,7
8000e252:	e0 89 00 04 	brgt	8000e25a <_vfprintf_r+0x1ae6>
8000e256:	2f 83       	sub	r3,-8
8000e258:	c0 b8       	rjmp	8000e26e <_vfprintf_r+0x1afa>
8000e25a:	fa ca f9 78 	sub	r10,sp,-1672
8000e25e:	02 9b       	mov	r11,r1
8000e260:	08 9c       	mov	r12,r4
8000e262:	f0 1f 00 28 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e266:	e0 81 02 48 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e26a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e26e:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000e272:	5c 32       	neg	r2
8000e274:	58 02       	cp.w	r2,0
8000e276:	e0 89 00 1d 	brgt	8000e2b0 <_vfprintf_r+0x1b3c>
8000e27a:	c3 b8       	rjmp	8000e2f0 <_vfprintf_r+0x1b7c>
8000e27c:	2f 09       	sub	r9,-16
8000e27e:	2f f8       	sub	r8,-1
8000e280:	31 0e       	mov	lr,16
8000e282:	fb 49 06 90 	st.w	sp[1680],r9
8000e286:	87 00       	st.w	r3[0x0],r0
8000e288:	87 1e       	st.w	r3[0x4],lr
8000e28a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e28e:	58 78       	cp.w	r8,7
8000e290:	e0 89 00 04 	brgt	8000e298 <_vfprintf_r+0x1b24>
8000e294:	2f 83       	sub	r3,-8
8000e296:	c0 b8       	rjmp	8000e2ac <_vfprintf_r+0x1b38>
8000e298:	fa ca f9 78 	sub	r10,sp,-1672
8000e29c:	02 9b       	mov	r11,r1
8000e29e:	08 9c       	mov	r12,r4
8000e2a0:	f0 1f 00 18 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e2a4:	e0 81 02 29 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e2a8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e2ac:	21 02       	sub	r2,16
8000e2ae:	c0 28       	rjmp	8000e2b2 <_vfprintf_r+0x1b3e>
8000e2b0:	49 50       	lddpc	r0,8000e304 <_vfprintf_r+0x1b90>
8000e2b2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e2b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e2ba:	49 3a       	lddpc	r10,8000e304 <_vfprintf_r+0x1b90>
8000e2bc:	59 02       	cp.w	r2,16
8000e2be:	fe 99 ff df 	brgt	8000e27c <_vfprintf_r+0x1b08>
8000e2c2:	04 09       	add	r9,r2
8000e2c4:	2f f8       	sub	r8,-1
8000e2c6:	87 0a       	st.w	r3[0x0],r10
8000e2c8:	fb 49 06 90 	st.w	sp[1680],r9
8000e2cc:	87 12       	st.w	r3[0x4],r2
8000e2ce:	fb 48 06 8c 	st.w	sp[1676],r8
8000e2d2:	58 78       	cp.w	r8,7
8000e2d4:	e0 89 00 04 	brgt	8000e2dc <_vfprintf_r+0x1b68>
8000e2d8:	2f 83       	sub	r3,-8
8000e2da:	c0 b8       	rjmp	8000e2f0 <_vfprintf_r+0x1b7c>
8000e2dc:	fa ca f9 78 	sub	r10,sp,-1672
8000e2e0:	02 9b       	mov	r11,r1
8000e2e2:	08 9c       	mov	r12,r4
8000e2e4:	f0 1f 00 07 	mcall	8000e300 <_vfprintf_r+0x1b8c>
8000e2e8:	e0 81 02 07 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e2ec:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e2f0:	40 6c       	lddsp	r12,sp[0x18]
8000e2f2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e2f6:	87 06       	st.w	r3[0x0],r6
8000e2f8:	87 1c       	st.w	r3[0x4],r12
8000e2fa:	18 08       	add	r8,r12
8000e2fc:	cb e8       	rjmp	8000e478 <_vfprintf_r+0x1d04>
8000e2fe:	00 00       	add	r0,r0
8000e300:	80 00       	ld.sh	r0,r0[0x0]
8000e302:	c7 54       	brge	8000e3ec <_vfprintf_r+0x1c78>
8000e304:	80 01       	ld.sh	r1,r0[0x0]
8000e306:	1e 04       	add	r4,pc
8000e308:	80 01       	ld.sh	r1,r0[0x0]
8000e30a:	1d f0       	ld.ub	r0,lr[0x7]
8000e30c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e310:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e314:	40 6b       	lddsp	r11,sp[0x18]
8000e316:	16 3a       	cp.w	r10,r11
8000e318:	c6 d5       	brlt	8000e3f2 <_vfprintf_r+0x1c7e>
8000e31a:	16 09       	add	r9,r11
8000e31c:	2f f8       	sub	r8,-1
8000e31e:	87 06       	st.w	r3[0x0],r6
8000e320:	fb 49 06 90 	st.w	sp[1680],r9
8000e324:	87 1b       	st.w	r3[0x4],r11
8000e326:	fb 48 06 8c 	st.w	sp[1676],r8
8000e32a:	58 78       	cp.w	r8,7
8000e32c:	e0 89 00 04 	brgt	8000e334 <_vfprintf_r+0x1bc0>
8000e330:	2f 83       	sub	r3,-8
8000e332:	c0 b8       	rjmp	8000e348 <_vfprintf_r+0x1bd4>
8000e334:	fa ca f9 78 	sub	r10,sp,-1672
8000e338:	02 9b       	mov	r11,r1
8000e33a:	08 9c       	mov	r12,r4
8000e33c:	f0 1f 00 6f 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e340:	e0 81 01 db 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e344:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e348:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000e34c:	40 6a       	lddsp	r10,sp[0x18]
8000e34e:	14 16       	sub	r6,r10
8000e350:	58 06       	cp.w	r6,0
8000e352:	e0 89 00 1c 	brgt	8000e38a <_vfprintf_r+0x1c16>
8000e356:	c3 b8       	rjmp	8000e3cc <_vfprintf_r+0x1c58>
8000e358:	2f 09       	sub	r9,-16
8000e35a:	2f f8       	sub	r8,-1
8000e35c:	fb 49 06 90 	st.w	sp[1680],r9
8000e360:	87 02       	st.w	r3[0x0],r2
8000e362:	87 10       	st.w	r3[0x4],r0
8000e364:	fb 48 06 8c 	st.w	sp[1676],r8
8000e368:	58 78       	cp.w	r8,7
8000e36a:	e0 89 00 04 	brgt	8000e372 <_vfprintf_r+0x1bfe>
8000e36e:	2f 83       	sub	r3,-8
8000e370:	c0 b8       	rjmp	8000e386 <_vfprintf_r+0x1c12>
8000e372:	fa ca f9 78 	sub	r10,sp,-1672
8000e376:	02 9b       	mov	r11,r1
8000e378:	08 9c       	mov	r12,r4
8000e37a:	f0 1f 00 60 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e37e:	e0 81 01 bc 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e382:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e386:	21 06       	sub	r6,16
8000e388:	c0 38       	rjmp	8000e38e <_vfprintf_r+0x1c1a>
8000e38a:	4d d2       	lddpc	r2,8000e4fc <_vfprintf_r+0x1d88>
8000e38c:	31 00       	mov	r0,16
8000e38e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e392:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e396:	4d aa       	lddpc	r10,8000e4fc <_vfprintf_r+0x1d88>
8000e398:	59 06       	cp.w	r6,16
8000e39a:	fe 99 ff df 	brgt	8000e358 <_vfprintf_r+0x1be4>
8000e39e:	0c 09       	add	r9,r6
8000e3a0:	2f f8       	sub	r8,-1
8000e3a2:	87 0a       	st.w	r3[0x0],r10
8000e3a4:	fb 49 06 90 	st.w	sp[1680],r9
8000e3a8:	87 16       	st.w	r3[0x4],r6
8000e3aa:	fb 48 06 8c 	st.w	sp[1676],r8
8000e3ae:	58 78       	cp.w	r8,7
8000e3b0:	e0 89 00 04 	brgt	8000e3b8 <_vfprintf_r+0x1c44>
8000e3b4:	2f 83       	sub	r3,-8
8000e3b6:	c0 b8       	rjmp	8000e3cc <_vfprintf_r+0x1c58>
8000e3b8:	fa ca f9 78 	sub	r10,sp,-1672
8000e3bc:	02 9b       	mov	r11,r1
8000e3be:	08 9c       	mov	r12,r4
8000e3c0:	f0 1f 00 4e 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e3c4:	e0 81 01 99 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e3c8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e3cc:	ed b5 00 00 	bld	r5,0x0
8000e3d0:	e0 81 01 22 	brne	8000e614 <_vfprintf_r+0x1ea0>
8000e3d4:	40 c9       	lddsp	r9,sp[0x30]
8000e3d6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e3da:	2f f8       	sub	r8,-1
8000e3dc:	87 09       	st.w	r3[0x0],r9
8000e3de:	fb 48 06 90 	st.w	sp[1680],r8
8000e3e2:	30 19       	mov	r9,1
8000e3e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e3e8:	87 19       	st.w	r3[0x4],r9
8000e3ea:	2f f8       	sub	r8,-1
8000e3ec:	fb 48 06 8c 	st.w	sp[1676],r8
8000e3f0:	c0 49       	rjmp	8000e5f8 <_vfprintf_r+0x1e84>
8000e3f2:	14 09       	add	r9,r10
8000e3f4:	2f f8       	sub	r8,-1
8000e3f6:	fb 49 06 90 	st.w	sp[1680],r9
8000e3fa:	87 06       	st.w	r3[0x0],r6
8000e3fc:	87 1a       	st.w	r3[0x4],r10
8000e3fe:	fb 48 06 8c 	st.w	sp[1676],r8
8000e402:	58 78       	cp.w	r8,7
8000e404:	e0 89 00 04 	brgt	8000e40c <_vfprintf_r+0x1c98>
8000e408:	2f 83       	sub	r3,-8
8000e40a:	c0 b8       	rjmp	8000e420 <_vfprintf_r+0x1cac>
8000e40c:	fa ca f9 78 	sub	r10,sp,-1672
8000e410:	02 9b       	mov	r11,r1
8000e412:	08 9c       	mov	r12,r4
8000e414:	f0 1f 00 39 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e418:	e0 81 01 6f 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e41c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e420:	40 c8       	lddsp	r8,sp[0x30]
8000e422:	87 08       	st.w	r3[0x0],r8
8000e424:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e428:	2f f8       	sub	r8,-1
8000e42a:	30 19       	mov	r9,1
8000e42c:	fb 48 06 90 	st.w	sp[1680],r8
8000e430:	87 19       	st.w	r3[0x4],r9
8000e432:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e436:	2f f8       	sub	r8,-1
8000e438:	fb 48 06 8c 	st.w	sp[1676],r8
8000e43c:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000e440:	58 78       	cp.w	r8,7
8000e442:	e0 89 00 04 	brgt	8000e44a <_vfprintf_r+0x1cd6>
8000e446:	2f 83       	sub	r3,-8
8000e448:	c0 b8       	rjmp	8000e45e <_vfprintf_r+0x1cea>
8000e44a:	fa ca f9 78 	sub	r10,sp,-1672
8000e44e:	02 9b       	mov	r11,r1
8000e450:	08 9c       	mov	r12,r4
8000e452:	f0 1f 00 2a 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e456:	e0 81 01 50 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e45a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e45e:	04 06       	add	r6,r2
8000e460:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e464:	87 06       	st.w	r3[0x0],r6
8000e466:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e46a:	40 66       	lddsp	r6,sp[0x18]
8000e46c:	40 6e       	lddsp	lr,sp[0x18]
8000e46e:	10 16       	sub	r6,r8
8000e470:	f2 08 01 08 	sub	r8,r9,r8
8000e474:	87 16       	st.w	r3[0x4],r6
8000e476:	1c 08       	add	r8,lr
8000e478:	fb 48 06 90 	st.w	sp[1680],r8
8000e47c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e480:	2f f8       	sub	r8,-1
8000e482:	fb 48 06 8c 	st.w	sp[1676],r8
8000e486:	cb 98       	rjmp	8000e5f8 <_vfprintf_r+0x1e84>
8000e488:	40 6c       	lddsp	r12,sp[0x18]
8000e48a:	58 1c       	cp.w	r12,1
8000e48c:	e0 89 00 06 	brgt	8000e498 <_vfprintf_r+0x1d24>
8000e490:	ed b5 00 00 	bld	r5,0x0
8000e494:	e0 81 00 87 	brne	8000e5a2 <_vfprintf_r+0x1e2e>
8000e498:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e49c:	2f f8       	sub	r8,-1
8000e49e:	30 19       	mov	r9,1
8000e4a0:	fb 48 06 90 	st.w	sp[1680],r8
8000e4a4:	87 06       	st.w	r3[0x0],r6
8000e4a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e4aa:	87 19       	st.w	r3[0x4],r9
8000e4ac:	2f f8       	sub	r8,-1
8000e4ae:	fb 48 06 8c 	st.w	sp[1676],r8
8000e4b2:	58 78       	cp.w	r8,7
8000e4b4:	e0 89 00 04 	brgt	8000e4bc <_vfprintf_r+0x1d48>
8000e4b8:	2f 83       	sub	r3,-8
8000e4ba:	c0 b8       	rjmp	8000e4d0 <_vfprintf_r+0x1d5c>
8000e4bc:	fa ca f9 78 	sub	r10,sp,-1672
8000e4c0:	02 9b       	mov	r11,r1
8000e4c2:	08 9c       	mov	r12,r4
8000e4c4:	f0 1f 00 0d 	mcall	8000e4f8 <_vfprintf_r+0x1d84>
8000e4c8:	e0 81 01 17 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e4cc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e4d0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e4d4:	2f f8       	sub	r8,-1
8000e4d6:	40 cb       	lddsp	r11,sp[0x30]
8000e4d8:	fb 48 06 90 	st.w	sp[1680],r8
8000e4dc:	30 19       	mov	r9,1
8000e4de:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e4e2:	87 0b       	st.w	r3[0x0],r11
8000e4e4:	2f f8       	sub	r8,-1
8000e4e6:	87 19       	st.w	r3[0x4],r9
8000e4e8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e4ec:	58 78       	cp.w	r8,7
8000e4ee:	e0 89 00 09 	brgt	8000e500 <_vfprintf_r+0x1d8c>
8000e4f2:	2f 83       	sub	r3,-8
8000e4f4:	c1 08       	rjmp	8000e514 <_vfprintf_r+0x1da0>
8000e4f6:	00 00       	add	r0,r0
8000e4f8:	80 00       	ld.sh	r0,r0[0x0]
8000e4fa:	c7 54       	brge	8000e5e4 <_vfprintf_r+0x1e70>
8000e4fc:	80 01       	ld.sh	r1,r0[0x0]
8000e4fe:	1e 04       	add	r4,pc
8000e500:	fa ca f9 78 	sub	r10,sp,-1672
8000e504:	02 9b       	mov	r11,r1
8000e506:	08 9c       	mov	r12,r4
8000e508:	f0 1f 00 6f 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e50c:	e0 81 00 f5 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e510:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e514:	30 08       	mov	r8,0
8000e516:	30 09       	mov	r9,0
8000e518:	40 5b       	lddsp	r11,sp[0x14]
8000e51a:	40 7a       	lddsp	r10,sp[0x1c]
8000e51c:	f0 1f 00 6b 	mcall	8000e6c8 <_vfprintf_r+0x1f54>
8000e520:	40 68       	lddsp	r8,sp[0x18]
8000e522:	20 18       	sub	r8,1
8000e524:	58 0c       	cp.w	r12,0
8000e526:	c0 d1       	brne	8000e540 <_vfprintf_r+0x1dcc>
8000e528:	2f f6       	sub	r6,-1
8000e52a:	87 18       	st.w	r3[0x4],r8
8000e52c:	87 06       	st.w	r3[0x0],r6
8000e52e:	fa f6 06 90 	ld.w	r6,sp[1680]
8000e532:	10 06       	add	r6,r8
8000e534:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e538:	fb 46 06 90 	st.w	sp[1680],r6
8000e53c:	2f f8       	sub	r8,-1
8000e53e:	c2 f8       	rjmp	8000e59c <_vfprintf_r+0x1e28>
8000e540:	10 96       	mov	r6,r8
8000e542:	58 08       	cp.w	r8,0
8000e544:	e0 89 00 1c 	brgt	8000e57c <_vfprintf_r+0x1e08>
8000e548:	c4 98       	rjmp	8000e5da <_vfprintf_r+0x1e66>
8000e54a:	2f 09       	sub	r9,-16
8000e54c:	2f f8       	sub	r8,-1
8000e54e:	fb 49 06 90 	st.w	sp[1680],r9
8000e552:	87 02       	st.w	r3[0x0],r2
8000e554:	87 10       	st.w	r3[0x4],r0
8000e556:	fb 48 06 8c 	st.w	sp[1676],r8
8000e55a:	58 78       	cp.w	r8,7
8000e55c:	e0 89 00 04 	brgt	8000e564 <_vfprintf_r+0x1df0>
8000e560:	2f 83       	sub	r3,-8
8000e562:	c0 b8       	rjmp	8000e578 <_vfprintf_r+0x1e04>
8000e564:	fa ca f9 78 	sub	r10,sp,-1672
8000e568:	02 9b       	mov	r11,r1
8000e56a:	08 9c       	mov	r12,r4
8000e56c:	f0 1f 00 56 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e570:	e0 81 00 c3 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e574:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e578:	21 06       	sub	r6,16
8000e57a:	c0 38       	rjmp	8000e580 <_vfprintf_r+0x1e0c>
8000e57c:	4d 42       	lddpc	r2,8000e6cc <_vfprintf_r+0x1f58>
8000e57e:	31 00       	mov	r0,16
8000e580:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e584:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e588:	4d 1a       	lddpc	r10,8000e6cc <_vfprintf_r+0x1f58>
8000e58a:	59 06       	cp.w	r6,16
8000e58c:	fe 99 ff df 	brgt	8000e54a <_vfprintf_r+0x1dd6>
8000e590:	0c 09       	add	r9,r6
8000e592:	87 0a       	st.w	r3[0x0],r10
8000e594:	fb 49 06 90 	st.w	sp[1680],r9
8000e598:	2f f8       	sub	r8,-1
8000e59a:	87 16       	st.w	r3[0x4],r6
8000e59c:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5a0:	c0 e8       	rjmp	8000e5bc <_vfprintf_r+0x1e48>
8000e5a2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e5a6:	2f f8       	sub	r8,-1
8000e5a8:	30 19       	mov	r9,1
8000e5aa:	fb 48 06 90 	st.w	sp[1680],r8
8000e5ae:	87 06       	st.w	r3[0x0],r6
8000e5b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e5b4:	87 19       	st.w	r3[0x4],r9
8000e5b6:	2f f8       	sub	r8,-1
8000e5b8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5bc:	58 78       	cp.w	r8,7
8000e5be:	e0 89 00 04 	brgt	8000e5c6 <_vfprintf_r+0x1e52>
8000e5c2:	2f 83       	sub	r3,-8
8000e5c4:	c0 b8       	rjmp	8000e5da <_vfprintf_r+0x1e66>
8000e5c6:	fa ca f9 78 	sub	r10,sp,-1672
8000e5ca:	02 9b       	mov	r11,r1
8000e5cc:	08 9c       	mov	r12,r4
8000e5ce:	f0 1f 00 3e 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e5d2:	e0 81 00 92 	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e5d6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e5da:	40 ea       	lddsp	r10,sp[0x38]
8000e5dc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e5e0:	14 08       	add	r8,r10
8000e5e2:	fa c9 f9 64 	sub	r9,sp,-1692
8000e5e6:	fb 48 06 90 	st.w	sp[1680],r8
8000e5ea:	87 1a       	st.w	r3[0x4],r10
8000e5ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e5f0:	87 09       	st.w	r3[0x0],r9
8000e5f2:	2f f8       	sub	r8,-1
8000e5f4:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5f8:	58 78       	cp.w	r8,7
8000e5fa:	e0 89 00 04 	brgt	8000e602 <_vfprintf_r+0x1e8e>
8000e5fe:	2f 83       	sub	r3,-8
8000e600:	c0 a8       	rjmp	8000e614 <_vfprintf_r+0x1ea0>
8000e602:	fa ca f9 78 	sub	r10,sp,-1672
8000e606:	02 9b       	mov	r11,r1
8000e608:	08 9c       	mov	r12,r4
8000e60a:	f0 1f 00 2f 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e60e:	c7 41       	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e610:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e614:	e2 15 00 04 	andl	r5,0x4,COH
8000e618:	c3 d0       	breq	8000e692 <_vfprintf_r+0x1f1e>
8000e61a:	40 86       	lddsp	r6,sp[0x20]
8000e61c:	40 39       	lddsp	r9,sp[0xc]
8000e61e:	12 16       	sub	r6,r9
8000e620:	58 06       	cp.w	r6,0
8000e622:	e0 89 00 1a 	brgt	8000e656 <_vfprintf_r+0x1ee2>
8000e626:	c3 68       	rjmp	8000e692 <_vfprintf_r+0x1f1e>
8000e628:	2f 09       	sub	r9,-16
8000e62a:	2f f8       	sub	r8,-1
8000e62c:	fb 49 06 90 	st.w	sp[1680],r9
8000e630:	87 05       	st.w	r3[0x0],r5
8000e632:	87 12       	st.w	r3[0x4],r2
8000e634:	fb 48 06 8c 	st.w	sp[1676],r8
8000e638:	58 78       	cp.w	r8,7
8000e63a:	e0 89 00 04 	brgt	8000e642 <_vfprintf_r+0x1ece>
8000e63e:	2f 83       	sub	r3,-8
8000e640:	c0 98       	rjmp	8000e652 <_vfprintf_r+0x1ede>
8000e642:	00 9a       	mov	r10,r0
8000e644:	02 9b       	mov	r11,r1
8000e646:	08 9c       	mov	r12,r4
8000e648:	f0 1f 00 1f 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e64c:	c5 51       	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e64e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e652:	21 06       	sub	r6,16
8000e654:	c0 58       	rjmp	8000e65e <_vfprintf_r+0x1eea>
8000e656:	49 f5       	lddpc	r5,8000e6d0 <_vfprintf_r+0x1f5c>
8000e658:	31 02       	mov	r2,16
8000e65a:	fa c0 f9 78 	sub	r0,sp,-1672
8000e65e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e662:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e666:	49 ba       	lddpc	r10,8000e6d0 <_vfprintf_r+0x1f5c>
8000e668:	59 06       	cp.w	r6,16
8000e66a:	fe 99 ff df 	brgt	8000e628 <_vfprintf_r+0x1eb4>
8000e66e:	0c 09       	add	r9,r6
8000e670:	2f f8       	sub	r8,-1
8000e672:	87 0a       	st.w	r3[0x0],r10
8000e674:	87 16       	st.w	r3[0x4],r6
8000e676:	fb 49 06 90 	st.w	sp[1680],r9
8000e67a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e67e:	58 78       	cp.w	r8,7
8000e680:	e0 8a 00 09 	brle	8000e692 <_vfprintf_r+0x1f1e>
8000e684:	fa ca f9 78 	sub	r10,sp,-1672
8000e688:	02 9b       	mov	r11,r1
8000e68a:	08 9c       	mov	r12,r4
8000e68c:	f0 1f 00 0e 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e690:	c3 31       	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e692:	40 bc       	lddsp	r12,sp[0x2c]
8000e694:	40 36       	lddsp	r6,sp[0xc]
8000e696:	40 8e       	lddsp	lr,sp[0x20]
8000e698:	ec 0e 0c 48 	max	r8,r6,lr
8000e69c:	10 0c       	add	r12,r8
8000e69e:	50 bc       	stdsp	sp[0x2c],r12
8000e6a0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e6a4:	58 08       	cp.w	r8,0
8000e6a6:	c0 80       	breq	8000e6b6 <_vfprintf_r+0x1f42>
8000e6a8:	fa ca f9 78 	sub	r10,sp,-1672
8000e6ac:	02 9b       	mov	r11,r1
8000e6ae:	08 9c       	mov	r12,r4
8000e6b0:	f0 1f 00 05 	mcall	8000e6c4 <_vfprintf_r+0x1f50>
8000e6b4:	c2 11       	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e6b6:	30 0b       	mov	r11,0
8000e6b8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e6bc:	fb 4b 06 8c 	st.w	sp[1676],r11
8000e6c0:	fe 9f f0 e6 	bral	8000c88c <_vfprintf_r+0x118>
8000e6c4:	80 00       	ld.sh	r0,r0[0x0]
8000e6c6:	c7 54       	brge	8000e7b0 <__swbuf_r+0xa0>
8000e6c8:	80 00       	ld.sh	r0,r0[0x0]
8000e6ca:	a4 06       	st.h	r2[0x0],r6
8000e6cc:	80 01       	ld.sh	r1,r0[0x0]
8000e6ce:	1e 04       	add	r4,pc
8000e6d0:	80 01       	ld.sh	r1,r0[0x0]
8000e6d2:	1d f4       	ld.ub	r4,lr[0x7]
8000e6d4:	08 95       	mov	r5,r4
8000e6d6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e6da:	58 08       	cp.w	r8,0
8000e6dc:	c0 80       	breq	8000e6ec <_vfprintf_r+0x1f78>
8000e6de:	08 9c       	mov	r12,r4
8000e6e0:	fa ca f9 78 	sub	r10,sp,-1672
8000e6e4:	02 9b       	mov	r11,r1
8000e6e6:	f0 1f 00 0a 	mcall	8000e70c <_vfprintf_r+0x1f98>
8000e6ea:	c0 61       	brne	8000e6f6 <_vfprintf_r+0x1f82>
8000e6ec:	30 08       	mov	r8,0
8000e6ee:	fb 48 06 8c 	st.w	sp[1676],r8
8000e6f2:	c0 28       	rjmp	8000e6f6 <_vfprintf_r+0x1f82>
8000e6f4:	40 41       	lddsp	r1,sp[0x10]
8000e6f6:	82 68       	ld.sh	r8,r1[0xc]
8000e6f8:	ed b8 00 06 	bld	r8,0x6
8000e6fc:	c0 31       	brne	8000e702 <_vfprintf_r+0x1f8e>
8000e6fe:	3f fa       	mov	r10,-1
8000e700:	50 ba       	stdsp	sp[0x2c],r10
8000e702:	40 bc       	lddsp	r12,sp[0x2c]
8000e704:	fe 3d f9 44 	sub	sp,-1724
8000e708:	d8 32       	popm	r0-r7,pc
8000e70a:	00 00       	add	r0,r0
8000e70c:	80 00       	ld.sh	r0,r0[0x0]
8000e70e:	c7 54       	brge	8000e7f8 <__swsetup_r+0x2c>

8000e710 <__swbuf_r>:
8000e710:	d4 21       	pushm	r4-r7,lr
8000e712:	16 97       	mov	r7,r11
8000e714:	14 96       	mov	r6,r10
8000e716:	18 95       	mov	r5,r12
8000e718:	58 0c       	cp.w	r12,0
8000e71a:	c0 60       	breq	8000e726 <__swbuf_r+0x16>
8000e71c:	78 68       	ld.w	r8,r12[0x18]
8000e71e:	58 08       	cp.w	r8,0
8000e720:	c0 31       	brne	8000e726 <__swbuf_r+0x16>
8000e722:	f0 1f 00 25 	mcall	8000e7b4 <__swbuf_r+0xa4>
8000e726:	4a 58       	lddpc	r8,8000e7b8 <__swbuf_r+0xa8>
8000e728:	10 36       	cp.w	r6,r8
8000e72a:	c0 31       	brne	8000e730 <__swbuf_r+0x20>
8000e72c:	6a 06       	ld.w	r6,r5[0x0]
8000e72e:	c0 a8       	rjmp	8000e742 <__swbuf_r+0x32>
8000e730:	4a 38       	lddpc	r8,8000e7bc <__swbuf_r+0xac>
8000e732:	10 36       	cp.w	r6,r8
8000e734:	c0 31       	brne	8000e73a <__swbuf_r+0x2a>
8000e736:	6a 16       	ld.w	r6,r5[0x4]
8000e738:	c0 58       	rjmp	8000e742 <__swbuf_r+0x32>
8000e73a:	4a 28       	lddpc	r8,8000e7c0 <__swbuf_r+0xb0>
8000e73c:	10 36       	cp.w	r6,r8
8000e73e:	eb f6 00 02 	ld.weq	r6,r5[0x8]
8000e742:	6c 68       	ld.w	r8,r6[0x18]
8000e744:	8d 28       	st.w	r6[0x8],r8
8000e746:	8c 68       	ld.sh	r8,r6[0xc]
8000e748:	ed b8 00 03 	bld	r8,0x3
8000e74c:	c0 41       	brne	8000e754 <__swbuf_r+0x44>
8000e74e:	6c 48       	ld.w	r8,r6[0x10]
8000e750:	58 08       	cp.w	r8,0
8000e752:	c0 c1       	brne	8000e76a <__swbuf_r+0x5a>
8000e754:	0c 9b       	mov	r11,r6
8000e756:	0a 9c       	mov	r12,r5
8000e758:	f0 1f 00 1b 	mcall	8000e7c4 <__swbuf_r+0xb4>
8000e75c:	c0 70       	breq	8000e76a <__swbuf_r+0x5a>
8000e75e:	8c 68       	ld.sh	r8,r6[0xc]
8000e760:	a7 a8       	sbr	r8,0x6
8000e762:	ac 68       	st.h	r6[0xc],r8
8000e764:	30 98       	mov	r8,9
8000e766:	8b 38       	st.w	r5[0xc],r8
8000e768:	c2 28       	rjmp	8000e7ac <__swbuf_r+0x9c>
8000e76a:	6c 48       	ld.w	r8,r6[0x10]
8000e76c:	6c 0c       	ld.w	r12,r6[0x0]
8000e76e:	10 1c       	sub	r12,r8
8000e770:	6c 58       	ld.w	r8,r6[0x14]
8000e772:	10 3c       	cp.w	r12,r8
8000e774:	c0 65       	brlt	8000e780 <__swbuf_r+0x70>
8000e776:	0c 9b       	mov	r11,r6
8000e778:	0a 9c       	mov	r12,r5
8000e77a:	f0 1f 00 14 	mcall	8000e7c8 <__swbuf_r+0xb8>
8000e77e:	c1 71       	brne	8000e7ac <__swbuf_r+0x9c>
8000e780:	6c 28       	ld.w	r8,r6[0x8]
8000e782:	20 18       	sub	r8,1
8000e784:	8d 28       	st.w	r6[0x8],r8
8000e786:	5c 57       	castu.b	r7
8000e788:	6c 08       	ld.w	r8,r6[0x0]
8000e78a:	10 c7       	st.b	r8++,r7
8000e78c:	8d 08       	st.w	r6[0x0],r8
8000e78e:	2f fc       	sub	r12,-1
8000e790:	6c 58       	ld.w	r8,r6[0x14]
8000e792:	10 3c       	cp.w	r12,r8
8000e794:	c0 70       	breq	8000e7a2 <__swbuf_r+0x92>
8000e796:	58 a7       	cp.w	r7,10
8000e798:	5f 08       	sreq	r8
8000e79a:	8c 69       	ld.sh	r9,r6[0xc]
8000e79c:	f3 e8 00 08 	and	r8,r9,r8
8000e7a0:	c0 70       	breq	8000e7ae <__swbuf_r+0x9e>
8000e7a2:	0c 9b       	mov	r11,r6
8000e7a4:	0a 9c       	mov	r12,r5
8000e7a6:	f0 1f 00 09 	mcall	8000e7c8 <__swbuf_r+0xb8>
8000e7aa:	c0 20       	breq	8000e7ae <__swbuf_r+0x9e>
8000e7ac:	3f f7       	mov	r7,-1
8000e7ae:	0e 9c       	mov	r12,r7
8000e7b0:	d8 22       	popm	r4-r7,pc
8000e7b2:	00 00       	add	r0,r0
8000e7b4:	80 00       	ld.sh	r0,r0[0x0]
8000e7b6:	f9 c4       	*unknown*
8000e7b8:	80 01       	ld.sh	r1,r0[0x0]
8000e7ba:	1f 24       	ld.uh	r4,pc++
8000e7bc:	80 01       	ld.sh	r1,r0[0x0]
8000e7be:	1f 44       	ld.w	r4,--pc
8000e7c0:	80 01       	ld.sh	r1,r0[0x0]
8000e7c2:	1f 64       	ld.uh	r4,--pc
8000e7c4:	80 00       	ld.sh	r0,r0[0x0]
8000e7c6:	e7 cc 80 00 	ldmts	r12++,pc
8000e7ca:	f7 e8 d4 21 	sthh.w	r1[0x108],r11:b,r8:t

8000e7cc <__swsetup_r>:
8000e7cc:	d4 21       	pushm	r4-r7,lr
8000e7ce:	4b 38       	lddpc	r8,8000e898 <__swsetup_r+0xcc>
8000e7d0:	18 96       	mov	r6,r12
8000e7d2:	16 97       	mov	r7,r11
8000e7d4:	70 0c       	ld.w	r12,r8[0x0]
8000e7d6:	58 0c       	cp.w	r12,0
8000e7d8:	c0 60       	breq	8000e7e4 <__swsetup_r+0x18>
8000e7da:	78 68       	ld.w	r8,r12[0x18]
8000e7dc:	58 08       	cp.w	r8,0
8000e7de:	c0 31       	brne	8000e7e4 <__swsetup_r+0x18>
8000e7e0:	f0 1f 00 2f 	mcall	8000e89c <__swsetup_r+0xd0>
8000e7e4:	4a f8       	lddpc	r8,8000e8a0 <__swsetup_r+0xd4>
8000e7e6:	10 37       	cp.w	r7,r8
8000e7e8:	c0 51       	brne	8000e7f2 <__swsetup_r+0x26>
8000e7ea:	4a c8       	lddpc	r8,8000e898 <__swsetup_r+0xcc>
8000e7ec:	70 08       	ld.w	r8,r8[0x0]
8000e7ee:	70 07       	ld.w	r7,r8[0x0]
8000e7f0:	c0 e8       	rjmp	8000e80c <__swsetup_r+0x40>
8000e7f2:	4a d8       	lddpc	r8,8000e8a4 <__swsetup_r+0xd8>
8000e7f4:	10 37       	cp.w	r7,r8
8000e7f6:	c0 51       	brne	8000e800 <__swsetup_r+0x34>
8000e7f8:	4a 88       	lddpc	r8,8000e898 <__swsetup_r+0xcc>
8000e7fa:	70 08       	ld.w	r8,r8[0x0]
8000e7fc:	70 17       	ld.w	r7,r8[0x4]
8000e7fe:	c0 78       	rjmp	8000e80c <__swsetup_r+0x40>
8000e800:	4a a8       	lddpc	r8,8000e8a8 <__swsetup_r+0xdc>
8000e802:	10 37       	cp.w	r7,r8
8000e804:	c0 41       	brne	8000e80c <__swsetup_r+0x40>
8000e806:	4a 58       	lddpc	r8,8000e898 <__swsetup_r+0xcc>
8000e808:	70 08       	ld.w	r8,r8[0x0]
8000e80a:	70 27       	ld.w	r7,r8[0x8]
8000e80c:	8e 68       	ld.sh	r8,r7[0xc]
8000e80e:	ed b8 00 03 	bld	r8,0x3
8000e812:	c1 e0       	breq	8000e84e <__swsetup_r+0x82>
8000e814:	ed b8 00 04 	bld	r8,0x4
8000e818:	c3 e1       	brne	8000e894 <__swsetup_r+0xc8>
8000e81a:	ed b8 00 02 	bld	r8,0x2
8000e81e:	c1 51       	brne	8000e848 <__swsetup_r+0x7c>
8000e820:	6e db       	ld.w	r11,r7[0x34]
8000e822:	58 0b       	cp.w	r11,0
8000e824:	c0 a0       	breq	8000e838 <__swsetup_r+0x6c>
8000e826:	ee c8 ff bc 	sub	r8,r7,-68
8000e82a:	10 3b       	cp.w	r11,r8
8000e82c:	c0 40       	breq	8000e834 <__swsetup_r+0x68>
8000e82e:	0c 9c       	mov	r12,r6
8000e830:	f0 1f 00 1f 	mcall	8000e8ac <__swsetup_r+0xe0>
8000e834:	30 08       	mov	r8,0
8000e836:	8f d8       	st.w	r7[0x34],r8
8000e838:	8e 68       	ld.sh	r8,r7[0xc]
8000e83a:	e0 18 ff db 	andl	r8,0xffdb
8000e83e:	ae 68       	st.h	r7[0xc],r8
8000e840:	30 08       	mov	r8,0
8000e842:	8f 18       	st.w	r7[0x4],r8
8000e844:	6e 48       	ld.w	r8,r7[0x10]
8000e846:	8f 08       	st.w	r7[0x0],r8
8000e848:	8e 68       	ld.sh	r8,r7[0xc]
8000e84a:	a3 b8       	sbr	r8,0x3
8000e84c:	ae 68       	st.h	r7[0xc],r8
8000e84e:	6e 48       	ld.w	r8,r7[0x10]
8000e850:	58 08       	cp.w	r8,0
8000e852:	c0 b1       	brne	8000e868 <__swsetup_r+0x9c>
8000e854:	8e 68       	ld.sh	r8,r7[0xc]
8000e856:	e2 18 02 80 	andl	r8,0x280,COH
8000e85a:	e0 48 02 00 	cp.w	r8,512
8000e85e:	c0 50       	breq	8000e868 <__swsetup_r+0x9c>
8000e860:	0c 9c       	mov	r12,r6
8000e862:	0e 9b       	mov	r11,r7
8000e864:	f0 1f 00 13 	mcall	8000e8b0 <__swsetup_r+0xe4>
8000e868:	8e 69       	ld.sh	r9,r7[0xc]
8000e86a:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000e86e:	c0 70       	breq	8000e87c <__swsetup_r+0xb0>
8000e870:	30 08       	mov	r8,0
8000e872:	8f 28       	st.w	r7[0x8],r8
8000e874:	6e 58       	ld.w	r8,r7[0x14]
8000e876:	5c 38       	neg	r8
8000e878:	8f 68       	st.w	r7[0x18],r8
8000e87a:	c0 68       	rjmp	8000e886 <__swsetup_r+0xba>
8000e87c:	ed b9 00 01 	bld	r9,0x1
8000e880:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000e884:	8f 28       	st.w	r7[0x8],r8
8000e886:	6e 48       	ld.w	r8,r7[0x10]
8000e888:	58 08       	cp.w	r8,0
8000e88a:	c0 61       	brne	8000e896 <__swsetup_r+0xca>
8000e88c:	8e 68       	ld.sh	r8,r7[0xc]
8000e88e:	ed b8 00 07 	bld	r8,0x7
8000e892:	c0 21       	brne	8000e896 <__swsetup_r+0xca>
8000e894:	dc 2a       	popm	r4-r7,pc,r12=-1
8000e896:	d8 2a       	popm	r4-r7,pc,r12=0
8000e898:	00 00       	add	r0,r0
8000e89a:	01 dc       	ld.ub	r12,r0[0x5]
8000e89c:	80 00       	ld.sh	r0,r0[0x0]
8000e89e:	f9 c4       	*unknown*
8000e8a0:	80 01       	ld.sh	r1,r0[0x0]
8000e8a2:	1f 24       	ld.uh	r4,pc++
8000e8a4:	80 01       	ld.sh	r1,r0[0x0]
8000e8a6:	1f 44       	ld.w	r4,--pc
8000e8a8:	80 01       	ld.sh	r1,r0[0x0]
8000e8aa:	1f 64       	ld.uh	r4,--pc
8000e8ac:	80 00       	ld.sh	r0,r0[0x0]
8000e8ae:	fb 1c 80 00 	ld.uh	r12,sp[-32768]
8000e8b2:	fd 18 d4 31 	ld.uh	r8,lr[-11215]

8000e8b4 <__register_exitproc>:
8000e8b4:	d4 31       	pushm	r0-r7,lr
8000e8b6:	4a 98       	lddpc	r8,8000e958 <__register_exitproc+0xa4>
8000e8b8:	70 03       	ld.w	r3,r8[0x0]
8000e8ba:	67 24       	ld.w	r4,r3[0x48]
8000e8bc:	e6 c8 ff b4 	sub	r8,r3,-76
8000e8c0:	58 04       	cp.w	r4,0
8000e8c2:	f0 04 17 00 	moveq	r4,r8
8000e8c6:	e7 f4 0a 12 	st.weq	r3[0x48],r4
8000e8ca:	18 97       	mov	r7,r12
8000e8cc:	16 96       	mov	r6,r11
8000e8ce:	14 95       	mov	r5,r10
8000e8d0:	12 92       	mov	r2,r9
8000e8d2:	68 18       	ld.w	r8,r4[0x4]
8000e8d4:	59 f8       	cp.w	r8,31
8000e8d6:	e0 8a 00 0e 	brle	8000e8f2 <__register_exitproc+0x3e>
8000e8da:	e0 6c 00 8c 	mov	r12,140
8000e8de:	f0 1f 00 20 	mcall	8000e95c <__register_exitproc+0xa8>
8000e8e2:	18 94       	mov	r4,r12
8000e8e4:	c3 80       	breq	8000e954 <__register_exitproc+0xa0>
8000e8e6:	67 28       	ld.w	r8,r3[0x48]
8000e8e8:	99 08       	st.w	r12[0x0],r8
8000e8ea:	e7 4c 00 48 	st.w	r3[72],r12
8000e8ee:	30 08       	mov	r8,0
8000e8f0:	99 18       	st.w	r12[0x4],r8
8000e8f2:	58 07       	cp.w	r7,0
8000e8f4:	c2 70       	breq	8000e942 <__register_exitproc+0x8e>
8000e8f6:	e8 fc 00 88 	ld.w	r12,r4[136]
8000e8fa:	58 0c       	cp.w	r12,0
8000e8fc:	c0 d1       	brne	8000e916 <__register_exitproc+0x62>
8000e8fe:	e0 6c 01 08 	mov	r12,264
8000e902:	f0 1f 00 17 	mcall	8000e95c <__register_exitproc+0xa8>
8000e906:	c2 70       	breq	8000e954 <__register_exitproc+0xa0>
8000e908:	30 08       	mov	r8,0
8000e90a:	e9 4c 00 88 	st.w	r4[136],r12
8000e90e:	f9 48 01 04 	st.w	r12[260],r8
8000e912:	f9 48 01 00 	st.w	r12[256],r8
8000e916:	68 18       	ld.w	r8,r4[0x4]
8000e918:	f0 c9 ff e0 	sub	r9,r8,-32
8000e91c:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
8000e920:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
8000e924:	30 1a       	mov	r10,1
8000e926:	f8 f9 01 00 	ld.w	r9,r12[256]
8000e92a:	f4 08 09 48 	lsl	r8,r10,r8
8000e92e:	10 49       	or	r9,r8
8000e930:	f9 49 01 00 	st.w	r12[256],r9
8000e934:	58 27       	cp.w	r7,2
8000e936:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000e93a:	f3 d8 e0 38 	oreq	r8,r9,r8
8000e93e:	f9 f8 0a 41 	st.weq	r12[0x104],r8
8000e942:	68 18       	ld.w	r8,r4[0x4]
8000e944:	30 0c       	mov	r12,0
8000e946:	f0 c9 ff ff 	sub	r9,r8,-1
8000e94a:	2f e8       	sub	r8,-2
8000e94c:	89 19       	st.w	r4[0x4],r9
8000e94e:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
8000e952:	d8 32       	popm	r0-r7,pc
8000e954:	dc 3a       	popm	r0-r7,pc,r12=-1
8000e956:	00 00       	add	r0,r0
8000e958:	80 01       	ld.sh	r1,r0[0x0]
8000e95a:	1b 44       	ld.w	r4,--sp
8000e95c:	80 00       	ld.sh	r0,r0[0x0]
8000e95e:	b7 14       	ld.d	r4,--r11

8000e960 <__call_exitprocs>:
8000e960:	d4 31       	pushm	r0-r7,lr
8000e962:	20 3d       	sub	sp,12
8000e964:	4b 28       	lddpc	r8,8000ea2c <__call_exitprocs+0xcc>
8000e966:	50 2c       	stdsp	sp[0x8],r12
8000e968:	70 08       	ld.w	r8,r8[0x0]
8000e96a:	16 91       	mov	r1,r11
8000e96c:	50 08       	stdsp	sp[0x0],r8
8000e96e:	2b 88       	sub	r8,-72
8000e970:	50 18       	stdsp	sp[0x4],r8
8000e972:	40 0a       	lddsp	r10,sp[0x0]
8000e974:	40 14       	lddsp	r4,sp[0x4]
8000e976:	75 27       	ld.w	r7,r10[0x48]
8000e978:	c5 58       	rjmp	8000ea22 <__call_exitprocs+0xc2>
8000e97a:	6e 15       	ld.w	r5,r7[0x4]
8000e97c:	ee f6 00 88 	ld.w	r6,r7[136]
8000e980:	ea c2 ff ff 	sub	r2,r5,-1
8000e984:	20 15       	sub	r5,1
8000e986:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000e98a:	ec 05 00 23 	add	r3,r6,r5<<0x2
8000e98e:	c3 58       	rjmp	8000e9f8 <__call_exitprocs+0x98>
8000e990:	58 01       	cp.w	r1,0
8000e992:	c0 70       	breq	8000e9a0 <__call_exitprocs+0x40>
8000e994:	58 06       	cp.w	r6,0
8000e996:	c2 e0       	breq	8000e9f2 <__call_exitprocs+0x92>
8000e998:	e6 f8 00 80 	ld.w	r8,r3[128]
8000e99c:	02 38       	cp.w	r8,r1
8000e99e:	c2 a1       	brne	8000e9f2 <__call_exitprocs+0x92>
8000e9a0:	6e 19       	ld.w	r9,r7[0x4]
8000e9a2:	64 08       	ld.w	r8,r2[0x0]
8000e9a4:	20 19       	sub	r9,1
8000e9a6:	12 35       	cp.w	r5,r9
8000e9a8:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000e9ac:	f9 b9 01 00 	movne	r9,0
8000e9b0:	e5 f9 1a 00 	st.wne	r2[0x0],r9
8000e9b4:	58 08       	cp.w	r8,0
8000e9b6:	c1 e0       	breq	8000e9f2 <__call_exitprocs+0x92>
8000e9b8:	6e 10       	ld.w	r0,r7[0x4]
8000e9ba:	58 06       	cp.w	r6,0
8000e9bc:	c0 90       	breq	8000e9ce <__call_exitprocs+0x6e>
8000e9be:	30 1a       	mov	r10,1
8000e9c0:	f4 05 09 49 	lsl	r9,r10,r5
8000e9c4:	ec fa 01 00 	ld.w	r10,r6[256]
8000e9c8:	f3 ea 00 0a 	and	r10,r9,r10
8000e9cc:	c0 31       	brne	8000e9d2 <__call_exitprocs+0x72>
8000e9ce:	5d 18       	icall	r8
8000e9d0:	c0 b8       	rjmp	8000e9e6 <__call_exitprocs+0x86>
8000e9d2:	ec fa 01 04 	ld.w	r10,r6[260]
8000e9d6:	66 0b       	ld.w	r11,r3[0x0]
8000e9d8:	14 69       	and	r9,r10
8000e9da:	c0 41       	brne	8000e9e2 <__call_exitprocs+0x82>
8000e9dc:	40 2c       	lddsp	r12,sp[0x8]
8000e9de:	5d 18       	icall	r8
8000e9e0:	c0 38       	rjmp	8000e9e6 <__call_exitprocs+0x86>
8000e9e2:	16 9c       	mov	r12,r11
8000e9e4:	5d 18       	icall	r8
8000e9e6:	6e 18       	ld.w	r8,r7[0x4]
8000e9e8:	10 30       	cp.w	r0,r8
8000e9ea:	cc 41       	brne	8000e972 <__call_exitprocs+0x12>
8000e9ec:	68 08       	ld.w	r8,r4[0x0]
8000e9ee:	0e 38       	cp.w	r8,r7
8000e9f0:	cc 11       	brne	8000e972 <__call_exitprocs+0x12>
8000e9f2:	20 15       	sub	r5,1
8000e9f4:	20 43       	sub	r3,4
8000e9f6:	20 42       	sub	r2,4
8000e9f8:	58 05       	cp.w	r5,0
8000e9fa:	cc b4       	brge	8000e990 <__call_exitprocs+0x30>
8000e9fc:	6e 18       	ld.w	r8,r7[0x4]
8000e9fe:	58 08       	cp.w	r8,0
8000ea00:	c0 f1       	brne	8000ea1e <__call_exitprocs+0xbe>
8000ea02:	6e 08       	ld.w	r8,r7[0x0]
8000ea04:	58 08       	cp.w	r8,0
8000ea06:	c0 c0       	breq	8000ea1e <__call_exitprocs+0xbe>
8000ea08:	89 08       	st.w	r4[0x0],r8
8000ea0a:	58 06       	cp.w	r6,0
8000ea0c:	c0 40       	breq	8000ea14 <__call_exitprocs+0xb4>
8000ea0e:	0c 9c       	mov	r12,r6
8000ea10:	f0 1f 00 08 	mcall	8000ea30 <__call_exitprocs+0xd0>
8000ea14:	0e 9c       	mov	r12,r7
8000ea16:	f0 1f 00 07 	mcall	8000ea30 <__call_exitprocs+0xd0>
8000ea1a:	68 07       	ld.w	r7,r4[0x0]
8000ea1c:	c0 38       	rjmp	8000ea22 <__call_exitprocs+0xc2>
8000ea1e:	0e 94       	mov	r4,r7
8000ea20:	6e 07       	ld.w	r7,r7[0x0]
8000ea22:	58 07       	cp.w	r7,0
8000ea24:	ca b1       	brne	8000e97a <__call_exitprocs+0x1a>
8000ea26:	2f dd       	sub	sp,-12
8000ea28:	d8 32       	popm	r0-r7,pc
8000ea2a:	00 00       	add	r0,r0
8000ea2c:	80 01       	ld.sh	r1,r0[0x0]
8000ea2e:	1b 44       	ld.w	r4,--sp
8000ea30:	80 00       	ld.sh	r0,r0[0x0]
8000ea32:	b6 fc       	st.b	r11[0x7],r12

8000ea34 <quorem>:
8000ea34:	d4 31       	pushm	r0-r7,lr
8000ea36:	20 2d       	sub	sp,8
8000ea38:	18 97       	mov	r7,r12
8000ea3a:	78 48       	ld.w	r8,r12[0x10]
8000ea3c:	76 46       	ld.w	r6,r11[0x10]
8000ea3e:	0c 38       	cp.w	r8,r6
8000ea40:	c0 34       	brge	8000ea46 <quorem+0x12>
8000ea42:	30 0c       	mov	r12,0
8000ea44:	c8 58       	rjmp	8000eb4e <quorem+0x11a>
8000ea46:	ec c2 ff fc 	sub	r2,r6,-4
8000ea4a:	f6 c3 ff ec 	sub	r3,r11,-20
8000ea4e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000ea52:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000ea56:	2f f9       	sub	r9,-1
8000ea58:	20 16       	sub	r6,1
8000ea5a:	f8 09 0d 08 	divu	r8,r12,r9
8000ea5e:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000ea62:	ee c4 ff ec 	sub	r4,r7,-20
8000ea66:	10 95       	mov	r5,r8
8000ea68:	58 08       	cp.w	r8,0
8000ea6a:	c4 10       	breq	8000eaec <quorem+0xb8>
8000ea6c:	30 09       	mov	r9,0
8000ea6e:	06 9a       	mov	r10,r3
8000ea70:	08 98       	mov	r8,r4
8000ea72:	12 91       	mov	r1,r9
8000ea74:	50 0b       	stdsp	sp[0x0],r11
8000ea76:	70 0e       	ld.w	lr,r8[0x0]
8000ea78:	b1 8e       	lsr	lr,0x10
8000ea7a:	50 1e       	stdsp	sp[0x4],lr
8000ea7c:	15 0e       	ld.w	lr,r10++
8000ea7e:	fc 00 16 10 	lsr	r0,lr,0x10
8000ea82:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000ea86:	ea 0e 03 41 	mac	r1,r5,lr
8000ea8a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000ea8e:	b1 81       	lsr	r1,0x10
8000ea90:	40 1b       	lddsp	r11,sp[0x4]
8000ea92:	ea 00 02 40 	mul	r0,r5,r0
8000ea96:	e2 00 00 00 	add	r0,r1,r0
8000ea9a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000ea9e:	02 1b       	sub	r11,r1
8000eaa0:	50 1b       	stdsp	sp[0x4],r11
8000eaa2:	70 0b       	ld.w	r11,r8[0x0]
8000eaa4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000eaa8:	02 09       	add	r9,r1
8000eaaa:	f2 0e 01 0e 	sub	lr,r9,lr
8000eaae:	b0 1e       	st.h	r8[0x2],lr
8000eab0:	fc 09 14 10 	asr	r9,lr,0x10
8000eab4:	40 1e       	lddsp	lr,sp[0x4]
8000eab6:	fc 09 00 09 	add	r9,lr,r9
8000eaba:	b0 09       	st.h	r8[0x0],r9
8000eabc:	e0 01 16 10 	lsr	r1,r0,0x10
8000eac0:	2f c8       	sub	r8,-4
8000eac2:	b1 49       	asr	r9,0x10
8000eac4:	04 3a       	cp.w	r10,r2
8000eac6:	fe 98 ff d8 	brls	8000ea76 <quorem+0x42>
8000eaca:	40 0b       	lddsp	r11,sp[0x0]
8000eacc:	58 0c       	cp.w	r12,0
8000eace:	c0 f1       	brne	8000eaec <quorem+0xb8>
8000ead0:	ec c8 ff fb 	sub	r8,r6,-5
8000ead4:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000ead8:	c0 28       	rjmp	8000eadc <quorem+0xa8>
8000eada:	20 16       	sub	r6,1
8000eadc:	20 48       	sub	r8,4
8000eade:	08 38       	cp.w	r8,r4
8000eae0:	e0 88 00 05 	brls	8000eaea <quorem+0xb6>
8000eae4:	70 09       	ld.w	r9,r8[0x0]
8000eae6:	58 09       	cp.w	r9,0
8000eae8:	cf 90       	breq	8000eada <quorem+0xa6>
8000eaea:	8f 46       	st.w	r7[0x10],r6
8000eaec:	0e 9c       	mov	r12,r7
8000eaee:	f0 1f 00 1a 	mcall	8000eb54 <quorem+0x120>
8000eaf2:	c2 d5       	brlt	8000eb4c <quorem+0x118>
8000eaf4:	2f f5       	sub	r5,-1
8000eaf6:	08 98       	mov	r8,r4
8000eaf8:	30 09       	mov	r9,0
8000eafa:	07 0b       	ld.w	r11,r3++
8000eafc:	f6 0a 16 10 	lsr	r10,r11,0x10
8000eb00:	70 0c       	ld.w	r12,r8[0x0]
8000eb02:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000eb06:	f8 0e 16 10 	lsr	lr,r12,0x10
8000eb0a:	14 1e       	sub	lr,r10
8000eb0c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000eb10:	16 1a       	sub	r10,r11
8000eb12:	12 0a       	add	r10,r9
8000eb14:	b0 1a       	st.h	r8[0x2],r10
8000eb16:	b1 4a       	asr	r10,0x10
8000eb18:	fc 0a 00 09 	add	r9,lr,r10
8000eb1c:	b0 09       	st.h	r8[0x0],r9
8000eb1e:	2f c8       	sub	r8,-4
8000eb20:	b1 49       	asr	r9,0x10
8000eb22:	04 33       	cp.w	r3,r2
8000eb24:	fe 98 ff eb 	brls	8000eafa <quorem+0xc6>
8000eb28:	ec c8 ff fb 	sub	r8,r6,-5
8000eb2c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000eb30:	58 09       	cp.w	r9,0
8000eb32:	c0 d1       	brne	8000eb4c <quorem+0x118>
8000eb34:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000eb38:	c0 28       	rjmp	8000eb3c <quorem+0x108>
8000eb3a:	20 16       	sub	r6,1
8000eb3c:	20 48       	sub	r8,4
8000eb3e:	08 38       	cp.w	r8,r4
8000eb40:	e0 88 00 05 	brls	8000eb4a <quorem+0x116>
8000eb44:	70 09       	ld.w	r9,r8[0x0]
8000eb46:	58 09       	cp.w	r9,0
8000eb48:	cf 90       	breq	8000eb3a <quorem+0x106>
8000eb4a:	8f 46       	st.w	r7[0x10],r6
8000eb4c:	0a 9c       	mov	r12,r5
8000eb4e:	2f ed       	sub	sp,-8
8000eb50:	d8 32       	popm	r0-r7,pc
8000eb52:	00 00       	add	r0,r0
8000eb54:	80 00       	ld.sh	r0,r0[0x0]
8000eb56:	fe d2 d4 31 	satsub.w	r2,pc,-11215

8000eb58 <_dtoa_r>:
8000eb58:	d4 31       	pushm	r0-r7,lr
8000eb5a:	21 ad       	sub	sp,104
8000eb5c:	fa c4 ff 74 	sub	r4,sp,-140
8000eb60:	18 97       	mov	r7,r12
8000eb62:	16 95       	mov	r5,r11
8000eb64:	68 2c       	ld.w	r12,r4[0x8]
8000eb66:	50 c9       	stdsp	sp[0x30],r9
8000eb68:	68 16       	ld.w	r6,r4[0x4]
8000eb6a:	68 09       	ld.w	r9,r4[0x0]
8000eb6c:	50 e8       	stdsp	sp[0x38],r8
8000eb6e:	14 94       	mov	r4,r10
8000eb70:	51 2c       	stdsp	sp[0x48],r12
8000eb72:	fa e5 00 08 	st.d	sp[8],r4
8000eb76:	51 59       	stdsp	sp[0x54],r9
8000eb78:	6e 95       	ld.w	r5,r7[0x24]
8000eb7a:	58 05       	cp.w	r5,0
8000eb7c:	c0 91       	brne	8000eb8e <_dtoa_r+0x36>
8000eb7e:	31 0c       	mov	r12,16
8000eb80:	f0 1f 00 47 	mcall	8000ec9c <_dtoa_r+0x144>
8000eb84:	99 35       	st.w	r12[0xc],r5
8000eb86:	8f 9c       	st.w	r7[0x24],r12
8000eb88:	99 15       	st.w	r12[0x4],r5
8000eb8a:	99 25       	st.w	r12[0x8],r5
8000eb8c:	99 05       	st.w	r12[0x0],r5
8000eb8e:	6e 99       	ld.w	r9,r7[0x24]
8000eb90:	72 08       	ld.w	r8,r9[0x0]
8000eb92:	58 08       	cp.w	r8,0
8000eb94:	c0 f0       	breq	8000ebb2 <_dtoa_r+0x5a>
8000eb96:	72 1a       	ld.w	r10,r9[0x4]
8000eb98:	91 1a       	st.w	r8[0x4],r10
8000eb9a:	30 1a       	mov	r10,1
8000eb9c:	72 19       	ld.w	r9,r9[0x4]
8000eb9e:	f4 09 09 49 	lsl	r9,r10,r9
8000eba2:	10 9b       	mov	r11,r8
8000eba4:	91 29       	st.w	r8[0x8],r9
8000eba6:	0e 9c       	mov	r12,r7
8000eba8:	f0 1f 00 3e 	mcall	8000eca0 <_dtoa_r+0x148>
8000ebac:	6e 98       	ld.w	r8,r7[0x24]
8000ebae:	30 09       	mov	r9,0
8000ebb0:	91 09       	st.w	r8[0x0],r9
8000ebb2:	40 28       	lddsp	r8,sp[0x8]
8000ebb4:	10 94       	mov	r4,r8
8000ebb6:	58 08       	cp.w	r8,0
8000ebb8:	c0 64       	brge	8000ebc4 <_dtoa_r+0x6c>
8000ebba:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000ebbe:	50 28       	stdsp	sp[0x8],r8
8000ebc0:	30 18       	mov	r8,1
8000ebc2:	c0 28       	rjmp	8000ebc6 <_dtoa_r+0x6e>
8000ebc4:	30 08       	mov	r8,0
8000ebc6:	8d 08       	st.w	r6[0x0],r8
8000ebc8:	fc 1c 7f f0 	movh	r12,0x7ff0
8000ebcc:	40 26       	lddsp	r6,sp[0x8]
8000ebce:	0c 98       	mov	r8,r6
8000ebd0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ebd4:	18 38       	cp.w	r8,r12
8000ebd6:	c1 e1       	brne	8000ec12 <_dtoa_r+0xba>
8000ebd8:	e0 68 27 0f 	mov	r8,9999
8000ebdc:	41 5b       	lddsp	r11,sp[0x54]
8000ebde:	97 08       	st.w	r11[0x0],r8
8000ebe0:	40 3a       	lddsp	r10,sp[0xc]
8000ebe2:	58 0a       	cp.w	r10,0
8000ebe4:	c0 61       	brne	8000ebf0 <_dtoa_r+0x98>
8000ebe6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000ebea:	c0 31       	brne	8000ebf0 <_dtoa_r+0x98>
8000ebec:	4a ec       	lddpc	r12,8000eca4 <_dtoa_r+0x14c>
8000ebee:	c0 28       	rjmp	8000ebf2 <_dtoa_r+0x9a>
8000ebf0:	4a ec       	lddpc	r12,8000eca8 <_dtoa_r+0x150>
8000ebf2:	41 29       	lddsp	r9,sp[0x48]
8000ebf4:	58 09       	cp.w	r9,0
8000ebf6:	e0 80 05 de 	breq	8000f7b2 <_dtoa_r+0xc5a>
8000ebfa:	f8 c8 ff fd 	sub	r8,r12,-3
8000ebfe:	f8 c9 ff f8 	sub	r9,r12,-8
8000ec02:	11 8b       	ld.ub	r11,r8[0x0]
8000ec04:	30 0a       	mov	r10,0
8000ec06:	41 25       	lddsp	r5,sp[0x48]
8000ec08:	f4 0b 18 00 	cp.b	r11,r10
8000ec0c:	f2 08 17 10 	movne	r8,r9
8000ec10:	c1 58       	rjmp	8000ec3a <_dtoa_r+0xe2>
8000ec12:	fa ea 00 08 	ld.d	r10,sp[8]
8000ec16:	30 08       	mov	r8,0
8000ec18:	fa eb 00 3c 	st.d	sp[60],r10
8000ec1c:	30 09       	mov	r9,0
8000ec1e:	f0 1f 00 24 	mcall	8000ecac <_dtoa_r+0x154>
8000ec22:	c0 f0       	breq	8000ec40 <_dtoa_r+0xe8>
8000ec24:	30 18       	mov	r8,1
8000ec26:	41 5a       	lddsp	r10,sp[0x54]
8000ec28:	95 08       	st.w	r10[0x0],r8
8000ec2a:	4a 2c       	lddpc	r12,8000ecb0 <_dtoa_r+0x158>
8000ec2c:	41 29       	lddsp	r9,sp[0x48]
8000ec2e:	f8 08 00 08 	add	r8,r12,r8
8000ec32:	58 09       	cp.w	r9,0
8000ec34:	e0 80 05 bf 	breq	8000f7b2 <_dtoa_r+0xc5a>
8000ec38:	12 95       	mov	r5,r9
8000ec3a:	8b 08       	st.w	r5[0x0],r8
8000ec3c:	e0 8f 05 bb 	bral	8000f7b2 <_dtoa_r+0xc5a>
8000ec40:	fa c8 ff 9c 	sub	r8,sp,-100
8000ec44:	fa c9 ff a0 	sub	r9,sp,-96
8000ec48:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ec4c:	0e 9c       	mov	r12,r7
8000ec4e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000ec52:	f0 1f 00 19 	mcall	8000ecb4 <_dtoa_r+0x15c>
8000ec56:	18 93       	mov	r3,r12
8000ec58:	58 05       	cp.w	r5,0
8000ec5a:	c0 d0       	breq	8000ec74 <_dtoa_r+0x11c>
8000ec5c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ec60:	30 04       	mov	r4,0
8000ec62:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000ec66:	ea c5 03 ff 	sub	r5,r5,1023
8000ec6a:	10 9b       	mov	r11,r8
8000ec6c:	51 74       	stdsp	sp[0x5c],r4
8000ec6e:	ea 1b 3f f0 	orh	r11,0x3ff0
8000ec72:	c3 28       	rjmp	8000ecd6 <_dtoa_r+0x17e>
8000ec74:	41 88       	lddsp	r8,sp[0x60]
8000ec76:	41 9c       	lddsp	r12,sp[0x64]
8000ec78:	10 0c       	add	r12,r8
8000ec7a:	f8 c5 fb ce 	sub	r5,r12,-1074
8000ec7e:	e0 45 00 20 	cp.w	r5,32
8000ec82:	e0 8a 00 1b 	brle	8000ecb8 <_dtoa_r+0x160>
8000ec86:	f8 cc fb ee 	sub	r12,r12,-1042
8000ec8a:	40 3b       	lddsp	r11,sp[0xc]
8000ec8c:	ea 08 11 40 	rsub	r8,r5,64
8000ec90:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000ec94:	ec 08 09 46 	lsl	r6,r6,r8
8000ec98:	0c 4c       	or	r12,r6
8000ec9a:	c1 48       	rjmp	8000ecc2 <_dtoa_r+0x16a>
8000ec9c:	80 00       	ld.sh	r0,r0[0x0]
8000ec9e:	b7 14       	ld.d	r4,--r11
8000eca0:	80 00       	ld.sh	r0,r0[0x0]
8000eca2:	ff 04 80 01 	ld.sh	r4,pc[-32767]
8000eca6:	1f 14       	ld.sh	r4,pc++
8000eca8:	80 01       	ld.sh	r1,r0[0x0]
8000ecaa:	1f 20       	ld.uh	r0,pc++
8000ecac:	80 00       	ld.sh	r0,r0[0x0]
8000ecae:	a4 06       	st.h	r2[0x0],r6
8000ecb0:	80 01       	ld.sh	r1,r0[0x0]
8000ecb2:	1d f0       	ld.ub	r0,lr[0x7]
8000ecb4:	80 00       	ld.sh	r0,r0[0x0]
8000ecb6:	ff b4       	*unknown*
8000ecb8:	ea 0c 11 20 	rsub	r12,r5,32
8000ecbc:	40 3a       	lddsp	r10,sp[0xc]
8000ecbe:	f4 0c 09 4c 	lsl	r12,r10,r12
8000ecc2:	f0 1f 00 6b 	mcall	8000ee6c <_dtoa_r+0x314>
8000ecc6:	fc 18 fe 10 	movh	r8,0xfe10
8000ecca:	30 19       	mov	r9,1
8000eccc:	ea c5 04 33 	sub	r5,r5,1075
8000ecd0:	f0 0b 00 0b 	add	r11,r8,r11
8000ecd4:	51 79       	stdsp	sp[0x5c],r9
8000ecd6:	30 08       	mov	r8,0
8000ecd8:	fc 19 3f f8 	movh	r9,0x3ff8
8000ecdc:	f0 1f 00 65 	mcall	8000ee70 <_dtoa_r+0x318>
8000ece0:	e0 68 43 61 	mov	r8,17249
8000ece4:	ea 18 63 6f 	orh	r8,0x636f
8000ece8:	e0 69 87 a7 	mov	r9,34727
8000ecec:	ea 19 3f d2 	orh	r9,0x3fd2
8000ecf0:	f0 1f 00 61 	mcall	8000ee74 <_dtoa_r+0x31c>
8000ecf4:	e0 68 c8 b3 	mov	r8,51379
8000ecf8:	ea 18 8b 60 	orh	r8,0x8b60
8000ecfc:	e0 69 8a 28 	mov	r9,35368
8000ed00:	ea 19 3f c6 	orh	r9,0x3fc6
8000ed04:	f0 1f 00 5d 	mcall	8000ee78 <_dtoa_r+0x320>
8000ed08:	0a 9c       	mov	r12,r5
8000ed0a:	14 90       	mov	r0,r10
8000ed0c:	16 91       	mov	r1,r11
8000ed0e:	f0 1f 00 5c 	mcall	8000ee7c <_dtoa_r+0x324>
8000ed12:	e0 68 79 fb 	mov	r8,31227
8000ed16:	ea 18 50 9f 	orh	r8,0x509f
8000ed1a:	e0 69 44 13 	mov	r9,17427
8000ed1e:	ea 19 3f d3 	orh	r9,0x3fd3
8000ed22:	f0 1f 00 55 	mcall	8000ee74 <_dtoa_r+0x31c>
8000ed26:	14 98       	mov	r8,r10
8000ed28:	16 99       	mov	r9,r11
8000ed2a:	00 9a       	mov	r10,r0
8000ed2c:	02 9b       	mov	r11,r1
8000ed2e:	f0 1f 00 53 	mcall	8000ee78 <_dtoa_r+0x320>
8000ed32:	14 90       	mov	r0,r10
8000ed34:	16 91       	mov	r1,r11
8000ed36:	f0 1f 00 53 	mcall	8000ee80 <_dtoa_r+0x328>
8000ed3a:	30 08       	mov	r8,0
8000ed3c:	18 96       	mov	r6,r12
8000ed3e:	30 09       	mov	r9,0
8000ed40:	00 9a       	mov	r10,r0
8000ed42:	02 9b       	mov	r11,r1
8000ed44:	f0 1f 00 50 	mcall	8000ee84 <_dtoa_r+0x32c>
8000ed48:	c0 c0       	breq	8000ed60 <_dtoa_r+0x208>
8000ed4a:	0c 9c       	mov	r12,r6
8000ed4c:	f0 1f 00 4c 	mcall	8000ee7c <_dtoa_r+0x324>
8000ed50:	14 98       	mov	r8,r10
8000ed52:	16 99       	mov	r9,r11
8000ed54:	00 9a       	mov	r10,r0
8000ed56:	02 9b       	mov	r11,r1
8000ed58:	f0 1f 00 4c 	mcall	8000ee88 <_dtoa_r+0x330>
8000ed5c:	f7 b6 00 01 	subeq	r6,1
8000ed60:	59 66       	cp.w	r6,22
8000ed62:	e0 88 00 05 	brls	8000ed6c <_dtoa_r+0x214>
8000ed66:	30 18       	mov	r8,1
8000ed68:	51 48       	stdsp	sp[0x50],r8
8000ed6a:	c1 28       	rjmp	8000ed8e <_dtoa_r+0x236>
8000ed6c:	4c 88       	lddpc	r8,8000ee8c <_dtoa_r+0x334>
8000ed6e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ed72:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000ed76:	f0 1f 00 44 	mcall	8000ee84 <_dtoa_r+0x32c>
8000ed7a:	f9 b4 00 00 	moveq	r4,0
8000ed7e:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000ed82:	f7 b6 01 01 	subne	r6,1
8000ed86:	f9 bc 01 00 	movne	r12,0
8000ed8a:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000ed8e:	41 90       	lddsp	r0,sp[0x64]
8000ed90:	20 10       	sub	r0,1
8000ed92:	0a 10       	sub	r0,r5
8000ed94:	c0 46       	brmi	8000ed9c <_dtoa_r+0x244>
8000ed96:	50 40       	stdsp	sp[0x10],r0
8000ed98:	30 00       	mov	r0,0
8000ed9a:	c0 48       	rjmp	8000eda2 <_dtoa_r+0x24a>
8000ed9c:	30 0b       	mov	r11,0
8000ed9e:	5c 30       	neg	r0
8000eda0:	50 4b       	stdsp	sp[0x10],r11
8000eda2:	ec 02 11 00 	rsub	r2,r6,0
8000eda6:	58 06       	cp.w	r6,0
8000eda8:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000edac:	f5 d6 e4 0a 	addge	r10,r10,r6
8000edb0:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000edb4:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000edb8:	f9 b2 04 00 	movge	r2,0
8000edbc:	e1 d6 e5 10 	sublt	r0,r0,r6
8000edc0:	f9 b9 05 00 	movlt	r9,0
8000edc4:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000edc8:	40 c8       	lddsp	r8,sp[0x30]
8000edca:	58 98       	cp.w	r8,9
8000edcc:	e0 8b 00 20 	brhi	8000ee0c <_dtoa_r+0x2b4>
8000edd0:	58 58       	cp.w	r8,5
8000edd2:	f9 b4 0a 01 	movle	r4,1
8000edd6:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000edda:	f7 b5 09 04 	subgt	r5,4
8000edde:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000ede2:	f9 b4 09 00 	movgt	r4,0
8000ede6:	40 cc       	lddsp	r12,sp[0x30]
8000ede8:	58 3c       	cp.w	r12,3
8000edea:	c2 d0       	breq	8000ee44 <_dtoa_r+0x2ec>
8000edec:	e0 89 00 05 	brgt	8000edf6 <_dtoa_r+0x29e>
8000edf0:	58 2c       	cp.w	r12,2
8000edf2:	c1 01       	brne	8000ee12 <_dtoa_r+0x2ba>
8000edf4:	c1 88       	rjmp	8000ee24 <_dtoa_r+0x2cc>
8000edf6:	40 cb       	lddsp	r11,sp[0x30]
8000edf8:	58 4b       	cp.w	r11,4
8000edfa:	c0 60       	breq	8000ee06 <_dtoa_r+0x2ae>
8000edfc:	58 5b       	cp.w	r11,5
8000edfe:	c0 a1       	brne	8000ee12 <_dtoa_r+0x2ba>
8000ee00:	30 1a       	mov	r10,1
8000ee02:	50 da       	stdsp	sp[0x34],r10
8000ee04:	c2 28       	rjmp	8000ee48 <_dtoa_r+0x2f0>
8000ee06:	30 19       	mov	r9,1
8000ee08:	50 d9       	stdsp	sp[0x34],r9
8000ee0a:	c0 f8       	rjmp	8000ee28 <_dtoa_r+0x2d0>
8000ee0c:	30 08       	mov	r8,0
8000ee0e:	30 14       	mov	r4,1
8000ee10:	50 c8       	stdsp	sp[0x30],r8
8000ee12:	3f f5       	mov	r5,-1
8000ee14:	30 1c       	mov	r12,1
8000ee16:	30 0b       	mov	r11,0
8000ee18:	50 95       	stdsp	sp[0x24],r5
8000ee1a:	50 dc       	stdsp	sp[0x34],r12
8000ee1c:	0a 91       	mov	r1,r5
8000ee1e:	31 28       	mov	r8,18
8000ee20:	50 eb       	stdsp	sp[0x38],r11
8000ee22:	c2 08       	rjmp	8000ee62 <_dtoa_r+0x30a>
8000ee24:	30 0a       	mov	r10,0
8000ee26:	50 da       	stdsp	sp[0x34],r10
8000ee28:	40 e9       	lddsp	r9,sp[0x38]
8000ee2a:	58 09       	cp.w	r9,0
8000ee2c:	e0 89 00 07 	brgt	8000ee3a <_dtoa_r+0x2e2>
8000ee30:	30 18       	mov	r8,1
8000ee32:	50 98       	stdsp	sp[0x24],r8
8000ee34:	10 91       	mov	r1,r8
8000ee36:	50 e8       	stdsp	sp[0x38],r8
8000ee38:	c1 58       	rjmp	8000ee62 <_dtoa_r+0x30a>
8000ee3a:	40 e5       	lddsp	r5,sp[0x38]
8000ee3c:	50 95       	stdsp	sp[0x24],r5
8000ee3e:	0a 91       	mov	r1,r5
8000ee40:	0a 98       	mov	r8,r5
8000ee42:	c1 08       	rjmp	8000ee62 <_dtoa_r+0x30a>
8000ee44:	30 0c       	mov	r12,0
8000ee46:	50 dc       	stdsp	sp[0x34],r12
8000ee48:	40 eb       	lddsp	r11,sp[0x38]
8000ee4a:	ec 0b 00 0b 	add	r11,r6,r11
8000ee4e:	50 9b       	stdsp	sp[0x24],r11
8000ee50:	16 98       	mov	r8,r11
8000ee52:	2f f8       	sub	r8,-1
8000ee54:	58 08       	cp.w	r8,0
8000ee56:	e0 89 00 05 	brgt	8000ee60 <_dtoa_r+0x308>
8000ee5a:	10 91       	mov	r1,r8
8000ee5c:	30 18       	mov	r8,1
8000ee5e:	c0 28       	rjmp	8000ee62 <_dtoa_r+0x30a>
8000ee60:	10 91       	mov	r1,r8
8000ee62:	30 09       	mov	r9,0
8000ee64:	6e 9a       	ld.w	r10,r7[0x24]
8000ee66:	95 19       	st.w	r10[0x4],r9
8000ee68:	30 49       	mov	r9,4
8000ee6a:	c1 78       	rjmp	8000ee98 <_dtoa_r+0x340>
8000ee6c:	80 00       	ld.sh	r0,r0[0x0]
8000ee6e:	a3 1e       	ld.d	lr,--r1
8000ee70:	80 00       	ld.sh	r0,r0[0x0]
8000ee72:	a0 48       	st.h	r0[0x8],r8
8000ee74:	80 00       	ld.sh	r0,r0[0x0]
8000ee76:	9e 70       	ld.sh	r0,pc[0xe]
8000ee78:	80 00       	ld.sh	r0,r0[0x0]
8000ee7a:	a1 e4       	*unknown*
8000ee7c:	80 00       	ld.sh	r0,r0[0x0]
8000ee7e:	a3 26       	st.d	r1++,r6
8000ee80:	80 00       	ld.sh	r0,r0[0x0]
8000ee82:	a2 f8       	st.b	r1[0x7],r8
8000ee84:	80 00       	ld.sh	r0,r0[0x0]
8000ee86:	a4 94       	st.b	r2[0x1],r4
8000ee88:	80 00       	ld.sh	r0,r0[0x0]
8000ee8a:	a4 06       	st.h	r2[0x0],r6
8000ee8c:	80 01       	ld.sh	r1,r0[0x0]
8000ee8e:	1f cc       	ld.ub	r12,pc[0x4]
8000ee90:	6a 1a       	ld.w	r10,r5[0x4]
8000ee92:	a1 79       	lsl	r9,0x1
8000ee94:	2f fa       	sub	r10,-1
8000ee96:	8b 1a       	st.w	r5[0x4],r10
8000ee98:	6e 95       	ld.w	r5,r7[0x24]
8000ee9a:	f2 ca ff ec 	sub	r10,r9,-20
8000ee9e:	10 3a       	cp.w	r10,r8
8000eea0:	fe 98 ff f8 	brls	8000ee90 <_dtoa_r+0x338>
8000eea4:	6a 1b       	ld.w	r11,r5[0x4]
8000eea6:	0e 9c       	mov	r12,r7
8000eea8:	f0 1f 00 53 	mcall	8000eff4 <_dtoa_r+0x49c>
8000eeac:	58 e1       	cp.w	r1,14
8000eeae:	5f 88       	srls	r8
8000eeb0:	8b 0c       	st.w	r5[0x0],r12
8000eeb2:	f1 e4 00 04 	and	r4,r8,r4
8000eeb6:	6e 98       	ld.w	r8,r7[0x24]
8000eeb8:	70 08       	ld.w	r8,r8[0x0]
8000eeba:	50 88       	stdsp	sp[0x20],r8
8000eebc:	e0 80 01 98 	breq	8000f1ec <_dtoa_r+0x694>
8000eec0:	58 06       	cp.w	r6,0
8000eec2:	e0 8a 00 40 	brle	8000ef42 <_dtoa_r+0x3ea>
8000eec6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000eeca:	4c c8       	lddpc	r8,8000eff8 <_dtoa_r+0x4a0>
8000eecc:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000eed0:	fa e5 00 18 	st.d	sp[24],r4
8000eed4:	ec 04 14 04 	asr	r4,r6,0x4
8000eed8:	ed b4 00 04 	bld	r4,0x4
8000eedc:	c0 30       	breq	8000eee2 <_dtoa_r+0x38a>
8000eede:	30 25       	mov	r5,2
8000eee0:	c0 f8       	rjmp	8000eefe <_dtoa_r+0x3a6>
8000eee2:	4c 78       	lddpc	r8,8000effc <_dtoa_r+0x4a4>
8000eee4:	f0 e8 00 20 	ld.d	r8,r8[32]
8000eee8:	fa ea 00 3c 	ld.d	r10,sp[60]
8000eeec:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000eef0:	f0 1f 00 44 	mcall	8000f000 <_dtoa_r+0x4a8>
8000eef4:	30 35       	mov	r5,3
8000eef6:	14 98       	mov	r8,r10
8000eef8:	16 99       	mov	r9,r11
8000eefa:	fa e9 00 08 	st.d	sp[8],r8
8000eefe:	4c 0c       	lddpc	r12,8000effc <_dtoa_r+0x4a4>
8000ef00:	50 a3       	stdsp	sp[0x28],r3
8000ef02:	0c 93       	mov	r3,r6
8000ef04:	18 96       	mov	r6,r12
8000ef06:	c0 f8       	rjmp	8000ef24 <_dtoa_r+0x3cc>
8000ef08:	fa ea 00 18 	ld.d	r10,sp[24]
8000ef0c:	ed b4 00 00 	bld	r4,0x0
8000ef10:	c0 81       	brne	8000ef20 <_dtoa_r+0x3c8>
8000ef12:	ec e8 00 00 	ld.d	r8,r6[0]
8000ef16:	2f f5       	sub	r5,-1
8000ef18:	f0 1f 00 3b 	mcall	8000f004 <_dtoa_r+0x4ac>
8000ef1c:	fa eb 00 18 	st.d	sp[24],r10
8000ef20:	a1 54       	asr	r4,0x1
8000ef22:	2f 86       	sub	r6,-8
8000ef24:	58 04       	cp.w	r4,0
8000ef26:	cf 11       	brne	8000ef08 <_dtoa_r+0x3b0>
8000ef28:	fa e8 00 18 	ld.d	r8,sp[24]
8000ef2c:	fa ea 00 08 	ld.d	r10,sp[8]
8000ef30:	06 96       	mov	r6,r3
8000ef32:	f0 1f 00 34 	mcall	8000f000 <_dtoa_r+0x4a8>
8000ef36:	40 a3       	lddsp	r3,sp[0x28]
8000ef38:	14 98       	mov	r8,r10
8000ef3a:	16 99       	mov	r9,r11
8000ef3c:	fa e9 00 08 	st.d	sp[8],r8
8000ef40:	c2 d8       	rjmp	8000ef9a <_dtoa_r+0x442>
8000ef42:	ec 08 11 00 	rsub	r8,r6,0
8000ef46:	c0 31       	brne	8000ef4c <_dtoa_r+0x3f4>
8000ef48:	30 25       	mov	r5,2
8000ef4a:	c2 88       	rjmp	8000ef9a <_dtoa_r+0x442>
8000ef4c:	4a cc       	lddpc	r12,8000effc <_dtoa_r+0x4a4>
8000ef4e:	f0 04 14 04 	asr	r4,r8,0x4
8000ef52:	50 1c       	stdsp	sp[0x4],r12
8000ef54:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000ef58:	4a 89       	lddpc	r9,8000eff8 <_dtoa_r+0x4a0>
8000ef5a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ef5e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ef62:	f0 1f 00 29 	mcall	8000f004 <_dtoa_r+0x4ac>
8000ef66:	40 1c       	lddsp	r12,sp[0x4]
8000ef68:	50 63       	stdsp	sp[0x18],r3
8000ef6a:	30 25       	mov	r5,2
8000ef6c:	0c 93       	mov	r3,r6
8000ef6e:	fa eb 00 08 	st.d	sp[8],r10
8000ef72:	18 96       	mov	r6,r12
8000ef74:	c0 f8       	rjmp	8000ef92 <_dtoa_r+0x43a>
8000ef76:	fa ea 00 08 	ld.d	r10,sp[8]
8000ef7a:	ed b4 00 00 	bld	r4,0x0
8000ef7e:	c0 81       	brne	8000ef8e <_dtoa_r+0x436>
8000ef80:	ec e8 00 00 	ld.d	r8,r6[0]
8000ef84:	2f f5       	sub	r5,-1
8000ef86:	f0 1f 00 20 	mcall	8000f004 <_dtoa_r+0x4ac>
8000ef8a:	fa eb 00 08 	st.d	sp[8],r10
8000ef8e:	a1 54       	asr	r4,0x1
8000ef90:	2f 86       	sub	r6,-8
8000ef92:	58 04       	cp.w	r4,0
8000ef94:	cf 11       	brne	8000ef76 <_dtoa_r+0x41e>
8000ef96:	06 96       	mov	r6,r3
8000ef98:	40 63       	lddsp	r3,sp[0x18]
8000ef9a:	41 4a       	lddsp	r10,sp[0x50]
8000ef9c:	58 0a       	cp.w	r10,0
8000ef9e:	c3 70       	breq	8000f00c <_dtoa_r+0x4b4>
8000efa0:	fa e8 00 08 	ld.d	r8,sp[8]
8000efa4:	58 01       	cp.w	r1,0
8000efa6:	5f 94       	srgt	r4
8000efa8:	fa e9 00 18 	st.d	sp[24],r8
8000efac:	30 08       	mov	r8,0
8000efae:	fc 19 3f f0 	movh	r9,0x3ff0
8000efb2:	fa ea 00 18 	ld.d	r10,sp[24]
8000efb6:	f0 1f 00 15 	mcall	8000f008 <_dtoa_r+0x4b0>
8000efba:	f9 bc 00 00 	moveq	r12,0
8000efbe:	f9 bc 01 01 	movne	r12,1
8000efc2:	e9 ec 00 0c 	and	r12,r4,r12
8000efc6:	c2 30       	breq	8000f00c <_dtoa_r+0x4b4>
8000efc8:	40 98       	lddsp	r8,sp[0x24]
8000efca:	58 08       	cp.w	r8,0
8000efcc:	e0 8a 01 0c 	brle	8000f1e4 <_dtoa_r+0x68c>
8000efd0:	30 08       	mov	r8,0
8000efd2:	fc 19 40 24 	movh	r9,0x4024
8000efd6:	ec c4 00 01 	sub	r4,r6,1
8000efda:	fa ea 00 18 	ld.d	r10,sp[24]
8000efde:	2f f5       	sub	r5,-1
8000efe0:	50 64       	stdsp	sp[0x18],r4
8000efe2:	f0 1f 00 09 	mcall	8000f004 <_dtoa_r+0x4ac>
8000efe6:	40 94       	lddsp	r4,sp[0x24]
8000efe8:	14 98       	mov	r8,r10
8000efea:	16 99       	mov	r9,r11
8000efec:	fa e9 00 08 	st.d	sp[8],r8
8000eff0:	c1 08       	rjmp	8000f010 <_dtoa_r+0x4b8>
8000eff2:	00 00       	add	r0,r0
8000eff4:	80 00       	ld.sh	r0,r0[0x0]
8000eff6:	ff 3c 80 01 	ld.ub	r12,pc[-32767]
8000effa:	1f cc       	ld.ub	r12,pc[0x4]
8000effc:	80 01       	ld.sh	r1,r0[0x0]
8000effe:	20 94       	sub	r4,9
8000f000:	80 00       	ld.sh	r0,r0[0x0]
8000f002:	a4 fc       	st.b	r2[0x7],r12
8000f004:	80 00       	ld.sh	r0,r0[0x0]
8000f006:	9e 70       	ld.sh	r0,pc[0xe]
8000f008:	80 00       	ld.sh	r0,r0[0x0]
8000f00a:	a4 94       	st.b	r2[0x1],r4
8000f00c:	50 66       	stdsp	sp[0x18],r6
8000f00e:	02 94       	mov	r4,r1
8000f010:	0a 9c       	mov	r12,r5
8000f012:	f0 1f 00 69 	mcall	8000f1b4 <_dtoa_r+0x65c>
8000f016:	fa e8 00 08 	ld.d	r8,sp[8]
8000f01a:	f0 1f 00 68 	mcall	8000f1b8 <_dtoa_r+0x660>
8000f01e:	30 08       	mov	r8,0
8000f020:	fc 19 40 1c 	movh	r9,0x401c
8000f024:	f0 1f 00 66 	mcall	8000f1bc <_dtoa_r+0x664>
8000f028:	14 98       	mov	r8,r10
8000f02a:	16 99       	mov	r9,r11
8000f02c:	fa e9 00 28 	st.d	sp[40],r8
8000f030:	fc 18 fc c0 	movh	r8,0xfcc0
8000f034:	40 a5       	lddsp	r5,sp[0x28]
8000f036:	10 05       	add	r5,r8
8000f038:	50 a5       	stdsp	sp[0x28],r5
8000f03a:	58 04       	cp.w	r4,0
8000f03c:	c2 11       	brne	8000f07e <_dtoa_r+0x526>
8000f03e:	fa ea 00 08 	ld.d	r10,sp[8]
8000f042:	30 08       	mov	r8,0
8000f044:	fc 19 40 14 	movh	r9,0x4014
8000f048:	f0 1f 00 5e 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f04c:	40 bc       	lddsp	r12,sp[0x2c]
8000f04e:	fa eb 00 08 	st.d	sp[8],r10
8000f052:	14 98       	mov	r8,r10
8000f054:	16 99       	mov	r9,r11
8000f056:	18 9a       	mov	r10,r12
8000f058:	0a 9b       	mov	r11,r5
8000f05a:	f0 1f 00 5b 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f05e:	e0 81 02 74 	brne	8000f546 <_dtoa_r+0x9ee>
8000f062:	0a 98       	mov	r8,r5
8000f064:	40 b9       	lddsp	r9,sp[0x2c]
8000f066:	ee 18 80 00 	eorh	r8,0x8000
8000f06a:	fa ea 00 08 	ld.d	r10,sp[8]
8000f06e:	10 95       	mov	r5,r8
8000f070:	12 98       	mov	r8,r9
8000f072:	0a 99       	mov	r9,r5
8000f074:	f0 1f 00 54 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f078:	e0 81 02 5e 	brne	8000f534 <_dtoa_r+0x9dc>
8000f07c:	cb 48       	rjmp	8000f1e4 <_dtoa_r+0x68c>
8000f07e:	4d 39       	lddpc	r9,8000f1c8 <_dtoa_r+0x670>
8000f080:	e8 c8 00 01 	sub	r8,r4,1
8000f084:	40 d5       	lddsp	r5,sp[0x34]
8000f086:	58 05       	cp.w	r5,0
8000f088:	c4 f0       	breq	8000f126 <_dtoa_r+0x5ce>
8000f08a:	30 0c       	mov	r12,0
8000f08c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f090:	51 3c       	stdsp	sp[0x4c],r12
8000f092:	30 0a       	mov	r10,0
8000f094:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f098:	f0 1f 00 4d 	mcall	8000f1cc <_dtoa_r+0x674>
8000f09c:	fa e8 00 28 	ld.d	r8,sp[40]
8000f0a0:	40 85       	lddsp	r5,sp[0x20]
8000f0a2:	f0 1f 00 48 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f0a6:	fa eb 00 28 	st.d	sp[40],r10
8000f0aa:	fa ea 00 08 	ld.d	r10,sp[8]
8000f0ae:	f0 1f 00 49 	mcall	8000f1d0 <_dtoa_r+0x678>
8000f0b2:	51 6c       	stdsp	sp[0x58],r12
8000f0b4:	f0 1f 00 40 	mcall	8000f1b4 <_dtoa_r+0x65c>
8000f0b8:	14 98       	mov	r8,r10
8000f0ba:	16 99       	mov	r9,r11
8000f0bc:	fa ea 00 08 	ld.d	r10,sp[8]
8000f0c0:	f0 1f 00 40 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f0c4:	fa eb 00 08 	st.d	sp[8],r10
8000f0c8:	41 68       	lddsp	r8,sp[0x58]
8000f0ca:	2d 08       	sub	r8,-48
8000f0cc:	0a c8       	st.b	r5++,r8
8000f0ce:	41 39       	lddsp	r9,sp[0x4c]
8000f0d0:	2f f9       	sub	r9,-1
8000f0d2:	51 39       	stdsp	sp[0x4c],r9
8000f0d4:	fa e8 00 28 	ld.d	r8,sp[40]
8000f0d8:	f0 1f 00 3b 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f0dc:	e0 81 03 5a 	brne	8000f790 <_dtoa_r+0xc38>
8000f0e0:	fa e8 00 08 	ld.d	r8,sp[8]
8000f0e4:	30 0a       	mov	r10,0
8000f0e6:	fc 1b 3f f0 	movh	r11,0x3ff0
8000f0ea:	f0 1f 00 36 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f0ee:	fa e8 00 28 	ld.d	r8,sp[40]
8000f0f2:	f0 1f 00 35 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f0f6:	fa ea 00 28 	ld.d	r10,sp[40]
8000f0fa:	30 08       	mov	r8,0
8000f0fc:	fc 19 40 24 	movh	r9,0x4024
8000f100:	e0 81 00 e8 	brne	8000f2d0 <_dtoa_r+0x778>
8000f104:	41 3c       	lddsp	r12,sp[0x4c]
8000f106:	08 3c       	cp.w	r12,r4
8000f108:	c6 e4       	brge	8000f1e4 <_dtoa_r+0x68c>
8000f10a:	f0 1f 00 2c 	mcall	8000f1b8 <_dtoa_r+0x660>
8000f10e:	30 08       	mov	r8,0
8000f110:	fa eb 00 28 	st.d	sp[40],r10
8000f114:	fc 19 40 24 	movh	r9,0x4024
8000f118:	fa ea 00 08 	ld.d	r10,sp[8]
8000f11c:	f0 1f 00 27 	mcall	8000f1b8 <_dtoa_r+0x660>
8000f120:	fa eb 00 08 	st.d	sp[8],r10
8000f124:	cc 3b       	rjmp	8000f0aa <_dtoa_r+0x552>
8000f126:	40 85       	lddsp	r5,sp[0x20]
8000f128:	08 05       	add	r5,r4
8000f12a:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000f12e:	51 35       	stdsp	sp[0x4c],r5
8000f130:	fa e8 00 28 	ld.d	r8,sp[40]
8000f134:	40 85       	lddsp	r5,sp[0x20]
8000f136:	f0 1f 00 21 	mcall	8000f1b8 <_dtoa_r+0x660>
8000f13a:	fa eb 00 28 	st.d	sp[40],r10
8000f13e:	fa ea 00 08 	ld.d	r10,sp[8]
8000f142:	f0 1f 00 24 	mcall	8000f1d0 <_dtoa_r+0x678>
8000f146:	51 6c       	stdsp	sp[0x58],r12
8000f148:	f0 1f 00 1b 	mcall	8000f1b4 <_dtoa_r+0x65c>
8000f14c:	14 98       	mov	r8,r10
8000f14e:	16 99       	mov	r9,r11
8000f150:	fa ea 00 08 	ld.d	r10,sp[8]
8000f154:	f0 1f 00 1b 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f158:	fa eb 00 08 	st.d	sp[8],r10
8000f15c:	41 68       	lddsp	r8,sp[0x58]
8000f15e:	2d 08       	sub	r8,-48
8000f160:	0a c8       	st.b	r5++,r8
8000f162:	41 3c       	lddsp	r12,sp[0x4c]
8000f164:	18 35       	cp.w	r5,r12
8000f166:	c3 71       	brne	8000f1d4 <_dtoa_r+0x67c>
8000f168:	30 08       	mov	r8,0
8000f16a:	fc 19 3f e0 	movh	r9,0x3fe0
8000f16e:	fa ea 00 28 	ld.d	r10,sp[40]
8000f172:	f0 1f 00 13 	mcall	8000f1bc <_dtoa_r+0x664>
8000f176:	40 85       	lddsp	r5,sp[0x20]
8000f178:	fa e8 00 08 	ld.d	r8,sp[8]
8000f17c:	08 05       	add	r5,r4
8000f17e:	f0 1f 00 12 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f182:	e0 81 00 a7 	brne	8000f2d0 <_dtoa_r+0x778>
8000f186:	fa e8 00 28 	ld.d	r8,sp[40]
8000f18a:	30 0a       	mov	r10,0
8000f18c:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f190:	f0 1f 00 0c 	mcall	8000f1c0 <_dtoa_r+0x668>
8000f194:	14 98       	mov	r8,r10
8000f196:	16 99       	mov	r9,r11
8000f198:	fa ea 00 08 	ld.d	r10,sp[8]
8000f19c:	f0 1f 00 0a 	mcall	8000f1c4 <_dtoa_r+0x66c>
8000f1a0:	c2 20       	breq	8000f1e4 <_dtoa_r+0x68c>
8000f1a2:	33 09       	mov	r9,48
8000f1a4:	0a 98       	mov	r8,r5
8000f1a6:	11 7a       	ld.ub	r10,--r8
8000f1a8:	f2 0a 18 00 	cp.b	r10,r9
8000f1ac:	e0 81 02 f2 	brne	8000f790 <_dtoa_r+0xc38>
8000f1b0:	10 95       	mov	r5,r8
8000f1b2:	cf 9b       	rjmp	8000f1a4 <_dtoa_r+0x64c>
8000f1b4:	80 00       	ld.sh	r0,r0[0x0]
8000f1b6:	a3 26       	st.d	r1++,r6
8000f1b8:	80 00       	ld.sh	r0,r0[0x0]
8000f1ba:	9e 70       	ld.sh	r0,pc[0xe]
8000f1bc:	80 00       	ld.sh	r0,r0[0x0]
8000f1be:	a1 e4       	*unknown*
8000f1c0:	80 00       	ld.sh	r0,r0[0x0]
8000f1c2:	a0 48       	st.h	r0[0x8],r8
8000f1c4:	80 00       	ld.sh	r0,r0[0x0]
8000f1c6:	a4 94       	st.b	r2[0x1],r4
8000f1c8:	80 01       	ld.sh	r1,r0[0x0]
8000f1ca:	1f cc       	ld.ub	r12,pc[0x4]
8000f1cc:	80 00       	ld.sh	r0,r0[0x0]
8000f1ce:	a4 fc       	st.b	r2[0x7],r12
8000f1d0:	80 00       	ld.sh	r0,r0[0x0]
8000f1d2:	a2 f8       	st.b	r1[0x7],r8
8000f1d4:	30 08       	mov	r8,0
8000f1d6:	fc 19 40 24 	movh	r9,0x4024
8000f1da:	f0 1f 00 56 	mcall	8000f330 <_dtoa_r+0x7d8>
8000f1de:	fa eb 00 08 	st.d	sp[8],r10
8000f1e2:	ca eb       	rjmp	8000f13e <_dtoa_r+0x5e6>
8000f1e4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f1e8:	fa eb 00 08 	st.d	sp[8],r10
8000f1ec:	58 e6       	cp.w	r6,14
8000f1ee:	5f ab       	srle	r11
8000f1f0:	41 8a       	lddsp	r10,sp[0x60]
8000f1f2:	30 08       	mov	r8,0
8000f1f4:	f4 09 11 ff 	rsub	r9,r10,-1
8000f1f8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000f1fc:	f0 09 18 00 	cp.b	r9,r8
8000f200:	e0 80 00 81 	breq	8000f302 <_dtoa_r+0x7aa>
8000f204:	40 ea       	lddsp	r10,sp[0x38]
8000f206:	58 01       	cp.w	r1,0
8000f208:	5f a9       	srle	r9
8000f20a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000f20e:	4c aa       	lddpc	r10,8000f334 <_dtoa_r+0x7dc>
8000f210:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000f214:	fa e5 00 10 	st.d	sp[16],r4
8000f218:	f0 09 18 00 	cp.b	r9,r8
8000f21c:	c1 40       	breq	8000f244 <_dtoa_r+0x6ec>
8000f21e:	58 01       	cp.w	r1,0
8000f220:	e0 81 01 8a 	brne	8000f534 <_dtoa_r+0x9dc>
8000f224:	30 08       	mov	r8,0
8000f226:	fc 19 40 14 	movh	r9,0x4014
8000f22a:	08 9a       	mov	r10,r4
8000f22c:	0a 9b       	mov	r11,r5
8000f22e:	f0 1f 00 41 	mcall	8000f330 <_dtoa_r+0x7d8>
8000f232:	fa e8 00 08 	ld.d	r8,sp[8]
8000f236:	f0 1f 00 41 	mcall	8000f338 <_dtoa_r+0x7e0>
8000f23a:	e0 81 01 7d 	brne	8000f534 <_dtoa_r+0x9dc>
8000f23e:	02 92       	mov	r2,r1
8000f240:	e0 8f 01 85 	bral	8000f54a <_dtoa_r+0x9f2>
8000f244:	40 85       	lddsp	r5,sp[0x20]
8000f246:	30 14       	mov	r4,1
8000f248:	fa e8 00 10 	ld.d	r8,sp[16]
8000f24c:	fa ea 00 08 	ld.d	r10,sp[8]
8000f250:	f0 1f 00 3b 	mcall	8000f33c <_dtoa_r+0x7e4>
8000f254:	f0 1f 00 3b 	mcall	8000f340 <_dtoa_r+0x7e8>
8000f258:	18 92       	mov	r2,r12
8000f25a:	f0 1f 00 3b 	mcall	8000f344 <_dtoa_r+0x7ec>
8000f25e:	fa e8 00 10 	ld.d	r8,sp[16]
8000f262:	f0 1f 00 34 	mcall	8000f330 <_dtoa_r+0x7d8>
8000f266:	14 98       	mov	r8,r10
8000f268:	16 99       	mov	r9,r11
8000f26a:	fa ea 00 08 	ld.d	r10,sp[8]
8000f26e:	f0 1f 00 37 	mcall	8000f348 <_dtoa_r+0x7f0>
8000f272:	fa eb 00 08 	st.d	sp[8],r10
8000f276:	e4 c8 ff d0 	sub	r8,r2,-48
8000f27a:	0a c8       	st.b	r5++,r8
8000f27c:	fc 19 40 24 	movh	r9,0x4024
8000f280:	30 08       	mov	r8,0
8000f282:	02 34       	cp.w	r4,r1
8000f284:	c3 31       	brne	8000f2ea <_dtoa_r+0x792>
8000f286:	fa e8 00 08 	ld.d	r8,sp[8]
8000f28a:	f0 1f 00 31 	mcall	8000f34c <_dtoa_r+0x7f4>
8000f28e:	16 91       	mov	r1,r11
8000f290:	14 90       	mov	r0,r10
8000f292:	14 98       	mov	r8,r10
8000f294:	02 99       	mov	r9,r1
8000f296:	fa ea 00 10 	ld.d	r10,sp[16]
8000f29a:	f0 1f 00 2e 	mcall	8000f350 <_dtoa_r+0x7f8>
8000f29e:	c1 a1       	brne	8000f2d2 <_dtoa_r+0x77a>
8000f2a0:	fa e8 00 10 	ld.d	r8,sp[16]
8000f2a4:	00 9a       	mov	r10,r0
8000f2a6:	02 9b       	mov	r11,r1
8000f2a8:	f0 1f 00 2b 	mcall	8000f354 <_dtoa_r+0x7fc>
8000f2ac:	e0 80 02 71 	breq	8000f78e <_dtoa_r+0xc36>
8000f2b0:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000f2b4:	c0 f1       	brne	8000f2d2 <_dtoa_r+0x77a>
8000f2b6:	e0 8f 02 6c 	bral	8000f78e <_dtoa_r+0xc36>
8000f2ba:	40 8a       	lddsp	r10,sp[0x20]
8000f2bc:	14 38       	cp.w	r8,r10
8000f2be:	c0 30       	breq	8000f2c4 <_dtoa_r+0x76c>
8000f2c0:	10 95       	mov	r5,r8
8000f2c2:	c0 98       	rjmp	8000f2d4 <_dtoa_r+0x77c>
8000f2c4:	33 08       	mov	r8,48
8000f2c6:	40 89       	lddsp	r9,sp[0x20]
8000f2c8:	2f f6       	sub	r6,-1
8000f2ca:	b2 88       	st.b	r9[0x0],r8
8000f2cc:	40 88       	lddsp	r8,sp[0x20]
8000f2ce:	c0 88       	rjmp	8000f2de <_dtoa_r+0x786>
8000f2d0:	40 66       	lddsp	r6,sp[0x18]
8000f2d2:	33 99       	mov	r9,57
8000f2d4:	0a 98       	mov	r8,r5
8000f2d6:	11 7a       	ld.ub	r10,--r8
8000f2d8:	f2 0a 18 00 	cp.b	r10,r9
8000f2dc:	ce f0       	breq	8000f2ba <_dtoa_r+0x762>
8000f2de:	50 66       	stdsp	sp[0x18],r6
8000f2e0:	11 89       	ld.ub	r9,r8[0x0]
8000f2e2:	2f f9       	sub	r9,-1
8000f2e4:	b0 89       	st.b	r8[0x0],r9
8000f2e6:	e0 8f 02 55 	bral	8000f790 <_dtoa_r+0xc38>
8000f2ea:	f0 1f 00 12 	mcall	8000f330 <_dtoa_r+0x7d8>
8000f2ee:	2f f4       	sub	r4,-1
8000f2f0:	fa eb 00 08 	st.d	sp[8],r10
8000f2f4:	30 08       	mov	r8,0
8000f2f6:	30 09       	mov	r9,0
8000f2f8:	f0 1f 00 17 	mcall	8000f354 <_dtoa_r+0x7fc>
8000f2fc:	ca 60       	breq	8000f248 <_dtoa_r+0x6f0>
8000f2fe:	e0 8f 02 48 	bral	8000f78e <_dtoa_r+0xc36>
8000f302:	40 d8       	lddsp	r8,sp[0x34]
8000f304:	58 08       	cp.w	r8,0
8000f306:	c0 51       	brne	8000f310 <_dtoa_r+0x7b8>
8000f308:	04 98       	mov	r8,r2
8000f30a:	00 95       	mov	r5,r0
8000f30c:	40 d4       	lddsp	r4,sp[0x34]
8000f30e:	c4 a8       	rjmp	8000f3a2 <_dtoa_r+0x84a>
8000f310:	40 c5       	lddsp	r5,sp[0x30]
8000f312:	58 15       	cp.w	r5,1
8000f314:	e0 89 00 22 	brgt	8000f358 <_dtoa_r+0x800>
8000f318:	41 74       	lddsp	r4,sp[0x5c]
8000f31a:	58 04       	cp.w	r4,0
8000f31c:	c0 40       	breq	8000f324 <_dtoa_r+0x7cc>
8000f31e:	f4 c9 fb cd 	sub	r9,r10,-1075
8000f322:	c0 48       	rjmp	8000f32a <_dtoa_r+0x7d2>
8000f324:	41 99       	lddsp	r9,sp[0x64]
8000f326:	f2 09 11 36 	rsub	r9,r9,54
8000f32a:	04 98       	mov	r8,r2
8000f32c:	00 95       	mov	r5,r0
8000f32e:	c2 f8       	rjmp	8000f38c <_dtoa_r+0x834>
8000f330:	80 00       	ld.sh	r0,r0[0x0]
8000f332:	9e 70       	ld.sh	r0,pc[0xe]
8000f334:	80 01       	ld.sh	r1,r0[0x0]
8000f336:	1f cc       	ld.ub	r12,pc[0x4]
8000f338:	80 00       	ld.sh	r0,r0[0x0]
8000f33a:	a4 2c       	st.h	r2[0x4],r12
8000f33c:	80 00       	ld.sh	r0,r0[0x0]
8000f33e:	a4 fc       	st.b	r2[0x7],r12
8000f340:	80 00       	ld.sh	r0,r0[0x0]
8000f342:	a2 f8       	st.b	r1[0x7],r8
8000f344:	80 00       	ld.sh	r0,r0[0x0]
8000f346:	a3 26       	st.d	r1++,r6
8000f348:	80 00       	ld.sh	r0,r0[0x0]
8000f34a:	a0 48       	st.h	r0[0x8],r8
8000f34c:	80 00       	ld.sh	r0,r0[0x0]
8000f34e:	a1 e4       	*unknown*
8000f350:	80 00       	ld.sh	r0,r0[0x0]
8000f352:	a4 94       	st.b	r2[0x1],r4
8000f354:	80 00       	ld.sh	r0,r0[0x0]
8000f356:	a4 06       	st.h	r2[0x0],r6
8000f358:	e2 c8 00 01 	sub	r8,r1,1
8000f35c:	58 01       	cp.w	r1,0
8000f35e:	e0 05 17 40 	movge	r5,r0
8000f362:	e2 09 17 40 	movge	r9,r1
8000f366:	e1 d1 e5 15 	sublt	r5,r0,r1
8000f36a:	f9 b9 05 00 	movlt	r9,0
8000f36e:	10 32       	cp.w	r2,r8
8000f370:	e5 d8 e4 18 	subge	r8,r2,r8
8000f374:	f1 d2 e5 18 	sublt	r8,r8,r2
8000f378:	e5 d8 e5 02 	addlt	r2,r2,r8
8000f37c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000f380:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000f384:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000f388:	f9 b8 05 00 	movlt	r8,0
8000f38c:	40 4b       	lddsp	r11,sp[0x10]
8000f38e:	12 0b       	add	r11,r9
8000f390:	50 08       	stdsp	sp[0x0],r8
8000f392:	50 4b       	stdsp	sp[0x10],r11
8000f394:	12 00       	add	r0,r9
8000f396:	30 1b       	mov	r11,1
8000f398:	0e 9c       	mov	r12,r7
8000f39a:	f0 1f 01 08 	mcall	8000f7b8 <_dtoa_r+0xc60>
8000f39e:	40 08       	lddsp	r8,sp[0x0]
8000f3a0:	18 94       	mov	r4,r12
8000f3a2:	40 4a       	lddsp	r10,sp[0x10]
8000f3a4:	58 05       	cp.w	r5,0
8000f3a6:	5f 99       	srgt	r9
8000f3a8:	58 0a       	cp.w	r10,0
8000f3aa:	5f 9a       	srgt	r10
8000f3ac:	f5 e9 00 09 	and	r9,r10,r9
8000f3b0:	c0 80       	breq	8000f3c0 <_dtoa_r+0x868>
8000f3b2:	40 4c       	lddsp	r12,sp[0x10]
8000f3b4:	f8 05 0d 49 	min	r9,r12,r5
8000f3b8:	12 1c       	sub	r12,r9
8000f3ba:	12 10       	sub	r0,r9
8000f3bc:	50 4c       	stdsp	sp[0x10],r12
8000f3be:	12 15       	sub	r5,r9
8000f3c0:	58 02       	cp.w	r2,0
8000f3c2:	e0 8a 00 27 	brle	8000f410 <_dtoa_r+0x8b8>
8000f3c6:	40 db       	lddsp	r11,sp[0x34]
8000f3c8:	58 0b       	cp.w	r11,0
8000f3ca:	c1 d0       	breq	8000f404 <_dtoa_r+0x8ac>
8000f3cc:	58 08       	cp.w	r8,0
8000f3ce:	e0 8a 00 17 	brle	8000f3fc <_dtoa_r+0x8a4>
8000f3d2:	10 9a       	mov	r10,r8
8000f3d4:	50 08       	stdsp	sp[0x0],r8
8000f3d6:	08 9b       	mov	r11,r4
8000f3d8:	0e 9c       	mov	r12,r7
8000f3da:	f0 1f 00 f9 	mcall	8000f7bc <_dtoa_r+0xc64>
8000f3de:	06 9a       	mov	r10,r3
8000f3e0:	18 9b       	mov	r11,r12
8000f3e2:	18 94       	mov	r4,r12
8000f3e4:	0e 9c       	mov	r12,r7
8000f3e6:	f0 1f 00 f7 	mcall	8000f7c0 <_dtoa_r+0xc68>
8000f3ea:	18 99       	mov	r9,r12
8000f3ec:	06 9b       	mov	r11,r3
8000f3ee:	50 19       	stdsp	sp[0x4],r9
8000f3f0:	0e 9c       	mov	r12,r7
8000f3f2:	f0 1f 00 f5 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f3f6:	40 19       	lddsp	r9,sp[0x4]
8000f3f8:	40 08       	lddsp	r8,sp[0x0]
8000f3fa:	12 93       	mov	r3,r9
8000f3fc:	e4 08 01 0a 	sub	r10,r2,r8
8000f400:	c0 80       	breq	8000f410 <_dtoa_r+0x8b8>
8000f402:	c0 28       	rjmp	8000f406 <_dtoa_r+0x8ae>
8000f404:	04 9a       	mov	r10,r2
8000f406:	06 9b       	mov	r11,r3
8000f408:	0e 9c       	mov	r12,r7
8000f40a:	f0 1f 00 ed 	mcall	8000f7bc <_dtoa_r+0xc64>
8000f40e:	18 93       	mov	r3,r12
8000f410:	30 1b       	mov	r11,1
8000f412:	0e 9c       	mov	r12,r7
8000f414:	f0 1f 00 e9 	mcall	8000f7b8 <_dtoa_r+0xc60>
8000f418:	41 1a       	lddsp	r10,sp[0x44]
8000f41a:	18 92       	mov	r2,r12
8000f41c:	58 0a       	cp.w	r10,0
8000f41e:	e0 8a 00 07 	brle	8000f42c <_dtoa_r+0x8d4>
8000f422:	18 9b       	mov	r11,r12
8000f424:	0e 9c       	mov	r12,r7
8000f426:	f0 1f 00 e6 	mcall	8000f7bc <_dtoa_r+0xc64>
8000f42a:	18 92       	mov	r2,r12
8000f42c:	40 c9       	lddsp	r9,sp[0x30]
8000f42e:	58 19       	cp.w	r9,1
8000f430:	e0 89 00 14 	brgt	8000f458 <_dtoa_r+0x900>
8000f434:	40 38       	lddsp	r8,sp[0xc]
8000f436:	58 08       	cp.w	r8,0
8000f438:	c1 01       	brne	8000f458 <_dtoa_r+0x900>
8000f43a:	40 29       	lddsp	r9,sp[0x8]
8000f43c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000f440:	c0 c1       	brne	8000f458 <_dtoa_r+0x900>
8000f442:	12 98       	mov	r8,r9
8000f444:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000f448:	c0 80       	breq	8000f458 <_dtoa_r+0x900>
8000f44a:	40 4c       	lddsp	r12,sp[0x10]
8000f44c:	30 1b       	mov	r11,1
8000f44e:	2f fc       	sub	r12,-1
8000f450:	2f f0       	sub	r0,-1
8000f452:	50 4c       	stdsp	sp[0x10],r12
8000f454:	50 6b       	stdsp	sp[0x18],r11
8000f456:	c0 38       	rjmp	8000f45c <_dtoa_r+0x904>
8000f458:	30 0a       	mov	r10,0
8000f45a:	50 6a       	stdsp	sp[0x18],r10
8000f45c:	41 19       	lddsp	r9,sp[0x44]
8000f45e:	58 09       	cp.w	r9,0
8000f460:	c0 31       	brne	8000f466 <_dtoa_r+0x90e>
8000f462:	30 1c       	mov	r12,1
8000f464:	c0 98       	rjmp	8000f476 <_dtoa_r+0x91e>
8000f466:	64 48       	ld.w	r8,r2[0x10]
8000f468:	2f c8       	sub	r8,-4
8000f46a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000f46e:	f0 1f 00 d7 	mcall	8000f7c8 <_dtoa_r+0xc70>
8000f472:	f8 0c 11 20 	rsub	r12,r12,32
8000f476:	40 4b       	lddsp	r11,sp[0x10]
8000f478:	f8 0b 00 08 	add	r8,r12,r11
8000f47c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000f480:	c0 c0       	breq	8000f498 <_dtoa_r+0x940>
8000f482:	f0 08 11 20 	rsub	r8,r8,32
8000f486:	58 48       	cp.w	r8,4
8000f488:	e0 8a 00 06 	brle	8000f494 <_dtoa_r+0x93c>
8000f48c:	20 48       	sub	r8,4
8000f48e:	10 0b       	add	r11,r8
8000f490:	50 4b       	stdsp	sp[0x10],r11
8000f492:	c0 78       	rjmp	8000f4a0 <_dtoa_r+0x948>
8000f494:	58 48       	cp.w	r8,4
8000f496:	c0 70       	breq	8000f4a4 <_dtoa_r+0x94c>
8000f498:	40 4a       	lddsp	r10,sp[0x10]
8000f49a:	2e 48       	sub	r8,-28
8000f49c:	10 0a       	add	r10,r8
8000f49e:	50 4a       	stdsp	sp[0x10],r10
8000f4a0:	10 00       	add	r0,r8
8000f4a2:	10 05       	add	r5,r8
8000f4a4:	58 00       	cp.w	r0,0
8000f4a6:	e0 8a 00 08 	brle	8000f4b6 <_dtoa_r+0x95e>
8000f4aa:	06 9b       	mov	r11,r3
8000f4ac:	00 9a       	mov	r10,r0
8000f4ae:	0e 9c       	mov	r12,r7
8000f4b0:	f0 1f 00 c7 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f4b4:	18 93       	mov	r3,r12
8000f4b6:	40 49       	lddsp	r9,sp[0x10]
8000f4b8:	58 09       	cp.w	r9,0
8000f4ba:	e0 8a 00 08 	brle	8000f4ca <_dtoa_r+0x972>
8000f4be:	04 9b       	mov	r11,r2
8000f4c0:	12 9a       	mov	r10,r9
8000f4c2:	0e 9c       	mov	r12,r7
8000f4c4:	f0 1f 00 c2 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f4c8:	18 92       	mov	r2,r12
8000f4ca:	41 48       	lddsp	r8,sp[0x50]
8000f4cc:	58 08       	cp.w	r8,0
8000f4ce:	c1 b0       	breq	8000f504 <_dtoa_r+0x9ac>
8000f4d0:	04 9b       	mov	r11,r2
8000f4d2:	06 9c       	mov	r12,r3
8000f4d4:	f0 1f 00 bf 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f4d8:	c1 64       	brge	8000f504 <_dtoa_r+0x9ac>
8000f4da:	06 9b       	mov	r11,r3
8000f4dc:	30 09       	mov	r9,0
8000f4de:	30 aa       	mov	r10,10
8000f4e0:	0e 9c       	mov	r12,r7
8000f4e2:	f0 1f 00 bd 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f4e6:	20 16       	sub	r6,1
8000f4e8:	18 93       	mov	r3,r12
8000f4ea:	40 dc       	lddsp	r12,sp[0x34]
8000f4ec:	58 0c       	cp.w	r12,0
8000f4ee:	c0 31       	brne	8000f4f4 <_dtoa_r+0x99c>
8000f4f0:	40 91       	lddsp	r1,sp[0x24]
8000f4f2:	c0 98       	rjmp	8000f504 <_dtoa_r+0x9ac>
8000f4f4:	08 9b       	mov	r11,r4
8000f4f6:	40 91       	lddsp	r1,sp[0x24]
8000f4f8:	30 09       	mov	r9,0
8000f4fa:	30 aa       	mov	r10,10
8000f4fc:	0e 9c       	mov	r12,r7
8000f4fe:	f0 1f 00 b6 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f502:	18 94       	mov	r4,r12
8000f504:	58 01       	cp.w	r1,0
8000f506:	5f a9       	srle	r9
8000f508:	40 cb       	lddsp	r11,sp[0x30]
8000f50a:	58 2b       	cp.w	r11,2
8000f50c:	5f 98       	srgt	r8
8000f50e:	f3 e8 00 08 	and	r8,r9,r8
8000f512:	c2 50       	breq	8000f55c <_dtoa_r+0xa04>
8000f514:	58 01       	cp.w	r1,0
8000f516:	c1 11       	brne	8000f538 <_dtoa_r+0x9e0>
8000f518:	04 9b       	mov	r11,r2
8000f51a:	02 99       	mov	r9,r1
8000f51c:	30 5a       	mov	r10,5
8000f51e:	0e 9c       	mov	r12,r7
8000f520:	f0 1f 00 ad 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f524:	18 92       	mov	r2,r12
8000f526:	18 9b       	mov	r11,r12
8000f528:	06 9c       	mov	r12,r3
8000f52a:	f0 1f 00 aa 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f52e:	e0 89 00 0f 	brgt	8000f54c <_dtoa_r+0x9f4>
8000f532:	c0 38       	rjmp	8000f538 <_dtoa_r+0x9e0>
8000f534:	30 02       	mov	r2,0
8000f536:	04 94       	mov	r4,r2
8000f538:	40 ea       	lddsp	r10,sp[0x38]
8000f53a:	30 09       	mov	r9,0
8000f53c:	5c da       	com	r10
8000f53e:	40 85       	lddsp	r5,sp[0x20]
8000f540:	50 6a       	stdsp	sp[0x18],r10
8000f542:	50 49       	stdsp	sp[0x10],r9
8000f544:	c0 f9       	rjmp	8000f762 <_dtoa_r+0xc0a>
8000f546:	08 92       	mov	r2,r4
8000f548:	40 66       	lddsp	r6,sp[0x18]
8000f54a:	04 94       	mov	r4,r2
8000f54c:	2f f6       	sub	r6,-1
8000f54e:	50 66       	stdsp	sp[0x18],r6
8000f550:	33 18       	mov	r8,49
8000f552:	40 85       	lddsp	r5,sp[0x20]
8000f554:	0a c8       	st.b	r5++,r8
8000f556:	30 08       	mov	r8,0
8000f558:	50 48       	stdsp	sp[0x10],r8
8000f55a:	c0 49       	rjmp	8000f762 <_dtoa_r+0xc0a>
8000f55c:	40 dc       	lddsp	r12,sp[0x34]
8000f55e:	58 0c       	cp.w	r12,0
8000f560:	e0 80 00 b5 	breq	8000f6ca <_dtoa_r+0xb72>
8000f564:	58 05       	cp.w	r5,0
8000f566:	e0 8a 00 08 	brle	8000f576 <_dtoa_r+0xa1e>
8000f56a:	08 9b       	mov	r11,r4
8000f56c:	0a 9a       	mov	r10,r5
8000f56e:	0e 9c       	mov	r12,r7
8000f570:	f0 1f 00 97 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f574:	18 94       	mov	r4,r12
8000f576:	40 6b       	lddsp	r11,sp[0x18]
8000f578:	58 0b       	cp.w	r11,0
8000f57a:	c0 31       	brne	8000f580 <_dtoa_r+0xa28>
8000f57c:	08 9c       	mov	r12,r4
8000f57e:	c1 38       	rjmp	8000f5a4 <_dtoa_r+0xa4c>
8000f580:	68 1b       	ld.w	r11,r4[0x4]
8000f582:	0e 9c       	mov	r12,r7
8000f584:	f0 1f 00 95 	mcall	8000f7d8 <_dtoa_r+0xc80>
8000f588:	68 4a       	ld.w	r10,r4[0x10]
8000f58a:	18 95       	mov	r5,r12
8000f58c:	e8 cb ff f4 	sub	r11,r4,-12
8000f590:	2f ea       	sub	r10,-2
8000f592:	2f 4c       	sub	r12,-12
8000f594:	a3 6a       	lsl	r10,0x2
8000f596:	f0 1f 00 92 	mcall	8000f7dc <_dtoa_r+0xc84>
8000f59a:	0a 9b       	mov	r11,r5
8000f59c:	30 1a       	mov	r10,1
8000f59e:	0e 9c       	mov	r12,r7
8000f5a0:	f0 1f 00 8b 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f5a4:	50 44       	stdsp	sp[0x10],r4
8000f5a6:	40 3a       	lddsp	r10,sp[0xc]
8000f5a8:	30 19       	mov	r9,1
8000f5aa:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000f5ae:	18 94       	mov	r4,r12
8000f5b0:	50 da       	stdsp	sp[0x34],r10
8000f5b2:	40 85       	lddsp	r5,sp[0x20]
8000f5b4:	50 99       	stdsp	sp[0x24],r9
8000f5b6:	50 26       	stdsp	sp[0x8],r6
8000f5b8:	50 e1       	stdsp	sp[0x38],r1
8000f5ba:	04 9b       	mov	r11,r2
8000f5bc:	06 9c       	mov	r12,r3
8000f5be:	f0 1f 00 89 	mcall	8000f7e0 <_dtoa_r+0xc88>
8000f5c2:	40 4b       	lddsp	r11,sp[0x10]
8000f5c4:	f8 c0 ff d0 	sub	r0,r12,-48
8000f5c8:	06 9c       	mov	r12,r3
8000f5ca:	f0 1f 00 82 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f5ce:	08 9a       	mov	r10,r4
8000f5d0:	50 6c       	stdsp	sp[0x18],r12
8000f5d2:	04 9b       	mov	r11,r2
8000f5d4:	0e 9c       	mov	r12,r7
8000f5d6:	f0 1f 00 84 	mcall	8000f7e4 <_dtoa_r+0xc8c>
8000f5da:	18 91       	mov	r1,r12
8000f5dc:	78 38       	ld.w	r8,r12[0xc]
8000f5de:	58 08       	cp.w	r8,0
8000f5e0:	c0 30       	breq	8000f5e6 <_dtoa_r+0xa8e>
8000f5e2:	30 16       	mov	r6,1
8000f5e4:	c0 68       	rjmp	8000f5f0 <_dtoa_r+0xa98>
8000f5e6:	18 9b       	mov	r11,r12
8000f5e8:	06 9c       	mov	r12,r3
8000f5ea:	f0 1f 00 7a 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f5ee:	18 96       	mov	r6,r12
8000f5f0:	0e 9c       	mov	r12,r7
8000f5f2:	02 9b       	mov	r11,r1
8000f5f4:	f0 1f 00 74 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f5f8:	40 cc       	lddsp	r12,sp[0x30]
8000f5fa:	ed ec 10 08 	or	r8,r6,r12
8000f5fe:	c0 d1       	brne	8000f618 <_dtoa_r+0xac0>
8000f600:	40 db       	lddsp	r11,sp[0x34]
8000f602:	58 0b       	cp.w	r11,0
8000f604:	c0 a1       	brne	8000f618 <_dtoa_r+0xac0>
8000f606:	40 26       	lddsp	r6,sp[0x8]
8000f608:	e0 40 00 39 	cp.w	r0,57
8000f60c:	c3 00       	breq	8000f66c <_dtoa_r+0xb14>
8000f60e:	40 6a       	lddsp	r10,sp[0x18]
8000f610:	58 0a       	cp.w	r10,0
8000f612:	e0 89 00 24 	brgt	8000f65a <_dtoa_r+0xb02>
8000f616:	c2 f8       	rjmp	8000f674 <_dtoa_r+0xb1c>
8000f618:	40 69       	lddsp	r9,sp[0x18]
8000f61a:	58 09       	cp.w	r9,0
8000f61c:	c0 85       	brlt	8000f62c <_dtoa_r+0xad4>
8000f61e:	12 98       	mov	r8,r9
8000f620:	40 cc       	lddsp	r12,sp[0x30]
8000f622:	18 48       	or	r8,r12
8000f624:	c1 d1       	brne	8000f65e <_dtoa_r+0xb06>
8000f626:	40 db       	lddsp	r11,sp[0x34]
8000f628:	58 0b       	cp.w	r11,0
8000f62a:	c1 a1       	brne	8000f65e <_dtoa_r+0xb06>
8000f62c:	0c 99       	mov	r9,r6
8000f62e:	40 26       	lddsp	r6,sp[0x8]
8000f630:	58 09       	cp.w	r9,0
8000f632:	e0 8a 00 21 	brle	8000f674 <_dtoa_r+0xb1c>
8000f636:	06 9b       	mov	r11,r3
8000f638:	30 1a       	mov	r10,1
8000f63a:	0e 9c       	mov	r12,r7
8000f63c:	f0 1f 00 64 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f640:	04 9b       	mov	r11,r2
8000f642:	18 93       	mov	r3,r12
8000f644:	f0 1f 00 63 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f648:	e0 89 00 06 	brgt	8000f654 <_dtoa_r+0xafc>
8000f64c:	c1 41       	brne	8000f674 <_dtoa_r+0xb1c>
8000f64e:	ed b0 00 00 	bld	r0,0x0
8000f652:	c1 11       	brne	8000f674 <_dtoa_r+0xb1c>
8000f654:	e0 40 00 39 	cp.w	r0,57
8000f658:	c0 a0       	breq	8000f66c <_dtoa_r+0xb14>
8000f65a:	2f f0       	sub	r0,-1
8000f65c:	c0 c8       	rjmp	8000f674 <_dtoa_r+0xb1c>
8000f65e:	58 06       	cp.w	r6,0
8000f660:	e0 8a 00 0c 	brle	8000f678 <_dtoa_r+0xb20>
8000f664:	40 26       	lddsp	r6,sp[0x8]
8000f666:	e0 40 00 39 	cp.w	r0,57
8000f66a:	c0 41       	brne	8000f672 <_dtoa_r+0xb1a>
8000f66c:	33 98       	mov	r8,57
8000f66e:	0a c8       	st.b	r5++,r8
8000f670:	c6 78       	rjmp	8000f73e <_dtoa_r+0xbe6>
8000f672:	2f f0       	sub	r0,-1
8000f674:	0a c0       	st.b	r5++,r0
8000f676:	c7 58       	rjmp	8000f760 <_dtoa_r+0xc08>
8000f678:	0a c0       	st.b	r5++,r0
8000f67a:	40 9a       	lddsp	r10,sp[0x24]
8000f67c:	40 e9       	lddsp	r9,sp[0x38]
8000f67e:	12 3a       	cp.w	r10,r9
8000f680:	c4 30       	breq	8000f706 <_dtoa_r+0xbae>
8000f682:	06 9b       	mov	r11,r3
8000f684:	30 09       	mov	r9,0
8000f686:	30 aa       	mov	r10,10
8000f688:	0e 9c       	mov	r12,r7
8000f68a:	f0 1f 00 53 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f68e:	40 48       	lddsp	r8,sp[0x10]
8000f690:	18 93       	mov	r3,r12
8000f692:	08 38       	cp.w	r8,r4
8000f694:	c0 91       	brne	8000f6a6 <_dtoa_r+0xb4e>
8000f696:	10 9b       	mov	r11,r8
8000f698:	30 09       	mov	r9,0
8000f69a:	30 aa       	mov	r10,10
8000f69c:	0e 9c       	mov	r12,r7
8000f69e:	f0 1f 00 4e 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f6a2:	50 4c       	stdsp	sp[0x10],r12
8000f6a4:	c0 e8       	rjmp	8000f6c0 <_dtoa_r+0xb68>
8000f6a6:	40 4b       	lddsp	r11,sp[0x10]
8000f6a8:	30 09       	mov	r9,0
8000f6aa:	30 aa       	mov	r10,10
8000f6ac:	0e 9c       	mov	r12,r7
8000f6ae:	f0 1f 00 4a 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f6b2:	08 9b       	mov	r11,r4
8000f6b4:	50 4c       	stdsp	sp[0x10],r12
8000f6b6:	30 09       	mov	r9,0
8000f6b8:	30 aa       	mov	r10,10
8000f6ba:	0e 9c       	mov	r12,r7
8000f6bc:	f0 1f 00 46 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f6c0:	18 94       	mov	r4,r12
8000f6c2:	40 9c       	lddsp	r12,sp[0x24]
8000f6c4:	2f fc       	sub	r12,-1
8000f6c6:	50 9c       	stdsp	sp[0x24],r12
8000f6c8:	c7 9b       	rjmp	8000f5ba <_dtoa_r+0xa62>
8000f6ca:	30 18       	mov	r8,1
8000f6cc:	06 90       	mov	r0,r3
8000f6ce:	40 85       	lddsp	r5,sp[0x20]
8000f6d0:	08 93       	mov	r3,r4
8000f6d2:	0c 94       	mov	r4,r6
8000f6d4:	10 96       	mov	r6,r8
8000f6d6:	04 9b       	mov	r11,r2
8000f6d8:	00 9c       	mov	r12,r0
8000f6da:	f0 1f 00 42 	mcall	8000f7e0 <_dtoa_r+0xc88>
8000f6de:	2d 0c       	sub	r12,-48
8000f6e0:	0a cc       	st.b	r5++,r12
8000f6e2:	02 36       	cp.w	r6,r1
8000f6e4:	c0 a4       	brge	8000f6f8 <_dtoa_r+0xba0>
8000f6e6:	00 9b       	mov	r11,r0
8000f6e8:	30 09       	mov	r9,0
8000f6ea:	30 aa       	mov	r10,10
8000f6ec:	0e 9c       	mov	r12,r7
8000f6ee:	2f f6       	sub	r6,-1
8000f6f0:	f0 1f 00 39 	mcall	8000f7d4 <_dtoa_r+0xc7c>
8000f6f4:	18 90       	mov	r0,r12
8000f6f6:	cf 0b       	rjmp	8000f6d6 <_dtoa_r+0xb7e>
8000f6f8:	08 96       	mov	r6,r4
8000f6fa:	30 0b       	mov	r11,0
8000f6fc:	06 94       	mov	r4,r3
8000f6fe:	50 4b       	stdsp	sp[0x10],r11
8000f700:	00 93       	mov	r3,r0
8000f702:	18 90       	mov	r0,r12
8000f704:	c0 28       	rjmp	8000f708 <_dtoa_r+0xbb0>
8000f706:	40 26       	lddsp	r6,sp[0x8]
8000f708:	06 9b       	mov	r11,r3
8000f70a:	30 1a       	mov	r10,1
8000f70c:	0e 9c       	mov	r12,r7
8000f70e:	f0 1f 00 30 	mcall	8000f7cc <_dtoa_r+0xc74>
8000f712:	04 9b       	mov	r11,r2
8000f714:	18 93       	mov	r3,r12
8000f716:	f0 1f 00 2f 	mcall	8000f7d0 <_dtoa_r+0xc78>
8000f71a:	e0 89 00 12 	brgt	8000f73e <_dtoa_r+0xbe6>
8000f71e:	c1 b1       	brne	8000f754 <_dtoa_r+0xbfc>
8000f720:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000f724:	c0 d1       	brne	8000f73e <_dtoa_r+0xbe6>
8000f726:	c1 78       	rjmp	8000f754 <_dtoa_r+0xbfc>
8000f728:	40 89       	lddsp	r9,sp[0x20]
8000f72a:	12 38       	cp.w	r8,r9
8000f72c:	c0 30       	breq	8000f732 <_dtoa_r+0xbda>
8000f72e:	10 95       	mov	r5,r8
8000f730:	c0 88       	rjmp	8000f740 <_dtoa_r+0xbe8>
8000f732:	2f f6       	sub	r6,-1
8000f734:	50 66       	stdsp	sp[0x18],r6
8000f736:	33 18       	mov	r8,49
8000f738:	40 8c       	lddsp	r12,sp[0x20]
8000f73a:	b8 88       	st.b	r12[0x0],r8
8000f73c:	c1 38       	rjmp	8000f762 <_dtoa_r+0xc0a>
8000f73e:	33 9a       	mov	r10,57
8000f740:	0a 98       	mov	r8,r5
8000f742:	11 79       	ld.ub	r9,--r8
8000f744:	f4 09 18 00 	cp.b	r9,r10
8000f748:	cf 00       	breq	8000f728 <_dtoa_r+0xbd0>
8000f74a:	2f f9       	sub	r9,-1
8000f74c:	b0 89       	st.b	r8[0x0],r9
8000f74e:	c0 98       	rjmp	8000f760 <_dtoa_r+0xc08>
8000f750:	10 95       	mov	r5,r8
8000f752:	c0 28       	rjmp	8000f756 <_dtoa_r+0xbfe>
8000f754:	33 09       	mov	r9,48
8000f756:	0a 98       	mov	r8,r5
8000f758:	11 7a       	ld.ub	r10,--r8
8000f75a:	f2 0a 18 00 	cp.b	r10,r9
8000f75e:	cf 90       	breq	8000f750 <_dtoa_r+0xbf8>
8000f760:	50 66       	stdsp	sp[0x18],r6
8000f762:	04 9b       	mov	r11,r2
8000f764:	0e 9c       	mov	r12,r7
8000f766:	f0 1f 00 18 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f76a:	58 04       	cp.w	r4,0
8000f76c:	c1 20       	breq	8000f790 <_dtoa_r+0xc38>
8000f76e:	40 4b       	lddsp	r11,sp[0x10]
8000f770:	08 3b       	cp.w	r11,r4
8000f772:	5f 19       	srne	r9
8000f774:	58 0b       	cp.w	r11,0
8000f776:	5f 18       	srne	r8
8000f778:	f3 e8 00 08 	and	r8,r9,r8
8000f77c:	c0 40       	breq	8000f784 <_dtoa_r+0xc2c>
8000f77e:	0e 9c       	mov	r12,r7
8000f780:	f0 1f 00 11 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f784:	08 9b       	mov	r11,r4
8000f786:	0e 9c       	mov	r12,r7
8000f788:	f0 1f 00 0f 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f78c:	c0 28       	rjmp	8000f790 <_dtoa_r+0xc38>
8000f78e:	50 66       	stdsp	sp[0x18],r6
8000f790:	0e 9c       	mov	r12,r7
8000f792:	06 9b       	mov	r11,r3
8000f794:	f0 1f 00 0c 	mcall	8000f7c4 <_dtoa_r+0xc6c>
8000f798:	30 08       	mov	r8,0
8000f79a:	aa 88       	st.b	r5[0x0],r8
8000f79c:	40 68       	lddsp	r8,sp[0x18]
8000f79e:	41 5a       	lddsp	r10,sp[0x54]
8000f7a0:	2f f8       	sub	r8,-1
8000f7a2:	41 29       	lddsp	r9,sp[0x48]
8000f7a4:	95 08       	st.w	r10[0x0],r8
8000f7a6:	40 8c       	lddsp	r12,sp[0x20]
8000f7a8:	58 09       	cp.w	r9,0
8000f7aa:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000f7ae:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000f7b2:	2e 6d       	sub	sp,-104
8000f7b4:	d8 32       	popm	r0-r7,pc
8000f7b6:	00 00       	add	r0,r0
8000f7b8:	80 01       	ld.sh	r1,r0[0x0]
8000f7ba:	02 dc       	st.w	--r1,r12
8000f7bc:	80 01       	ld.sh	r1,r0[0x0]
8000f7be:	03 7c       	ld.ub	r12,--r1
8000f7c0:	80 01       	ld.sh	r1,r0[0x0]
8000f7c2:	01 d4       	ld.ub	r4,r0[0x5]
8000f7c4:	80 00       	ld.sh	r0,r0[0x0]
8000f7c6:	ff 04 80 00 	ld.sh	r4,pc[-32768]
8000f7ca:	fd e4 80 01 	sthh.w	r1[r0],lr:b,r4:b
8000f7ce:	01 40       	ld.w	r0,--r0
8000f7d0:	80 00       	ld.sh	r0,r0[0x0]
8000f7d2:	fe d2 80 01 	satsub.w	r2,pc,-32767
8000f7d6:	02 f4       	st.b	--r1,r4
8000f7d8:	80 00       	ld.sh	r0,r0[0x0]
8000f7da:	ff 3c 80 00 	ld.ub	r12,pc[-32768]
8000f7de:	bb b8       	sbr	r8,0x1b
8000f7e0:	80 00       	ld.sh	r0,r0[0x0]
8000f7e2:	ea 34 80 01 	sub	r4,753665
8000f7e6:	00 68       	and	r8,r0

8000f7e8 <_fflush_r>:
8000f7e8:	d4 21       	pushm	r4-r7,lr
8000f7ea:	16 97       	mov	r7,r11
8000f7ec:	18 96       	mov	r6,r12
8000f7ee:	76 48       	ld.w	r8,r11[0x10]
8000f7f0:	58 08       	cp.w	r8,0
8000f7f2:	c7 d0       	breq	8000f8ec <_fflush_r+0x104>
8000f7f4:	58 0c       	cp.w	r12,0
8000f7f6:	c0 60       	breq	8000f802 <_fflush_r+0x1a>
8000f7f8:	78 68       	ld.w	r8,r12[0x18]
8000f7fa:	58 08       	cp.w	r8,0
8000f7fc:	c0 31       	brne	8000f802 <_fflush_r+0x1a>
8000f7fe:	f0 1f 00 3d 	mcall	8000f8f0 <_fflush_r+0x108>
8000f802:	4b d8       	lddpc	r8,8000f8f4 <_fflush_r+0x10c>
8000f804:	10 37       	cp.w	r7,r8
8000f806:	c0 31       	brne	8000f80c <_fflush_r+0x24>
8000f808:	6c 07       	ld.w	r7,r6[0x0]
8000f80a:	c0 a8       	rjmp	8000f81e <_fflush_r+0x36>
8000f80c:	4b b8       	lddpc	r8,8000f8f8 <_fflush_r+0x110>
8000f80e:	10 37       	cp.w	r7,r8
8000f810:	c0 31       	brne	8000f816 <_fflush_r+0x2e>
8000f812:	6c 17       	ld.w	r7,r6[0x4]
8000f814:	c0 58       	rjmp	8000f81e <_fflush_r+0x36>
8000f816:	4b a8       	lddpc	r8,8000f8fc <_fflush_r+0x114>
8000f818:	10 37       	cp.w	r7,r8
8000f81a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000f81e:	8e 6a       	ld.sh	r10,r7[0xc]
8000f820:	14 98       	mov	r8,r10
8000f822:	ed ba 00 03 	bld	r10,0x3
8000f826:	c4 20       	breq	8000f8aa <_fflush_r+0xc2>
8000f828:	ab ba       	sbr	r10,0xb
8000f82a:	ae 6a       	st.h	r7[0xc],r10
8000f82c:	6e 18       	ld.w	r8,r7[0x4]
8000f82e:	58 08       	cp.w	r8,0
8000f830:	e0 89 00 06 	brgt	8000f83c <_fflush_r+0x54>
8000f834:	6f 08       	ld.w	r8,r7[0x40]
8000f836:	58 08       	cp.w	r8,0
8000f838:	e0 8a 00 5a 	brle	8000f8ec <_fflush_r+0x104>
8000f83c:	6e b8       	ld.w	r8,r7[0x2c]
8000f83e:	58 08       	cp.w	r8,0
8000f840:	c5 60       	breq	8000f8ec <_fflush_r+0x104>
8000f842:	e2 1a 10 00 	andl	r10,0x1000,COH
8000f846:	c0 30       	breq	8000f84c <_fflush_r+0x64>
8000f848:	6f 55       	ld.w	r5,r7[0x54]
8000f84a:	c0 f8       	rjmp	8000f868 <_fflush_r+0x80>
8000f84c:	30 19       	mov	r9,1
8000f84e:	6e 8b       	ld.w	r11,r7[0x20]
8000f850:	0c 9c       	mov	r12,r6
8000f852:	5d 18       	icall	r8
8000f854:	18 95       	mov	r5,r12
8000f856:	5b fc       	cp.w	r12,-1
8000f858:	c0 81       	brne	8000f868 <_fflush_r+0x80>
8000f85a:	6c 38       	ld.w	r8,r6[0xc]
8000f85c:	59 d8       	cp.w	r8,29
8000f85e:	c4 70       	breq	8000f8ec <_fflush_r+0x104>
8000f860:	8e 68       	ld.sh	r8,r7[0xc]
8000f862:	a7 a8       	sbr	r8,0x6
8000f864:	ae 68       	st.h	r7[0xc],r8
8000f866:	d8 22       	popm	r4-r7,pc
8000f868:	8e 68       	ld.sh	r8,r7[0xc]
8000f86a:	ed b8 00 02 	bld	r8,0x2
8000f86e:	c0 91       	brne	8000f880 <_fflush_r+0x98>
8000f870:	6e 18       	ld.w	r8,r7[0x4]
8000f872:	10 15       	sub	r5,r8
8000f874:	6e d8       	ld.w	r8,r7[0x34]
8000f876:	58 08       	cp.w	r8,0
8000f878:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000f87c:	eb d8 e1 15 	subne	r5,r5,r8
8000f880:	6e b8       	ld.w	r8,r7[0x2c]
8000f882:	0c 9c       	mov	r12,r6
8000f884:	30 09       	mov	r9,0
8000f886:	0a 9a       	mov	r10,r5
8000f888:	6e 8b       	ld.w	r11,r7[0x20]
8000f88a:	5d 18       	icall	r8
8000f88c:	8e 68       	ld.sh	r8,r7[0xc]
8000f88e:	0a 3c       	cp.w	r12,r5
8000f890:	c2 61       	brne	8000f8dc <_fflush_r+0xf4>
8000f892:	ab d8       	cbr	r8,0xb
8000f894:	30 0c       	mov	r12,0
8000f896:	6e 49       	ld.w	r9,r7[0x10]
8000f898:	ae 68       	st.h	r7[0xc],r8
8000f89a:	8f 1c       	st.w	r7[0x4],r12
8000f89c:	8f 09       	st.w	r7[0x0],r9
8000f89e:	ed b8 00 0c 	bld	r8,0xc
8000f8a2:	c2 51       	brne	8000f8ec <_fflush_r+0x104>
8000f8a4:	ef 45 00 54 	st.w	r7[84],r5
8000f8a8:	d8 22       	popm	r4-r7,pc
8000f8aa:	6e 45       	ld.w	r5,r7[0x10]
8000f8ac:	58 05       	cp.w	r5,0
8000f8ae:	c1 f0       	breq	8000f8ec <_fflush_r+0x104>
8000f8b0:	6e 04       	ld.w	r4,r7[0x0]
8000f8b2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000f8b6:	8f 05       	st.w	r7[0x0],r5
8000f8b8:	f9 b8 01 00 	movne	r8,0
8000f8bc:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000f8c0:	0a 14       	sub	r4,r5
8000f8c2:	8f 28       	st.w	r7[0x8],r8
8000f8c4:	c1 18       	rjmp	8000f8e6 <_fflush_r+0xfe>
8000f8c6:	08 99       	mov	r9,r4
8000f8c8:	0a 9a       	mov	r10,r5
8000f8ca:	6e a8       	ld.w	r8,r7[0x28]
8000f8cc:	6e 8b       	ld.w	r11,r7[0x20]
8000f8ce:	0c 9c       	mov	r12,r6
8000f8d0:	5d 18       	icall	r8
8000f8d2:	18 14       	sub	r4,r12
8000f8d4:	58 0c       	cp.w	r12,0
8000f8d6:	e0 89 00 07 	brgt	8000f8e4 <_fflush_r+0xfc>
8000f8da:	8e 68       	ld.sh	r8,r7[0xc]
8000f8dc:	a7 a8       	sbr	r8,0x6
8000f8de:	3f fc       	mov	r12,-1
8000f8e0:	ae 68       	st.h	r7[0xc],r8
8000f8e2:	d8 22       	popm	r4-r7,pc
8000f8e4:	18 05       	add	r5,r12
8000f8e6:	58 04       	cp.w	r4,0
8000f8e8:	fe 99 ff ef 	brgt	8000f8c6 <_fflush_r+0xde>
8000f8ec:	d8 2a       	popm	r4-r7,pc,r12=0
8000f8ee:	00 00       	add	r0,r0
8000f8f0:	80 00       	ld.sh	r0,r0[0x0]
8000f8f2:	f9 c4       	*unknown*
8000f8f4:	80 01       	ld.sh	r1,r0[0x0]
8000f8f6:	1f 24       	ld.uh	r4,pc++
8000f8f8:	80 01       	ld.sh	r1,r0[0x0]
8000f8fa:	1f 44       	ld.w	r4,--pc
8000f8fc:	80 01       	ld.sh	r1,r0[0x0]
8000f8fe:	1f 64       	ld.uh	r4,--pc

8000f900 <__sfp_lock_acquire>:
8000f900:	5e fc       	retal	r12

8000f902 <__sfp_lock_release>:
8000f902:	5e fc       	retal	r12

8000f904 <_cleanup_r>:
8000f904:	d4 01       	pushm	lr
8000f906:	48 3b       	lddpc	r11,8000f910 <_cleanup_r+0xc>
8000f908:	f0 1f 00 03 	mcall	8000f914 <_cleanup_r+0x10>
8000f90c:	d8 02       	popm	pc
8000f90e:	00 00       	add	r0,r0
8000f910:	80 01       	ld.sh	r1,r0[0x0]
8000f912:	06 6c       	and	r12,r3
8000f914:	80 00       	ld.sh	r0,r0[0x0]
8000f916:	fc bc       	*unknown*

8000f918 <__sfmoreglue>:
8000f918:	d4 21       	pushm	r4-r7,lr
8000f91a:	16 95       	mov	r5,r11
8000f91c:	f6 06 10 5c 	mul	r6,r11,92
8000f920:	ec cb ff f4 	sub	r11,r6,-12
8000f924:	f0 1f 00 07 	mcall	8000f940 <__sfmoreglue+0x28>
8000f928:	18 97       	mov	r7,r12
8000f92a:	c0 90       	breq	8000f93c <__sfmoreglue+0x24>
8000f92c:	99 15       	st.w	r12[0x4],r5
8000f92e:	30 0b       	mov	r11,0
8000f930:	2f 4c       	sub	r12,-12
8000f932:	0c 9a       	mov	r10,r6
8000f934:	8f 2c       	st.w	r7[0x8],r12
8000f936:	8f 0b       	st.w	r7[0x0],r11
8000f938:	f0 1f 00 03 	mcall	8000f944 <__sfmoreglue+0x2c>
8000f93c:	0e 9c       	mov	r12,r7
8000f93e:	d8 22       	popm	r4-r7,pc
8000f940:	80 00       	ld.sh	r0,r0[0x0]
8000f942:	b7 2c       	st.d	r11++,r12
8000f944:	80 00       	ld.sh	r0,r0[0x0]
8000f946:	bd 3e       	mul	lr,lr

8000f948 <__sfp>:
8000f948:	d4 21       	pushm	r4-r7,lr
8000f94a:	49 c8       	lddpc	r8,8000f9b8 <__sfp+0x70>
8000f94c:	18 96       	mov	r6,r12
8000f94e:	70 07       	ld.w	r7,r8[0x0]
8000f950:	6e 68       	ld.w	r8,r7[0x18]
8000f952:	58 08       	cp.w	r8,0
8000f954:	c0 41       	brne	8000f95c <__sfp+0x14>
8000f956:	0e 9c       	mov	r12,r7
8000f958:	f0 1f 00 19 	mcall	8000f9bc <__sfp+0x74>
8000f95c:	ee c7 ff 28 	sub	r7,r7,-216
8000f960:	30 05       	mov	r5,0
8000f962:	6e 2c       	ld.w	r12,r7[0x8]
8000f964:	6e 18       	ld.w	r8,r7[0x4]
8000f966:	c0 68       	rjmp	8000f972 <__sfp+0x2a>
8000f968:	98 69       	ld.sh	r9,r12[0xc]
8000f96a:	ea 09 19 00 	cp.h	r9,r5
8000f96e:	c1 20       	breq	8000f992 <__sfp+0x4a>
8000f970:	2a 4c       	sub	r12,-92
8000f972:	20 18       	sub	r8,1
8000f974:	cf a7       	brpl	8000f968 <__sfp+0x20>
8000f976:	6e 08       	ld.w	r8,r7[0x0]
8000f978:	58 08       	cp.w	r8,0
8000f97a:	c0 71       	brne	8000f988 <__sfp+0x40>
8000f97c:	30 4b       	mov	r11,4
8000f97e:	0c 9c       	mov	r12,r6
8000f980:	f0 1f 00 10 	mcall	8000f9c0 <__sfp+0x78>
8000f984:	8f 0c       	st.w	r7[0x0],r12
8000f986:	c0 30       	breq	8000f98c <__sfp+0x44>
8000f988:	6e 07       	ld.w	r7,r7[0x0]
8000f98a:	ce cb       	rjmp	8000f962 <__sfp+0x1a>
8000f98c:	30 c8       	mov	r8,12
8000f98e:	8d 38       	st.w	r6[0xc],r8
8000f990:	d8 22       	popm	r4-r7,pc
8000f992:	30 08       	mov	r8,0
8000f994:	f9 48 00 4c 	st.w	r12[76],r8
8000f998:	99 08       	st.w	r12[0x0],r8
8000f99a:	99 28       	st.w	r12[0x8],r8
8000f99c:	99 18       	st.w	r12[0x4],r8
8000f99e:	99 48       	st.w	r12[0x10],r8
8000f9a0:	99 58       	st.w	r12[0x14],r8
8000f9a2:	99 68       	st.w	r12[0x18],r8
8000f9a4:	99 d8       	st.w	r12[0x34],r8
8000f9a6:	99 e8       	st.w	r12[0x38],r8
8000f9a8:	f9 48 00 48 	st.w	r12[72],r8
8000f9ac:	3f f8       	mov	r8,-1
8000f9ae:	b8 78       	st.h	r12[0xe],r8
8000f9b0:	30 18       	mov	r8,1
8000f9b2:	b8 68       	st.h	r12[0xc],r8
8000f9b4:	d8 22       	popm	r4-r7,pc
8000f9b6:	00 00       	add	r0,r0
8000f9b8:	80 01       	ld.sh	r1,r0[0x0]
8000f9ba:	1b 44       	ld.w	r4,--sp
8000f9bc:	80 00       	ld.sh	r0,r0[0x0]
8000f9be:	f9 c4       	*unknown*
8000f9c0:	80 00       	ld.sh	r0,r0[0x0]
8000f9c2:	f9 18 d4 21 	ld.uh	r8,r12[-11231]

8000f9c4 <__sinit>:
8000f9c4:	d4 21       	pushm	r4-r7,lr
8000f9c6:	18 96       	mov	r6,r12
8000f9c8:	78 67       	ld.w	r7,r12[0x18]
8000f9ca:	58 07       	cp.w	r7,0
8000f9cc:	c4 71       	brne	8000fa5a <__sinit+0x96>
8000f9ce:	4a 48       	lddpc	r8,8000fa5c <__sinit+0x98>
8000f9d0:	30 15       	mov	r5,1
8000f9d2:	99 a8       	st.w	r12[0x28],r8
8000f9d4:	f9 47 00 d8 	st.w	r12[216],r7
8000f9d8:	f9 47 00 dc 	st.w	r12[220],r7
8000f9dc:	f9 47 00 e0 	st.w	r12[224],r7
8000f9e0:	99 65       	st.w	r12[0x18],r5
8000f9e2:	f0 1f 00 20 	mcall	8000fa60 <__sinit+0x9c>
8000f9e6:	8d 0c       	st.w	r6[0x0],r12
8000f9e8:	0c 9c       	mov	r12,r6
8000f9ea:	f0 1f 00 1e 	mcall	8000fa60 <__sinit+0x9c>
8000f9ee:	8d 1c       	st.w	r6[0x4],r12
8000f9f0:	0c 9c       	mov	r12,r6
8000f9f2:	f0 1f 00 1c 	mcall	8000fa60 <__sinit+0x9c>
8000f9f6:	6c 09       	ld.w	r9,r6[0x0]
8000f9f8:	30 48       	mov	r8,4
8000f9fa:	93 07       	st.w	r9[0x0],r7
8000f9fc:	b2 68       	st.h	r9[0xc],r8
8000f9fe:	93 17       	st.w	r9[0x4],r7
8000fa00:	93 27       	st.w	r9[0x8],r7
8000fa02:	6c 18       	ld.w	r8,r6[0x4]
8000fa04:	b2 77       	st.h	r9[0xe],r7
8000fa06:	93 47       	st.w	r9[0x10],r7
8000fa08:	93 57       	st.w	r9[0x14],r7
8000fa0a:	93 67       	st.w	r9[0x18],r7
8000fa0c:	93 89       	st.w	r9[0x20],r9
8000fa0e:	91 07       	st.w	r8[0x0],r7
8000fa10:	91 17       	st.w	r8[0x4],r7
8000fa12:	91 27       	st.w	r8[0x8],r7
8000fa14:	49 4e       	lddpc	lr,8000fa64 <__sinit+0xa0>
8000fa16:	49 5b       	lddpc	r11,8000fa68 <__sinit+0xa4>
8000fa18:	93 9e       	st.w	r9[0x24],lr
8000fa1a:	93 ab       	st.w	r9[0x28],r11
8000fa1c:	49 4a       	lddpc	r10,8000fa6c <__sinit+0xa8>
8000fa1e:	49 54       	lddpc	r4,8000fa70 <__sinit+0xac>
8000fa20:	93 ba       	st.w	r9[0x2c],r10
8000fa22:	93 c4       	st.w	r9[0x30],r4
8000fa24:	30 99       	mov	r9,9
8000fa26:	b0 69       	st.h	r8[0xc],r9
8000fa28:	b0 75       	st.h	r8[0xe],r5
8000fa2a:	91 c4       	st.w	r8[0x30],r4
8000fa2c:	91 47       	st.w	r8[0x10],r7
8000fa2e:	91 57       	st.w	r8[0x14],r7
8000fa30:	91 67       	st.w	r8[0x18],r7
8000fa32:	91 88       	st.w	r8[0x20],r8
8000fa34:	91 9e       	st.w	r8[0x24],lr
8000fa36:	91 ab       	st.w	r8[0x28],r11
8000fa38:	91 ba       	st.w	r8[0x2c],r10
8000fa3a:	8d 2c       	st.w	r6[0x8],r12
8000fa3c:	31 28       	mov	r8,18
8000fa3e:	99 07       	st.w	r12[0x0],r7
8000fa40:	b8 68       	st.h	r12[0xc],r8
8000fa42:	99 17       	st.w	r12[0x4],r7
8000fa44:	99 27       	st.w	r12[0x8],r7
8000fa46:	30 28       	mov	r8,2
8000fa48:	b8 78       	st.h	r12[0xe],r8
8000fa4a:	99 c4       	st.w	r12[0x30],r4
8000fa4c:	99 67       	st.w	r12[0x18],r7
8000fa4e:	99 9e       	st.w	r12[0x24],lr
8000fa50:	99 ab       	st.w	r12[0x28],r11
8000fa52:	99 ba       	st.w	r12[0x2c],r10
8000fa54:	99 47       	st.w	r12[0x10],r7
8000fa56:	99 57       	st.w	r12[0x14],r7
8000fa58:	99 8c       	st.w	r12[0x20],r12
8000fa5a:	d8 22       	popm	r4-r7,pc
8000fa5c:	80 00       	ld.sh	r0,r0[0x0]
8000fa5e:	f9 04 80 00 	ld.sh	r4,r12[-32768]
8000fa62:	f9 48 80 01 	st.w	r12[-32767],r8
8000fa66:	04 c4       	st.b	r2++,r4
8000fa68:	80 01       	ld.sh	r1,r0[0x0]
8000fa6a:	04 8c       	andn	r12,r2
8000fa6c:	80 01       	ld.sh	r1,r0[0x0]
8000fa6e:	04 64       	and	r4,r2
8000fa70:	80 01       	ld.sh	r1,r0[0x0]
8000fa72:	04 54       	eor	r4,r2

8000fa74 <_malloc_trim_r>:
8000fa74:	d4 21       	pushm	r4-r7,lr
8000fa76:	16 95       	mov	r5,r11
8000fa78:	18 97       	mov	r7,r12
8000fa7a:	f0 1f 00 23 	mcall	8000fb04 <_malloc_trim_r+0x90>
8000fa7e:	4a 34       	lddpc	r4,8000fb08 <_malloc_trim_r+0x94>
8000fa80:	68 28       	ld.w	r8,r4[0x8]
8000fa82:	70 16       	ld.w	r6,r8[0x4]
8000fa84:	e0 16 ff fc 	andl	r6,0xfffc
8000fa88:	ec c8 ff 91 	sub	r8,r6,-111
8000fa8c:	f0 05 01 05 	sub	r5,r8,r5
8000fa90:	e0 15 ff 80 	andl	r5,0xff80
8000fa94:	ea c5 00 80 	sub	r5,r5,128
8000fa98:	e0 45 00 7f 	cp.w	r5,127
8000fa9c:	e0 8a 00 23 	brle	8000fae2 <_malloc_trim_r+0x6e>
8000faa0:	30 0b       	mov	r11,0
8000faa2:	0e 9c       	mov	r12,r7
8000faa4:	f0 1f 00 1a 	mcall	8000fb0c <_malloc_trim_r+0x98>
8000faa8:	68 28       	ld.w	r8,r4[0x8]
8000faaa:	0c 08       	add	r8,r6
8000faac:	10 3c       	cp.w	r12,r8
8000faae:	c1 a1       	brne	8000fae2 <_malloc_trim_r+0x6e>
8000fab0:	ea 0b 11 00 	rsub	r11,r5,0
8000fab4:	0e 9c       	mov	r12,r7
8000fab6:	f0 1f 00 16 	mcall	8000fb0c <_malloc_trim_r+0x98>
8000faba:	5b fc       	cp.w	r12,-1
8000fabc:	c1 71       	brne	8000faea <_malloc_trim_r+0x76>
8000fabe:	30 0b       	mov	r11,0
8000fac0:	0e 9c       	mov	r12,r7
8000fac2:	f0 1f 00 13 	mcall	8000fb0c <_malloc_trim_r+0x98>
8000fac6:	68 28       	ld.w	r8,r4[0x8]
8000fac8:	f8 08 01 09 	sub	r9,r12,r8
8000facc:	58 f9       	cp.w	r9,15
8000face:	e0 8a 00 0a 	brle	8000fae2 <_malloc_trim_r+0x6e>
8000fad2:	a1 a9       	sbr	r9,0x0
8000fad4:	91 19       	st.w	r8[0x4],r9
8000fad6:	48 f8       	lddpc	r8,8000fb10 <_malloc_trim_r+0x9c>
8000fad8:	70 09       	ld.w	r9,r8[0x0]
8000fada:	48 f8       	lddpc	r8,8000fb14 <_malloc_trim_r+0xa0>
8000fadc:	f8 09 01 09 	sub	r9,r12,r9
8000fae0:	91 09       	st.w	r8[0x0],r9
8000fae2:	0e 9c       	mov	r12,r7
8000fae4:	f0 1f 00 0d 	mcall	8000fb18 <_malloc_trim_r+0xa4>
8000fae8:	d8 2a       	popm	r4-r7,pc,r12=0
8000faea:	68 28       	ld.w	r8,r4[0x8]
8000faec:	0a 16       	sub	r6,r5
8000faee:	a1 a6       	sbr	r6,0x0
8000faf0:	91 16       	st.w	r8[0x4],r6
8000faf2:	48 98       	lddpc	r8,8000fb14 <_malloc_trim_r+0xa0>
8000faf4:	70 09       	ld.w	r9,r8[0x0]
8000faf6:	0a 19       	sub	r9,r5
8000faf8:	0e 9c       	mov	r12,r7
8000fafa:	91 09       	st.w	r8[0x0],r9
8000fafc:	f0 1f 00 07 	mcall	8000fb18 <_malloc_trim_r+0xa4>
8000fb00:	da 2a       	popm	r4-r7,pc,r12=1
8000fb02:	00 00       	add	r0,r0
8000fb04:	80 00       	ld.sh	r0,r0[0x0]
8000fb06:	bd 4c       	asr	r12,0x1c
8000fb08:	00 00       	add	r0,r0
8000fb0a:	01 e0       	ld.ub	r0,r0[0x6]
8000fb0c:	80 00       	ld.sh	r0,r0[0x0]
8000fb0e:	c0 d4       	brge	8000fb28 <_free_r+0xc>
8000fb10:	00 00       	add	r0,r0
8000fb12:	05 ec       	ld.ub	r12,r2[0x6]
8000fb14:	00 00       	add	r0,r0
8000fb16:	13 5c       	ld.sh	r12,--r9
8000fb18:	80 00       	ld.sh	r0,r0[0x0]
8000fb1a:	bd 4e       	asr	lr,0x1c

8000fb1c <_free_r>:
8000fb1c:	d4 21       	pushm	r4-r7,lr
8000fb1e:	16 96       	mov	r6,r11
8000fb20:	18 97       	mov	r7,r12
8000fb22:	58 0b       	cp.w	r11,0
8000fb24:	e0 80 00 c8 	breq	8000fcb4 <_free_r+0x198>
8000fb28:	f0 1f 00 4c 	mcall	8000fc58 <_free_r+0x13c>
8000fb2c:	20 86       	sub	r6,8
8000fb2e:	4c ca       	lddpc	r10,8000fc5c <_free_r+0x140>
8000fb30:	6c 18       	ld.w	r8,r6[0x4]
8000fb32:	74 2e       	ld.w	lr,r10[0x8]
8000fb34:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000fb38:	a1 c8       	cbr	r8,0x0
8000fb3a:	ec 08 00 09 	add	r9,r6,r8
8000fb3e:	72 1b       	ld.w	r11,r9[0x4]
8000fb40:	e0 1b ff fc 	andl	r11,0xfffc
8000fb44:	1c 39       	cp.w	r9,lr
8000fb46:	c1 d1       	brne	8000fb80 <_free_r+0x64>
8000fb48:	f6 08 00 08 	add	r8,r11,r8
8000fb4c:	58 0c       	cp.w	r12,0
8000fb4e:	c0 81       	brne	8000fb5e <_free_r+0x42>
8000fb50:	6c 09       	ld.w	r9,r6[0x0]
8000fb52:	12 16       	sub	r6,r9
8000fb54:	12 08       	add	r8,r9
8000fb56:	6c 3b       	ld.w	r11,r6[0xc]
8000fb58:	6c 29       	ld.w	r9,r6[0x8]
8000fb5a:	97 29       	st.w	r11[0x8],r9
8000fb5c:	93 3b       	st.w	r9[0xc],r11
8000fb5e:	10 99       	mov	r9,r8
8000fb60:	95 26       	st.w	r10[0x8],r6
8000fb62:	a1 a9       	sbr	r9,0x0
8000fb64:	8d 19       	st.w	r6[0x4],r9
8000fb66:	4b f9       	lddpc	r9,8000fc60 <_free_r+0x144>
8000fb68:	72 09       	ld.w	r9,r9[0x0]
8000fb6a:	12 38       	cp.w	r8,r9
8000fb6c:	c0 63       	brcs	8000fb78 <_free_r+0x5c>
8000fb6e:	4b e8       	lddpc	r8,8000fc64 <_free_r+0x148>
8000fb70:	0e 9c       	mov	r12,r7
8000fb72:	70 0b       	ld.w	r11,r8[0x0]
8000fb74:	f0 1f 00 3d 	mcall	8000fc68 <_free_r+0x14c>
8000fb78:	0e 9c       	mov	r12,r7
8000fb7a:	f0 1f 00 3d 	mcall	8000fc6c <_free_r+0x150>
8000fb7e:	d8 22       	popm	r4-r7,pc
8000fb80:	93 1b       	st.w	r9[0x4],r11
8000fb82:	58 0c       	cp.w	r12,0
8000fb84:	c0 30       	breq	8000fb8a <_free_r+0x6e>
8000fb86:	30 0c       	mov	r12,0
8000fb88:	c1 08       	rjmp	8000fba8 <_free_r+0x8c>
8000fb8a:	6c 0e       	ld.w	lr,r6[0x0]
8000fb8c:	f4 c5 ff f8 	sub	r5,r10,-8
8000fb90:	1c 16       	sub	r6,lr
8000fb92:	1c 08       	add	r8,lr
8000fb94:	6c 2e       	ld.w	lr,r6[0x8]
8000fb96:	0a 3e       	cp.w	lr,r5
8000fb98:	f9 bc 00 01 	moveq	r12,1
8000fb9c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000fba0:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000fba4:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000fba8:	f2 0b 00 0e 	add	lr,r9,r11
8000fbac:	7c 1e       	ld.w	lr,lr[0x4]
8000fbae:	ed be 00 00 	bld	lr,0x0
8000fbb2:	c1 30       	breq	8000fbd8 <_free_r+0xbc>
8000fbb4:	16 08       	add	r8,r11
8000fbb6:	58 0c       	cp.w	r12,0
8000fbb8:	c0 c1       	brne	8000fbd0 <_free_r+0xb4>
8000fbba:	4a 9e       	lddpc	lr,8000fc5c <_free_r+0x140>
8000fbbc:	72 2b       	ld.w	r11,r9[0x8]
8000fbbe:	2f 8e       	sub	lr,-8
8000fbc0:	1c 3b       	cp.w	r11,lr
8000fbc2:	c0 71       	brne	8000fbd0 <_free_r+0xb4>
8000fbc4:	97 36       	st.w	r11[0xc],r6
8000fbc6:	97 26       	st.w	r11[0x8],r6
8000fbc8:	8d 2b       	st.w	r6[0x8],r11
8000fbca:	8d 3b       	st.w	r6[0xc],r11
8000fbcc:	30 1c       	mov	r12,1
8000fbce:	c0 58       	rjmp	8000fbd8 <_free_r+0xbc>
8000fbd0:	72 2b       	ld.w	r11,r9[0x8]
8000fbd2:	72 39       	ld.w	r9,r9[0xc]
8000fbd4:	93 2b       	st.w	r9[0x8],r11
8000fbd6:	97 39       	st.w	r11[0xc],r9
8000fbd8:	10 99       	mov	r9,r8
8000fbda:	ec 08 09 08 	st.w	r6[r8],r8
8000fbde:	a1 a9       	sbr	r9,0x0
8000fbe0:	8d 19       	st.w	r6[0x4],r9
8000fbe2:	58 0c       	cp.w	r12,0
8000fbe4:	c6 51       	brne	8000fcae <_free_r+0x192>
8000fbe6:	e0 48 01 ff 	cp.w	r8,511
8000fbea:	e0 8b 00 13 	brhi	8000fc10 <_free_r+0xf4>
8000fbee:	a3 98       	lsr	r8,0x3
8000fbf0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000fbf4:	72 2b       	ld.w	r11,r9[0x8]
8000fbf6:	8d 39       	st.w	r6[0xc],r9
8000fbf8:	8d 2b       	st.w	r6[0x8],r11
8000fbfa:	97 36       	st.w	r11[0xc],r6
8000fbfc:	93 26       	st.w	r9[0x8],r6
8000fbfe:	a3 48       	asr	r8,0x2
8000fc00:	74 19       	ld.w	r9,r10[0x4]
8000fc02:	30 1b       	mov	r11,1
8000fc04:	f6 08 09 48 	lsl	r8,r11,r8
8000fc08:	f3 e8 10 08 	or	r8,r9,r8
8000fc0c:	95 18       	st.w	r10[0x4],r8
8000fc0e:	c5 08       	rjmp	8000fcae <_free_r+0x192>
8000fc10:	f0 0b 16 09 	lsr	r11,r8,0x9
8000fc14:	58 4b       	cp.w	r11,4
8000fc16:	e0 8b 00 06 	brhi	8000fc22 <_free_r+0x106>
8000fc1a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000fc1e:	2c 8b       	sub	r11,-56
8000fc20:	c2 b8       	rjmp	8000fc76 <_free_r+0x15a>
8000fc22:	59 4b       	cp.w	r11,20
8000fc24:	e0 8b 00 04 	brhi	8000fc2c <_free_r+0x110>
8000fc28:	2a 5b       	sub	r11,-91
8000fc2a:	c2 68       	rjmp	8000fc76 <_free_r+0x15a>
8000fc2c:	e0 4b 00 54 	cp.w	r11,84
8000fc30:	e0 8b 00 06 	brhi	8000fc3c <_free_r+0x120>
8000fc34:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000fc38:	29 2b       	sub	r11,-110
8000fc3a:	c1 e8       	rjmp	8000fc76 <_free_r+0x15a>
8000fc3c:	e0 4b 01 54 	cp.w	r11,340
8000fc40:	e0 8b 00 06 	brhi	8000fc4c <_free_r+0x130>
8000fc44:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000fc48:	28 9b       	sub	r11,-119
8000fc4a:	c1 68       	rjmp	8000fc76 <_free_r+0x15a>
8000fc4c:	e0 4b 05 54 	cp.w	r11,1364
8000fc50:	e0 88 00 10 	brls	8000fc70 <_free_r+0x154>
8000fc54:	37 eb       	mov	r11,126
8000fc56:	c1 08       	rjmp	8000fc76 <_free_r+0x15a>
8000fc58:	80 00       	ld.sh	r0,r0[0x0]
8000fc5a:	bd 4c       	asr	r12,0x1c
8000fc5c:	00 00       	add	r0,r0
8000fc5e:	01 e0       	ld.ub	r0,r0[0x6]
8000fc60:	00 00       	add	r0,r0
8000fc62:	05 e8       	ld.ub	r8,r2[0x6]
8000fc64:	00 00       	add	r0,r0
8000fc66:	13 58       	ld.sh	r8,--r9
8000fc68:	80 00       	ld.sh	r0,r0[0x0]
8000fc6a:	fa 74 80 00 	mov	r4,-294912
8000fc6e:	bd 4e       	asr	lr,0x1c
8000fc70:	f0 0b 16 12 	lsr	r11,r8,0x12
8000fc74:	28 4b       	sub	r11,-124
8000fc76:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000fc7a:	78 29       	ld.w	r9,r12[0x8]
8000fc7c:	18 39       	cp.w	r9,r12
8000fc7e:	c0 e1       	brne	8000fc9a <_free_r+0x17e>
8000fc80:	74 18       	ld.w	r8,r10[0x4]
8000fc82:	a3 4b       	asr	r11,0x2
8000fc84:	30 1c       	mov	r12,1
8000fc86:	f8 0b 09 4b 	lsl	r11,r12,r11
8000fc8a:	f1 eb 10 0b 	or	r11,r8,r11
8000fc8e:	12 98       	mov	r8,r9
8000fc90:	95 1b       	st.w	r10[0x4],r11
8000fc92:	c0 a8       	rjmp	8000fca6 <_free_r+0x18a>
8000fc94:	72 29       	ld.w	r9,r9[0x8]
8000fc96:	18 39       	cp.w	r9,r12
8000fc98:	c0 60       	breq	8000fca4 <_free_r+0x188>
8000fc9a:	72 1a       	ld.w	r10,r9[0x4]
8000fc9c:	e0 1a ff fc 	andl	r10,0xfffc
8000fca0:	14 38       	cp.w	r8,r10
8000fca2:	cf 93       	brcs	8000fc94 <_free_r+0x178>
8000fca4:	72 38       	ld.w	r8,r9[0xc]
8000fca6:	8d 38       	st.w	r6[0xc],r8
8000fca8:	8d 29       	st.w	r6[0x8],r9
8000fcaa:	93 36       	st.w	r9[0xc],r6
8000fcac:	91 26       	st.w	r8[0x8],r6
8000fcae:	0e 9c       	mov	r12,r7
8000fcb0:	f0 1f 00 02 	mcall	8000fcb8 <_free_r+0x19c>
8000fcb4:	d8 22       	popm	r4-r7,pc
8000fcb6:	00 00       	add	r0,r0
8000fcb8:	80 00       	ld.sh	r0,r0[0x0]
8000fcba:	bd 4e       	asr	lr,0x1c

8000fcbc <_fwalk>:
8000fcbc:	d4 31       	pushm	r0-r7,lr
8000fcbe:	30 05       	mov	r5,0
8000fcc0:	16 91       	mov	r1,r11
8000fcc2:	f8 c7 ff 28 	sub	r7,r12,-216
8000fcc6:	0a 92       	mov	r2,r5
8000fcc8:	f0 1f 00 10 	mcall	8000fd08 <_fwalk+0x4c>
8000fccc:	3f f3       	mov	r3,-1
8000fcce:	c1 68       	rjmp	8000fcfa <_fwalk+0x3e>
8000fcd0:	6e 26       	ld.w	r6,r7[0x8]
8000fcd2:	6e 14       	ld.w	r4,r7[0x4]
8000fcd4:	2f 46       	sub	r6,-12
8000fcd6:	c0 c8       	rjmp	8000fcee <_fwalk+0x32>
8000fcd8:	8c 08       	ld.sh	r8,r6[0x0]
8000fcda:	e4 08 19 00 	cp.h	r8,r2
8000fcde:	c0 70       	breq	8000fcec <_fwalk+0x30>
8000fce0:	8c 18       	ld.sh	r8,r6[0x2]
8000fce2:	e6 08 19 00 	cp.h	r8,r3
8000fce6:	c0 30       	breq	8000fcec <_fwalk+0x30>
8000fce8:	5d 11       	icall	r1
8000fcea:	18 45       	or	r5,r12
8000fcec:	2a 46       	sub	r6,-92
8000fcee:	20 14       	sub	r4,1
8000fcf0:	ec cc 00 0c 	sub	r12,r6,12
8000fcf4:	58 04       	cp.w	r4,0
8000fcf6:	cf 14       	brge	8000fcd8 <_fwalk+0x1c>
8000fcf8:	6e 07       	ld.w	r7,r7[0x0]
8000fcfa:	58 07       	cp.w	r7,0
8000fcfc:	ce a1       	brne	8000fcd0 <_fwalk+0x14>
8000fcfe:	f0 1f 00 04 	mcall	8000fd0c <_fwalk+0x50>
8000fd02:	0a 9c       	mov	r12,r5
8000fd04:	d8 32       	popm	r0-r7,pc
8000fd06:	00 00       	add	r0,r0
8000fd08:	80 00       	ld.sh	r0,r0[0x0]
8000fd0a:	f9 00 80 00 	ld.sh	r0,r12[-32768]
8000fd0e:	f9 02 48 1c 	ld.sh	r2,r12[18460]

8000fd10 <_localeconv_r>:
8000fd10:	48 1c       	lddpc	r12,8000fd14 <_localeconv_r+0x4>
8000fd12:	5e fc       	retal	r12
8000fd14:	80 01       	ld.sh	r1,r0[0x0]
8000fd16:	1f 84       	ld.ub	r4,pc[0x0]

8000fd18 <__smakebuf_r>:
8000fd18:	d4 21       	pushm	r4-r7,lr
8000fd1a:	20 fd       	sub	sp,60
8000fd1c:	96 68       	ld.sh	r8,r11[0xc]
8000fd1e:	16 97       	mov	r7,r11
8000fd20:	18 96       	mov	r6,r12
8000fd22:	e2 18 00 02 	andl	r8,0x2,COH
8000fd26:	c3 c1       	brne	8000fd9e <__smakebuf_r+0x86>
8000fd28:	96 7b       	ld.sh	r11,r11[0xe]
8000fd2a:	f0 0b 19 00 	cp.h	r11,r8
8000fd2e:	c0 55       	brlt	8000fd38 <__smakebuf_r+0x20>
8000fd30:	1a 9a       	mov	r10,sp
8000fd32:	f0 1f 00 28 	mcall	8000fdd0 <__smakebuf_r+0xb8>
8000fd36:	c0 f4       	brge	8000fd54 <__smakebuf_r+0x3c>
8000fd38:	8e 65       	ld.sh	r5,r7[0xc]
8000fd3a:	0a 98       	mov	r8,r5
8000fd3c:	ab b8       	sbr	r8,0xb
8000fd3e:	e2 15 00 80 	andl	r5,0x80,COH
8000fd42:	ae 68       	st.h	r7[0xc],r8
8000fd44:	30 04       	mov	r4,0
8000fd46:	e0 68 04 00 	mov	r8,1024
8000fd4a:	f9 b5 01 40 	movne	r5,64
8000fd4e:	f0 05 17 00 	moveq	r5,r8
8000fd52:	c1 b8       	rjmp	8000fd88 <__smakebuf_r+0x70>
8000fd54:	40 18       	lddsp	r8,sp[0x4]
8000fd56:	e2 18 f0 00 	andl	r8,0xf000,COH
8000fd5a:	e0 48 20 00 	cp.w	r8,8192
8000fd5e:	5f 04       	sreq	r4
8000fd60:	e0 48 80 00 	cp.w	r8,32768
8000fd64:	c0 d1       	brne	8000fd7e <__smakebuf_r+0x66>
8000fd66:	6e b9       	ld.w	r9,r7[0x2c]
8000fd68:	49 b8       	lddpc	r8,8000fdd4 <__smakebuf_r+0xbc>
8000fd6a:	10 39       	cp.w	r9,r8
8000fd6c:	c0 91       	brne	8000fd7e <__smakebuf_r+0x66>
8000fd6e:	8e 68       	ld.sh	r8,r7[0xc]
8000fd70:	e0 65 04 00 	mov	r5,1024
8000fd74:	ab a8       	sbr	r8,0xa
8000fd76:	ef 45 00 50 	st.w	r7[80],r5
8000fd7a:	ae 68       	st.h	r7[0xc],r8
8000fd7c:	c0 68       	rjmp	8000fd88 <__smakebuf_r+0x70>
8000fd7e:	8e 68       	ld.sh	r8,r7[0xc]
8000fd80:	e0 65 04 00 	mov	r5,1024
8000fd84:	ab b8       	sbr	r8,0xb
8000fd86:	ae 68       	st.h	r7[0xc],r8
8000fd88:	0a 9b       	mov	r11,r5
8000fd8a:	0c 9c       	mov	r12,r6
8000fd8c:	f0 1f 00 13 	mcall	8000fdd8 <__smakebuf_r+0xc0>
8000fd90:	8e 68       	ld.sh	r8,r7[0xc]
8000fd92:	c0 d1       	brne	8000fdac <__smakebuf_r+0x94>
8000fd94:	ed b8 00 09 	bld	r8,0x9
8000fd98:	c1 a0       	breq	8000fdcc <__smakebuf_r+0xb4>
8000fd9a:	a1 b8       	sbr	r8,0x1
8000fd9c:	ae 68       	st.h	r7[0xc],r8
8000fd9e:	ee c8 ff b9 	sub	r8,r7,-71
8000fda2:	8f 48       	st.w	r7[0x10],r8
8000fda4:	8f 08       	st.w	r7[0x0],r8
8000fda6:	30 18       	mov	r8,1
8000fda8:	8f 58       	st.w	r7[0x14],r8
8000fdaa:	c1 18       	rjmp	8000fdcc <__smakebuf_r+0xb4>
8000fdac:	a7 b8       	sbr	r8,0x7
8000fdae:	8f 4c       	st.w	r7[0x10],r12
8000fdb0:	ae 68       	st.h	r7[0xc],r8
8000fdb2:	8f 55       	st.w	r7[0x14],r5
8000fdb4:	48 a8       	lddpc	r8,8000fddc <__smakebuf_r+0xc4>
8000fdb6:	8f 0c       	st.w	r7[0x0],r12
8000fdb8:	8d a8       	st.w	r6[0x28],r8
8000fdba:	58 04       	cp.w	r4,0
8000fdbc:	c0 80       	breq	8000fdcc <__smakebuf_r+0xb4>
8000fdbe:	8e 7c       	ld.sh	r12,r7[0xe]
8000fdc0:	f0 1f 00 08 	mcall	8000fde0 <__smakebuf_r+0xc8>
8000fdc4:	c0 40       	breq	8000fdcc <__smakebuf_r+0xb4>
8000fdc6:	8e 68       	ld.sh	r8,r7[0xc]
8000fdc8:	a1 a8       	sbr	r8,0x0
8000fdca:	ae 68       	st.h	r7[0xc],r8
8000fdcc:	2f 1d       	sub	sp,-60
8000fdce:	d8 22       	popm	r4-r7,pc
8000fdd0:	80 01       	ld.sh	r1,r0[0x0]
8000fdd2:	06 84       	andn	r4,r3
8000fdd4:	80 01       	ld.sh	r1,r0[0x0]
8000fdd6:	04 64       	and	r4,r2
8000fdd8:	80 00       	ld.sh	r0,r0[0x0]
8000fdda:	b7 2c       	st.d	r11++,r12
8000fddc:	80 00       	ld.sh	r0,r0[0x0]
8000fdde:	f9 04 80 00 	ld.sh	r4,r12[-32768]
8000fde2:	c3 6c       	rcall	8000fe4e <__lo0bits+0xa>

8000fde4 <__hi0bits>:
8000fde4:	18 98       	mov	r8,r12
8000fde6:	e0 1c 00 00 	andl	r12,0x0
8000fdea:	f0 09 15 10 	lsl	r9,r8,0x10
8000fdee:	58 0c       	cp.w	r12,0
8000fdf0:	f2 08 17 00 	moveq	r8,r9
8000fdf4:	f9 bc 00 10 	moveq	r12,16
8000fdf8:	f9 bc 01 00 	movne	r12,0
8000fdfc:	10 9a       	mov	r10,r8
8000fdfe:	f0 09 15 08 	lsl	r9,r8,0x8
8000fe02:	e6 1a ff 00 	andh	r10,0xff00,COH
8000fe06:	f7 bc 00 f8 	subeq	r12,-8
8000fe0a:	f2 08 17 00 	moveq	r8,r9
8000fe0e:	10 9a       	mov	r10,r8
8000fe10:	f0 09 15 04 	lsl	r9,r8,0x4
8000fe14:	e6 1a f0 00 	andh	r10,0xf000,COH
8000fe18:	f7 bc 00 fc 	subeq	r12,-4
8000fe1c:	f2 08 17 00 	moveq	r8,r9
8000fe20:	10 9a       	mov	r10,r8
8000fe22:	f0 09 15 02 	lsl	r9,r8,0x2
8000fe26:	e6 1a c0 00 	andh	r10,0xc000,COH
8000fe2a:	f7 bc 00 fe 	subeq	r12,-2
8000fe2e:	f2 08 17 00 	moveq	r8,r9
8000fe32:	58 08       	cp.w	r8,0
8000fe34:	5e 5c       	retlt	r12
8000fe36:	ed b8 00 1e 	bld	r8,0x1e
8000fe3a:	f9 bc 01 20 	movne	r12,32
8000fe3e:	f7 bc 00 ff 	subeq	r12,-1
8000fe42:	5e fc       	retal	r12

8000fe44 <__lo0bits>:
8000fe44:	18 99       	mov	r9,r12
8000fe46:	78 08       	ld.w	r8,r12[0x0]
8000fe48:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000fe4c:	c1 50       	breq	8000fe76 <__lo0bits+0x32>
8000fe4e:	ed b8 00 00 	bld	r8,0x0
8000fe52:	c0 21       	brne	8000fe56 <__lo0bits+0x12>
8000fe54:	5e fd       	retal	0
8000fe56:	10 9b       	mov	r11,r8
8000fe58:	f0 0a 16 01 	lsr	r10,r8,0x1
8000fe5c:	e2 1b 00 02 	andl	r11,0x2,COH
8000fe60:	a3 88       	lsr	r8,0x2
8000fe62:	58 0b       	cp.w	r11,0
8000fe64:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000fe68:	f9 bc 01 01 	movne	r12,1
8000fe6c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000fe70:	f9 bc 00 02 	moveq	r12,2
8000fe74:	5e fc       	retal	r12
8000fe76:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000fe7a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000fe7e:	58 0a       	cp.w	r10,0
8000fe80:	f6 08 17 00 	moveq	r8,r11
8000fe84:	f9 bc 00 10 	moveq	r12,16
8000fe88:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000fe8c:	f0 0a 16 08 	lsr	r10,r8,0x8
8000fe90:	58 0b       	cp.w	r11,0
8000fe92:	f7 bc 00 f8 	subeq	r12,-8
8000fe96:	f4 08 17 00 	moveq	r8,r10
8000fe9a:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000fe9e:	f0 0a 16 04 	lsr	r10,r8,0x4
8000fea2:	58 0b       	cp.w	r11,0
8000fea4:	f7 bc 00 fc 	subeq	r12,-4
8000fea8:	f4 08 17 00 	moveq	r8,r10
8000feac:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000feb0:	f0 0a 16 02 	lsr	r10,r8,0x2
8000feb4:	58 0b       	cp.w	r11,0
8000feb6:	f7 bc 00 fe 	subeq	r12,-2
8000feba:	f4 08 17 00 	moveq	r8,r10
8000febe:	ed b8 00 00 	bld	r8,0x0
8000fec2:	c0 60       	breq	8000fece <__lo0bits+0x8a>
8000fec4:	a1 98       	lsr	r8,0x1
8000fec6:	c0 31       	brne	8000fecc <__lo0bits+0x88>
8000fec8:	32 0c       	mov	r12,32
8000feca:	5e fc       	retal	r12
8000fecc:	2f fc       	sub	r12,-1
8000fece:	93 08       	st.w	r9[0x0],r8
8000fed0:	5e fc       	retal	r12

8000fed2 <__mcmp>:
8000fed2:	d4 01       	pushm	lr
8000fed4:	18 98       	mov	r8,r12
8000fed6:	76 49       	ld.w	r9,r11[0x10]
8000fed8:	78 4c       	ld.w	r12,r12[0x10]
8000feda:	12 1c       	sub	r12,r9
8000fedc:	c1 31       	brne	8000ff02 <__mcmp+0x30>
8000fede:	2f b9       	sub	r9,-5
8000fee0:	a3 69       	lsl	r9,0x2
8000fee2:	12 0b       	add	r11,r9
8000fee4:	f0 09 00 09 	add	r9,r8,r9
8000fee8:	2e c8       	sub	r8,-20
8000feea:	13 4e       	ld.w	lr,--r9
8000feec:	17 4a       	ld.w	r10,--r11
8000feee:	14 3e       	cp.w	lr,r10
8000fef0:	c0 60       	breq	8000fefc <__mcmp+0x2a>
8000fef2:	f9 bc 03 ff 	movlo	r12,-1
8000fef6:	f9 bc 02 01 	movhs	r12,1
8000fefa:	d8 02       	popm	pc
8000fefc:	10 39       	cp.w	r9,r8
8000fefe:	fe 9b ff f6 	brhi	8000feea <__mcmp+0x18>
8000ff02:	d8 02       	popm	pc

8000ff04 <_Bfree>:
8000ff04:	d4 21       	pushm	r4-r7,lr
8000ff06:	18 97       	mov	r7,r12
8000ff08:	16 95       	mov	r5,r11
8000ff0a:	78 96       	ld.w	r6,r12[0x24]
8000ff0c:	58 06       	cp.w	r6,0
8000ff0e:	c0 91       	brne	8000ff20 <_Bfree+0x1c>
8000ff10:	31 0c       	mov	r12,16
8000ff12:	f0 1f 00 0a 	mcall	8000ff38 <_Bfree+0x34>
8000ff16:	99 36       	st.w	r12[0xc],r6
8000ff18:	8f 9c       	st.w	r7[0x24],r12
8000ff1a:	99 16       	st.w	r12[0x4],r6
8000ff1c:	99 26       	st.w	r12[0x8],r6
8000ff1e:	99 06       	st.w	r12[0x0],r6
8000ff20:	58 05       	cp.w	r5,0
8000ff22:	c0 90       	breq	8000ff34 <_Bfree+0x30>
8000ff24:	6a 19       	ld.w	r9,r5[0x4]
8000ff26:	6e 98       	ld.w	r8,r7[0x24]
8000ff28:	70 38       	ld.w	r8,r8[0xc]
8000ff2a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000ff2e:	8b 0a       	st.w	r5[0x0],r10
8000ff30:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000ff34:	d8 22       	popm	r4-r7,pc
8000ff36:	00 00       	add	r0,r0
8000ff38:	80 00       	ld.sh	r0,r0[0x0]
8000ff3a:	b7 14       	ld.d	r4,--r11

8000ff3c <_Balloc>:
8000ff3c:	d4 21       	pushm	r4-r7,lr
8000ff3e:	18 97       	mov	r7,r12
8000ff40:	16 96       	mov	r6,r11
8000ff42:	78 95       	ld.w	r5,r12[0x24]
8000ff44:	58 05       	cp.w	r5,0
8000ff46:	c0 91       	brne	8000ff58 <_Balloc+0x1c>
8000ff48:	31 0c       	mov	r12,16
8000ff4a:	f0 1f 00 19 	mcall	8000ffac <_Balloc+0x70>
8000ff4e:	99 35       	st.w	r12[0xc],r5
8000ff50:	8f 9c       	st.w	r7[0x24],r12
8000ff52:	99 15       	st.w	r12[0x4],r5
8000ff54:	99 25       	st.w	r12[0x8],r5
8000ff56:	99 05       	st.w	r12[0x0],r5
8000ff58:	6e 95       	ld.w	r5,r7[0x24]
8000ff5a:	6a 38       	ld.w	r8,r5[0xc]
8000ff5c:	58 08       	cp.w	r8,0
8000ff5e:	c0 b1       	brne	8000ff74 <_Balloc+0x38>
8000ff60:	31 0a       	mov	r10,16
8000ff62:	30 4b       	mov	r11,4
8000ff64:	0e 9c       	mov	r12,r7
8000ff66:	f0 1f 00 13 	mcall	8000ffb0 <_Balloc+0x74>
8000ff6a:	8b 3c       	st.w	r5[0xc],r12
8000ff6c:	6e 98       	ld.w	r8,r7[0x24]
8000ff6e:	70 3c       	ld.w	r12,r8[0xc]
8000ff70:	58 0c       	cp.w	r12,0
8000ff72:	c1 b0       	breq	8000ffa8 <_Balloc+0x6c>
8000ff74:	6e 98       	ld.w	r8,r7[0x24]
8000ff76:	70 38       	ld.w	r8,r8[0xc]
8000ff78:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000ff7c:	70 0c       	ld.w	r12,r8[0x0]
8000ff7e:	58 0c       	cp.w	r12,0
8000ff80:	c0 40       	breq	8000ff88 <_Balloc+0x4c>
8000ff82:	78 09       	ld.w	r9,r12[0x0]
8000ff84:	91 09       	st.w	r8[0x0],r9
8000ff86:	c0 e8       	rjmp	8000ffa2 <_Balloc+0x66>
8000ff88:	0e 9c       	mov	r12,r7
8000ff8a:	30 17       	mov	r7,1
8000ff8c:	0e 9b       	mov	r11,r7
8000ff8e:	ee 06 09 47 	lsl	r7,r7,r6
8000ff92:	ee ca ff fb 	sub	r10,r7,-5
8000ff96:	a3 6a       	lsl	r10,0x2
8000ff98:	f0 1f 00 06 	mcall	8000ffb0 <_Balloc+0x74>
8000ff9c:	c0 60       	breq	8000ffa8 <_Balloc+0x6c>
8000ff9e:	99 16       	st.w	r12[0x4],r6
8000ffa0:	99 27       	st.w	r12[0x8],r7
8000ffa2:	30 08       	mov	r8,0
8000ffa4:	99 38       	st.w	r12[0xc],r8
8000ffa6:	99 48       	st.w	r12[0x10],r8
8000ffa8:	d8 22       	popm	r4-r7,pc
8000ffaa:	00 00       	add	r0,r0
8000ffac:	80 00       	ld.sh	r0,r0[0x0]
8000ffae:	b7 14       	ld.d	r4,--r11
8000ffb0:	80 01       	ld.sh	r1,r0[0x0]
8000ffb2:	05 14       	ld.sh	r4,r2++

8000ffb4 <__d2b>:
8000ffb4:	d4 31       	pushm	r0-r7,lr
8000ffb6:	20 2d       	sub	sp,8
8000ffb8:	16 93       	mov	r3,r11
8000ffba:	12 96       	mov	r6,r9
8000ffbc:	10 95       	mov	r5,r8
8000ffbe:	14 92       	mov	r2,r10
8000ffc0:	30 1b       	mov	r11,1
8000ffc2:	f0 1f 00 27 	mcall	8001005c <__d2b+0xa8>
8000ffc6:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000ffca:	50 09       	stdsp	sp[0x0],r9
8000ffcc:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000ffd0:	b5 a9       	sbr	r9,0x14
8000ffd2:	f0 01 16 14 	lsr	r1,r8,0x14
8000ffd6:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000ffda:	18 94       	mov	r4,r12
8000ffdc:	58 02       	cp.w	r2,0
8000ffde:	c1 e0       	breq	8001001a <__d2b+0x66>
8000ffe0:	fa cc ff f8 	sub	r12,sp,-8
8000ffe4:	18 d2       	st.w	--r12,r2
8000ffe6:	f0 1f 00 1f 	mcall	80010060 <__d2b+0xac>
8000ffea:	40 18       	lddsp	r8,sp[0x4]
8000ffec:	c0 d0       	breq	80010006 <__d2b+0x52>
8000ffee:	40 09       	lddsp	r9,sp[0x0]
8000fff0:	f8 0a 11 20 	rsub	r10,r12,32
8000fff4:	f2 0a 09 4a 	lsl	r10,r9,r10
8000fff8:	f5 e8 10 08 	or	r8,r10,r8
8000fffc:	89 58       	st.w	r4[0x14],r8
8000fffe:	f2 0c 0a 49 	lsr	r9,r9,r12
80010002:	50 09       	stdsp	sp[0x0],r9
80010004:	c0 28       	rjmp	80010008 <__d2b+0x54>
80010006:	89 58       	st.w	r4[0x14],r8
80010008:	40 08       	lddsp	r8,sp[0x0]
8001000a:	58 08       	cp.w	r8,0
8001000c:	f9 b3 01 02 	movne	r3,2
80010010:	f9 b3 00 01 	moveq	r3,1
80010014:	89 68       	st.w	r4[0x18],r8
80010016:	89 43       	st.w	r4[0x10],r3
80010018:	c0 98       	rjmp	8001002a <__d2b+0x76>
8001001a:	1a 9c       	mov	r12,sp
8001001c:	f0 1f 00 11 	mcall	80010060 <__d2b+0xac>
80010020:	30 13       	mov	r3,1
80010022:	40 08       	lddsp	r8,sp[0x0]
80010024:	2e 0c       	sub	r12,-32
80010026:	89 43       	st.w	r4[0x10],r3
80010028:	89 58       	st.w	r4[0x14],r8
8001002a:	58 01       	cp.w	r1,0
8001002c:	c0 90       	breq	8001003e <__d2b+0x8a>
8001002e:	e2 c1 04 33 	sub	r1,r1,1075
80010032:	18 01       	add	r1,r12
80010034:	8d 01       	st.w	r6[0x0],r1
80010036:	f8 0c 11 35 	rsub	r12,r12,53
8001003a:	8b 0c       	st.w	r5[0x0],r12
8001003c:	c0 d8       	rjmp	80010056 <__d2b+0xa2>
8001003e:	e6 c8 ff fc 	sub	r8,r3,-4
80010042:	f8 cc 04 32 	sub	r12,r12,1074
80010046:	a5 73       	lsl	r3,0x5
80010048:	8d 0c       	st.w	r6[0x0],r12
8001004a:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8001004e:	f0 1f 00 06 	mcall	80010064 <__d2b+0xb0>
80010052:	18 13       	sub	r3,r12
80010054:	8b 03       	st.w	r5[0x0],r3
80010056:	08 9c       	mov	r12,r4
80010058:	2f ed       	sub	sp,-8
8001005a:	d8 32       	popm	r0-r7,pc
8001005c:	80 00       	ld.sh	r0,r0[0x0]
8001005e:	ff 3c 80 00 	ld.ub	r12,pc[-32768]
80010062:	fe 44 80 00 	cp.w	r4,-98304
80010066:	fd e4 d4 31 	sthh.w	r1[0x10c],lr:b,r4:t

80010068 <__mdiff>:
80010068:	d4 31       	pushm	r0-r7,lr
8001006a:	74 48       	ld.w	r8,r10[0x10]
8001006c:	76 45       	ld.w	r5,r11[0x10]
8001006e:	16 97       	mov	r7,r11
80010070:	14 96       	mov	r6,r10
80010072:	10 15       	sub	r5,r8
80010074:	c1 31       	brne	8001009a <__mdiff+0x32>
80010076:	2f b8       	sub	r8,-5
80010078:	ee ce ff ec 	sub	lr,r7,-20
8001007c:	a3 68       	lsl	r8,0x2
8001007e:	f4 08 00 0b 	add	r11,r10,r8
80010082:	ee 08 00 08 	add	r8,r7,r8
80010086:	11 4a       	ld.w	r10,--r8
80010088:	17 49       	ld.w	r9,--r11
8001008a:	12 3a       	cp.w	r10,r9
8001008c:	c0 30       	breq	80010092 <__mdiff+0x2a>
8001008e:	c0 e2       	brcc	800100aa <__mdiff+0x42>
80010090:	c0 78       	rjmp	8001009e <__mdiff+0x36>
80010092:	1c 38       	cp.w	r8,lr
80010094:	fe 9b ff f9 	brhi	80010086 <__mdiff+0x1e>
80010098:	c4 a8       	rjmp	8001012c <__mdiff+0xc4>
8001009a:	58 05       	cp.w	r5,0
8001009c:	c0 64       	brge	800100a8 <__mdiff+0x40>
8001009e:	0e 98       	mov	r8,r7
800100a0:	30 15       	mov	r5,1
800100a2:	0c 97       	mov	r7,r6
800100a4:	10 96       	mov	r6,r8
800100a6:	c0 28       	rjmp	800100aa <__mdiff+0x42>
800100a8:	30 05       	mov	r5,0
800100aa:	6e 1b       	ld.w	r11,r7[0x4]
800100ac:	f0 1f 00 24 	mcall	8001013c <__mdiff+0xd4>
800100b0:	6e 49       	ld.w	r9,r7[0x10]
800100b2:	6c 44       	ld.w	r4,r6[0x10]
800100b4:	99 35       	st.w	r12[0xc],r5
800100b6:	2f b4       	sub	r4,-5
800100b8:	f2 c5 ff fb 	sub	r5,r9,-5
800100bc:	ec 04 00 24 	add	r4,r6,r4<<0x2
800100c0:	ee 05 00 25 	add	r5,r7,r5<<0x2
800100c4:	2e c6       	sub	r6,-20
800100c6:	2e c7       	sub	r7,-20
800100c8:	f8 c8 ff ec 	sub	r8,r12,-20
800100cc:	30 0a       	mov	r10,0
800100ce:	0f 0e       	ld.w	lr,r7++
800100d0:	0d 0b       	ld.w	r11,r6++
800100d2:	fc 02 16 10 	lsr	r2,lr,0x10
800100d6:	f6 03 16 10 	lsr	r3,r11,0x10
800100da:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800100de:	e4 03 01 03 	sub	r3,r2,r3
800100e2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800100e6:	fc 0b 01 0b 	sub	r11,lr,r11
800100ea:	f6 0a 00 0a 	add	r10,r11,r10
800100ee:	b0 1a       	st.h	r8[0x2],r10
800100f0:	b1 4a       	asr	r10,0x10
800100f2:	e6 0a 00 0a 	add	r10,r3,r10
800100f6:	b0 0a       	st.h	r8[0x0],r10
800100f8:	2f c8       	sub	r8,-4
800100fa:	b1 4a       	asr	r10,0x10
800100fc:	08 36       	cp.w	r6,r4
800100fe:	ce 83       	brcs	800100ce <__mdiff+0x66>
80010100:	c0 d8       	rjmp	8001011a <__mdiff+0xb2>
80010102:	0f 0b       	ld.w	r11,r7++
80010104:	f6 0e 16 10 	lsr	lr,r11,0x10
80010108:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8001010c:	16 0a       	add	r10,r11
8001010e:	b0 1a       	st.h	r8[0x2],r10
80010110:	b1 4a       	asr	r10,0x10
80010112:	1c 0a       	add	r10,lr
80010114:	b0 0a       	st.h	r8[0x0],r10
80010116:	2f c8       	sub	r8,-4
80010118:	b1 4a       	asr	r10,0x10
8001011a:	0a 37       	cp.w	r7,r5
8001011c:	cf 33       	brcs	80010102 <__mdiff+0x9a>
8001011e:	c0 28       	rjmp	80010122 <__mdiff+0xba>
80010120:	20 19       	sub	r9,1
80010122:	11 4a       	ld.w	r10,--r8
80010124:	58 0a       	cp.w	r10,0
80010126:	cf d0       	breq	80010120 <__mdiff+0xb8>
80010128:	99 49       	st.w	r12[0x10],r9
8001012a:	d8 32       	popm	r0-r7,pc
8001012c:	30 0b       	mov	r11,0
8001012e:	f0 1f 00 04 	mcall	8001013c <__mdiff+0xd4>
80010132:	30 18       	mov	r8,1
80010134:	99 48       	st.w	r12[0x10],r8
80010136:	30 08       	mov	r8,0
80010138:	99 58       	st.w	r12[0x14],r8
8001013a:	d8 32       	popm	r0-r7,pc
8001013c:	80 00       	ld.sh	r0,r0[0x0]
8001013e:	ff 3c d4 31 	ld.ub	r12,pc[-11215]

80010140 <__lshift>:
80010140:	d4 31       	pushm	r0-r7,lr
80010142:	16 97       	mov	r7,r11
80010144:	76 46       	ld.w	r6,r11[0x10]
80010146:	f4 02 14 05 	asr	r2,r10,0x5
8001014a:	2f f6       	sub	r6,-1
8001014c:	14 93       	mov	r3,r10
8001014e:	18 94       	mov	r4,r12
80010150:	04 06       	add	r6,r2
80010152:	76 1b       	ld.w	r11,r11[0x4]
80010154:	6e 28       	ld.w	r8,r7[0x8]
80010156:	c0 38       	rjmp	8001015c <__lshift+0x1c>
80010158:	2f fb       	sub	r11,-1
8001015a:	a1 78       	lsl	r8,0x1
8001015c:	10 36       	cp.w	r6,r8
8001015e:	fe 99 ff fd 	brgt	80010158 <__lshift+0x18>
80010162:	08 9c       	mov	r12,r4
80010164:	f0 1f 00 1a 	mcall	800101cc <__lshift+0x8c>
80010168:	30 09       	mov	r9,0
8001016a:	18 95       	mov	r5,r12
8001016c:	f8 c8 ff ec 	sub	r8,r12,-20
80010170:	12 9a       	mov	r10,r9
80010172:	c0 38       	rjmp	80010178 <__lshift+0x38>
80010174:	10 aa       	st.w	r8++,r10
80010176:	2f f9       	sub	r9,-1
80010178:	04 39       	cp.w	r9,r2
8001017a:	cf d5       	brlt	80010174 <__lshift+0x34>
8001017c:	6e 4b       	ld.w	r11,r7[0x10]
8001017e:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80010182:	2f bb       	sub	r11,-5
80010184:	ee c9 ff ec 	sub	r9,r7,-20
80010188:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8001018c:	58 03       	cp.w	r3,0
8001018e:	c1 30       	breq	800101b4 <__lshift+0x74>
80010190:	e6 0c 11 20 	rsub	r12,r3,32
80010194:	30 0a       	mov	r10,0
80010196:	72 02       	ld.w	r2,r9[0x0]
80010198:	e4 03 09 42 	lsl	r2,r2,r3
8001019c:	04 4a       	or	r10,r2
8001019e:	10 aa       	st.w	r8++,r10
800101a0:	13 0a       	ld.w	r10,r9++
800101a2:	f4 0c 0a 4a 	lsr	r10,r10,r12
800101a6:	16 39       	cp.w	r9,r11
800101a8:	cf 73       	brcs	80010196 <__lshift+0x56>
800101aa:	91 0a       	st.w	r8[0x0],r10
800101ac:	58 0a       	cp.w	r10,0
800101ae:	c0 70       	breq	800101bc <__lshift+0x7c>
800101b0:	2f f6       	sub	r6,-1
800101b2:	c0 58       	rjmp	800101bc <__lshift+0x7c>
800101b4:	13 0a       	ld.w	r10,r9++
800101b6:	10 aa       	st.w	r8++,r10
800101b8:	16 39       	cp.w	r9,r11
800101ba:	cf d3       	brcs	800101b4 <__lshift+0x74>
800101bc:	08 9c       	mov	r12,r4
800101be:	20 16       	sub	r6,1
800101c0:	0e 9b       	mov	r11,r7
800101c2:	8b 46       	st.w	r5[0x10],r6
800101c4:	f0 1f 00 03 	mcall	800101d0 <__lshift+0x90>
800101c8:	0a 9c       	mov	r12,r5
800101ca:	d8 32       	popm	r0-r7,pc
800101cc:	80 00       	ld.sh	r0,r0[0x0]
800101ce:	ff 3c 80 00 	ld.ub	r12,pc[-32768]
800101d2:	ff 04 d4 31 	ld.sh	r4,pc[-11215]

800101d4 <__multiply>:
800101d4:	d4 31       	pushm	r0-r7,lr
800101d6:	20 2d       	sub	sp,8
800101d8:	76 49       	ld.w	r9,r11[0x10]
800101da:	74 48       	ld.w	r8,r10[0x10]
800101dc:	16 96       	mov	r6,r11
800101de:	14 95       	mov	r5,r10
800101e0:	10 39       	cp.w	r9,r8
800101e2:	ec 08 17 50 	movlt	r8,r6
800101e6:	ea 06 17 50 	movlt	r6,r5
800101ea:	f0 05 17 50 	movlt	r5,r8
800101ee:	6c 28       	ld.w	r8,r6[0x8]
800101f0:	76 43       	ld.w	r3,r11[0x10]
800101f2:	74 42       	ld.w	r2,r10[0x10]
800101f4:	76 1b       	ld.w	r11,r11[0x4]
800101f6:	e4 03 00 07 	add	r7,r2,r3
800101fa:	10 37       	cp.w	r7,r8
800101fc:	f7 bb 09 ff 	subgt	r11,-1
80010200:	f0 1f 00 36 	mcall	800102d8 <__multiply+0x104>
80010204:	ee c4 ff fb 	sub	r4,r7,-5
80010208:	f8 c9 ff ec 	sub	r9,r12,-20
8001020c:	f8 04 00 24 	add	r4,r12,r4<<0x2
80010210:	30 0a       	mov	r10,0
80010212:	12 98       	mov	r8,r9
80010214:	c0 28       	rjmp	80010218 <__multiply+0x44>
80010216:	10 aa       	st.w	r8++,r10
80010218:	08 38       	cp.w	r8,r4
8001021a:	cf e3       	brcs	80010216 <__multiply+0x42>
8001021c:	2f b3       	sub	r3,-5
8001021e:	2f b2       	sub	r2,-5
80010220:	ec 03 00 23 	add	r3,r6,r3<<0x2
80010224:	ea 02 00 22 	add	r2,r5,r2<<0x2
80010228:	ec cb ff ec 	sub	r11,r6,-20
8001022c:	50 12       	stdsp	sp[0x4],r2
8001022e:	ea ca ff ec 	sub	r10,r5,-20
80010232:	c4 48       	rjmp	800102ba <__multiply+0xe6>
80010234:	94 95       	ld.uh	r5,r10[0x2]
80010236:	58 05       	cp.w	r5,0
80010238:	c2 00       	breq	80010278 <__multiply+0xa4>
8001023a:	12 98       	mov	r8,r9
8001023c:	16 96       	mov	r6,r11
8001023e:	30 0e       	mov	lr,0
80010240:	50 09       	stdsp	sp[0x0],r9
80010242:	0d 02       	ld.w	r2,r6++
80010244:	e4 00 16 10 	lsr	r0,r2,0x10
80010248:	70 01       	ld.w	r1,r8[0x0]
8001024a:	70 09       	ld.w	r9,r8[0x0]
8001024c:	b1 81       	lsr	r1,0x10
8001024e:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80010252:	e0 05 03 41 	mac	r1,r0,r5
80010256:	ab 32       	mul	r2,r5
80010258:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8001025c:	00 02       	add	r2,r0
8001025e:	e4 0e 00 0e 	add	lr,r2,lr
80010262:	b0 1e       	st.h	r8[0x2],lr
80010264:	b1 8e       	lsr	lr,0x10
80010266:	1c 01       	add	r1,lr
80010268:	b0 01       	st.h	r8[0x0],r1
8001026a:	e2 0e 16 10 	lsr	lr,r1,0x10
8001026e:	2f c8       	sub	r8,-4
80010270:	06 36       	cp.w	r6,r3
80010272:	ce 83       	brcs	80010242 <__multiply+0x6e>
80010274:	40 09       	lddsp	r9,sp[0x0]
80010276:	91 0e       	st.w	r8[0x0],lr
80010278:	94 86       	ld.uh	r6,r10[0x0]
8001027a:	58 06       	cp.w	r6,0
8001027c:	c1 d0       	breq	800102b6 <__multiply+0xe2>
8001027e:	72 02       	ld.w	r2,r9[0x0]
80010280:	12 98       	mov	r8,r9
80010282:	16 9e       	mov	lr,r11
80010284:	30 05       	mov	r5,0
80010286:	b0 12       	st.h	r8[0x2],r2
80010288:	1d 01       	ld.w	r1,lr++
8001028a:	90 82       	ld.uh	r2,r8[0x0]
8001028c:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80010290:	ad 30       	mul	r0,r6
80010292:	e0 02 00 02 	add	r2,r0,r2
80010296:	e4 05 00 05 	add	r5,r2,r5
8001029a:	b0 05       	st.h	r8[0x0],r5
8001029c:	b1 85       	lsr	r5,0x10
8001029e:	b1 81       	lsr	r1,0x10
800102a0:	2f c8       	sub	r8,-4
800102a2:	ad 31       	mul	r1,r6
800102a4:	90 92       	ld.uh	r2,r8[0x2]
800102a6:	e2 02 00 02 	add	r2,r1,r2
800102aa:	0a 02       	add	r2,r5
800102ac:	e4 05 16 10 	lsr	r5,r2,0x10
800102b0:	06 3e       	cp.w	lr,r3
800102b2:	ce a3       	brcs	80010286 <__multiply+0xb2>
800102b4:	91 02       	st.w	r8[0x0],r2
800102b6:	2f ca       	sub	r10,-4
800102b8:	2f c9       	sub	r9,-4
800102ba:	40 18       	lddsp	r8,sp[0x4]
800102bc:	10 3a       	cp.w	r10,r8
800102be:	cb b3       	brcs	80010234 <__multiply+0x60>
800102c0:	c0 28       	rjmp	800102c4 <__multiply+0xf0>
800102c2:	20 17       	sub	r7,1
800102c4:	58 07       	cp.w	r7,0
800102c6:	e0 8a 00 05 	brle	800102d0 <__multiply+0xfc>
800102ca:	09 48       	ld.w	r8,--r4
800102cc:	58 08       	cp.w	r8,0
800102ce:	cf a0       	breq	800102c2 <__multiply+0xee>
800102d0:	99 47       	st.w	r12[0x10],r7
800102d2:	2f ed       	sub	sp,-8
800102d4:	d8 32       	popm	r0-r7,pc
800102d6:	00 00       	add	r0,r0
800102d8:	80 00       	ld.sh	r0,r0[0x0]
800102da:	ff 3c d4 21 	ld.ub	r12,pc[-11231]

800102dc <__i2b>:
800102dc:	d4 21       	pushm	r4-r7,lr
800102de:	16 97       	mov	r7,r11
800102e0:	30 1b       	mov	r11,1
800102e2:	f0 1f 00 04 	mcall	800102f0 <__i2b+0x14>
800102e6:	30 19       	mov	r9,1
800102e8:	99 57       	st.w	r12[0x14],r7
800102ea:	99 49       	st.w	r12[0x10],r9
800102ec:	d8 22       	popm	r4-r7,pc
800102ee:	00 00       	add	r0,r0
800102f0:	80 00       	ld.sh	r0,r0[0x0]
800102f2:	ff 3c d4 31 	ld.ub	r12,pc[-11215]

800102f4 <__multadd>:
800102f4:	d4 31       	pushm	r0-r7,lr
800102f6:	30 08       	mov	r8,0
800102f8:	12 95       	mov	r5,r9
800102fa:	16 97       	mov	r7,r11
800102fc:	18 96       	mov	r6,r12
800102fe:	76 44       	ld.w	r4,r11[0x10]
80010300:	f6 c9 ff ec 	sub	r9,r11,-20
80010304:	72 0b       	ld.w	r11,r9[0x0]
80010306:	f6 0c 16 10 	lsr	r12,r11,0x10
8001030a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8001030e:	f4 0c 02 4c 	mul	r12,r10,r12
80010312:	f4 0b 03 45 	mac	r5,r10,r11
80010316:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8001031a:	b1 85       	lsr	r5,0x10
8001031c:	18 05       	add	r5,r12
8001031e:	ea 0c 15 10 	lsl	r12,r5,0x10
80010322:	f8 0b 00 0b 	add	r11,r12,r11
80010326:	12 ab       	st.w	r9++,r11
80010328:	2f f8       	sub	r8,-1
8001032a:	b1 85       	lsr	r5,0x10
8001032c:	08 38       	cp.w	r8,r4
8001032e:	ce b5       	brlt	80010304 <__multadd+0x10>
80010330:	58 05       	cp.w	r5,0
80010332:	c1 d0       	breq	8001036c <__multadd+0x78>
80010334:	6e 28       	ld.w	r8,r7[0x8]
80010336:	10 34       	cp.w	r4,r8
80010338:	c1 45       	brlt	80010360 <__multadd+0x6c>
8001033a:	6e 1b       	ld.w	r11,r7[0x4]
8001033c:	0c 9c       	mov	r12,r6
8001033e:	2f fb       	sub	r11,-1
80010340:	f0 1f 00 0c 	mcall	80010370 <__multadd+0x7c>
80010344:	6e 4a       	ld.w	r10,r7[0x10]
80010346:	ee cb ff f4 	sub	r11,r7,-12
8001034a:	18 93       	mov	r3,r12
8001034c:	2f ea       	sub	r10,-2
8001034e:	2f 4c       	sub	r12,-12
80010350:	a3 6a       	lsl	r10,0x2
80010352:	f0 1f 00 09 	mcall	80010374 <__multadd+0x80>
80010356:	0e 9b       	mov	r11,r7
80010358:	0c 9c       	mov	r12,r6
8001035a:	f0 1f 00 08 	mcall	80010378 <__multadd+0x84>
8001035e:	06 97       	mov	r7,r3
80010360:	e8 c8 ff ff 	sub	r8,r4,-1
80010364:	2f b4       	sub	r4,-5
80010366:	8f 48       	st.w	r7[0x10],r8
80010368:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8001036c:	0e 9c       	mov	r12,r7
8001036e:	d8 32       	popm	r0-r7,pc
80010370:	80 00       	ld.sh	r0,r0[0x0]
80010372:	ff 3c 80 00 	ld.ub	r12,pc[-32768]
80010376:	bb b8       	sbr	r8,0x1b
80010378:	80 00       	ld.sh	r0,r0[0x0]
8001037a:	ff 04 d4 31 	ld.sh	r4,pc[-11215]

8001037c <__pow5mult>:
8001037c:	d4 31       	pushm	r0-r7,lr
8001037e:	14 96       	mov	r6,r10
80010380:	18 97       	mov	r7,r12
80010382:	16 94       	mov	r4,r11
80010384:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80010388:	c0 90       	breq	8001039a <__pow5mult+0x1e>
8001038a:	20 18       	sub	r8,1
8001038c:	4a 19       	lddpc	r9,80010410 <__pow5mult+0x94>
8001038e:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80010392:	30 09       	mov	r9,0
80010394:	f0 1f 00 20 	mcall	80010414 <__pow5mult+0x98>
80010398:	18 94       	mov	r4,r12
8001039a:	a3 46       	asr	r6,0x2
8001039c:	c3 70       	breq	8001040a <__pow5mult+0x8e>
8001039e:	6e 95       	ld.w	r5,r7[0x24]
800103a0:	58 05       	cp.w	r5,0
800103a2:	c0 91       	brne	800103b4 <__pow5mult+0x38>
800103a4:	31 0c       	mov	r12,16
800103a6:	f0 1f 00 1d 	mcall	80010418 <__pow5mult+0x9c>
800103aa:	99 35       	st.w	r12[0xc],r5
800103ac:	8f 9c       	st.w	r7[0x24],r12
800103ae:	99 15       	st.w	r12[0x4],r5
800103b0:	99 25       	st.w	r12[0x8],r5
800103b2:	99 05       	st.w	r12[0x0],r5
800103b4:	6e 93       	ld.w	r3,r7[0x24]
800103b6:	66 25       	ld.w	r5,r3[0x8]
800103b8:	58 05       	cp.w	r5,0
800103ba:	c0 d1       	brne	800103d4 <__pow5mult+0x58>
800103bc:	e0 6b 02 71 	mov	r11,625
800103c0:	0e 9c       	mov	r12,r7
800103c2:	f0 1f 00 17 	mcall	8001041c <__pow5mult+0xa0>
800103c6:	87 2c       	st.w	r3[0x8],r12
800103c8:	30 08       	mov	r8,0
800103ca:	18 95       	mov	r5,r12
800103cc:	99 08       	st.w	r12[0x0],r8
800103ce:	c0 38       	rjmp	800103d4 <__pow5mult+0x58>
800103d0:	06 9c       	mov	r12,r3
800103d2:	18 95       	mov	r5,r12
800103d4:	ed b6 00 00 	bld	r6,0x0
800103d8:	c0 c1       	brne	800103f0 <__pow5mult+0x74>
800103da:	08 9b       	mov	r11,r4
800103dc:	0a 9a       	mov	r10,r5
800103de:	0e 9c       	mov	r12,r7
800103e0:	f0 1f 00 10 	mcall	80010420 <__pow5mult+0xa4>
800103e4:	08 9b       	mov	r11,r4
800103e6:	18 93       	mov	r3,r12
800103e8:	0e 9c       	mov	r12,r7
800103ea:	06 94       	mov	r4,r3
800103ec:	f0 1f 00 0e 	mcall	80010424 <__pow5mult+0xa8>
800103f0:	a1 56       	asr	r6,0x1
800103f2:	c0 c0       	breq	8001040a <__pow5mult+0x8e>
800103f4:	6a 03       	ld.w	r3,r5[0x0]
800103f6:	58 03       	cp.w	r3,0
800103f8:	ce c1       	brne	800103d0 <__pow5mult+0x54>
800103fa:	0a 9a       	mov	r10,r5
800103fc:	0a 9b       	mov	r11,r5
800103fe:	0e 9c       	mov	r12,r7
80010400:	f0 1f 00 08 	mcall	80010420 <__pow5mult+0xa4>
80010404:	8b 0c       	st.w	r5[0x0],r12
80010406:	99 03       	st.w	r12[0x0],r3
80010408:	ce 5b       	rjmp	800103d2 <__pow5mult+0x56>
8001040a:	08 9c       	mov	r12,r4
8001040c:	d8 32       	popm	r0-r7,pc
8001040e:	00 00       	add	r0,r0
80010410:	80 01       	ld.sh	r1,r0[0x0]
80010412:	1f c0       	ld.ub	r0,pc[0x4]
80010414:	80 01       	ld.sh	r1,r0[0x0]
80010416:	02 f4       	st.b	--r1,r4
80010418:	80 00       	ld.sh	r0,r0[0x0]
8001041a:	b7 14       	ld.d	r4,--r11
8001041c:	80 01       	ld.sh	r1,r0[0x0]
8001041e:	02 dc       	st.w	--r1,r12
80010420:	80 01       	ld.sh	r1,r0[0x0]
80010422:	01 d4       	ld.ub	r4,r0[0x5]
80010424:	80 00       	ld.sh	r0,r0[0x0]
80010426:	ff 04 14 98 	ld.sh	r4,pc[5272]

80010428 <__isinfd>:
80010428:	14 98       	mov	r8,r10
8001042a:	fc 19 7f f0 	movh	r9,0x7ff0
8001042e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80010432:	f0 0b 11 00 	rsub	r11,r8,0
80010436:	f7 e8 10 08 	or	r8,r11,r8
8001043a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8001043e:	f2 08 01 08 	sub	r8,r9,r8
80010442:	f0 0c 11 00 	rsub	r12,r8,0
80010446:	f9 e8 10 08 	or	r8,r12,r8
8001044a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8001044e:	2f fc       	sub	r12,-1
80010450:	5e fc       	retal	r12
80010452:	d7 03       	nop

80010454 <__sclose>:
80010454:	d4 01       	pushm	lr
80010456:	96 7b       	ld.sh	r11,r11[0xe]
80010458:	f0 1f 00 02 	mcall	80010460 <__sclose+0xc>
8001045c:	d8 02       	popm	pc
8001045e:	00 00       	add	r0,r0
80010460:	80 01       	ld.sh	r1,r0[0x0]
80010462:	05 74       	ld.ub	r4,--r2

80010464 <__sseek>:
80010464:	d4 21       	pushm	r4-r7,lr
80010466:	16 97       	mov	r7,r11
80010468:	96 7b       	ld.sh	r11,r11[0xe]
8001046a:	f0 1f 00 08 	mcall	80010488 <__sseek+0x24>
8001046e:	8e 68       	ld.sh	r8,r7[0xc]
80010470:	10 99       	mov	r9,r8
80010472:	ad c8       	cbr	r8,0xc
80010474:	ad a9       	sbr	r9,0xc
80010476:	5b fc       	cp.w	r12,-1
80010478:	ef f8 0c 06 	st.heq	r7[0xc],r8
8001047c:	ef f9 1c 06 	st.hne	r7[0xc],r9
80010480:	ef fc 1a 15 	st.wne	r7[0x54],r12
80010484:	d8 22       	popm	r4-r7,pc
80010486:	00 00       	add	r0,r0
80010488:	80 01       	ld.sh	r1,r0[0x0]
8001048a:	06 b0       	st.h	r3++,r0

8001048c <__swrite>:
8001048c:	d4 21       	pushm	r4-r7,lr
8001048e:	96 68       	ld.sh	r8,r11[0xc]
80010490:	16 97       	mov	r7,r11
80010492:	14 95       	mov	r5,r10
80010494:	12 94       	mov	r4,r9
80010496:	e2 18 01 00 	andl	r8,0x100,COH
8001049a:	18 96       	mov	r6,r12
8001049c:	c0 60       	breq	800104a8 <__swrite+0x1c>
8001049e:	30 29       	mov	r9,2
800104a0:	30 0a       	mov	r10,0
800104a2:	96 7b       	ld.sh	r11,r11[0xe]
800104a4:	f0 1f 00 06 	mcall	800104bc <__swrite+0x30>
800104a8:	8e 68       	ld.sh	r8,r7[0xc]
800104aa:	ad c8       	cbr	r8,0xc
800104ac:	08 99       	mov	r9,r4
800104ae:	0a 9a       	mov	r10,r5
800104b0:	8e 7b       	ld.sh	r11,r7[0xe]
800104b2:	0c 9c       	mov	r12,r6
800104b4:	ae 68       	st.h	r7[0xc],r8
800104b6:	f0 1f 00 03 	mcall	800104c0 <__swrite+0x34>
800104ba:	d8 22       	popm	r4-r7,pc
800104bc:	80 01       	ld.sh	r1,r0[0x0]
800104be:	06 b0       	st.h	r3++,r0
800104c0:	80 01       	ld.sh	r1,r0[0x0]
800104c2:	04 e8       	st.h	--r2,r8

800104c4 <__sread>:
800104c4:	d4 21       	pushm	r4-r7,lr
800104c6:	16 97       	mov	r7,r11
800104c8:	96 7b       	ld.sh	r11,r11[0xe]
800104ca:	f0 1f 00 07 	mcall	800104e4 <__sread+0x20>
800104ce:	c0 65       	brlt	800104da <__sread+0x16>
800104d0:	6f 58       	ld.w	r8,r7[0x54]
800104d2:	18 08       	add	r8,r12
800104d4:	ef 48 00 54 	st.w	r7[84],r8
800104d8:	d8 22       	popm	r4-r7,pc
800104da:	8e 68       	ld.sh	r8,r7[0xc]
800104dc:	ad c8       	cbr	r8,0xc
800104de:	ae 68       	st.h	r7[0xc],r8
800104e0:	d8 22       	popm	r4-r7,pc
800104e2:	00 00       	add	r0,r0
800104e4:	80 01       	ld.sh	r1,r0[0x0]
800104e6:	06 dc       	st.w	--r3,r12

800104e8 <_write_r>:
800104e8:	d4 21       	pushm	r4-r7,lr
800104ea:	16 98       	mov	r8,r11
800104ec:	18 97       	mov	r7,r12
800104ee:	10 9c       	mov	r12,r8
800104f0:	30 08       	mov	r8,0
800104f2:	14 9b       	mov	r11,r10
800104f4:	48 66       	lddpc	r6,8001050c <_write_r+0x24>
800104f6:	12 9a       	mov	r10,r9
800104f8:	8d 08       	st.w	r6[0x0],r8
800104fa:	f0 1f 00 06 	mcall	80010510 <_write_r+0x28>
800104fe:	5b fc       	cp.w	r12,-1
80010500:	c0 51       	brne	8001050a <_write_r+0x22>
80010502:	6c 08       	ld.w	r8,r6[0x0]
80010504:	58 08       	cp.w	r8,0
80010506:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001050a:	d8 22       	popm	r4-r7,pc
8001050c:	00 00       	add	r0,r0
8001050e:	13 88       	ld.ub	r8,r9[0x0]
80010510:	80 00       	ld.sh	r0,r0[0x0]
80010512:	c3 54       	brge	8001057c <_close_r+0x8>

80010514 <_calloc_r>:
80010514:	d4 21       	pushm	r4-r7,lr
80010516:	f4 0b 02 4b 	mul	r11,r10,r11
8001051a:	f0 1f 00 15 	mcall	8001056c <_calloc_r+0x58>
8001051e:	18 97       	mov	r7,r12
80010520:	c2 30       	breq	80010566 <_calloc_r+0x52>
80010522:	f8 fa ff fc 	ld.w	r10,r12[-4]
80010526:	e0 1a ff fc 	andl	r10,0xfffc
8001052a:	20 4a       	sub	r10,4
8001052c:	e0 4a 00 24 	cp.w	r10,36
80010530:	e0 8b 00 18 	brhi	80010560 <_calloc_r+0x4c>
80010534:	18 98       	mov	r8,r12
80010536:	59 3a       	cp.w	r10,19
80010538:	e0 88 00 0f 	brls	80010556 <_calloc_r+0x42>
8001053c:	30 09       	mov	r9,0
8001053e:	10 a9       	st.w	r8++,r9
80010540:	10 a9       	st.w	r8++,r9
80010542:	59 ba       	cp.w	r10,27
80010544:	e0 88 00 09 	brls	80010556 <_calloc_r+0x42>
80010548:	10 a9       	st.w	r8++,r9
8001054a:	10 a9       	st.w	r8++,r9
8001054c:	e0 4a 00 24 	cp.w	r10,36
80010550:	c0 31       	brne	80010556 <_calloc_r+0x42>
80010552:	10 a9       	st.w	r8++,r9
80010554:	10 a9       	st.w	r8++,r9
80010556:	30 09       	mov	r9,0
80010558:	10 a9       	st.w	r8++,r9
8001055a:	91 19       	st.w	r8[0x4],r9
8001055c:	91 09       	st.w	r8[0x0],r9
8001055e:	c0 48       	rjmp	80010566 <_calloc_r+0x52>
80010560:	30 0b       	mov	r11,0
80010562:	f0 1f 00 04 	mcall	80010570 <_calloc_r+0x5c>
80010566:	0e 9c       	mov	r12,r7
80010568:	d8 22       	popm	r4-r7,pc
8001056a:	00 00       	add	r0,r0
8001056c:	80 00       	ld.sh	r0,r0[0x0]
8001056e:	b7 2c       	st.d	r11++,r12
80010570:	80 00       	ld.sh	r0,r0[0x0]
80010572:	bd 3e       	mul	lr,lr

80010574 <_close_r>:
80010574:	d4 21       	pushm	r4-r7,lr
80010576:	30 08       	mov	r8,0
80010578:	18 97       	mov	r7,r12
8001057a:	48 76       	lddpc	r6,80010594 <_close_r+0x20>
8001057c:	16 9c       	mov	r12,r11
8001057e:	8d 08       	st.w	r6[0x0],r8
80010580:	f0 1f 00 06 	mcall	80010598 <_close_r+0x24>
80010584:	5b fc       	cp.w	r12,-1
80010586:	c0 51       	brne	80010590 <_close_r+0x1c>
80010588:	6c 08       	ld.w	r8,r6[0x0]
8001058a:	58 08       	cp.w	r8,0
8001058c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80010590:	d8 22       	popm	r4-r7,pc
80010592:	00 00       	add	r0,r0
80010594:	00 00       	add	r0,r0
80010596:	13 88       	ld.ub	r8,r9[0x0]
80010598:	80 00       	ld.sh	r0,r0[0x0]
8001059a:	c3 0c       	rcall	800105fa <_fclose_r+0x5e>

8001059c <_fclose_r>:
8001059c:	d4 21       	pushm	r4-r7,lr
8001059e:	18 96       	mov	r6,r12
800105a0:	16 97       	mov	r7,r11
800105a2:	58 0b       	cp.w	r11,0
800105a4:	c0 31       	brne	800105aa <_fclose_r+0xe>
800105a6:	16 95       	mov	r5,r11
800105a8:	c5 08       	rjmp	80010648 <_fclose_r+0xac>
800105aa:	f0 1f 00 29 	mcall	8001064c <_fclose_r+0xb0>
800105ae:	58 06       	cp.w	r6,0
800105b0:	c0 70       	breq	800105be <_fclose_r+0x22>
800105b2:	6c 68       	ld.w	r8,r6[0x18]
800105b4:	58 08       	cp.w	r8,0
800105b6:	c0 41       	brne	800105be <_fclose_r+0x22>
800105b8:	0c 9c       	mov	r12,r6
800105ba:	f0 1f 00 26 	mcall	80010650 <_fclose_r+0xb4>
800105be:	4a 68       	lddpc	r8,80010654 <_fclose_r+0xb8>
800105c0:	10 37       	cp.w	r7,r8
800105c2:	c0 31       	brne	800105c8 <_fclose_r+0x2c>
800105c4:	6c 07       	ld.w	r7,r6[0x0]
800105c6:	c0 a8       	rjmp	800105da <_fclose_r+0x3e>
800105c8:	4a 48       	lddpc	r8,80010658 <_fclose_r+0xbc>
800105ca:	10 37       	cp.w	r7,r8
800105cc:	c0 31       	brne	800105d2 <_fclose_r+0x36>
800105ce:	6c 17       	ld.w	r7,r6[0x4]
800105d0:	c0 58       	rjmp	800105da <_fclose_r+0x3e>
800105d2:	4a 38       	lddpc	r8,8001065c <_fclose_r+0xc0>
800105d4:	10 37       	cp.w	r7,r8
800105d6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800105da:	8e 69       	ld.sh	r9,r7[0xc]
800105dc:	30 08       	mov	r8,0
800105de:	f0 09 19 00 	cp.h	r9,r8
800105e2:	c0 51       	brne	800105ec <_fclose_r+0x50>
800105e4:	f0 1f 00 1f 	mcall	80010660 <_fclose_r+0xc4>
800105e8:	30 05       	mov	r5,0
800105ea:	c2 f8       	rjmp	80010648 <_fclose_r+0xac>
800105ec:	0e 9b       	mov	r11,r7
800105ee:	0c 9c       	mov	r12,r6
800105f0:	f0 1f 00 1d 	mcall	80010664 <_fclose_r+0xc8>
800105f4:	6e c8       	ld.w	r8,r7[0x30]
800105f6:	18 95       	mov	r5,r12
800105f8:	58 08       	cp.w	r8,0
800105fa:	c0 60       	breq	80010606 <_fclose_r+0x6a>
800105fc:	6e 8b       	ld.w	r11,r7[0x20]
800105fe:	0c 9c       	mov	r12,r6
80010600:	5d 18       	icall	r8
80010602:	f9 b5 05 ff 	movlt	r5,-1
80010606:	8e 68       	ld.sh	r8,r7[0xc]
80010608:	ed b8 00 07 	bld	r8,0x7
8001060c:	c0 51       	brne	80010616 <_fclose_r+0x7a>
8001060e:	6e 4b       	ld.w	r11,r7[0x10]
80010610:	0c 9c       	mov	r12,r6
80010612:	f0 1f 00 16 	mcall	80010668 <_fclose_r+0xcc>
80010616:	6e db       	ld.w	r11,r7[0x34]
80010618:	58 0b       	cp.w	r11,0
8001061a:	c0 a0       	breq	8001062e <_fclose_r+0x92>
8001061c:	ee c8 ff bc 	sub	r8,r7,-68
80010620:	10 3b       	cp.w	r11,r8
80010622:	c0 40       	breq	8001062a <_fclose_r+0x8e>
80010624:	0c 9c       	mov	r12,r6
80010626:	f0 1f 00 11 	mcall	80010668 <_fclose_r+0xcc>
8001062a:	30 08       	mov	r8,0
8001062c:	8f d8       	st.w	r7[0x34],r8
8001062e:	6f 2b       	ld.w	r11,r7[0x48]
80010630:	58 0b       	cp.w	r11,0
80010632:	c0 70       	breq	80010640 <_fclose_r+0xa4>
80010634:	0c 9c       	mov	r12,r6
80010636:	f0 1f 00 0d 	mcall	80010668 <_fclose_r+0xcc>
8001063a:	30 08       	mov	r8,0
8001063c:	ef 48 00 48 	st.w	r7[72],r8
80010640:	30 08       	mov	r8,0
80010642:	ae 68       	st.h	r7[0xc],r8
80010644:	f0 1f 00 07 	mcall	80010660 <_fclose_r+0xc4>
80010648:	0a 9c       	mov	r12,r5
8001064a:	d8 22       	popm	r4-r7,pc
8001064c:	80 00       	ld.sh	r0,r0[0x0]
8001064e:	f9 00 80 00 	ld.sh	r0,r12[-32768]
80010652:	f9 c4       	*unknown*
80010654:	80 01       	ld.sh	r1,r0[0x0]
80010656:	1f 24       	ld.uh	r4,pc++
80010658:	80 01       	ld.sh	r1,r0[0x0]
8001065a:	1f 44       	ld.w	r4,--pc
8001065c:	80 01       	ld.sh	r1,r0[0x0]
8001065e:	1f 64       	ld.uh	r4,--pc
80010660:	80 00       	ld.sh	r0,r0[0x0]
80010662:	f9 02 80 00 	ld.sh	r2,r12[-32768]
80010666:	f7 e8 80 00 	sthh.w	r0[r0],r11:b,r8:b
8001066a:	fb 1c d4 01 	ld.uh	r12,sp[-11263]

8001066c <fclose>:
8001066c:	d4 01       	pushm	lr
8001066e:	48 48       	lddpc	r8,8001067c <fclose+0x10>
80010670:	18 9b       	mov	r11,r12
80010672:	70 0c       	ld.w	r12,r8[0x0]
80010674:	f0 1f 00 03 	mcall	80010680 <fclose+0x14>
80010678:	d8 02       	popm	pc
8001067a:	00 00       	add	r0,r0
8001067c:	00 00       	add	r0,r0
8001067e:	01 dc       	ld.ub	r12,r0[0x5]
80010680:	80 01       	ld.sh	r1,r0[0x0]
80010682:	05 9c       	ld.ub	r12,r2[0x1]

80010684 <_fstat_r>:
80010684:	d4 21       	pushm	r4-r7,lr
80010686:	16 98       	mov	r8,r11
80010688:	18 97       	mov	r7,r12
8001068a:	10 9c       	mov	r12,r8
8001068c:	30 08       	mov	r8,0
8001068e:	48 76       	lddpc	r6,800106a8 <_fstat_r+0x24>
80010690:	14 9b       	mov	r11,r10
80010692:	8d 08       	st.w	r6[0x0],r8
80010694:	f0 1f 00 06 	mcall	800106ac <_fstat_r+0x28>
80010698:	5b fc       	cp.w	r12,-1
8001069a:	c0 51       	brne	800106a4 <_fstat_r+0x20>
8001069c:	6c 08       	ld.w	r8,r6[0x0]
8001069e:	58 08       	cp.w	r8,0
800106a0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800106a4:	d8 22       	popm	r4-r7,pc
800106a6:	00 00       	add	r0,r0
800106a8:	00 00       	add	r0,r0
800106aa:	13 88       	ld.ub	r8,r9[0x0]
800106ac:	80 00       	ld.sh	r0,r0[0x0]
800106ae:	c3 9c       	rcall	80010720 <__avr32_umod64+0x18>

800106b0 <_lseek_r>:
800106b0:	d4 21       	pushm	r4-r7,lr
800106b2:	16 98       	mov	r8,r11
800106b4:	18 97       	mov	r7,r12
800106b6:	10 9c       	mov	r12,r8
800106b8:	30 08       	mov	r8,0
800106ba:	14 9b       	mov	r11,r10
800106bc:	48 66       	lddpc	r6,800106d4 <_lseek_r+0x24>
800106be:	12 9a       	mov	r10,r9
800106c0:	8d 08       	st.w	r6[0x0],r8
800106c2:	f0 1f 00 06 	mcall	800106d8 <_lseek_r+0x28>
800106c6:	5b fc       	cp.w	r12,-1
800106c8:	c0 51       	brne	800106d2 <_lseek_r+0x22>
800106ca:	6c 08       	ld.w	r8,r6[0x0]
800106cc:	58 08       	cp.w	r8,0
800106ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800106d2:	d8 22       	popm	r4-r7,pc
800106d4:	00 00       	add	r0,r0
800106d6:	13 88       	ld.ub	r8,r9[0x0]
800106d8:	80 00       	ld.sh	r0,r0[0x0]
800106da:	c3 24       	brge	8001073e <__avr32_umod64+0x36>

800106dc <_read_r>:
800106dc:	d4 21       	pushm	r4-r7,lr
800106de:	16 98       	mov	r8,r11
800106e0:	18 97       	mov	r7,r12
800106e2:	10 9c       	mov	r12,r8
800106e4:	30 08       	mov	r8,0
800106e6:	14 9b       	mov	r11,r10
800106e8:	48 66       	lddpc	r6,80010700 <_read_r+0x24>
800106ea:	12 9a       	mov	r10,r9
800106ec:	8d 08       	st.w	r6[0x0],r8
800106ee:	f0 1f 00 06 	mcall	80010704 <_read_r+0x28>
800106f2:	5b fc       	cp.w	r12,-1
800106f4:	c0 51       	brne	800106fe <_read_r+0x22>
800106f6:	6c 08       	ld.w	r8,r6[0x0]
800106f8:	58 08       	cp.w	r8,0
800106fa:	ef f8 1a 03 	st.wne	r7[0xc],r8
800106fe:	d8 22       	popm	r4-r7,pc
80010700:	00 00       	add	r0,r0
80010702:	13 88       	ld.ub	r8,r9[0x0]
80010704:	80 00       	ld.sh	r0,r0[0x0]
80010706:	c3 3c       	rcall	8001076c <__avr32_umod64+0x64>

80010708 <__avr32_umod64>:
80010708:	d4 31       	pushm	r0-r7,lr
8001070a:	1a 97       	mov	r7,sp
8001070c:	20 3d       	sub	sp,12
8001070e:	10 9c       	mov	r12,r8
80010710:	12 95       	mov	r5,r9
80010712:	14 9e       	mov	lr,r10
80010714:	16 91       	mov	r1,r11
80010716:	16 96       	mov	r6,r11
80010718:	58 09       	cp.w	r9,0
8001071a:	e0 81 00 81 	brne	8001081c <__avr32_umod64+0x114>
8001071e:	16 38       	cp.w	r8,r11
80010720:	e0 88 00 12 	brls	80010744 <__avr32_umod64+0x3c>
80010724:	f0 08 12 00 	clz	r8,r8
80010728:	c4 e0       	breq	800107c4 <__avr32_umod64+0xbc>
8001072a:	f6 08 09 46 	lsl	r6,r11,r8
8001072e:	f8 08 09 4c 	lsl	r12,r12,r8
80010732:	f0 0b 11 20 	rsub	r11,r8,32
80010736:	f4 08 09 4e 	lsl	lr,r10,r8
8001073a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8001073e:	f7 e6 10 06 	or	r6,r11,r6
80010742:	c4 18       	rjmp	800107c4 <__avr32_umod64+0xbc>
80010744:	58 08       	cp.w	r8,0
80010746:	c0 51       	brne	80010750 <__avr32_umod64+0x48>
80010748:	30 19       	mov	r9,1
8001074a:	f2 08 0d 08 	divu	r8,r9,r8
8001074e:	10 9c       	mov	r12,r8
80010750:	f8 08 12 00 	clz	r8,r12
80010754:	c0 31       	brne	8001075a <__avr32_umod64+0x52>
80010756:	18 16       	sub	r6,r12
80010758:	c3 68       	rjmp	800107c4 <__avr32_umod64+0xbc>
8001075a:	f0 03 11 20 	rsub	r3,r8,32
8001075e:	f4 03 0a 4b 	lsr	r11,r10,r3
80010762:	f8 08 09 4c 	lsl	r12,r12,r8
80010766:	ec 08 09 49 	lsl	r9,r6,r8
8001076a:	ec 03 0a 43 	lsr	r3,r6,r3
8001076e:	f7 e9 10 09 	or	r9,r11,r9
80010772:	f8 05 16 10 	lsr	r5,r12,0x10
80010776:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8001077a:	e6 05 0d 02 	divu	r2,r3,r5
8001077e:	f2 0e 16 10 	lsr	lr,r9,0x10
80010782:	ec 02 02 4b 	mul	r11,r6,r2
80010786:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8001078a:	16 3e       	cp.w	lr,r11
8001078c:	c0 72       	brcc	8001079a <__avr32_umod64+0x92>
8001078e:	18 0e       	add	lr,r12
80010790:	18 3e       	cp.w	lr,r12
80010792:	c0 43       	brcs	8001079a <__avr32_umod64+0x92>
80010794:	16 3e       	cp.w	lr,r11
80010796:	fd dc e3 0e 	addcs	lr,lr,r12
8001079a:	fc 0b 01 03 	sub	r3,lr,r11
8001079e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800107a2:	e6 05 0d 02 	divu	r2,r3,r5
800107a6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800107aa:	a5 36       	mul	r6,r2
800107ac:	0c 39       	cp.w	r9,r6
800107ae:	c0 72       	brcc	800107bc <__avr32_umod64+0xb4>
800107b0:	18 09       	add	r9,r12
800107b2:	18 39       	cp.w	r9,r12
800107b4:	c0 43       	brcs	800107bc <__avr32_umod64+0xb4>
800107b6:	0c 39       	cp.w	r9,r6
800107b8:	f3 dc e3 09 	addcs	r9,r9,r12
800107bc:	f2 06 01 06 	sub	r6,r9,r6
800107c0:	f4 08 09 4e 	lsl	lr,r10,r8
800107c4:	f8 0a 16 10 	lsr	r10,r12,0x10
800107c8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800107cc:	ec 0a 0d 02 	divu	r2,r6,r10
800107d0:	fc 09 16 10 	lsr	r9,lr,0x10
800107d4:	ea 02 02 4b 	mul	r11,r5,r2
800107d8:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800107dc:	16 39       	cp.w	r9,r11
800107de:	c0 72       	brcc	800107ec <__avr32_umod64+0xe4>
800107e0:	18 09       	add	r9,r12
800107e2:	18 39       	cp.w	r9,r12
800107e4:	c0 43       	brcs	800107ec <__avr32_umod64+0xe4>
800107e6:	16 39       	cp.w	r9,r11
800107e8:	f3 dc e3 09 	addcs	r9,r9,r12
800107ec:	f2 0b 01 0b 	sub	r11,r9,r11
800107f0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800107f4:	f6 0a 0d 0a 	divu	r10,r11,r10
800107f8:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800107fc:	ea 0a 02 4a 	mul	r10,r5,r10
80010800:	14 3e       	cp.w	lr,r10
80010802:	c0 72       	brcc	80010810 <__avr32_umod64+0x108>
80010804:	18 0e       	add	lr,r12
80010806:	18 3e       	cp.w	lr,r12
80010808:	c0 43       	brcs	80010810 <__avr32_umod64+0x108>
8001080a:	14 3e       	cp.w	lr,r10
8001080c:	fd dc e3 0e 	addcs	lr,lr,r12
80010810:	fc 0a 01 0a 	sub	r10,lr,r10
80010814:	30 0b       	mov	r11,0
80010816:	f4 08 0a 4a 	lsr	r10,r10,r8
8001081a:	c7 b8       	rjmp	80010910 <__avr32_umod64+0x208>
8001081c:	16 39       	cp.w	r9,r11
8001081e:	e0 8b 00 79 	brhi	80010910 <__avr32_umod64+0x208>
80010822:	f2 09 12 00 	clz	r9,r9
80010826:	c1 21       	brne	8001084a <__avr32_umod64+0x142>
80010828:	10 3a       	cp.w	r10,r8
8001082a:	5f 2b       	srhs	r11
8001082c:	0a 31       	cp.w	r1,r5
8001082e:	5f ba       	srhi	r10
80010830:	f7 ea 10 0a 	or	r10,r11,r10
80010834:	f2 0a 18 00 	cp.b	r10,r9
80010838:	c0 60       	breq	80010844 <__avr32_umod64+0x13c>
8001083a:	fc 08 01 0c 	sub	r12,lr,r8
8001083e:	e2 05 01 46 	sbc	r6,r1,r5
80010842:	18 9e       	mov	lr,r12
80010844:	0c 9b       	mov	r11,r6
80010846:	1c 9a       	mov	r10,lr
80010848:	c6 48       	rjmp	80010910 <__avr32_umod64+0x208>
8001084a:	ea 09 09 4c 	lsl	r12,r5,r9
8001084e:	f2 06 11 20 	rsub	r6,r9,32
80010852:	f6 09 09 4b 	lsl	r11,r11,r9
80010856:	f0 09 09 42 	lsl	r2,r8,r9
8001085a:	ef 46 ff f4 	st.w	r7[-12],r6
8001085e:	f0 06 0a 48 	lsr	r8,r8,r6
80010862:	18 48       	or	r8,r12
80010864:	e2 06 0a 4c 	lsr	r12,r1,r6
80010868:	f4 09 09 43 	lsl	r3,r10,r9
8001086c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80010870:	f4 06 0a 4a 	lsr	r10,r10,r6
80010874:	16 4a       	or	r10,r11
80010876:	f0 0b 16 10 	lsr	r11,r8,0x10
8001087a:	f8 0b 0d 04 	divu	r4,r12,r11
8001087e:	f4 0c 16 10 	lsr	r12,r10,0x10
80010882:	08 91       	mov	r1,r4
80010884:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80010888:	e8 0e 02 46 	mul	r6,r4,lr
8001088c:	0c 3c       	cp.w	r12,r6
8001088e:	c0 a2       	brcc	800108a2 <__avr32_umod64+0x19a>
80010890:	20 11       	sub	r1,1
80010892:	10 0c       	add	r12,r8
80010894:	10 3c       	cp.w	r12,r8
80010896:	c0 63       	brcs	800108a2 <__avr32_umod64+0x19a>
80010898:	0c 3c       	cp.w	r12,r6
8001089a:	f7 b1 03 01 	sublo	r1,1
8001089e:	f9 d8 e3 0c 	addcs	r12,r12,r8
800108a2:	0c 1c       	sub	r12,r6
800108a4:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800108a8:	f8 0b 0d 04 	divu	r4,r12,r11
800108ac:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800108b0:	08 96       	mov	r6,r4
800108b2:	e8 0e 02 4e 	mul	lr,r4,lr
800108b6:	1c 3b       	cp.w	r11,lr
800108b8:	c0 a2       	brcc	800108cc <__avr32_umod64+0x1c4>
800108ba:	20 16       	sub	r6,1
800108bc:	10 0b       	add	r11,r8
800108be:	10 3b       	cp.w	r11,r8
800108c0:	c0 63       	brcs	800108cc <__avr32_umod64+0x1c4>
800108c2:	1c 3b       	cp.w	r11,lr
800108c4:	f7 b6 03 01 	sublo	r6,1
800108c8:	f7 d8 e3 0b 	addcs	r11,r11,r8
800108cc:	ed e1 11 01 	or	r1,r6,r1<<0x10
800108d0:	1c 1b       	sub	r11,lr
800108d2:	e2 02 06 40 	mulu.d	r0,r1,r2
800108d6:	00 9e       	mov	lr,r0
800108d8:	02 9c       	mov	r12,r1
800108da:	16 3c       	cp.w	r12,r11
800108dc:	e0 8b 00 08 	brhi	800108ec <__avr32_umod64+0x1e4>
800108e0:	5f 06       	sreq	r6
800108e2:	06 30       	cp.w	r0,r3
800108e4:	5f ba       	srhi	r10
800108e6:	ed ea 00 0a 	and	r10,r6,r10
800108ea:	c0 60       	breq	800108f6 <__avr32_umod64+0x1ee>
800108ec:	fc 02 01 04 	sub	r4,lr,r2
800108f0:	f8 08 01 4c 	sbc	r12,r12,r8
800108f4:	08 9e       	mov	lr,r4
800108f6:	e6 0e 01 0a 	sub	r10,r3,lr
800108fa:	f6 0c 01 4c 	sbc	r12,r11,r12
800108fe:	ee f1 ff f4 	ld.w	r1,r7[-12]
80010902:	f8 09 0a 4b 	lsr	r11,r12,r9
80010906:	f4 09 0a 4a 	lsr	r10,r10,r9
8001090a:	f8 01 09 4c 	lsl	r12,r12,r1
8001090e:	18 4a       	or	r10,r12
80010910:	2f dd       	sub	sp,-12
80010912:	d8 32       	popm	r0-r7,pc

80010914 <__do_global_ctors_aux>:
80010914:	d4 21       	pushm	r4-r7,lr
80010916:	48 57       	lddpc	r7,80010928 <__do_global_ctors_aux+0x14>
80010918:	c0 28       	rjmp	8001091c <__do_global_ctors_aux+0x8>
8001091a:	5d 18       	icall	r8
8001091c:	20 47       	sub	r7,4
8001091e:	6e 08       	ld.w	r8,r7[0x0]
80010920:	5b f8       	cp.w	r8,-1
80010922:	cf c1       	brne	8001091a <__do_global_ctors_aux+0x6>
80010924:	d8 22       	popm	r4-r7,pc
80010926:	00 00       	add	r0,r0
80010928:	00 00       	add	r0,r0
8001092a:	00 9c       	mov	r12,r0

Disassembly of section .exception:

80010a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80010a00:	c0 08       	rjmp	80010a00 <_evba>
	...

80010a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80010a04:	c0 08       	rjmp	80010a04 <_handle_TLB_Multiple_Hit>
	...

80010a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80010a08:	c0 08       	rjmp	80010a08 <_handle_Bus_Error_Data_Fetch>
	...

80010a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80010a0c:	c0 08       	rjmp	80010a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80010a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80010a10:	c0 08       	rjmp	80010a10 <_handle_NMI>
	...

80010a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80010a14:	c0 08       	rjmp	80010a14 <_handle_Instruction_Address>
	...

80010a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80010a18:	c0 08       	rjmp	80010a18 <_handle_ITLB_Protection>
	...

80010a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80010a1c:	c0 08       	rjmp	80010a1c <_handle_Breakpoint>
	...

80010a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80010a20:	c0 08       	rjmp	80010a20 <_handle_Illegal_Opcode>
	...

80010a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80010a24:	c0 08       	rjmp	80010a24 <_handle_Unimplemented_Instruction>
	...

80010a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80010a28:	c0 08       	rjmp	80010a28 <_handle_Privilege_Violation>
	...

80010a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80010a2c:	c0 08       	rjmp	80010a2c <_handle_Floating_Point>
	...

80010a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80010a30:	c0 08       	rjmp	80010a30 <_handle_Coprocessor_Absent>
	...

80010a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80010a34:	c0 08       	rjmp	80010a34 <_handle_Data_Address_Read>
	...

80010a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80010a38:	c0 08       	rjmp	80010a38 <_handle_Data_Address_Write>
	...

80010a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80010a3c:	c0 08       	rjmp	80010a3c <_handle_DTLB_Protection_Read>
	...

80010a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80010a40:	c0 08       	rjmp	80010a40 <_handle_DTLB_Protection_Write>
	...

80010a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80010a44:	c0 08       	rjmp	80010a44 <_handle_DTLB_Modified>
	...

80010a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80010a50:	c0 08       	rjmp	80010a50 <_handle_ITLB_Miss>
	...

80010a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80010a60:	c0 08       	rjmp	80010a60 <_handle_DTLB_Miss_Read>
	...

80010a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80010a70:	c0 08       	rjmp	80010a70 <_handle_DTLB_Miss_Write>
	...

80010b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80010b00:	c0 08       	rjmp	80010b00 <_handle_Supervisor_Call>
	...

80010b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010b04:	30 0c       	mov	r12,0
80010b06:	f0 1f 00 0e 	mcall	80010b3c <_int3+0xe>
80010b0a:	58 0c       	cp.w	r12,0
80010b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80010b10:	d6 03       	rete

80010b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010b12:	30 1c       	mov	r12,1
80010b14:	f0 1f 00 0a 	mcall	80010b3c <_int3+0xe>
80010b18:	58 0c       	cp.w	r12,0
80010b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80010b1e:	d6 03       	rete

80010b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010b20:	30 2c       	mov	r12,2
80010b22:	f0 1f 00 07 	mcall	80010b3c <_int3+0xe>
80010b26:	58 0c       	cp.w	r12,0
80010b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80010b2c:	d6 03       	rete

80010b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010b2e:	30 3c       	mov	r12,3
80010b30:	f0 1f 00 03 	mcall	80010b3c <_int3+0xe>
80010b34:	58 0c       	cp.w	r12,0
80010b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80010b3a:	d6 03       	rete
80010b3c:	80 00       	ld.sh	r0,r0[0x0]
80010b3e:	1a c4       	st.b	sp++,r4
	...

Disassembly of section .fini:

80010c00 <_fini>:
80010c00:	eb cd 40 40 	pushm	r6,lr
80010c04:	48 26       	lddpc	r6,80010c0c <_fini+0xc>
80010c06:	1e 26       	rsub	r6,pc
80010c08:	c0 48       	rjmp	80010c10 <_fini+0x10>
80010c0a:	00 00       	add	r0,r0
80010c0c:	80 01       	ld.sh	r1,r0[0x0]
80010c0e:	0b 5a       	ld.sh	r10,--r5
80010c10:	f0 16 00 02 	mcall	r6[8]
80010c14:	e3 cd 80 40 	ldm	sp++,r6,pc
